<?xml version="1.0" encoding="iso-8859-1"?>
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
  <info><title xmlns:xlink="http://www.w3.org/1999/xlink">FreeBSD Developers' Handbook</title>
    

    <author xmlns:xlink="http://www.w3.org/1999/xlink"><orgname xmlns:xlink="http://www.w3.org/1999/xlink">The FreeBSD Documentation Project</orgname></author>

    <pubdate xmlns:xlink="http://www.w3.org/1999/xlink">$FreeBSD$</pubdate>

    <copyright xmlns:xlink="http://www.w3.org/1999/xlink">
      <year xmlns:xlink="http://www.w3.org/1999/xlink">2000</year>
      <year xmlns:xlink="http://www.w3.org/1999/xlink">2001</year>
      <year xmlns:xlink="http://www.w3.org/1999/xlink">2002</year>
      <year xmlns:xlink="http://www.w3.org/1999/xlink">2003</year>
      <year xmlns:xlink="http://www.w3.org/1999/xlink">2004</year>
      <year xmlns:xlink="http://www.w3.org/1999/xlink">2005</year>
      <year xmlns:xlink="http://www.w3.org/1999/xlink">2006</year>
      <year xmlns:xlink="http://www.w3.org/1999/xlink">2007</year>
      <year xmlns:xlink="http://www.w3.org/1999/xlink">2008</year>
      <year xmlns:xlink="http://www.w3.org/1999/xlink">2009</year>
      <year xmlns:xlink="http://www.w3.org/1999/xlink">2010</year>
      <year xmlns:xlink="http://www.w3.org/1999/xlink">2011</year>
      <year xmlns:xlink="http://www.w3.org/1999/xlink">2012</year>
      <year xmlns:xlink="http://www.w3.org/1999/xlink">2013</year>
      <year xmlns:xlink="http://www.w3.org/1999/xlink">2014</year>
      <holder xmlns:xlink="http://www.w3.org/1999/xlink">The FreeBSD Documentation Project</holder>
    </copyright>

    
<legalnotice xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="legalnotice">
  <title xmlns:xlink="http://www.w3.org/1999/xlink">Copyright</title>

  <para xmlns:xlink="http://www.w3.org/1999/xlink">Redistribution and use in source (XML DocBook) and 'compiled'
    forms (XML, HTML, PDF, PostScript, RTF and so forth) with or without
    modification, are permitted provided that the following conditions are
    met:</para>

  <orderedlist xmlns:xlink="http://www.w3.org/1999/xlink">
    <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
      <para xmlns:xlink="http://www.w3.org/1999/xlink">Redistributions of source code (XML DocBook) must retain the
        above copyright notice, this list of conditions and the following
        disclaimer as the first lines of this file unmodified.</para>
    </listitem>

    <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
      <para xmlns:xlink="http://www.w3.org/1999/xlink">Redistributions in compiled form (transformed to other DTDs,
        converted to PDF, PostScript, RTF and other formats) must
        reproduce the above copyright notice, this list of conditions and
        the following disclaimer in the documentation and/or other
        materials provided with the distribution.</para>
    </listitem>
  </orderedlist>

  <important xmlns:xlink="http://www.w3.org/1999/xlink">
    <para xmlns:xlink="http://www.w3.org/1999/xlink">THIS DOCUMENTATION IS PROVIDED BY THE FREEBSD DOCUMENTATION
      PROJECT "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
      BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
      FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
      THE FREEBSD DOCUMENTATION PROJECT BE LIABLE FOR ANY DIRECT, INDIRECT,
      INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
      BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
      OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
      ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
      TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
      USE OF THIS DOCUMENTATION, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
      DAMAGE.</para>
  </important>
</legalnotice>


    <legalnotice xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="trademarks" role="trademarks">
      <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">FreeBSD is a registered trademark of
  the FreeBSD Foundation.</para>
      <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Apple, AirPort, FireWire,
  iMac, iPhone, iPad,
  Mac, Macintosh, Mac OS,
  Quicktime, and TrueType are trademarks of Apple Inc.,
  registered in the U.S. and other countries.</para>
      <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">IBM, AIX, OS/2,
  PowerPC, PS/2, S/390, and ThinkPad are
  trademarks of International Business Machines Corporation in the
  United States, other countries, or both.</para>
      <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">IEEE, POSIX, and 802 are registered
  trademarks of Institute of Electrical and Electronics Engineers,
  Inc. in the United States.</para>
      <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Intel, Celeron, Centrino, Core, EtherExpress, i386,
  i486, Itanium, Pentium, and Xeon are trademarks or registered
  trademarks of Intel Corporation or its subsidiaries in the United
  States and other countries.</para>
      <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Linux is a registered trademark of
  Linus Torvalds.</para>
      <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Microsoft, IntelliMouse, MS-DOS,
  Outlook, Windows, Windows Media and Windows NT are either
  registered trademarks or trademarks of Microsoft Corporation in the
  United States and/or other countries.</para>
      <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Motif, OSF/1, and UNIX are
  registered trademarks and IT DialTone and The Open Group are
  trademarks of The Open Group in the United States and other
  countries.</para>
      <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Sun, Sun Microsystems, Java, Java
  Virtual Machine, JDK, JRE, JSP, JVM, Netra, OpenJDK,
  Solaris, StarOffice, SunOS
  and VirtualBox are trademarks or registered trademarks of
  Sun Microsystems, Inc. in the United States and other countries.</para>
      <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Many of the designations used by
  manufacturers and sellers to distinguish their products are claimed
  as trademarks.  Where those designations appear in this document,
  and the FreeBSD Project was aware of the trademark claim, the
  designations have been followed by the <quote xmlns:xlink="http://www.w3.org/1999/xlink">&#8482;</quote> or the
  <quote xmlns:xlink="http://www.w3.org/1999/xlink">®</quote> symbol.</para>
    </legalnotice>

    <releaseinfo xmlns:xlink="http://www.w3.org/1999/xlink">$FreeBSD$</releaseinfo>

    <abstract xmlns:xlink="http://www.w3.org/1999/xlink">
      <para xmlns:xlink="http://www.w3.org/1999/xlink">Welcome to the Developers' Handbook.  This manual is a
	<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">work in progress</emphasis> and is the work of many
	individuals.  Many sections do not yet exist and some of those
	that do exist need to be updated.  If you are interested in
	helping with this project, send email to the <link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://lists.FreeBSD.org/mailman/listinfo/freebsd-doc">FreeBSD documentation project mailing list</link>.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The latest version of this document is always available
        from the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.FreeBSD.org/index.html">FreeBSD World
        Wide Web server</link>.  It may also be downloaded in a
        variety of formats and compression options from the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="ftp://ftp.FreeBSD.org/pub/FreeBSD/doc/">FreeBSD FTP
        server</link> or one of the numerous <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.FreeBSD.org/doc/en_US.ISO8859-1/books/handbook/mirrors-ftp.html">mirror
        sites</link>.</para>
    </abstract>
  </info>

  <part xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="Basics">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Basics</title>

    
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="introduction">
  <info><title xmlns:xlink="http://www.w3.org/1999/xlink">Introduction</title>
    <authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
      <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Murray</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Stokely</surname></personname><contrib xmlns:xlink="http://www.w3.org/1999/xlink">Contributed by </contrib></author>
      <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Jeroen</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Ruigrok van der Werven</surname></personname></author>
    </authorgroup>
  </info>
  

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="introduction-devel">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Developing on FreeBSD</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">So here we are.  System all installed and you are ready to
      start programming.  But where to start?  What does FreeBSD
      provide?  What can it do for me, as a programmer?</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">These are some questions which this chapter tries to answer.
      Of course, programming has different levels of proficiency like
      any other trade.  For some it is a hobby, for others it is their
      profession.  The information in this chapter might be aimed
      toward the beginning programmer; indeed, it could serve useful
      for the programmer unfamiliar with the FreeBSD platform.</para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="introduction-bsdvision">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">The BSD Vision</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">To produce the best <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> like operating system package
      possible, with due respect to the original software tools
      ideology as well as usability, performance and
      stability.</para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="introduction-archguide">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Architectural Guidelines</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Our ideology can be described by the following
      guidelines</para>

    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Do not add new functionality unless an implementor
	  cannot complete a real application without it.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">It is as important to decide what a system is
	  not as to decide what it is.  Do not serve all the world's
	  needs; rather, make the system extensible so that additional
	  needs can be met in an upwardly compatible
	  fashion.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">The only thing worse than generalizing from one example
	  is generalizing from no examples at all.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">If a problem is not completely understood, it is
	  probably best to provide no solution at all.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">If you can get 90 percent of the desired effect for 10
	  percent of the work, use the simpler solution.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Isolate complexity as much as possible.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Provide mechanism, rather than policy.  In particular,
	  place user interface policy in the client's hands.</para>
      </listitem>
    </itemizedlist>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">From Scheifler &amp; Gettys: "X Window System"</para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="introduction-layout">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">The Layout of
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src</filename></title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The complete source code to FreeBSD is available from our
      public repository.  The source code is normally installed in
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src</filename> which contains
      the following subdirectories:</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">
      <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
	<tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="2">
	  <thead xmlns:xlink="http://www.w3.org/1999/xlink">
	    <row xmlns:xlink="http://www.w3.org/1999/xlink">
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Directory</entry>
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
	    </row>
	  </thead>

	  <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
	    <row xmlns:xlink="http://www.w3.org/1999/xlink">
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">bin/</filename></entry>
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Source for files in
		<filename xmlns:xlink="http://www.w3.org/1999/xlink">/bin</filename></entry>
	    </row>

	    <row xmlns:xlink="http://www.w3.org/1999/xlink">
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">cddl/</filename></entry>
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Utilities covered by the Common Development and
		Distribution License</entry>
	    </row>

	    <row xmlns:xlink="http://www.w3.org/1999/xlink">
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">contrib/</filename></entry>
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Source for files from contributed
		software.</entry>
	    </row>

	    <row xmlns:xlink="http://www.w3.org/1999/xlink">
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">crypto/</filename></entry>
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Cryptographical sources</entry>
	    </row>

	    <row xmlns:xlink="http://www.w3.org/1999/xlink">
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">etc/</filename></entry>
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Source for files in <filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc</filename></entry>
	    </row>

	    <row xmlns:xlink="http://www.w3.org/1999/xlink">
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">games/</filename></entry>
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Source for files in <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/games</filename></entry>
	    </row>

	    <row xmlns:xlink="http://www.w3.org/1999/xlink">
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">gnu/</filename></entry>
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Utilities covered by the GNU Public
		License</entry>
	    </row>

	    <row xmlns:xlink="http://www.w3.org/1999/xlink">
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">include/</filename></entry>
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Source for files in <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/include</filename></entry>
	    </row>

	    <row xmlns:xlink="http://www.w3.org/1999/xlink">
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">kerberos5/</filename></entry>
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Source for Kerberos version 5</entry>
	    </row>

	    <row xmlns:xlink="http://www.w3.org/1999/xlink">
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">lib/</filename></entry>
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Source for files in <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/lib</filename></entry>
	    </row>

	    <row xmlns:xlink="http://www.w3.org/1999/xlink">
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">libexec/</filename></entry>
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Source for files in <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/libexec</filename></entry>
	    </row>

	    <row xmlns:xlink="http://www.w3.org/1999/xlink">
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">release/</filename></entry>
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Files required to produce a FreeBSD
		release</entry>
	    </row>

	    <row xmlns:xlink="http://www.w3.org/1999/xlink">
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">rescue/</filename></entry>
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Build system for the
		<filename xmlns:xlink="http://www.w3.org/1999/xlink">/rescue</filename>
		utilities</entry>
	    </row>

	    <row xmlns:xlink="http://www.w3.org/1999/xlink">
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sbin/</filename></entry>
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Source for files in <filename xmlns:xlink="http://www.w3.org/1999/xlink">/sbin</filename></entry>
	    </row>

	    <row xmlns:xlink="http://www.w3.org/1999/xlink">
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">secure/</filename></entry>
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink">FreeSec sources</entry>
	    </row>

	    <row xmlns:xlink="http://www.w3.org/1999/xlink">
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">share/</filename></entry>
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Source for files in <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/share</filename></entry>
	    </row>

	    <row xmlns:xlink="http://www.w3.org/1999/xlink">
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/</filename></entry>
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Kernel source files</entry>
	    </row>

	    <row xmlns:xlink="http://www.w3.org/1999/xlink">
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">tools/</filename></entry>
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Tools used for maintenance and testing of
		FreeBSD</entry>
	    </row>

	    <row xmlns:xlink="http://www.w3.org/1999/xlink">
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">usr.bin/</filename></entry>
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Source for files in <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/bin</filename></entry>
	    </row>

	    <row xmlns:xlink="http://www.w3.org/1999/xlink">
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">usr.sbin/</filename></entry>
	      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Source for files in <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/sbin</filename></entry>
	    </row>
	  </tbody>
	</tgroup>
      </informaltable></para>
  </sect1>
</chapter>

    
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="tools">
  <info><title xmlns:xlink="http://www.w3.org/1999/xlink">Programming Tools</title>
    <authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
      <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">James</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Raynard</surname></personname><contrib xmlns:xlink="http://www.w3.org/1999/xlink">Contributed by </contrib></author>
      <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Murray</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Stokely</surname></personname></author>
    </authorgroup>
  </info>

  
  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="tools-synopsis"><title xmlns:xlink="http://www.w3.org/1999/xlink">Synopsis</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">This chapter is an introduction to using some of the
      programming tools supplied with FreeBSD, although much of it
      will be applicable to many other versions of <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark>.  It does
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">not</emphasis> attempt to describe coding in any
      detail.  Most of the chapter assumes little or no previous
      programming knowledge, although it is hoped that most
      programmers will find something of value in it.</para>

  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="tools-intro"><title xmlns:xlink="http://www.w3.org/1999/xlink">Introduction</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">FreeBSD offers an excellent development environment.
      Compilers for C and C++ and an assembler come with the
      basic system, not to mention classic <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark>
      tools such as <command xmlns:xlink="http://www.w3.org/1999/xlink">sed</command> and <command xmlns:xlink="http://www.w3.org/1999/xlink">awk</command>.
      If that is not enough, there are many more compilers and
      interpreters in the Ports collection.  The following section,
      <link xmlns:xlink="http://www.w3.org/1999/xlink" linkend="tools-programming">Introduction to Programming</link>,
      lists some of the available options.  FreeBSD is very
      compatible with standards such as <acronym xmlns:xlink="http://www.w3.org/1999/xlink"><trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">POSIX</trademark></acronym> and
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">ANSI</acronym> C, as well with its own BSD heritage, so
      it is possible to write applications that will compile and run
      with little or no modification on a wide range of
      platforms.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">However, all this power can be rather overwhelming at first
      if you have never written programs on a <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> platform before.
      This document aims to help you get up and running, without
      getting too deeply into more advanced topics.  The intention is
      that this document should give you enough of the basics to be
      able to make some sense of the documentation.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Most of the document requires little or no knowledge of
      programming, although it does assume a basic competence with
      using <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> and a willingness to learn!</para>

  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="tools-programming">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Introduction to Programming</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">A program is a set of instructions that tell the computer to
      do various things; sometimes the instruction it has to perform
      depends on what happened when it performed a previous
      instruction.  This section gives an overview of the two main
      ways in which you can give these instructions, or
      <quote xmlns:xlink="http://www.w3.org/1999/xlink">commands</quote> as they are usually called.  One way
      uses an <firstterm xmlns:xlink="http://www.w3.org/1999/xlink">interpreter</firstterm>, the other a
      <firstterm xmlns:xlink="http://www.w3.org/1999/xlink">compiler</firstterm>.  As human languages are too
      difficult for a computer to understand in an unambiguous way,
      commands are usually written in one or other languages specially
      designed for the purpose.</para>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Interpreters</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">With an interpreter, the language comes as an environment,
	where you type in commands at a prompt and the environment
	executes them for you.  For more complicated programs, you can
	type the commands into a file and get the interpreter to load
	the file and execute the commands in it.  If anything goes
	wrong, many interpreters will drop you into a debugger to help
	you track down the problem.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The advantage of this is that you can see the results of
	your commands immediately, and mistakes can be corrected
	readily.  The biggest disadvantage comes when you want to
	share your programs with someone.  They must have the same
	interpreter, or you must have some way of giving it to them,
	and they need to understand how to use it.  Also users may not
	appreciate being thrown into a debugger if they press the
	wrong key! From a performance point of view, interpreters can
	use up a lot of memory, and generally do not generate code as
	efficiently as compilers.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">In my opinion, interpreted languages are the best way to
	start if you have not done any programming before.  This kind
	of environment is typically found with languages like Lisp,
	Smalltalk, Perl and Basic.  It could also be argued that the
	<trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> shell (<command xmlns:xlink="http://www.w3.org/1999/xlink">sh</command>, <command xmlns:xlink="http://www.w3.org/1999/xlink">csh</command>) is itself an
	interpreter, and many people do in fact write shell
	<quote xmlns:xlink="http://www.w3.org/1999/xlink">scripts</quote> to help with various
	<quote xmlns:xlink="http://www.w3.org/1999/xlink">housekeeping</quote> tasks on their machine.  Indeed, part
	of the original <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> philosophy was to provide lots of small
	utility programs that could be linked together in shell
	scripts to perform useful tasks.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Interpreters available with FreeBSD</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Here is a list of interpreters that are available from
	  the FreeBSD Ports Collection, with a brief discussion of
	  some of the more popular interpreted languages.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Instructions on how to get and install applications
	from the Ports Collection can be found in the
	<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.FreeBSD.org/doc/en_US.ISO8859-1/books/handbook/ports-using.html">
      Ports section</link> of the handbook.</para>

      <variablelist xmlns:xlink="http://www.w3.org/1999/xlink">
	<varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	  <term xmlns:xlink="http://www.w3.org/1999/xlink"><acronym xmlns:xlink="http://www.w3.org/1999/xlink">BASIC</acronym></term>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Short for Beginner's All-purpose Symbolic
	      Instruction Code.  Developed in the 1950s for teaching
	      University students to program and provided with every
	      self-respecting personal computer in the 1980s,
	      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BASIC</acronym> has been the first programming
	      language for many programmers.  It is also the foundation
	      for Visual Basic.</para>

	    <para xmlns:xlink="http://www.w3.org/1999/xlink">The Bywater Basic Interpreter can be found in the
	      Ports Collection as
	      <package xmlns:xlink="http://www.w3.org/1999/xlink">lang/bwbasic</package>
	      and the Phil Cockroft's Basic Interpreter
	      (formerly Rabbit Basic) is available as
	      <package xmlns:xlink="http://www.w3.org/1999/xlink">lang/pbasic</package>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	  <term xmlns:xlink="http://www.w3.org/1999/xlink">Lisp</term>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">A language that was developed in the late 1950s as
	      an alternative to the <quote xmlns:xlink="http://www.w3.org/1999/xlink">number-crunching</quote>
	      languages that were popular at the time.  Instead of
	      being based on numbers, Lisp is based on lists; in fact
	      the name is short for <quote xmlns:xlink="http://www.w3.org/1999/xlink">List Processing</quote>.
	      Very popular in <acronym xmlns:xlink="http://www.w3.org/1999/xlink">AI</acronym> (Artificial Intelligence)
	      circles.</para>

	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Lisp is an extremely powerful and sophisticated
	      language, but can be rather large and unwieldy.</para>

	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Various implementations of Lisp that can run on <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark>
	      systems are available in the Ports Collection for FreeBSD.
	      GNU Common Lisp can be found as
	      <package xmlns:xlink="http://www.w3.org/1999/xlink">lang/gcl</package>.  CLISP
	      by Bruno Haible and Michael Stoll is available as
	      <package xmlns:xlink="http://www.w3.org/1999/xlink">lang/clisp</package>.
	      For CMUCL, which includes a highly-optimizing compiler too, or
	      simpler Lisp implementations like SLisp, which implements most
	      of the Common Lisp constructs in a few hundred lines of C code,
	      <package xmlns:xlink="http://www.w3.org/1999/xlink">lang/cmucl</package> and
	      <package xmlns:xlink="http://www.w3.org/1999/xlink">lang/slisp</package> are available
	      respectively.</para>
	  </listitem>
	</varlistentry>

	<varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	  <term xmlns:xlink="http://www.w3.org/1999/xlink">Perl</term>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Very popular with system administrators for writing
	      scripts; also often used on World Wide Web servers for
	      writing <acronym xmlns:xlink="http://www.w3.org/1999/xlink">CGI</acronym> scripts.</para>

	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Perl is available in the Ports Collection as
	      <package xmlns:xlink="http://www.w3.org/1999/xlink">lang/perl5.16</package> for all
	      FreeBSD releases.</para>
	  </listitem>
	</varlistentry>

	<varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	  <term xmlns:xlink="http://www.w3.org/1999/xlink">Scheme</term>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">A dialect of Lisp that is rather more compact and
	      cleaner than Common Lisp.  Popular in Universities as it
	      is simple enough to teach to undergraduates as a first
	      language, while it has a high enough level of
	      abstraction to be used in research work.</para>

	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Scheme is available from the Ports Collection as
	      <package xmlns:xlink="http://www.w3.org/1999/xlink">lang/elk</package> for the
		Elk Scheme Interpreter.  The MIT Scheme Interpreter
		can be found in
		<package xmlns:xlink="http://www.w3.org/1999/xlink">lang/mit-scheme</package>
		and the SCM Scheme Interpreter in
		<package xmlns:xlink="http://www.w3.org/1999/xlink">lang/scm</package>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	  <term xmlns:xlink="http://www.w3.org/1999/xlink">Icon</term>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Icon is a high-level language with extensive
	      facilities for processing strings and structures.
	      The version of Icon for FreeBSD can be found in the
	      Ports Collection as
	      <package xmlns:xlink="http://www.w3.org/1999/xlink">lang/icon</package>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	  <term xmlns:xlink="http://www.w3.org/1999/xlink">Logo</term>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Logo is a language that is easy to learn, and has
	      been used as an introductory programming language in
	      various courses.  It is an excellent tool to work with
	      when teaching programming in small ages, as it makes the
	      creation of elaborate geometric shapes an easy task even
	      for very small children.</para>

	    <para xmlns:xlink="http://www.w3.org/1999/xlink">The latest version of Logo for FreeBSD is available from
	      the Ports Collection in
	      <package xmlns:xlink="http://www.w3.org/1999/xlink">lang/logo</package>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	  <term xmlns:xlink="http://www.w3.org/1999/xlink">Python</term>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Python is an Object-Oriented, interpreted language.
	      Its advocates argue that it is one of the best languages
	      to start programming with, since it is relatively easy
	      to start with, but is not limited in comparison to other
	      popular interpreted languages that are used for the
	      development of large, complex applications (Perl and
	      Tcl are two other languages that are popular for such tasks).</para>

	    <para xmlns:xlink="http://www.w3.org/1999/xlink">The latest version of Python is available from the
	      Ports Collection in
	      <package xmlns:xlink="http://www.w3.org/1999/xlink">lang/python</package>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	  <term xmlns:xlink="http://www.w3.org/1999/xlink">Ruby</term>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Ruby is an interpreter, pure object-oriented programming
	      language.  It has become widely popular because of its easy
	      to understand syntax, flexibility when writing code, and the
	      ability to easily develop and maintain large, complex
	      programs.</para>

	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Ruby is available from the Ports Collection as
	      <package xmlns:xlink="http://www.w3.org/1999/xlink">lang/ruby18</package>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	  <term xmlns:xlink="http://www.w3.org/1999/xlink">Tcl and Tk</term>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Tcl is an embeddable, interpreted language, that has
	      become widely used and became popular mostly because of its portability to many
	      platforms.  It can be used both for quickly writing
	      small, prototype applications, or (when combined with
	      Tk, a GUI toolkit) fully-fledged, featureful
	      programs.</para>

	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Various versions of Tcl are available as ports
	      for FreeBSD.  The latest version, Tcl 8.5, can be found in
	      <package xmlns:xlink="http://www.w3.org/1999/xlink">lang/tcl85</package>.</para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Compilers</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Compilers are rather different.  First of all, you write
	your code in a file (or files) using an editor.  You then run
	the compiler and see if it accepts your program.  If it did
	not compile, grit your teeth and go back to the editor; if it
	did compile and gave you a program, you can run it either at a
	shell command prompt or in a debugger to see if it works
	properly.

	<footnote xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">If you run it in the shell, you may get a core
	    dump.</para>
	</footnote></para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Obviously, this is not quite as direct as using an
	interpreter.  However it allows you to do a lot of things
	which are very difficult or even impossible with an
	interpreter, such as writing code which interacts closely with
	the operating system&#8212;or even writing your own operating
	system! It is also useful if you need to write very efficient
	code, as the compiler can take its time and optimize the code,
	which would not be acceptable in an interpreter.  Moreover,
	distributing a program written for a compiler is usually more
	straightforward than one written for an interpreter&#8212;you
	can just give them a copy of the executable, assuming they
	have the same operating system as you.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">As the edit-compile-run-debug cycle is rather tedious when
	using separate programs, many commercial compiler makers have
	produced Integrated Development Environments
	(<acronym xmlns:xlink="http://www.w3.org/1999/xlink">IDE</acronym>s for short).  FreeBSD does not include
	an IDE in the base system, but <package xmlns:xlink="http://www.w3.org/1999/xlink">devel/kdevelop</package> is
	available in the Ports Collection and many use
	<application xmlns:xlink="http://www.w3.org/1999/xlink">Emacs</application> for this purpose.  Using
	<application xmlns:xlink="http://www.w3.org/1999/xlink">Emacs</application> as an IDE is discussed in
	<xref xmlns:xlink="http://www.w3.org/1999/xlink" linkend="emacs"/>.</para>
    </sect2>
  </sect1>


  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="tools-compiling">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Compiling with <command xmlns:xlink="http://www.w3.org/1999/xlink">cc</command></title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">This section deals with the <application xmlns:xlink="http://www.w3.org/1999/xlink">gcc</application>
      and <application xmlns:xlink="http://www.w3.org/1999/xlink">clang</application> compilers for C and C++,
      since they come with the FreeBSD base system.  Starting with
      FreeBSD 10.X <command xmlns:xlink="http://www.w3.org/1999/xlink">clang</command> is installed as
      <command xmlns:xlink="http://www.w3.org/1999/xlink">cc</command>.  The
      details of producing a program with an interpreter vary
      considerably between interpreters, and are usually well covered
      in the documentation and on-line help for the
      interpreter.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Once you have written your masterpiece, the next step is to
      convert it into something that will (hopefully!) run on FreeBSD.
      This usually involves several steps, each of which is done by a
      separate program.</para>

    <procedure xmlns:xlink="http://www.w3.org/1999/xlink">
      <step xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Pre-process your source code to remove comments and do
	  other tricks like expanding macros in C.</para>
      </step>

      <step xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Check the syntax of your code to see if you have obeyed
	  the rules of the language.  If you have not, it will
	  complain!</para>
      </step>

      <step xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Convert the source code into assembly
	  language&#8212;this is very close to machine code, but still
	  understandable by humans.  Allegedly.</para>
      </step>

      <step xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Convert the assembly language into machine
	  code&#8212;yep, we are talking bits and bytes, ones and
	  zeros here.</para>
      </step>

      <step xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Check that you have used things like functions and
	  global variables in a consistent way.  For example, if you
	  have called a non-existent function, it will
	  complain.</para>
      </step>

      <step xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">If you are trying to produce an executable from several
	  source code files, work out how to fit them all
	  together.</para>
      </step>

      <step xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Work out how to produce something that the system's
	  run-time loader will be able to load into memory and
	  run.</para>
      </step>

      <step xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Finally, write the executable on the filesystem.</para>
      </step>
    </procedure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The word <firstterm xmlns:xlink="http://www.w3.org/1999/xlink">compiling</firstterm> is often used to refer to
      just steps 1 to 4&#8212;the others are referred to as
      <firstterm xmlns:xlink="http://www.w3.org/1999/xlink">linking</firstterm>.  Sometimes step 1 is referred to as
      <firstterm xmlns:xlink="http://www.w3.org/1999/xlink">pre-processing</firstterm> and steps 3-4 as
      <firstterm xmlns:xlink="http://www.w3.org/1999/xlink">assembling</firstterm>.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Fortunately, almost all this detail is hidden from you, as
      <command xmlns:xlink="http://www.w3.org/1999/xlink">cc</command> is a front end that manages calling all these
      programs with the right arguments for you; simply typing</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cc foobar.c</userinput></screen>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">will cause <filename xmlns:xlink="http://www.w3.org/1999/xlink">foobar.c</filename> to be compiled by all the
      steps above.  If you have more than one file to compile, just do
      something like</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cc foo.c bar.c</userinput></screen>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Note that the syntax checking is just that&#8212;checking
      the syntax.  It will not check for any logical mistakes you may
      have made, like putting the program into an infinite loop, or
      using a bubble sort when you meant to use a binary
      sort.

      <footnote xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">In case you did not know, a binary sort is an efficient
	  way of sorting things into order and a bubble sort
	  is not.</para>
      </footnote></para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">There are lots and lots of options for <command xmlns:xlink="http://www.w3.org/1999/xlink">cc</command>, which
      are all in the manual page.  Here are a few of the most important
      ones, with examples of how to use them.</para>

    <variablelist xmlns:xlink="http://www.w3.org/1999/xlink">
      <varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	<term xmlns:xlink="http://www.w3.org/1999/xlink"><option xmlns:xlink="http://www.w3.org/1999/xlink">-o <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">filename</replaceable></option></term>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">The output name of the file.  If you do not use this
	    option, <command xmlns:xlink="http://www.w3.org/1999/xlink">cc</command> will produce an executable called
	    <filename xmlns:xlink="http://www.w3.org/1999/xlink">a.out</filename>.

	    <footnote xmlns:xlink="http://www.w3.org/1999/xlink">
	      <para xmlns:xlink="http://www.w3.org/1999/xlink">The reasons for this are buried in the mists of
		history.</para>
	    </footnote></para>

	  <informalexample xmlns:xlink="http://www.w3.org/1999/xlink">
	    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cc foobar.c</userinput>               <lineannotation xmlns:xlink="http://www.w3.org/1999/xlink">executable is a.out</lineannotation>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cc -o foobar foobar.c</userinput>     <lineannotation xmlns:xlink="http://www.w3.org/1999/xlink">executable is foobar</lineannotation>
	    </screen>
	  </informalexample>
	</listitem>
      </varlistentry>

      <varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	<term xmlns:xlink="http://www.w3.org/1999/xlink"><option xmlns:xlink="http://www.w3.org/1999/xlink">-c</option></term>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Just compile the file, do not link it.  Useful for toy
	    programs where you just want to check the syntax, or if
	    you are using a <filename xmlns:xlink="http://www.w3.org/1999/xlink">Makefile</filename>.</para>

	  <informalexample xmlns:xlink="http://www.w3.org/1999/xlink">
	    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cc -c foobar.c</userinput>
	    </screen>
	  </informalexample>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">This will produce an <firstterm xmlns:xlink="http://www.w3.org/1999/xlink">object file</firstterm> (not an
	    executable) called <filename xmlns:xlink="http://www.w3.org/1999/xlink">foobar.o</filename>.  This
	    can be linked together with other object files into an
	    executable.</para>
	</listitem>
      </varlistentry>

      <varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	<term xmlns:xlink="http://www.w3.org/1999/xlink"><option xmlns:xlink="http://www.w3.org/1999/xlink">-g</option></term>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Create a debug version of the executable.  This makes
	    the compiler put information into the executable about
	    which line of which source file corresponds to which
	    function call.  A debugger can use this information to show
	    the source code as you step through the program, which is
	    <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">very</emphasis> useful; the disadvantage is that
	    all this extra information makes the program much bigger.
	    Normally, you compile with <option xmlns:xlink="http://www.w3.org/1999/xlink">-g</option> while you
	    are developing a program and then compile a <quote xmlns:xlink="http://www.w3.org/1999/xlink">release
	      version</quote> without <option xmlns:xlink="http://www.w3.org/1999/xlink">-g</option> when you are
	    satisfied it works properly.</para>

	  <informalexample xmlns:xlink="http://www.w3.org/1999/xlink">
	    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cc -g foobar.c</userinput>
	    </screen>
	  </informalexample>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">This will produce a debug version of the
	    program.

	    <footnote xmlns:xlink="http://www.w3.org/1999/xlink">
	      <para xmlns:xlink="http://www.w3.org/1999/xlink">Note, we did not use the <option xmlns:xlink="http://www.w3.org/1999/xlink">-o</option> flag
		to specify the executable name, so we will get an
		executable called <filename xmlns:xlink="http://www.w3.org/1999/xlink">a.out</filename>.
		Producing a debug version called
		<filename xmlns:xlink="http://www.w3.org/1999/xlink">foobar</filename> is left as an exercise for
		the reader!</para>
	    </footnote></para>
	</listitem>
      </varlistentry>

      <varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	<term xmlns:xlink="http://www.w3.org/1999/xlink"><option xmlns:xlink="http://www.w3.org/1999/xlink">-O</option></term>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Create an optimized version of the executable.  The
	    compiler performs various clever tricks to try to produce
	    an executable that runs faster than normal.  You can add a
	    number after the <option xmlns:xlink="http://www.w3.org/1999/xlink">-O</option> to specify a higher
	    level of optimization, but this often exposes bugs in the
	    compiler's optimizer.</para>

	  <informalexample xmlns:xlink="http://www.w3.org/1999/xlink">
	    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cc -O -o foobar foobar.c</userinput>
	    </screen>
	  </informalexample>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">This will produce an optimized version of
	    <filename xmlns:xlink="http://www.w3.org/1999/xlink">foobar</filename>.</para>
	</listitem>
      </varlistentry>
    </variablelist>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The following three flags will force <command xmlns:xlink="http://www.w3.org/1999/xlink">cc</command>
      to check that your code complies to the relevant international
      standard, often referred to as the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">ANSI</acronym>
      standard, though strictly speaking it is an
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">ISO</acronym> standard.</para>

    <variablelist xmlns:xlink="http://www.w3.org/1999/xlink">
      <varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	<term xmlns:xlink="http://www.w3.org/1999/xlink"><option xmlns:xlink="http://www.w3.org/1999/xlink">-Wall</option></term>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Enable all the warnings which the authors of
	    <command xmlns:xlink="http://www.w3.org/1999/xlink">cc</command> believe are worthwhile.  Despite the
	    name, it will not enable all the warnings
	    <command xmlns:xlink="http://www.w3.org/1999/xlink">cc</command> is capable of.</para>
	</listitem>
      </varlistentry>

      <varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	<term xmlns:xlink="http://www.w3.org/1999/xlink"><option xmlns:xlink="http://www.w3.org/1999/xlink">-ansi</option></term>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Turn off most, but not all, of the
	    non-<acronym xmlns:xlink="http://www.w3.org/1999/xlink">ANSI</acronym> C features provided by
	    <command xmlns:xlink="http://www.w3.org/1999/xlink">cc</command>.  Despite the name, it does not
	    guarantee strictly that your code will comply to the
	    standard.</para>
	</listitem>
      </varlistentry>

      <varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	<term xmlns:xlink="http://www.w3.org/1999/xlink"><option xmlns:xlink="http://www.w3.org/1999/xlink">-pedantic</option></term>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Turn off <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">all</emphasis>
	    <command xmlns:xlink="http://www.w3.org/1999/xlink">cc</command>'s non-<acronym xmlns:xlink="http://www.w3.org/1999/xlink">ANSI</acronym> C
	    features.</para>
	</listitem>
      </varlistentry>
    </variablelist>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Without these flags, <command xmlns:xlink="http://www.w3.org/1999/xlink">cc</command> will allow you to
      use some of its non-standard extensions to the standard.  Some
      of these are very useful, but will not work with other
      compilers&#8212;in fact, one of the main aims of the standard is
      to allow people to write code that will work with any compiler
      on any system.  This is known as <firstterm xmlns:xlink="http://www.w3.org/1999/xlink">portable
	code</firstterm>.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Generally, you should try to make your code as portable as
      possible, as otherwise you may have to completely rewrite the
      program later to get it to work somewhere else&#8212;and who
      knows what you may be using in a few years time?</para>

    <informalexample xmlns:xlink="http://www.w3.org/1999/xlink">
      <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cc -Wall -ansi -pedantic -o foobar foobar.c</userinput></screen>
    </informalexample>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">This will produce an executable <filename xmlns:xlink="http://www.w3.org/1999/xlink">foobar</filename>
      after checking <filename xmlns:xlink="http://www.w3.org/1999/xlink">foobar.c</filename> for standard
      compliance.</para>

    <variablelist xmlns:xlink="http://www.w3.org/1999/xlink">
      <varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	<term xmlns:xlink="http://www.w3.org/1999/xlink"><option xmlns:xlink="http://www.w3.org/1999/xlink">-l<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">library</replaceable></option></term>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Specify a function library to be used at link time.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">The most common example of this is when compiling a
	    program that uses some of the mathematical functions in C.
	    Unlike most other platforms, these are in a separate
	    library from the standard C one and you have to tell the
	    compiler to add it.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">The rule is that if the library is called
	    <filename xmlns:xlink="http://www.w3.org/1999/xlink">lib<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">something</replaceable>.a</filename>,
	    you give <command xmlns:xlink="http://www.w3.org/1999/xlink">cc</command> the argument
	    <option xmlns:xlink="http://www.w3.org/1999/xlink">-l<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">something</replaceable></option>.
	    For example, the math library is
	    <filename xmlns:xlink="http://www.w3.org/1999/xlink">libm.a</filename>, so you give
	    <command xmlns:xlink="http://www.w3.org/1999/xlink">cc</command> the argument <option xmlns:xlink="http://www.w3.org/1999/xlink">-lm</option>.
	    A common <quote xmlns:xlink="http://www.w3.org/1999/xlink">gotcha</quote> with the math library is
	    that it has to be the last library on the command
	    line.</para>

	  <informalexample xmlns:xlink="http://www.w3.org/1999/xlink">
	    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cc -o foobar foobar.c -lm</userinput>
	    </screen>
	  </informalexample>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">This will link the math library functions into
	    <filename xmlns:xlink="http://www.w3.org/1999/xlink">foobar</filename>.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">If you are compiling C++ code, use
	  <command xmlns:xlink="http://www.w3.org/1999/xlink">c++</command>.  <command xmlns:xlink="http://www.w3.org/1999/xlink">c++</command> can also be
	  invoked as <command xmlns:xlink="http://www.w3.org/1999/xlink">clang++</command> on FreeBSD.</para>

	  <informalexample xmlns:xlink="http://www.w3.org/1999/xlink">
	    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">c++ -o foobar foobar.cc</userinput></screen>
	  </informalexample>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">This will both produce an executable
	    <filename xmlns:xlink="http://www.w3.org/1999/xlink">foobar</filename> from the C++ source file
	    <filename xmlns:xlink="http://www.w3.org/1999/xlink">foobar.cc</filename>.</para>
	</listitem>
      </varlistentry>
    </variablelist>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Common <command xmlns:xlink="http://www.w3.org/1999/xlink">cc</command> Queries and Problems</title>

      <qandaset xmlns:xlink="http://www.w3.org/1999/xlink">
	<qandaentry xmlns:xlink="http://www.w3.org/1999/xlink">
	  <question xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">I am trying to write a program which uses the
	      <function xmlns:xlink="http://www.w3.org/1999/xlink">sin()</function> function and I get an error
	      like this.  What does it mean?</para>

	    <informalexample xmlns:xlink="http://www.w3.org/1999/xlink">
	      <screen xmlns:xlink="http://www.w3.org/1999/xlink">/var/tmp/cc0143941.o: Undefined symbol `_sin' referenced from text segment
	      </screen>
	    </informalexample>
	  </question>

	  <answer xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">When using mathematical functions like
	      <function xmlns:xlink="http://www.w3.org/1999/xlink">sin()</function>, you have to tell
	      <command xmlns:xlink="http://www.w3.org/1999/xlink">cc</command> to link in the math library, like
	      so:</para>

	    <informalexample xmlns:xlink="http://www.w3.org/1999/xlink">
	      <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cc -o foobar foobar.c -lm</userinput>
	      </screen>
	    </informalexample>
	  </answer>
	</qandaentry>

	<qandaentry xmlns:xlink="http://www.w3.org/1999/xlink">
	  <question xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">All right, I wrote this simple program to practice
	      using <option xmlns:xlink="http://www.w3.org/1999/xlink">-lm</option>.  All it does is raise 2.1 to
	      the power of 6.</para>

	    <informalexample xmlns:xlink="http://www.w3.org/1999/xlink">
	      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">#include &lt;stdio.h&gt;

int main() {
	float f;

	f = pow(2.1, 6);
	printf("2.1 ^ 6 = %f\n", f);
	return 0;
}
	      </programlisting>
	    </informalexample>

	    <para xmlns:xlink="http://www.w3.org/1999/xlink">and I compiled it as:</para>

	    <informalexample xmlns:xlink="http://www.w3.org/1999/xlink">
	      <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cc temp.c -lm</userinput>
	      </screen>
	    </informalexample>

	    <para xmlns:xlink="http://www.w3.org/1999/xlink">like you said I should, but I get this when I run
	      it:</para>

	    <informalexample xmlns:xlink="http://www.w3.org/1999/xlink">
	      <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">./a.out</userinput>
2.1 ^ 6 = 1023.000000
	      </screen>
	    </informalexample>

	    <para xmlns:xlink="http://www.w3.org/1999/xlink">This is <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">not</emphasis> the right answer!
	      What is going on?</para>
	  </question>

	  <answer xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">When the compiler sees you call a function, it
	      checks if it has already seen a prototype for it.  If it
	      has not, it assumes the function returns an
	      <type xmlns:xlink="http://www.w3.org/1999/xlink">int</type>, which is definitely not what you want
	      here.</para>
	  </answer>
	</qandaentry>

	<qandaentry xmlns:xlink="http://www.w3.org/1999/xlink">
	  <question xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">So how do I fix this?</para>
	  </question>

	  <answer xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">The prototypes for the mathematical functions are in
	      <filename xmlns:xlink="http://www.w3.org/1999/xlink">math.h</filename>.  If you include this file,
	      the compiler will be able to find the prototype and it
	      will stop doing strange things to your
	      calculation!</para>

	    <informalexample xmlns:xlink="http://www.w3.org/1999/xlink">
	      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">#include &lt;math.h&gt;
#include &lt;stdio.h&gt;

int main() {
...
	      </programlisting>
	    </informalexample>

	    <para xmlns:xlink="http://www.w3.org/1999/xlink">After recompiling it as you did before, run
	      it:</para>

	    <informalexample xmlns:xlink="http://www.w3.org/1999/xlink">
	      <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">./a.out</userinput>
2.1 ^ 6 = 85.766121
	      </screen>
	    </informalexample>

	    <para xmlns:xlink="http://www.w3.org/1999/xlink">If you are using any of the mathematical functions,
	      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">always</emphasis> include
	      <filename xmlns:xlink="http://www.w3.org/1999/xlink">math.h</filename> and remember to link in the
	      math library.</para>
	  </answer>
	</qandaentry>

	<qandaentry xmlns:xlink="http://www.w3.org/1999/xlink">
	  <question xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">I compiled a file called
	      <filename xmlns:xlink="http://www.w3.org/1999/xlink">foobar.c</filename> and I cannot find an
	      executable called <filename xmlns:xlink="http://www.w3.org/1999/xlink">foobar</filename>.  Where has
	      it gone?</para>
	  </question>

	  <answer xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Remember, <command xmlns:xlink="http://www.w3.org/1999/xlink">cc</command> will call the
	      executable <filename xmlns:xlink="http://www.w3.org/1999/xlink">a.out</filename> unless you tell it
	      differently.  Use the
	      <option xmlns:xlink="http://www.w3.org/1999/xlink">-o <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">filename</replaceable></option>
	      option:</para>

	    <informalexample xmlns:xlink="http://www.w3.org/1999/xlink">
	      <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cc -o foobar foobar.c</userinput>
	      </screen>
	    </informalexample>
	  </answer>
	</qandaentry>

	<qandaentry xmlns:xlink="http://www.w3.org/1999/xlink">
	  <question xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">OK, I have an executable called
	      <filename xmlns:xlink="http://www.w3.org/1999/xlink">foobar</filename>, I can see it when I run
	      <command xmlns:xlink="http://www.w3.org/1999/xlink">ls</command>, but when I type in
	      <command xmlns:xlink="http://www.w3.org/1999/xlink">foobar</command> at the command prompt it tells
	      me there is no such file.  Why can it not find
	      it?</para>
	  </question>

	  <answer xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Unlike <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">MS-DOS</trademark>, <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> does not
	      look in the current directory when it is trying to find
	      out which executable you want it to run, unless you tell
	      it to.  Type <command xmlns:xlink="http://www.w3.org/1999/xlink">./foobar</command>, which
	      means <quote xmlns:xlink="http://www.w3.org/1999/xlink">run the file called
		<filename xmlns:xlink="http://www.w3.org/1999/xlink">foobar</filename> in the current
		directory.</quote></para>
	  </answer>
	</qandaentry>

	<qandaentry xmlns:xlink="http://www.w3.org/1999/xlink">
	  <question xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">I called my executable <filename xmlns:xlink="http://www.w3.org/1999/xlink">test</filename>,
	      but nothing happens when I run it.  What is going
	      on?</para>
	  </question>

	  <answer xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Most <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> systems have a program called
	      <command xmlns:xlink="http://www.w3.org/1999/xlink">test</command> in <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/bin</filename>
	      and the shell is picking that one up before it gets to
	      checking the current directory.  Either type:</para>

	    <informalexample xmlns:xlink="http://www.w3.org/1999/xlink">
	      <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">./test</userinput>
	      </screen>
	    </informalexample>

	    <para xmlns:xlink="http://www.w3.org/1999/xlink">or choose a better name for your program!</para>
	  </answer>
	</qandaentry>

	<qandaentry xmlns:xlink="http://www.w3.org/1999/xlink">
	  <question xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">I compiled my program and it seemed to run all right
	      at first, then there was an error and it said something
	      about <errorname xmlns:xlink="http://www.w3.org/1999/xlink">core dumped</errorname>.  What does that
	      mean?</para>
	  </question>

	  <answer xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">The name <firstterm xmlns:xlink="http://www.w3.org/1999/xlink">core dump</firstterm> dates back
	      to the very early days of <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark>, when the machines used
	      core memory for storing data.  Basically, if the program
	      failed under certain conditions, the system would write
	      the contents of core memory to disk in a file called
	      <filename xmlns:xlink="http://www.w3.org/1999/xlink">core</filename>, which the programmer could
	      then pore over to find out what went wrong.</para>
	  </answer>
	</qandaentry>

	<qandaentry xmlns:xlink="http://www.w3.org/1999/xlink">
	  <question xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Fascinating stuff, but what I am supposed to do
	      now?</para>
	  </question>

	  <answer xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Use <command xmlns:xlink="http://www.w3.org/1999/xlink">gdb</command> to analyze the core (see
	      <xref xmlns:xlink="http://www.w3.org/1999/xlink" linkend="debugging"/>).</para>
	  </answer>
	</qandaentry>

	<qandaentry xmlns:xlink="http://www.w3.org/1999/xlink">
	  <question xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">When my program dumped core, it said something about
	      a <errorname xmlns:xlink="http://www.w3.org/1999/xlink">segmentation fault</errorname>.  What is
	      that?</para>
	  </question>

	  <answer xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">This basically means that your program tried to
	      perform some sort of illegal operation on memory; <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark>
	      is designed to protect the operating system and other
	      programs from rogue programs.</para>

	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Common causes for this are:</para>

	    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">Trying to write to a <symbol xmlns:xlink="http://www.w3.org/1999/xlink">NULL</symbol>
		  pointer, eg</para>

		<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">char *foo = NULL;
strcpy(foo, "bang!");
		</programlisting>
	      </listitem>

	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">Using a pointer that has not been initialized,
		  eg</para>

		<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">char *foo;
strcpy(foo, "bang!");
		</programlisting>

		<para xmlns:xlink="http://www.w3.org/1999/xlink">The pointer will have some random value that,
		  with luck, will point into an area of memory that
		  is not available to your program and the kernel will
		  kill your program before it can do any damage.  If
		  you are unlucky, it will point somewhere inside your
		  own program and corrupt one of your data structures,
		  causing the program to fail mysteriously.</para>
	      </listitem>

	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">Trying to access past the end of an array,
		  eg</para>

		<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">int bar[20];
bar[27] = 6;
		</programlisting>
	      </listitem>

	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">Trying to store something in read-only memory,
		  eg</para>

		<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">char *foo = "My string";
strcpy(foo, "bang!");
		</programlisting>

		<para xmlns:xlink="http://www.w3.org/1999/xlink"><trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> compilers often put string literals like
		  <literal xmlns:xlink="http://www.w3.org/1999/xlink">"My string"</literal> into read-only areas
		  of memory.</para>
	      </listitem>

	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">Doing naughty things with
		  <function xmlns:xlink="http://www.w3.org/1999/xlink">malloc()</function> and
		  <function xmlns:xlink="http://www.w3.org/1999/xlink">free()</function>, eg</para>

		<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">char bar[80];
free(bar);
		</programlisting>

		<para xmlns:xlink="http://www.w3.org/1999/xlink">or</para>

		<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">char *foo = malloc(27);
free(foo);
free(foo);
		</programlisting>
	      </listitem>
	    </itemizedlist>

	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Making one of these mistakes will not always lead to
	      an error, but they are always bad practice.  Some
	      systems and compilers are more tolerant than others,
	      which is why programs that ran well on one system can
	      crash when you try them on an another.</para>
	  </answer>
	</qandaentry>

	<qandaentry xmlns:xlink="http://www.w3.org/1999/xlink">
	  <question xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Sometimes when I get a core dump it says
	      <errorname xmlns:xlink="http://www.w3.org/1999/xlink">bus error</errorname>.  It says in my <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark>
	      book that this means a hardware problem, but the
	      computer still seems to be working.  Is this
	      true?</para>
	  </question>

	  <answer xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">No, fortunately not (unless of course you really do
	      have a hardware problem&#8230;).  This is usually
	      another way of saying that you accessed memory in a way
	      you should not have.</para>
	  </answer>
	</qandaentry>

	<qandaentry xmlns:xlink="http://www.w3.org/1999/xlink">
	  <question xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">This dumping core business sounds as though it could
	      be quite useful, if I can make it happen when I want to.
	      Can I do this, or do I have to wait until there is an
	      error?</para>
	  </question>

	  <answer xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Yes, just go to another console or xterm, do</para>

	    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">ps</userinput>
	    </screen>

	    <para xmlns:xlink="http://www.w3.org/1999/xlink">to find out the process ID of your program, and
	      do</para>

	    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">kill -ABRT <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">pid</replaceable></userinput>
	    </screen>

	    <para xmlns:xlink="http://www.w3.org/1999/xlink">where
	      <parameter xmlns:xlink="http://www.w3.org/1999/xlink"><replaceable xmlns:xlink="http://www.w3.org/1999/xlink">pid</replaceable></parameter> is
	      the process ID you looked up.</para>

	    <para xmlns:xlink="http://www.w3.org/1999/xlink">This is useful if your program has got stuck in an
	      infinite loop, for instance.  If your program happens to
	      trap <symbol xmlns:xlink="http://www.w3.org/1999/xlink">SIGABRT</symbol>, there are several other
	      signals which have a similar effect.</para>

	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Alternatively, you can create a core dump from
	      inside your program, by calling the
	      <function xmlns:xlink="http://www.w3.org/1999/xlink">abort()</function> function. See the manual page
	      of <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">abort</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry> to learn more.</para>

            <para xmlns:xlink="http://www.w3.org/1999/xlink">If you want to create a core dump from outside your
              program, but do not want the process to terminate, you
              can use the <command xmlns:xlink="http://www.w3.org/1999/xlink">gcore</command> program. See the
              manual page of <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">gcore</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">1</manvolnum></citerefentry> for more information.</para>

	  </answer>
	</qandaentry>
      </qandaset>
    </sect2>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="tools-make">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Make</title>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">What is <command xmlns:xlink="http://www.w3.org/1999/xlink">make</command>?</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">When you are working on a simple program with only one or
	two source files, typing in</para>

      <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cc file1.c file2.c</userinput></screen>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">is not too bad, but it quickly becomes very tedious when
	there are several files&#8212;and it can take a while to
	compile, too.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">One way to get around this is to use object files and only
	recompile the source file if the source code has changed.  So
	we could have something like:</para>

      <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cc file1.o file2.o</userinput> &#8230; <userinput xmlns:xlink="http://www.w3.org/1999/xlink">file37.c</userinput> &#8230;</screen>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">if we had changed <filename xmlns:xlink="http://www.w3.org/1999/xlink">file37.c</filename>, but not any
	of the others, since the last time we compiled.  This may
	speed up the compilation quite a bit, but does not solve the
	typing problem.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Or we could write a shell script to solve the typing
	problem, but it would have to re-compile everything, making it
	very inefficient on a large project.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">What happens if we have hundreds of source files lying
	about? What if we are working in a team with other people who
	forget to tell us when they have changed one of their source
	files that we use?</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Perhaps we could put the two solutions together and write
	something like a shell script that would contain some kind of
	magic rule saying when a source file needs compiling.  Now all
	we need now is a program that can understand these rules, as
	it is a bit too complicated for the shell.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">This program is called <command xmlns:xlink="http://www.w3.org/1999/xlink">make</command>.  It reads
	in a file, called a <firstterm xmlns:xlink="http://www.w3.org/1999/xlink">makefile</firstterm>, that
	tells it how different files depend on each other, and works
	out which files need to be re-compiled and which ones do not.
	For example, a rule could say something like <quote xmlns:xlink="http://www.w3.org/1999/xlink">if
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">fromboz.o</filename> is older than
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">fromboz.c</filename>, that means someone must have
	  changed <filename xmlns:xlink="http://www.w3.org/1999/xlink">fromboz.c</filename>, so it needs to be
	  re-compiled.</quote> The makefile also has rules telling
	make <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">how</emphasis> to re-compile the source file,
	making it a much more powerful tool.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Makefiles are typically kept in the same directory as the
	source they apply to, and can be called
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">makefile</filename>, <filename xmlns:xlink="http://www.w3.org/1999/xlink">Makefile</filename>
	or <filename xmlns:xlink="http://www.w3.org/1999/xlink">MAKEFILE</filename>.  Most programmers use the
	name <filename xmlns:xlink="http://www.w3.org/1999/xlink">Makefile</filename>, as this puts it near the
	top of a directory listing, where it can easily be
	seen.

	<footnote xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">They do not use the <filename xmlns:xlink="http://www.w3.org/1999/xlink">MAKEFILE</filename> form
	    as block capitals are often used for documentation files
	    like <filename xmlns:xlink="http://www.w3.org/1999/xlink">README</filename>.</para>
	</footnote></para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Example of using <command xmlns:xlink="http://www.w3.org/1999/xlink">make</command></title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Here is a very simple make file:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">foo: foo.c
	cc -o foo foo.c</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">It consists of two lines, a dependency line and a creation
	line.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The dependency line here consists of the name of the
	program (known as the <firstterm xmlns:xlink="http://www.w3.org/1999/xlink">target</firstterm>), followed
	by a colon, then whitespace, then the name of the source file.
	When <command xmlns:xlink="http://www.w3.org/1999/xlink">make</command> reads this line, it looks to see
	if <filename xmlns:xlink="http://www.w3.org/1999/xlink">foo</filename> exists; if it exists, it compares
	the time <filename xmlns:xlink="http://www.w3.org/1999/xlink">foo</filename> was last modified to the
	time <filename xmlns:xlink="http://www.w3.org/1999/xlink">foo.c</filename> was last modified.  If
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">foo</filename> does not exist, or is older than
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">foo.c</filename>, it then looks at the creation line
	to find out what to do.  In other words, this is the rule for
	working out when <filename xmlns:xlink="http://www.w3.org/1999/xlink">foo.c</filename> needs to be
	re-compiled.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The creation line starts with a <token xmlns:xlink="http://www.w3.org/1999/xlink">tab</token> (press
	the <keycap xmlns:xlink="http://www.w3.org/1999/xlink">tab</keycap> key) and then the command you would
	type to create <filename xmlns:xlink="http://www.w3.org/1999/xlink">foo</filename> if you were doing it
	at a command prompt.  If <filename xmlns:xlink="http://www.w3.org/1999/xlink">foo</filename> is out of
	date, or does not exist, <command xmlns:xlink="http://www.w3.org/1999/xlink">make</command> then executes
	this command to create it.  In other words, this is the rule
	which tells make how to re-compile
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">foo.c</filename>.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">So, when you type <userinput xmlns:xlink="http://www.w3.org/1999/xlink">make</userinput>, it will
	make sure that <filename xmlns:xlink="http://www.w3.org/1999/xlink">foo</filename> is up to date with
	respect to your latest changes to <filename xmlns:xlink="http://www.w3.org/1999/xlink">foo.c</filename>.
	This principle can be extended to
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">Makefile</filename>s with hundreds of
	targets&#8212;in fact, on FreeBSD, it is possible to compile
	the entire operating system just by typing <userinput xmlns:xlink="http://www.w3.org/1999/xlink">make
	  world</userinput> in the appropriate directory!</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Another useful property of makefiles is that the targets
	do not have to be programs.  For instance, we could have a make
	file that looks like this:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">foo: foo.c
	cc -o foo foo.c

install:
	cp foo /home/me</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">We can tell make which target we want to make by
	typing:</para>

      <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">make <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">target</replaceable></userinput></screen>

      <para xmlns:xlink="http://www.w3.org/1999/xlink"><command xmlns:xlink="http://www.w3.org/1999/xlink">make</command> will then only look at that target
	and ignore any others.  For example, if we type
	<userinput xmlns:xlink="http://www.w3.org/1999/xlink">make foo</userinput> with the makefile above, make
	will ignore the <buildtarget>install</buildtarget> target.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">If we just type <userinput xmlns:xlink="http://www.w3.org/1999/xlink">make</userinput> on its own,
	make will always look at the first target and then stop
	without looking at any others.  So if we typed
	<userinput xmlns:xlink="http://www.w3.org/1999/xlink">make</userinput> here, it will just go to the
	<buildtarget>foo</buildtarget> target, re-compile
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">foo</filename> if necessary, and then stop without
	going on to the <buildtarget>install</buildtarget> target.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Notice that the <buildtarget>install</buildtarget> target does not
	actually depend on anything! This means that the command on
	the following line is always executed when we try to make that
	target by typing <userinput xmlns:xlink="http://www.w3.org/1999/xlink">make install</userinput>.  In this
	case, it will copy <filename xmlns:xlink="http://www.w3.org/1999/xlink">foo</filename> into the user's
	home directory.  This is often used by application makefiles,
	so that the application can be installed in the correct
	directory when it has been correctly compiled.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">This is a slightly confusing subject to try to explain.
	If you do not quite understand how <command xmlns:xlink="http://www.w3.org/1999/xlink">make</command>
	works, the best thing to do is to write a simple program like
	<quote xmlns:xlink="http://www.w3.org/1999/xlink">hello world</quote> and a make file like the one above
	and experiment.  Then progress to using more than one source
	file, or having the source file include a header file.  The
	<command xmlns:xlink="http://www.w3.org/1999/xlink">touch</command> command is very useful here&#8212;it
	changes the date on a file without you having to edit
	it.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Make and include-files</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">C code often starts with a list of files to include, for
	example stdio.h. Some of these files are system-include
	files, some of them are from the project you are now working
	on:
      </para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">#include &lt;stdio.h&gt;
#include "foo.h"

int main(....</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">To make sure that this file is recompiled the moment
        <filename xmlns:xlink="http://www.w3.org/1999/xlink">foo.h</filename> is changed, you have to add it in
        your <filename xmlns:xlink="http://www.w3.org/1999/xlink">Makefile</filename>:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">foo: foo.c foo.h</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The moment your project is getting bigger and you have
	more and more own include-files to maintain, it will be a
	pain to keep track of all include files and the files which
	are depending on it. If you change an include-file but
	forget to recompile all the files which are depending on
	it, the results will be devastating. <command xmlns:xlink="http://www.w3.org/1999/xlink">gcc</command>
	has an option to analyze your files and to produce a list
	of include-files and their dependencies: <option xmlns:xlink="http://www.w3.org/1999/xlink">-MM</option>.
      </para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">If you add this to your Makefile:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">depend:
	gcc -E -MM *.c &gt; .depend</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">and run <userinput xmlns:xlink="http://www.w3.org/1999/xlink">make depend</userinput>, the file
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">.depend</filename> will appear with a list of
	object-files, C-files and the include-files:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">foo.o: foo.c foo.h</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">If you change <filename xmlns:xlink="http://www.w3.org/1999/xlink">foo.h</filename>, next time
	you run <command xmlns:xlink="http://www.w3.org/1999/xlink">make</command> all files depending on
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">foo.h</filename> will be recompiled.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Do not forget to run <command xmlns:xlink="http://www.w3.org/1999/xlink">make depend</command> each
        time you add an include-file to one of your files.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">FreeBSD Makefiles</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Makefiles can be rather complicated to write.  Fortunately,
	BSD-based systems like FreeBSD come with some very powerful
	ones as part of the system.  One very good example of this is
	the FreeBSD ports system.  Here is the essential part of a
	typical ports <filename xmlns:xlink="http://www.w3.org/1999/xlink">Makefile</filename>:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">MASTER_SITES=   ftp://freefall.cdrom.com/pub/FreeBSD/LOCAL_PORTS/
DISTFILES=      scheme-microcode+dist-7.3-freebsd.tgz

.include &lt;bsd.port.mk&gt;</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Now, if we go to the directory for this port and type
	<userinput xmlns:xlink="http://www.w3.org/1999/xlink">make</userinput>, the following happens:</para>

      <procedure xmlns:xlink="http://www.w3.org/1999/xlink">
	<step xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">A check is made to see if the source code for this
	    port is already on the system.</para>
	</step>

	<step xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">If it is not, an FTP connection to the URL in
	    <symbol xmlns:xlink="http://www.w3.org/1999/xlink">MASTER_SITES</symbol> is set up to download the
	    source.</para>
	</step>

	<step xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">The checksum for the source is calculated and compared
	    it with one for a known, good, copy of the source.  This
	    is to make sure that the source was not corrupted while in
	    transit.</para>
	</step>

	<step xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Any changes required to make the source work on
	    FreeBSD are applied&#8212;this is known as
	    <firstterm xmlns:xlink="http://www.w3.org/1999/xlink">patching</firstterm>.</para>
	</step>

	<step xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Any special configuration needed for the source is
	    done.  (Many <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> program distributions try to work out
	    which version of <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> they are being compiled on and which
	    optional <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> features are present&#8212;this is where
	    they are given the information in the FreeBSD ports
	    scenario).</para>
	</step>

	<step xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">The source code for the program is compiled.  In
	    effect, we change to the directory where the source was
	    unpacked and do <command xmlns:xlink="http://www.w3.org/1999/xlink">make</command>&#8212;the
	    program's own make file has the necessary information to
	    build the program.</para>
	</step>

	<step xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">We now have a compiled version of the program.  If we
	    wish, we can test it now; when we feel confident about the
	    program, we can type <userinput xmlns:xlink="http://www.w3.org/1999/xlink">make install</userinput>.
	    This will cause the program and any supporting files it
	    needs to be copied into the correct location; an entry is
	    also made into a <database xmlns:xlink="http://www.w3.org/1999/xlink">package database</database>, so
	    that the port can easily be uninstalled later if we change
	    our mind about it.</para>
	</step>
      </procedure>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Now I think you will agree that is rather impressive for a
	four line script!</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The secret lies in the last line, which tells
	<command xmlns:xlink="http://www.w3.org/1999/xlink">make</command> to look in the system makefile called
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">bsd.port.mk</filename>.  It is easy to overlook this
	line, but this is where all the clever stuff comes
	from&#8212;someone has written a makefile that tells
	<command xmlns:xlink="http://www.w3.org/1999/xlink">make</command> to do all the things above (plus a
	couple of other things I did not mention, including handling
	any errors that may occur) and anyone can get access to that
	just by putting a single line in their own make file!</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">If you want to have a look at these system makefiles,
	they are in <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/share/mk</filename>, but it is
	probably best to wait until you have had a bit of practice with
	makefiles, as they are very complicated (and if you do look at
	them, make sure you have a flask of strong coffee
	handy!)</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">More advanced uses of <command xmlns:xlink="http://www.w3.org/1999/xlink">make</command></title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink"><command xmlns:xlink="http://www.w3.org/1999/xlink">Make</command> is a very powerful tool, and can
	do much more than the simple example above shows.
	Unfortunately, there are several different versions of
	<command xmlns:xlink="http://www.w3.org/1999/xlink">make</command>, and they all differ considerably.
	The best way to learn what they can do is probably to read the
	documentation&#8212;hopefully this introduction will have
	given you a base from which you can do this.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The version of make that comes with FreeBSD is the
	<application xmlns:xlink="http://www.w3.org/1999/xlink">Berkeley make</application>; there is a tutorial
	for it in <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/share/doc/psd/12.make</filename>.  To
	view it, do</para>

      <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">zmore paper.ascii.gz</userinput></screen>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">in that directory.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Many applications in the ports use <application xmlns:xlink="http://www.w3.org/1999/xlink">GNU
	  make</application>, which has a very good set of
	<quote xmlns:xlink="http://www.w3.org/1999/xlink">info</quote> pages.  If you have installed any of these
	ports, <application xmlns:xlink="http://www.w3.org/1999/xlink">GNU make</application> will automatically
	have been installed as <command xmlns:xlink="http://www.w3.org/1999/xlink">gmake</command>.  It is also
	available as a port and package in its own right.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">To view the info pages for <application xmlns:xlink="http://www.w3.org/1999/xlink">GNU
	make</application>, you will have to edit the
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">dir</filename> file in the
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/local/info</filename> directory to add an entry
	for it.  This involves adding a line like</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"> * Make: (make).                 The GNU Make utility.</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">to the file.  Once you have done this, you can type
	<userinput xmlns:xlink="http://www.w3.org/1999/xlink">info</userinput> and then select
	<guimenuitem xmlns:xlink="http://www.w3.org/1999/xlink">make</guimenuitem> from the menu (or in
	<application xmlns:xlink="http://www.w3.org/1999/xlink">Emacs</application>, do <userinput xmlns:xlink="http://www.w3.org/1999/xlink">C-h
	  i</userinput>).</para>
    </sect2>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="debugging">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Debugging</title>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">The Debugger</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The debugger that comes with FreeBSD is called
	<command xmlns:xlink="http://www.w3.org/1999/xlink">gdb</command> (<application xmlns:xlink="http://www.w3.org/1999/xlink">GNU
	  debugger</application>).  You start it up by typing</para>

      <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">gdb <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">progname</replaceable></userinput></screen>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">although many people prefer to run it inside
	<application xmlns:xlink="http://www.w3.org/1999/xlink">Emacs</application>.  You can do this by:</para>

      <screen xmlns:xlink="http://www.w3.org/1999/xlink"><userinput xmlns:xlink="http://www.w3.org/1999/xlink">M-x gdb RET <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">progname</replaceable> RET</userinput></screen>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Using a debugger allows you to run the program under more
	controlled circumstances.  Typically, you can step through the
	program a line at a time, inspect the value of variables,
	change them, tell the debugger to run up to a certain point
	and then stop, and so on.  You can even attach to a program
	that is already running, or load a core file to investigate why
	the program crashed.  It is even possible to debug the kernel,
	though that is a little trickier than the user applications
	we will be discussing in this section.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink"><command xmlns:xlink="http://www.w3.org/1999/xlink">gdb</command> has quite good on-line help, as
	well as a set of info pages, so this section will concentrate
	on a few of the basic commands.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Finally, if you find its text-based command-prompt style
	off-putting, there is a graphical front-end for it
	(<package xmlns:xlink="http://www.w3.org/1999/xlink">devel/xxgdb</package>) in the Ports
	Collection.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">This section is intended to be an introduction to using
	<command xmlns:xlink="http://www.w3.org/1999/xlink">gdb</command> and does not cover specialized topics
	such as debugging the kernel.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Running a program in the debugger</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">You will need to have compiled the program with the
	<option xmlns:xlink="http://www.w3.org/1999/xlink">-g</option> option to get the most out of using
	<command xmlns:xlink="http://www.w3.org/1999/xlink">gdb</command>.  It will work without, but you will only
	see the name of the function you are in, instead of the source
	code.  If you see a line like:</para>

      <screen xmlns:xlink="http://www.w3.org/1999/xlink">&#8230; (no debugging symbols found) &#8230;</screen>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">when <command xmlns:xlink="http://www.w3.org/1999/xlink">gdb</command> starts up, you will know that
	the program was not compiled with the <option xmlns:xlink="http://www.w3.org/1999/xlink">-g</option>
	option.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">At the <command xmlns:xlink="http://www.w3.org/1999/xlink">gdb</command> prompt, type
	<userinput xmlns:xlink="http://www.w3.org/1999/xlink">break main</userinput>.  This will tell the
	debugger that you are not interested in watching the
	preliminary set-up code in the program being run, and that it
	should stop execution at the beginning of your code.  Now type
	<userinput xmlns:xlink="http://www.w3.org/1999/xlink">run</userinput> to start the program&#8212;it will
	start at the beginning of the set-up code and then get stopped
	by the debugger when it calls <function xmlns:xlink="http://www.w3.org/1999/xlink">main()</function>.
	(If you have ever wondered where <function xmlns:xlink="http://www.w3.org/1999/xlink">main()</function>
	gets called from, now you know!).</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">You can now step through the program, a line at a time, by
	pressing <command xmlns:xlink="http://www.w3.org/1999/xlink">n</command>.  If you get to a function call,
	you can step into it by pressing <command xmlns:xlink="http://www.w3.org/1999/xlink">s</command>.  Once
	you are in a function call, you can return from stepping into a
	function call by pressing <command xmlns:xlink="http://www.w3.org/1999/xlink">f</command>.  You can also
	use <command xmlns:xlink="http://www.w3.org/1999/xlink">up</command> and <command xmlns:xlink="http://www.w3.org/1999/xlink">down</command> to take
	a quick look at the caller.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Here is a simple example of how to spot a mistake in a
	program with <command xmlns:xlink="http://www.w3.org/1999/xlink">gdb</command>.  This is our program
	(with a deliberate mistake):</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">#include &lt;stdio.h&gt;

int bazz(int anint);

main() {
	int i;

	printf("This is my program\n");
	bazz(i);
	return 0;
}

int bazz(int anint) {
	printf("You gave me %d\n", anint);
	return anint;
}</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">This program sets <symbol xmlns:xlink="http://www.w3.org/1999/xlink">i</symbol> to be
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">5</literal> and passes it to a function
	<function xmlns:xlink="http://www.w3.org/1999/xlink">bazz()</function> which prints out the number we
	gave it.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">When we compile and run the program we get</para>

      <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cc -g -o temp temp.c</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">./temp</userinput>
This is my program
anint = 4231</screen>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">That was not what we expected! Time to see what is going
	on!</para>

      <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">gdb temp</userinput>
GDB is free software and you are welcome to distribute copies of it
 under certain conditions; type "show copying" to see the conditions.
There is absolutely no warranty for GDB; type "show warranty" for details.
GDB 4.13 (i386-unknown-freebsd), Copyright 1994 Free Software Foundation, Inc.
(gdb) <userinput xmlns:xlink="http://www.w3.org/1999/xlink">break main</userinput>				<lineannotation xmlns:xlink="http://www.w3.org/1999/xlink">Skip the set-up code</lineannotation>
Breakpoint 1 at 0x160f: file temp.c, line 9.	<lineannotation xmlns:xlink="http://www.w3.org/1999/xlink">gdb puts breakpoint at main()</lineannotation>
(gdb) <userinput xmlns:xlink="http://www.w3.org/1999/xlink">run</userinput>					<lineannotation xmlns:xlink="http://www.w3.org/1999/xlink">Run as far as main()</lineannotation>
Starting program: /home/james/tmp/temp		<lineannotation xmlns:xlink="http://www.w3.org/1999/xlink">Program starts running</lineannotation>

Breakpoint 1, main () at temp.c:9		<lineannotation xmlns:xlink="http://www.w3.org/1999/xlink">gdb stops at main()</lineannotation>
(gdb) <userinput xmlns:xlink="http://www.w3.org/1999/xlink">n</userinput>						<lineannotation xmlns:xlink="http://www.w3.org/1999/xlink">Go to next line</lineannotation>
This is my program				<lineannotation xmlns:xlink="http://www.w3.org/1999/xlink">Program prints out</lineannotation>
(gdb) <userinput xmlns:xlink="http://www.w3.org/1999/xlink">s</userinput>						<lineannotation xmlns:xlink="http://www.w3.org/1999/xlink">step into bazz()</lineannotation>
bazz (anint=4231) at temp.c:17			<lineannotation xmlns:xlink="http://www.w3.org/1999/xlink">gdb displays stack frame</lineannotation>
(gdb)</screen>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Hang on a minute! How did <symbol xmlns:xlink="http://www.w3.org/1999/xlink">anint</symbol> get to be
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">4231</literal>? Did we not we set it to be
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">5</literal> in <function xmlns:xlink="http://www.w3.org/1999/xlink">main()</function>? Let's
	move up to <function xmlns:xlink="http://www.w3.org/1999/xlink">main()</function> and have a look.</para>

      <screen xmlns:xlink="http://www.w3.org/1999/xlink">(gdb) <userinput xmlns:xlink="http://www.w3.org/1999/xlink">up</userinput>					<lineannotation xmlns:xlink="http://www.w3.org/1999/xlink">Move up call stack</lineannotation>
#1  0x1625 in main () at temp.c:11		<lineannotation xmlns:xlink="http://www.w3.org/1999/xlink">gdb displays stack frame</lineannotation>
(gdb) <userinput xmlns:xlink="http://www.w3.org/1999/xlink">p i</userinput>					<lineannotation xmlns:xlink="http://www.w3.org/1999/xlink">Show us the value of i</lineannotation>
$1 = 4231					<lineannotation xmlns:xlink="http://www.w3.org/1999/xlink">gdb displays 4231</lineannotation></screen>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Oh dear! Looking at the code, we forgot to initialize
	<symbol xmlns:xlink="http://www.w3.org/1999/xlink">i</symbol>.  We meant to put</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><lineannotation xmlns:xlink="http://www.w3.org/1999/xlink">&#8230;</lineannotation>
main() {
	int i;

	i = 5;
	printf("This is my program\n");
<lineannotation xmlns:xlink="http://www.w3.org/1999/xlink">&#8230;</lineannotation></programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">but we left the <literal xmlns:xlink="http://www.w3.org/1999/xlink">i=5;</literal> line out.  As we
	did not initialize <symbol xmlns:xlink="http://www.w3.org/1999/xlink">i</symbol>, it had whatever number
	happened to be in that area of memory when the program ran,
	which in this case happened to be
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">4231</literal>.</para>

      <note xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><command xmlns:xlink="http://www.w3.org/1999/xlink">gdb</command> displays the stack frame every
	  time we go into or out of a function, even if we are using
	  <command xmlns:xlink="http://www.w3.org/1999/xlink">up</command> and <command xmlns:xlink="http://www.w3.org/1999/xlink">down</command> to move
	  around the call stack.  This shows the name of the function
	  and the values of its arguments, which helps us keep track
	  of where we are and what is going on.  (The stack is a
	  storage area where the program stores information about the
	  arguments passed to functions and where to go when it
	  returns from a function call).</para>
      </note>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Examining a core file</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">A core file is basically a file which contains the
	complete state of the process when it crashed.  In <quote xmlns:xlink="http://www.w3.org/1999/xlink">the
	  good old days</quote>, programmers had to print out hex
	listings of core files and sweat over machine code manuals,
	but now life is a bit easier.  Incidentally, under FreeBSD and
	other 4.4BSD systems, a core file is called
	<filename xmlns:xlink="http://www.w3.org/1999/xlink"><replaceable xmlns:xlink="http://www.w3.org/1999/xlink">progname</replaceable>.core</filename> instead of just
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">core</filename>, to make it clearer which program a
	core file belongs to.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">To examine a core file, start up <command xmlns:xlink="http://www.w3.org/1999/xlink">gdb</command> in
	the usual way.  Instead of typing <command xmlns:xlink="http://www.w3.org/1999/xlink">break</command> or
	<command xmlns:xlink="http://www.w3.org/1999/xlink">run</command>, type</para>

      <screen xmlns:xlink="http://www.w3.org/1999/xlink">(gdb) <userinput xmlns:xlink="http://www.w3.org/1999/xlink">core <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">progname</replaceable>.core</userinput></screen>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">If you are not in the same directory as the core file,
	you will have to do <userinput xmlns:xlink="http://www.w3.org/1999/xlink">dir
	  /path/to/core/file</userinput> first.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">You should see something like this:</para>

      <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">gdb a.out</userinput>
GDB is free software and you are welcome to distribute copies of it
 under certain conditions; type "show copying" to see the conditions.
There is absolutely no warranty for GDB; type "show warranty" for details.
GDB 4.13 (i386-unknown-freebsd), Copyright 1994 Free Software Foundation, Inc.
(gdb) <userinput xmlns:xlink="http://www.w3.org/1999/xlink">core a.out.core</userinput>
Core was generated by `a.out'.
Program terminated with signal 11, Segmentation fault.
Cannot access memory at address 0x7020796d.
#0  0x164a in bazz (anint=0x5) at temp.c:17
(gdb)</screen>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">In this case, the program was called
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">a.out</filename>, so the core file is called
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">a.out.core</filename>.  We can see that the program
	crashed due to trying to access an area in memory that was not
	available to it in a function called
	<function xmlns:xlink="http://www.w3.org/1999/xlink">bazz</function>.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Sometimes it is useful to be able to see how a function was
	called, as the problem could have occurred a long way up the
	call stack in a complex program.  The <command xmlns:xlink="http://www.w3.org/1999/xlink">bt</command>
	command causes <command xmlns:xlink="http://www.w3.org/1999/xlink">gdb</command> to print out a
	back-trace of the call stack:</para>

      <screen xmlns:xlink="http://www.w3.org/1999/xlink">(gdb) <userinput xmlns:xlink="http://www.w3.org/1999/xlink">bt</userinput>
#0  0x164a in bazz (anint=0x5) at temp.c:17
#1  0xefbfd888 in end ()
#2  0x162c in main () at temp.c:11
(gdb)</screen>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The <function xmlns:xlink="http://www.w3.org/1999/xlink">end()</function> function is called when a
	program crashes; in this case, the <function xmlns:xlink="http://www.w3.org/1999/xlink">bazz()</function>
	function was called from <function xmlns:xlink="http://www.w3.org/1999/xlink">main()</function>.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Attaching to a running program</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">One of the neatest features about <command xmlns:xlink="http://www.w3.org/1999/xlink">gdb</command>
	is that it can attach to a program that is already running.  Of
	course, that assumes you have sufficient permissions to do so.
	A common problem is when you are stepping through a program
	that forks, and you want to trace the child, but the debugger
	will only let you trace the parent.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">What you do is start up another <command xmlns:xlink="http://www.w3.org/1999/xlink">gdb</command>,
	use <command xmlns:xlink="http://www.w3.org/1999/xlink">ps</command> to find the process ID for the
	child, and do</para>

      <screen xmlns:xlink="http://www.w3.org/1999/xlink">(gdb) <userinput xmlns:xlink="http://www.w3.org/1999/xlink">attach <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">pid</replaceable></userinput></screen>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">in <command xmlns:xlink="http://www.w3.org/1999/xlink">gdb</command>, and then debug as usual.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink"><quote xmlns:xlink="http://www.w3.org/1999/xlink">That is all very well,</quote> you are probably
	thinking, <quote xmlns:xlink="http://www.w3.org/1999/xlink">but by the time I have done that, the child
	  process will be over the hill and far away</quote>.  Fear
	not, gentle reader, here is how to do it (courtesy of the
	<command xmlns:xlink="http://www.w3.org/1999/xlink">gdb</command> info pages):</para>

      <screen xmlns:xlink="http://www.w3.org/1999/xlink"><lineannotation xmlns:xlink="http://www.w3.org/1999/xlink">&#8230;</lineannotation>
if ((pid = fork()) &lt; 0)		/* _Always_ check this */
	error();
else if (pid == 0) {		/* child */
	int PauseMode = 1;

	while (PauseMode)
		sleep(10);	/* Wait until someone attaches to us */
	<lineannotation xmlns:xlink="http://www.w3.org/1999/xlink">&#8230;</lineannotation>
} else {			/* parent */
	<lineannotation xmlns:xlink="http://www.w3.org/1999/xlink">&#8230;</lineannotation></screen>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Now all you have to do is attach to the child, set
	<symbol xmlns:xlink="http://www.w3.org/1999/xlink">PauseMode</symbol> to <literal xmlns:xlink="http://www.w3.org/1999/xlink">0</literal>, and wait
	for the <function xmlns:xlink="http://www.w3.org/1999/xlink">sleep()</function> call to return!</para>
    </sect2>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="emacs">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Using Emacs as a Development Environment</title>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Emacs</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Emacs is a highly customizable
	editor&#8212;indeed, it has been customized to the point where
	it is more like an operating system than an editor! Many
	developers and sysadmins do in fact spend practically all
	their time working inside Emacs, leaving it only to log
	out.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">It is impossible even to summarize everything Emacs can do
	here, but here are some of the features of interest to
	developers:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Very powerful editor, allowing search-and-replace on
	    both strings and regular expressions (patterns), jumping
	    to start/end of block expression, etc, etc.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Pull-down menus and online help.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Language-dependent syntax highlighting and
	    indentation.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Completely customizable.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">You can compile and debug programs within
	    Emacs.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">On a compilation error, you can jump to the offending
	    line of source code.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Friendly-ish front-end to the <command xmlns:xlink="http://www.w3.org/1999/xlink">info</command>
	    program used for reading GNU hypertext documentation,
	    including the documentation on Emacs itself.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Friendly front-end to <command xmlns:xlink="http://www.w3.org/1999/xlink">gdb</command>, allowing
	    you to look at the source code as you step through your
	    program.</para>
	</listitem>
      </itemizedlist>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">And doubtless many more that have been overlooked.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Emacs can be installed on FreeBSD using
	the <package xmlns:xlink="http://www.w3.org/1999/xlink">editors/emacs</package>
	port.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Once it is installed, start it up and do <userinput xmlns:xlink="http://www.w3.org/1999/xlink">C-h
	  t</userinput> to read an Emacs tutorial&#8212;that means
	hold down the <keycap xmlns:xlink="http://www.w3.org/1999/xlink">control</keycap> key, press
	<keycap xmlns:xlink="http://www.w3.org/1999/xlink">h</keycap>, let go of the <keycap xmlns:xlink="http://www.w3.org/1999/xlink">control</keycap>
	key, and then press <keycap xmlns:xlink="http://www.w3.org/1999/xlink">t</keycap>.  (Alternatively, you
	can use the mouse to select <guimenuitem xmlns:xlink="http://www.w3.org/1999/xlink">Emacs
	  Tutorial</guimenuitem> from the <guimenu xmlns:xlink="http://www.w3.org/1999/xlink">Help</guimenu>
	menu.)</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Although Emacs does have menus, it is well worth learning
	the key bindings, as it is much quicker when you are editing
	something to press a couple of keys than to try to find the
	mouse and then click on the right place.  And, when you are
	talking to seasoned Emacs users, you will find they often
	casually throw around expressions like <quote xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">M-x
	    replace-s RET foo RET bar RET</literal></quote> so it is
	useful to know what they mean.  And in any case, Emacs has far
	too many useful functions for them to all fit on the menu
	bars.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Fortunately, it is quite easy to pick up the key-bindings,
	as they are displayed next to the menu item.  My advice is to
	use the menu item for, say, opening a file until you
	understand how it works and feel confident with it, then try
	doing C-x C-f.  When you are happy with that, move on to
	another menu command.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">If you can not remember what a particular combination of
	keys does, select <guimenuitem xmlns:xlink="http://www.w3.org/1999/xlink">Describe Key</guimenuitem> from
	the <guimenu xmlns:xlink="http://www.w3.org/1999/xlink">Help</guimenu> menu and type it in&#8212;Emacs
	will tell you what it does.  You can also use the
	<guimenuitem xmlns:xlink="http://www.w3.org/1999/xlink">Command Apropos</guimenuitem> menu item to find
	out all the commands which contain a particular word in them,
	with the key binding next to it.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">By the way, the expression above means hold down the
	<keysym xmlns:xlink="http://www.w3.org/1999/xlink">Meta</keysym> key, press <keysym xmlns:xlink="http://www.w3.org/1999/xlink">x</keysym>, release
	the <keysym xmlns:xlink="http://www.w3.org/1999/xlink">Meta</keysym> key, type
	<userinput xmlns:xlink="http://www.w3.org/1999/xlink">replace-s</userinput> (short for
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">replace-string</literal>&#8212;another feature of
	Emacs is that you can abbreviate commands), press the
	<keysym xmlns:xlink="http://www.w3.org/1999/xlink">return</keysym> key, type <userinput xmlns:xlink="http://www.w3.org/1999/xlink">foo</userinput>
	(the string you want replaced), press the
	<keysym xmlns:xlink="http://www.w3.org/1999/xlink">return</keysym> key, type bar (the string you want to
	replace <literal xmlns:xlink="http://www.w3.org/1999/xlink">foo</literal> with) and press
	<keysym xmlns:xlink="http://www.w3.org/1999/xlink">return</keysym> again.  Emacs will then do the
	search-and-replace operation you have just requested.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">If you are wondering what on earth the
	<keysym xmlns:xlink="http://www.w3.org/1999/xlink">Meta</keysym> key is, it is a special key that many
	<trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> workstations have.  Unfortunately, PC's do not have one,
	so it is usually the <keycap xmlns:xlink="http://www.w3.org/1999/xlink">alt</keycap> key (or if you are
	unlucky, the <keysym xmlns:xlink="http://www.w3.org/1999/xlink">escape</keysym> key).</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Oh, and to get out of Emacs, do <command xmlns:xlink="http://www.w3.org/1999/xlink">C-x C-c</command>
	(that means hold down the <keysym xmlns:xlink="http://www.w3.org/1999/xlink">control</keysym> key, press
	<keysym xmlns:xlink="http://www.w3.org/1999/xlink">x</keysym>, press <keysym xmlns:xlink="http://www.w3.org/1999/xlink">c</keysym> and release the
	<keysym xmlns:xlink="http://www.w3.org/1999/xlink">control</keysym> key).  If you have any unsaved files
	open, Emacs will ask you if you want to save them.  (Ignore
	the bit in the documentation where it says
	<command xmlns:xlink="http://www.w3.org/1999/xlink">C-z</command> is the usual way to leave
	Emacs&#8212;that leaves Emacs hanging around in the
	background, and is only really useful if you are on a system
	which does not have virtual terminals).</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Configuring Emacs</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Emacs does many wonderful things; some of them are built
	in, some of them need to be configured.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Instead of using a proprietary macro language for
	configuration, Emacs uses a version of Lisp specially adapted
	for editors, known as Emacs Lisp.  Working with Emacs Lisp can
	be quite helpful if you want to go on and learn something like
	Common Lisp.  Emacs Lisp has many features of Common Lisp,
	although it is considerably smaller (and thus easier to
	master).</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The best way to learn Emacs Lisp is to download the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="ftp://ftp.gnu.org/old-gnu/emacs/elisp-manual-19-2.4.tar.gz">Emacs
	  Tutorial</link></para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">However, there is no need to actually know any Lisp to get
	started with configuring Emacs, as I have included a sample
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">.emacs</filename> file, which should be enough to
	get you started.  Just copy it into your home directory and
	restart Emacs if it is already running; it will read the
	commands from the file and (hopefully) give you a useful basic
	setup.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">A sample <filename xmlns:xlink="http://www.w3.org/1999/xlink">.emacs</filename> file</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Unfortunately, there is far too much here to explain it in
	detail; however there are one or two points worth
	mentioning.</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Everything beginning with a <literal xmlns:xlink="http://www.w3.org/1999/xlink">;</literal> is a comment
	    and is ignored by Emacs.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">In the first line, the
	    <literal xmlns:xlink="http://www.w3.org/1999/xlink">-*- Emacs-Lisp -*-</literal> is so that
	    we can edit the <filename xmlns:xlink="http://www.w3.org/1999/xlink">.emacs</filename> file itself
	    within Emacs and get all the fancy features for editing
	    Emacs Lisp.  Emacs usually tries to guess this based on
	    the filename, and may not get it right for
	    <filename xmlns:xlink="http://www.w3.org/1999/xlink">.emacs</filename>.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">The <keysym xmlns:xlink="http://www.w3.org/1999/xlink">tab</keysym> key is bound to an
	    indentation function in some modes, so when you press the
	    tab key, it will indent the current line of code.  If you
	    want to put a <token xmlns:xlink="http://www.w3.org/1999/xlink">tab</token> character in whatever
	    you are writing, hold the <keysym xmlns:xlink="http://www.w3.org/1999/xlink">control</keysym> key down
	    while you are pressing the <keysym xmlns:xlink="http://www.w3.org/1999/xlink">tab</keysym> key.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">This file supports syntax highlighting for C, C++,
	    Perl, Lisp and Scheme, by guessing the language from the
	    filename.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Emacs already has a pre-defined function called
	    <function xmlns:xlink="http://www.w3.org/1999/xlink">next-error</function>.  In a compilation output
	    window, this allows you to move from one compilation error
	    to the next by doing <command xmlns:xlink="http://www.w3.org/1999/xlink">M-n</command>; we define a
	    complementary function,
	    <function xmlns:xlink="http://www.w3.org/1999/xlink">previous-error</function>, that allows you to go
	    to a previous error by doing <command xmlns:xlink="http://www.w3.org/1999/xlink">M-p</command>.  The
	    nicest feature of all is that <command xmlns:xlink="http://www.w3.org/1999/xlink">C-c C-c</command>
	    will open up the source file in which the error occurred
	    and jump to the appropriate line.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">We enable Emacs's ability to act as a server, so that
	    if you are doing something outside Emacs and you want to
	    edit a file, you can just type in</para>

	  <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">emacsclient <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">filename</replaceable></userinput>
	  </screen>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">and then you can edit the file in your
	    Emacs!

	    <footnote xmlns:xlink="http://www.w3.org/1999/xlink">
	      <para xmlns:xlink="http://www.w3.org/1999/xlink">Many Emacs users set their <envar xmlns:xlink="http://www.w3.org/1999/xlink">EDITOR</envar>
		environment to
		<literal xmlns:xlink="http://www.w3.org/1999/xlink">emacsclient</literal> so this happens every
		time they need to edit a file.</para>
	    </footnote></para>
	</listitem>
      </itemizedlist>

      <example xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">A sample <filename xmlns:xlink="http://www.w3.org/1999/xlink">.emacs</filename> file</title>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">;; -*-Emacs-Lisp-*-

;; This file is designed to be re-evaled; use the variable first-time
;; to avoid any problems with this.
(defvar first-time t
  "Flag signifying this is the first time that .emacs has been evaled")

;; Meta
(global-set-key "\M- " 'set-mark-command)
(global-set-key "\M-\C-h" 'backward-kill-word)
(global-set-key "\M-\C-r" 'query-replace)
(global-set-key "\M-r" 'replace-string)
(global-set-key "\M-g" 'goto-line)
(global-set-key "\M-h" 'help-command)

;; Function keys
(global-set-key [f1] 'manual-entry)
(global-set-key [f2] 'info)
(global-set-key [f3] 'repeat-complex-command)
(global-set-key [f4] 'advertised-undo)
(global-set-key [f5] 'eval-current-buffer)
(global-set-key [f6] 'buffer-menu)
(global-set-key [f7] 'other-window)
(global-set-key [f8] 'find-file)
(global-set-key [f9] 'save-buffer)
(global-set-key [f10] 'next-error)
(global-set-key [f11] 'compile)
(global-set-key [f12] 'grep)
(global-set-key [C-f1] 'compile)
(global-set-key [C-f2] 'grep)
(global-set-key [C-f3] 'next-error)
(global-set-key [C-f4] 'previous-error)
(global-set-key [C-f5] 'display-faces)
(global-set-key [C-f8] 'dired)
(global-set-key [C-f10] 'kill-compilation)

;; Keypad bindings
(global-set-key [up] "\C-p")
(global-set-key [down] "\C-n")
(global-set-key [left] "\C-b")
(global-set-key [right] "\C-f")
(global-set-key [home] "\C-a")
(global-set-key [end] "\C-e")
(global-set-key [prior] "\M-v")
(global-set-key [next] "\C-v")
(global-set-key [C-up] "\M-\C-b")
(global-set-key [C-down] "\M-\C-f")
(global-set-key [C-left] "\M-b")
(global-set-key [C-right] "\M-f")
(global-set-key [C-home] "\M-&lt;")
(global-set-key [C-end] "\M-&gt;")
(global-set-key [C-prior] "\M-&lt;")
(global-set-key [C-next] "\M-&gt;")

;; Mouse
(global-set-key [mouse-3] 'imenu)

;; Misc
(global-set-key [C-tab] "\C-q\t")	; Control tab quotes a tab.
(setq backup-by-copying-when-mismatch t)

;; Treat 'y' or &lt;CR&gt; as yes, 'n' as no.
(fset 'yes-or-no-p 'y-or-n-p)
(define-key query-replace-map [return] 'act)
(define-key query-replace-map [?\C-m] 'act)

;; Load packages
(require 'desktop)
(require 'tar-mode)

;; Pretty diff mode
(autoload 'ediff-buffers "ediff" "Intelligent Emacs interface to diff" t)
(autoload 'ediff-files "ediff" "Intelligent Emacs interface to diff" t)
(autoload 'ediff-files-remote "ediff"
  "Intelligent Emacs interface to diff")

(if first-time
    (setq auto-mode-alist
	  (append '(("\\.cpp$" . c++-mode)
		    ("\\.hpp$" . c++-mode)
		    ("\\.lsp$" . lisp-mode)
		    ("\\.scm$" . scheme-mode)
		    ("\\.pl$" . perl-mode)
		    ) auto-mode-alist)))

;; Auto font lock mode
(defvar font-lock-auto-mode-list
  (list 'c-mode 'c++-mode 'c++-c-mode 'emacs-lisp-mode 'lisp-mode 'perl-mode 'scheme-mode)
  "List of modes to always start in font-lock-mode")

(defvar font-lock-mode-keyword-alist
  '((c++-c-mode . c-font-lock-keywords)
    (perl-mode . perl-font-lock-keywords))
  "Associations between modes and keywords")

(defun font-lock-auto-mode-select ()
  "Automatically select font-lock-mode if the current major mode is in font-lock-auto-mode-list"
  (if (memq major-mode font-lock-auto-mode-list)
      (progn
	(font-lock-mode t))
    )
  )

(global-set-key [M-f1] 'font-lock-fontify-buffer)

;; New dabbrev stuff
;(require 'new-dabbrev)
(setq dabbrev-always-check-other-buffers t)
(setq dabbrev-abbrev-char-regexp "\\sw\\|\\s_")
(add-hook 'emacs-lisp-mode-hook
	  '(lambda ()
	     (set (make-local-variable 'dabbrev-case-fold-search) nil)
	     (set (make-local-variable 'dabbrev-case-replace) nil)))
(add-hook 'c-mode-hook
	  '(lambda ()
	     (set (make-local-variable 'dabbrev-case-fold-search) nil)
	     (set (make-local-variable 'dabbrev-case-replace) nil)))
(add-hook 'text-mode-hook
	  '(lambda ()
	     (set (make-local-variable 'dabbrev-case-fold-search) t)
	     (set (make-local-variable 'dabbrev-case-replace) t)))

;; C++ and C mode...
(defun my-c++-mode-hook ()
  (setq tab-width 4)
  (define-key c++-mode-map "\C-m" 'reindent-then-newline-and-indent)
  (define-key c++-mode-map "\C-ce" 'c-comment-edit)
  (setq c++-auto-hungry-initial-state 'none)
  (setq c++-delete-function 'backward-delete-char)
  (setq c++-tab-always-indent t)
  (setq c-indent-level 4)
  (setq c-continued-statement-offset 4)
  (setq c++-empty-arglist-indent 4))

(defun my-c-mode-hook ()
  (setq tab-width 4)
  (define-key c-mode-map "\C-m" 'reindent-then-newline-and-indent)
  (define-key c-mode-map "\C-ce" 'c-comment-edit)
  (setq c-auto-hungry-initial-state 'none)
  (setq c-delete-function 'backward-delete-char)
  (setq c-tab-always-indent t)
;; BSD-ish indentation style
  (setq c-indent-level 4)
  (setq c-continued-statement-offset 4)
  (setq c-brace-offset -4)
  (setq c-argdecl-indent 0)
  (setq c-label-offset -4))

;; Perl mode
(defun my-perl-mode-hook ()
  (setq tab-width 4)
  (define-key c++-mode-map "\C-m" 'reindent-then-newline-and-indent)
  (setq perl-indent-level 4)
  (setq perl-continued-statement-offset 4))

;; Scheme mode...
(defun my-scheme-mode-hook ()
  (define-key scheme-mode-map "\C-m" 'reindent-then-newline-and-indent))

;; Emacs-Lisp mode...
(defun my-lisp-mode-hook ()
  (define-key lisp-mode-map "\C-m" 'reindent-then-newline-and-indent)
  (define-key lisp-mode-map "\C-i" 'lisp-indent-line)
  (define-key lisp-mode-map "\C-j" 'eval-print-last-sexp))

;; Add all of the hooks...
(add-hook 'c++-mode-hook 'my-c++-mode-hook)
(add-hook 'c-mode-hook 'my-c-mode-hook)
(add-hook 'scheme-mode-hook 'my-scheme-mode-hook)
(add-hook 'emacs-lisp-mode-hook 'my-lisp-mode-hook)
(add-hook 'lisp-mode-hook 'my-lisp-mode-hook)
(add-hook 'perl-mode-hook 'my-perl-mode-hook)

;; Complement to next-error
(defun previous-error (n)
  "Visit previous compilation error message and corresponding source code."
  (interactive "p")
  (next-error (- n)))

;; Misc...
(transient-mark-mode 1)
(setq mark-even-if-inactive t)
(setq visible-bell nil)
(setq next-line-add-newlines nil)
(setq compile-command "make")
(setq suggest-key-bindings nil)
(put 'eval-expression 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'set-goal-column 'disabled nil)
(if (&gt;= emacs-major-version 21)
	(setq show-trailing-whitespace t))

;; Elisp archive searching
(autoload 'format-lisp-code-directory "lispdir" nil t)
(autoload 'lisp-dir-apropos "lispdir" nil t)
(autoload 'lisp-dir-retrieve "lispdir" nil t)
(autoload 'lisp-dir-verify "lispdir" nil t)

;; Font lock mode
(defun my-make-face (face color &amp;optional bold)
  "Create a face from a color and optionally make it bold"
  (make-face face)
  (copy-face 'default face)
  (set-face-foreground face color)
  (if bold (make-face-bold face))
  )

(if (eq window-system 'x)
    (progn
      (my-make-face 'blue "blue")
      (my-make-face 'red "red")
      (my-make-face 'green "dark green")
      (setq font-lock-comment-face 'blue)
      (setq font-lock-string-face 'bold)
      (setq font-lock-type-face 'bold)
      (setq font-lock-keyword-face 'bold)
      (setq font-lock-function-name-face 'red)
      (setq font-lock-doc-string-face 'green)
      (add-hook 'find-file-hooks 'font-lock-auto-mode-select)

      (setq baud-rate 1000000)
      (global-set-key "\C-cmm" 'menu-bar-mode)
      (global-set-key "\C-cms" 'scroll-bar-mode)
      (global-set-key [backspace] 'backward-delete-char)
					;      (global-set-key [delete] 'delete-char)
      (standard-display-european t)
      (load-library "iso-transl")))

;; X11 or PC using direct screen writes
(if window-system
    (progn
      ;;      (global-set-key [M-f1] 'hilit-repaint-command)
      ;;      (global-set-key [M-f2] [?\C-u M-f1])
      (setq hilit-mode-enable-list
	    '(not text-mode c-mode c++-mode emacs-lisp-mode lisp-mode
		  scheme-mode)
	    hilit-auto-highlight nil
	    hilit-auto-rehighlight 'visible
	    hilit-inhibit-hooks nil
	    hilit-inhibit-rebinding t)
      (require 'hilit19)
      (require 'paren))
  (setq baud-rate 2400)			; For slow serial connections
  )

;; TTY type terminal
(if (and (not window-system)
	 (not (equal system-type 'ms-dos)))
    (progn
      (if first-time
	  (progn
	    (keyboard-translate ?\C-h ?\C-?)
	    (keyboard-translate ?\C-? ?\C-h)))))

;; Under UNIX
(if (not (equal system-type 'ms-dos))
    (progn
      (if first-time
	  (server-start))))

;; Add any face changes here
(add-hook 'term-setup-hook 'my-term-setup-hook)
(defun my-term-setup-hook ()
  (if (eq window-system 'pc)
      (progn
;;	(set-face-background 'default "red")
	)))

;; Restore the "desktop" - do this as late as possible
(if first-time
    (progn
      (desktop-load-default)
      (desktop-read)))

;; Indicate that this file has been read at least once
(setq first-time nil)

;; No need to debug anything now

(setq debug-on-error nil)

;; All done
(message "All done, %s%s" (user-login-name) ".")
	</programlisting>
      </example>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Extending the Range of Languages Emacs Understands</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Now, this is all very well if you only want to program in
	the languages already catered for in the
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">.emacs</filename> file (C, C++, Perl, Lisp and
	Scheme), but what happens if a new language called
	<quote xmlns:xlink="http://www.w3.org/1999/xlink">whizbang</quote> comes out, full of exciting
	features?</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The first thing to do is find out if whizbang comes with
	any files that tell Emacs about the language.  These usually
	end in <filename xmlns:xlink="http://www.w3.org/1999/xlink">.el</filename>, short for <quote xmlns:xlink="http://www.w3.org/1999/xlink">Emacs
	  Lisp</quote>.  For example, if whizbang is a FreeBSD port, we
	can locate these files by doing</para>

      <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">find /usr/ports/lang/whizbang -name "*.el" -print</userinput></screen>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">and install them by copying them into the Emacs site Lisp
	directory.  On FreeBSD, this is
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/local/share/emacs/site-lisp</filename>.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">So for example, if the output from the find command
	was</para>

      <screen xmlns:xlink="http://www.w3.org/1999/xlink">/usr/ports/lang/whizbang/work/misc/whizbang.el</screen>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">we would do</para>

      <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cp /usr/ports/lang/whizbang/work/misc/whizbang.el /usr/local/share/emacs/site-lisp</userinput></screen>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Next, we need to decide what extension whizbang source
	files have.  Let's say for the sake of argument that they all
	end in <filename xmlns:xlink="http://www.w3.org/1999/xlink">.wiz</filename>.  We need to add an entry to
	our <filename xmlns:xlink="http://www.w3.org/1999/xlink">.emacs</filename> file to make sure Emacs will
	be able to use the information in
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">whizbang.el</filename>.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Find the <symbol xmlns:xlink="http://www.w3.org/1999/xlink">auto-mode-alist entry</symbol> in
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">.emacs</filename> and add a line for whizbang, such
	as:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><lineannotation xmlns:xlink="http://www.w3.org/1999/xlink">&#8230;</lineannotation>
("\\.lsp$" . lisp-mode)
("\\.wiz$" . whizbang-mode)
("\\.scm$" . scheme-mode)
<lineannotation xmlns:xlink="http://www.w3.org/1999/xlink">&#8230;</lineannotation></programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">This means that Emacs will automatically go into
	<function xmlns:xlink="http://www.w3.org/1999/xlink">whizbang-mode</function> when you edit a file ending
	in <filename xmlns:xlink="http://www.w3.org/1999/xlink">.wiz</filename>.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Just below this, you will find the
	<symbol xmlns:xlink="http://www.w3.org/1999/xlink">font-lock-auto-mode-list</symbol> entry.  Add
	<function xmlns:xlink="http://www.w3.org/1999/xlink">whizbang-mode</function> to it like so:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">;; Auto font lock mode
(defvar font-lock-auto-mode-list
  (list 'c-mode 'c++-mode 'c++-c-mode 'emacs-lisp-mode 'whizbang-mode 'lisp-mode 'perl-mode 'scheme-mode)
  "List of modes to always start in font-lock-mode")</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">This means that Emacs will always enable
	<function xmlns:xlink="http://www.w3.org/1999/xlink">font-lock-mode</function> (ie syntax highlighting)
	when editing a <filename xmlns:xlink="http://www.w3.org/1999/xlink">.wiz</filename> file.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">And that is all that is needed.  If there is anything else
	you want done automatically when you open up a
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">.wiz</filename> file, you can add a
	<function xmlns:xlink="http://www.w3.org/1999/xlink">whizbang-mode hook</function> (see
	<function xmlns:xlink="http://www.w3.org/1999/xlink">my-scheme-mode-hook</function> for a simple example
	that adds <function xmlns:xlink="http://www.w3.org/1999/xlink">auto-indent</function>).</para>
    </sect2>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="tools-reading">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Further Reading</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">For information about setting up a development environment
      for contributing fixes to FreeBSD itself, please see
      <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">development</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">7</manvolnum></citerefentry>.</para>

    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Brian Harvey and Matthew Wright
	  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">Simply Scheme</emphasis>
	  MIT 1994.<!-- <br> -->
	  ISBN 0-262-08226-8</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Randall Schwartz
	  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">Learning Perl</emphasis>
	  O'Reilly 1993<!-- <br> -->
	  ISBN 1-56592-042-2</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Patrick Henry Winston and Berthold Klaus Paul Horn
	  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">Lisp (3rd Edition)</emphasis>
	  Addison-Wesley 1989<!-- <br> -->
	  ISBN 0-201-08319-1</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Brian W. Kernighan and Rob Pike
	  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">The Unix Programming Environment</emphasis>
	  Prentice-Hall 1984<!-- <br> -->
	  ISBN 0-13-937681-X</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Brian W. Kernighan and Dennis M. Ritchie
	  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">The C Programming Language (2nd Edition)</emphasis>
	  Prentice-Hall 1988<!-- <br> -->
	  ISBN 0-13-110362-8</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Bjarne Stroustrup
	<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">The C++ Programming Language</emphasis>
	Addison-Wesley 1991<!-- <br> -->
	ISBN 0-201-53992-6</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">W. Richard Stevens
	  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">Advanced Programming in the Unix Environment</emphasis>
	  Addison-Wesley 1992<!-- <br> -->
	  ISBN 0-201-56317-7</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">W. Richard Stevens
	  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">Unix Network Programming</emphasis>
	  Prentice-Hall 1990<!-- <br> -->
	  ISBN 0-13-949876-1</para>
      </listitem>
    </itemizedlist>
  </sect1>

</chapter>

    
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="secure">
      <info><title xmlns:xlink="http://www.w3.org/1999/xlink">Secure Programming</title>
	<authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
	  <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Murray</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Stokely</surname></personname><contrib xmlns:xlink="http://www.w3.org/1999/xlink">Contributed by </contrib></author>
	</authorgroup>
      </info>

      

      <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="secure-synopsis"><title xmlns:xlink="http://www.w3.org/1999/xlink">Synopsis</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">This chapter describes some of the security issues that
      have plagued <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> programmers for decades and some of the new
      tools available to help programmers avoid writing exploitable
      code.</para>
      </sect1>

      <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="secure-philosophy"><title xmlns:xlink="http://www.w3.org/1999/xlink">Secure Design
      Methodology</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Writing secure applications takes a very scrutinous and
      pessimistic outlook on life.  Applications should be run with
      the principle of <quote xmlns:xlink="http://www.w3.org/1999/xlink">least privilege</quote> so that no
      process is ever running with more than the bare minimum access
      that it needs to accomplish its function.  Previously tested
      code should be reused whenever possible to avoid common
      mistakes that others may have already fixed.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">One of the pitfalls of the <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> environment is how easy it
      is to make assumptions about the sanity of the environment.
      Applications should never trust user input (in all its forms),
      system resources, inter-process communication, or the timing of
      events.  <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> processes do not execute synchronously so logical
      operations are rarely atomic.</para>
      </sect1>

      <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="secure-bufferov"><title xmlns:xlink="http://www.w3.org/1999/xlink">Buffer Overflows</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Buffer Overflows have been around since the very
      beginnings of the Von-Neuman <xref xmlns:xlink="http://www.w3.org/1999/xlink" linkend="COD"/> architecture.

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">buffer overflow</primary></indexterm>
      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">Von-Neuman</primary></indexterm>

      They first gained widespread notoriety in 1988 with the Morris
      Internet worm.  Unfortunately, the same basic attack remains

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">Morris Internet worm</primary></indexterm>

      effective today.
      By far the most common type of buffer overflow attack is based
      on corrupting the stack.</para>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">stack</primary></indexterm>
      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">arguments</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Most modern computer systems use a stack to pass arguments
      to procedures and to store local variables.  A stack is a last
      in first out (LIFO) buffer in the high memory area of a process
      image.  When a program invokes a function a new "stack frame" is

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">LIFO</primary></indexterm>
      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink">
        <primary xmlns:xlink="http://www.w3.org/1999/xlink">process image</primary>
	  <secondary xmlns:xlink="http://www.w3.org/1999/xlink">stack pointer</secondary>
      </indexterm>

      created.  This stack frame consists of the arguments passed to
      the function as well as a dynamic amount of local variable
      space.  The "stack pointer" is a register that holds the current

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">stack frame</primary></indexterm>
      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">stack pointer</primary></indexterm>

      location of the top of the stack.  Since this value is
      constantly changing as new values are pushed onto the top of the
      stack, many implementations also provide a "frame pointer" that
      is located near the beginning of a stack frame so that local
      variables can more easily be addressed relative to this
      value. <xref xmlns:xlink="http://www.w3.org/1999/xlink" linkend="COD"/> The return address for function

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">frame pointer</primary></indexterm>
      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink">
        <primary xmlns:xlink="http://www.w3.org/1999/xlink">process image</primary>
        <secondary xmlns:xlink="http://www.w3.org/1999/xlink">frame pointer</secondary>
      </indexterm>
      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">return address</primary></indexterm>
      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">stack-overflow</primary></indexterm>

      calls is also stored on the stack, and this is the cause of
      stack-overflow exploits since overflowing a local variable in a
      function can overwrite the return address of that function,
      potentially allowing a malicious user to execute any code he or
      she wants.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Although stack-based attacks are by far the most common,
      it would also be possible to overrun the stack with a heap-based
      (malloc/free) attack.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The C programming language does not perform automatic
      bounds checking on arrays or pointers as many other languages
      do.  In addition, the standard C library is filled with a
      handful of very dangerous functions.</para>

      <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
        <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="2">
          <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
          <row xmlns:xlink="http://www.w3.org/1999/xlink"><entry xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">strcpy</function>(char *dest, const char
          *src)</entry>
          <entry xmlns:xlink="http://www.w3.org/1999/xlink"><simpara xmlns:xlink="http://www.w3.org/1999/xlink">May overflow the dest buffer</simpara></entry>
          </row>

          <row xmlns:xlink="http://www.w3.org/1999/xlink"><entry xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">strcat</function>(char *dest, const char
          *src)</entry>
          <entry xmlns:xlink="http://www.w3.org/1999/xlink"><simpara xmlns:xlink="http://www.w3.org/1999/xlink">May overflow the dest buffer</simpara></entry>
          </row>

          <row xmlns:xlink="http://www.w3.org/1999/xlink"><entry xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">getwd</function>(char *buf)</entry>
          <entry xmlns:xlink="http://www.w3.org/1999/xlink"><simpara xmlns:xlink="http://www.w3.org/1999/xlink">May overflow the buf buffer</simpara></entry>
          </row>

          <row xmlns:xlink="http://www.w3.org/1999/xlink"><entry xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">gets</function>(char *s)</entry>
          <entry xmlns:xlink="http://www.w3.org/1999/xlink"><simpara xmlns:xlink="http://www.w3.org/1999/xlink">May overflow the s buffer</simpara></entry>
          </row>

          <row xmlns:xlink="http://www.w3.org/1999/xlink"><entry xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">[vf]scanf</function>(const char *format,
          ...)</entry>
          <entry xmlns:xlink="http://www.w3.org/1999/xlink"><simpara xmlns:xlink="http://www.w3.org/1999/xlink">May overflow its arguments.</simpara></entry>
          </row>

          <row xmlns:xlink="http://www.w3.org/1999/xlink"><entry xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">realpath</function>(char *path, char
          resolved_path[])</entry>
          <entry xmlns:xlink="http://www.w3.org/1999/xlink"><simpara xmlns:xlink="http://www.w3.org/1999/xlink">May overflow the path buffer</simpara></entry>
          </row>

          <row xmlns:xlink="http://www.w3.org/1999/xlink"><entry xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">[v]sprintf</function>(char *str, const char
          *format, ...)</entry>
          <entry xmlns:xlink="http://www.w3.org/1999/xlink"><simpara xmlns:xlink="http://www.w3.org/1999/xlink">May overflow the str buffer.</simpara></entry>
          </row>
          </tbody>
        </tgroup>
      </informaltable>

      <sect2 xmlns:xlink="http://www.w3.org/1999/xlink"><title xmlns:xlink="http://www.w3.org/1999/xlink">Example Buffer Overflow</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The following example code contains a buffer overflow
      designed to overwrite the return address and skip the
      instruction immediately following the function call.  (Inspired
      by <xref xmlns:xlink="http://www.w3.org/1999/xlink" linkend="Phrack"/>)</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">#include &lt;stdio.h&gt;

void manipulate(char *buffer) {
  char newbuffer[80];
  strcpy(newbuffer,buffer);
}

int main() {
  char ch,buffer[4096];
  int i=0;

  while ((buffer[i++] = getchar()) != '\n') {};

  i=1;
  manipulate(buffer);
  i=2;
  printf("The value of i is : %d\n",i);
  return 0;
}</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Let us examine what the memory image of this process would
      look like if we were to input 160 spaces into our little program
      before hitting return.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">[XXX figure here!]</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Obviously more malicious input can be devised to execute
      actual compiled instructions (such as exec(/bin/sh)).</para>
      </sect2>

      <sect2 xmlns:xlink="http://www.w3.org/1999/xlink"><title xmlns:xlink="http://www.w3.org/1999/xlink">Avoiding Buffer Overflows</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The most straightforward solution to the problem of
      stack-overflows is to always use length restricted memory and
      string copy functions.  <function xmlns:xlink="http://www.w3.org/1999/xlink">strncpy</function> and
      <function xmlns:xlink="http://www.w3.org/1999/xlink">strncat</function> are part of the standard C library.

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink">
        <primary xmlns:xlink="http://www.w3.org/1999/xlink">string copy functions</primary>
	  <secondary xmlns:xlink="http://www.w3.org/1999/xlink">strncpy</secondary>
      </indexterm>
      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink">
        <primary xmlns:xlink="http://www.w3.org/1999/xlink">string copy functions</primary>
	  <secondary xmlns:xlink="http://www.w3.org/1999/xlink">strncat</secondary>
      </indexterm>

      These functions accept a length value as a parameter which
      should be no larger than the size of the destination buffer.
      These functions will then copy up to `length' bytes from the
      source to the destination.  However there are a number of
      problems with these functions.  Neither function guarantees NUL
      termination if the size of the input buffer is as large as the

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">NUL termination</primary></indexterm>

      destination.  The length parameter is also used inconsistently
      between strncpy and strncat so it is easy for programmers to get
      confused as to their proper usage.  There is also a significant
      performance loss compared to <function xmlns:xlink="http://www.w3.org/1999/xlink">strcpy</function> when
      copying a short string into a large buffer since
      <function xmlns:xlink="http://www.w3.org/1999/xlink">strncpy</function> NUL fills up the size
      specified.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Another memory copy implementation exists
      to get around these problems.  The
      <function xmlns:xlink="http://www.w3.org/1999/xlink">strlcpy</function> and <function xmlns:xlink="http://www.w3.org/1999/xlink">strlcat</function>
      functions guarantee that they will always null terminate the
      destination string when given a non-zero length argument.</para>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink">
        <primary xmlns:xlink="http://www.w3.org/1999/xlink">string copy functions</primary>
	  <secondary xmlns:xlink="http://www.w3.org/1999/xlink">strlcpy</secondary>
      </indexterm>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink">
	<primary xmlns:xlink="http://www.w3.org/1999/xlink">string copy functions</primary>
          <secondary xmlns:xlink="http://www.w3.org/1999/xlink">strlcat</secondary>
      </indexterm>

        <sect3 xmlns:xlink="http://www.w3.org/1999/xlink"><title xmlns:xlink="http://www.w3.org/1999/xlink">Compiler based run-time bounds checking</title>

	<indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">bounds checking</primary>
	<secondary xmlns:xlink="http://www.w3.org/1999/xlink">compiler-based</secondary></indexterm>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Unfortunately there is still a very large assortment of
        code in public use which blindly copies memory around without
        using any of the bounded copy routines we just discussed.
        Fortunately, there is a way to help prevent such attacks &#8212;
        run-time bounds checking, which is implemented by several
        C/C++ compilers.</para>

	<indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">ProPolice</primary></indexterm>
	<indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">StackGuard</primary></indexterm>
	<indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">gcc</primary></indexterm>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">ProPolice is one such compiler feature, and is integrated
	  into <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">gcc</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">1</manvolnum></citerefentry> versions 4.1 and later.  It replaces and
	  extends the earlier StackGuard <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">gcc</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">1</manvolnum></citerefentry> extension.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">ProPolice helps to protect against stack-based buffer
	  overflows and other attacks by laying pseudo-random numbers in
	  key areas of the stack before calling any function.  When a
	  function returns, these <quote xmlns:xlink="http://www.w3.org/1999/xlink">canaries</quote> are checked
	  and if they are found to have been changed the executable is
	  immediately aborted.  Thus any attempt to modify the return
	  address or other variable stored on the stack in an attempt to
	  get malicious code to run is unlikely to succeed, as the
	  attacker would have to also manage to leave the pseudo-random
	  canaries untouched.</para>

        <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">buffer overflow</primary></indexterm>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Recompiling your application with ProPolice is an
        effective means of stopping most buffer-overflow attacks, but
        it can still be compromised.</para>

        </sect3>

        <sect3 xmlns:xlink="http://www.w3.org/1999/xlink"><title xmlns:xlink="http://www.w3.org/1999/xlink">Library based run-time bounds checking</title>

  	<indexterm xmlns:xlink="http://www.w3.org/1999/xlink">
	  <primary xmlns:xlink="http://www.w3.org/1999/xlink">bounds checking</primary>
	  <secondary xmlns:xlink="http://www.w3.org/1999/xlink">library-based</secondary>
	</indexterm>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Compiler-based mechanisms are completely useless for
        binary-only software for which you cannot recompile.  For
        these situations there are a number of libraries which
        re-implement the unsafe functions of the C-library
        (<function xmlns:xlink="http://www.w3.org/1999/xlink">strcpy</function>, <function xmlns:xlink="http://www.w3.org/1999/xlink">fscanf</function>,
        <function xmlns:xlink="http://www.w3.org/1999/xlink">getwd</function>, etc..) and ensure that these
        functions can never write past the stack pointer.</para>

        <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
        <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><simpara xmlns:xlink="http://www.w3.org/1999/xlink">libsafe</simpara></listitem>
        <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><simpara xmlns:xlink="http://www.w3.org/1999/xlink">libverify</simpara></listitem>
        <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><simpara xmlns:xlink="http://www.w3.org/1999/xlink">libparanoia</simpara></listitem>
        </itemizedlist>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Unfortunately these library-based defenses have a number
        of shortcomings.  These libraries only protect against a very
        small set of security related issues and they neglect to fix
        the actual problem.  These defenses may fail if the
        application was compiled with -fomit-frame-pointer.  Also, the
        LD_PRELOAD and LD_LIBRARY_PATH environment variables can be
        overwritten/unset by the user.</para>
        </sect3>

        </sect2>
      </sect1>

      <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="secure-setuid"><title xmlns:xlink="http://www.w3.org/1999/xlink">SetUID issues</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">seteuid</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">There are at least 6 different IDs associated with any
      given process.  Because of this you have to be very careful with
      the access that your process has at any given time.  In
      particular, all seteuid applications should give up their
      privileges as soon as it is no longer required.</para>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink">
        <primary xmlns:xlink="http://www.w3.org/1999/xlink">user IDs</primary>
          <secondary xmlns:xlink="http://www.w3.org/1999/xlink">real user ID</secondary>
      </indexterm>
      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink">
        <primary xmlns:xlink="http://www.w3.org/1999/xlink">user IDs</primary>
          <secondary xmlns:xlink="http://www.w3.org/1999/xlink">effective user ID</secondary>
      </indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The real user ID can only be changed by a superuser
      process.  The <application xmlns:xlink="http://www.w3.org/1999/xlink">login</application> program sets this
      when a user initially logs in and it is seldom changed.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The effective user ID is set by the
      <function xmlns:xlink="http://www.w3.org/1999/xlink">exec()</function> functions if a program has its
      seteuid bit set.  An application can call
      <function xmlns:xlink="http://www.w3.org/1999/xlink">seteuid()</function> at any time to set the effective
      user ID to either the real user ID or the saved set-user-ID.
      When the effective user ID is set by <function xmlns:xlink="http://www.w3.org/1999/xlink">exec()</function>
      functions, the previous value is saved in the saved set-user-ID.</para>

      </sect1>

      <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="secure-chroot"><title xmlns:xlink="http://www.w3.org/1999/xlink">Limiting your program's environment</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">chroot()</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The traditional method of restricting a process
      is with the <function xmlns:xlink="http://www.w3.org/1999/xlink">chroot()</function> system call.  This
      system call changes the root directory from which all other
      paths are referenced for a process and any child processes.  For
      this call to succeed the process must have execute (search)
      permission on the directory being referenced.  The new
      environment does not actually take effect until you
      <function xmlns:xlink="http://www.w3.org/1999/xlink">chdir()</function> into your new environment.  It
      should also be noted that a process can easily break out of a
      chroot environment if it has root privilege.  This could be
      accomplished by creating device nodes to read kernel memory,
      attaching a debugger to a process outside of the <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">chroot</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry>
      environment, or in
      many other creative ways.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The behavior of the <function xmlns:xlink="http://www.w3.org/1999/xlink">chroot()</function> system
      call can be controlled somewhat with the
      kern.chroot_allow_open_directories <command xmlns:xlink="http://www.w3.org/1999/xlink">sysctl</command>
      variable.  When this value is set to 0,
      <function xmlns:xlink="http://www.w3.org/1999/xlink">chroot()</function> will fail with EPERM if there are
      any directories open.  If set to the default value of 1, then
      <function xmlns:xlink="http://www.w3.org/1999/xlink">chroot()</function> will fail with EPERM if there are
      any directories open and the process is already subject to a
      <function xmlns:xlink="http://www.w3.org/1999/xlink">chroot()</function> call.  For any other value, the
      check for open directories will be bypassed completely.</para>

      <sect2 xmlns:xlink="http://www.w3.org/1999/xlink"><title xmlns:xlink="http://www.w3.org/1999/xlink">FreeBSD's jail functionality</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">jail</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The concept of a Jail extends upon the
      <function xmlns:xlink="http://www.w3.org/1999/xlink">chroot()</function> by limiting the powers of the
      superuser to create a true `virtual server'.  Once a prison is
      set up all network communication must take place through the
      specified IP address, and the power of "root privilege" in this
      jail is severely constrained.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">While in a prison, any tests of superuser power within the
      kernel using the <function xmlns:xlink="http://www.w3.org/1999/xlink">suser()</function> call will fail.
      However, some calls to <function xmlns:xlink="http://www.w3.org/1999/xlink">suser()</function> have been
      changed to a new interface <function xmlns:xlink="http://www.w3.org/1999/xlink">suser_xxx()</function>.
      This function is responsible for recognizing or denying access
      to superuser power for imprisoned processes.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">A superuser process within a jailed environment has the
      power to:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><simpara xmlns:xlink="http://www.w3.org/1999/xlink">Manipulate credential with
        <function xmlns:xlink="http://www.w3.org/1999/xlink">setuid</function>, <function xmlns:xlink="http://www.w3.org/1999/xlink">seteuid</function>,
        <function xmlns:xlink="http://www.w3.org/1999/xlink">setgid</function>, <function xmlns:xlink="http://www.w3.org/1999/xlink">setegid</function>,
        <function xmlns:xlink="http://www.w3.org/1999/xlink">setgroups</function>, <function xmlns:xlink="http://www.w3.org/1999/xlink">setreuid</function>,
        <function xmlns:xlink="http://www.w3.org/1999/xlink">setregid</function>, <function xmlns:xlink="http://www.w3.org/1999/xlink">setlogin</function></simpara></listitem>
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><simpara xmlns:xlink="http://www.w3.org/1999/xlink">Set resource limits with <function xmlns:xlink="http://www.w3.org/1999/xlink">setrlimit</function></simpara></listitem>
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><simpara xmlns:xlink="http://www.w3.org/1999/xlink">Modify some sysctl nodes
        (kern.hostname)</simpara></listitem>
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><simpara xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">chroot()</function></simpara></listitem>
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><simpara xmlns:xlink="http://www.w3.org/1999/xlink">Set flags on a vnode:
        <function xmlns:xlink="http://www.w3.org/1999/xlink">chflags</function>,
        <function xmlns:xlink="http://www.w3.org/1999/xlink">fchflags</function></simpara></listitem>
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><simpara xmlns:xlink="http://www.w3.org/1999/xlink">Set attributes of a vnode such as file
        permission, owner, group, size, access time, and modification
        time.</simpara></listitem>
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><simpara xmlns:xlink="http://www.w3.org/1999/xlink">Bind to privileged ports in the Internet
        domain (ports &lt; 1024)</simpara></listitem>
      </itemizedlist>

      <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">Jail</function> is a very useful tool for
      running applications in a secure environment but it does have
      some shortcomings.  Currently, the IPC mechanisms have not been
      converted to the <function xmlns:xlink="http://www.w3.org/1999/xlink">suser_xxx</function> so applications
      such as MySQL cannot be run within a jail.  Superuser access
      may have a very limited meaning within a jail, but there is
      no way to specify exactly what "very limited" means.</para>
      </sect2>

      <sect2 xmlns:xlink="http://www.w3.org/1999/xlink"><title xmlns:xlink="http://www.w3.org/1999/xlink"><trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">POSIX</trademark>.1e Process Capabilities</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">POSIX.1e Process Capabilities</primary></indexterm>
      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">TrustedBSD</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink"><trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">POSIX</trademark> has released a working draft that adds event
      auditing, access control lists, fine grained privileges,
      information labeling, and mandatory access control.</para>
      <para xmlns:xlink="http://www.w3.org/1999/xlink">This is a work in progress and is the focus of the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.trustedbsd.org/">TrustedBSD</link> project.  Some
      of the initial work has been committed to FreeBSD-CURRENT
      (cap_set_proc(3)).</para>

      </sect2>

      </sect1>

      <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="secure-trust"><title xmlns:xlink="http://www.w3.org/1999/xlink">Trust</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">An application should never assume that anything about the
      users environment is sane.  This includes (but is certainly not
      limited to): user input, signals, environment variables,
      resources, IPC, mmaps, the filesystem working directory, file
      descriptors, the # of open files, etc.</para>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">positive filtering</primary></indexterm>
      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">data validation</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">You should never assume that you can catch all forms of
      invalid input that a user might supply.  Instead, your
      application should use positive filtering to only allow a
      specific subset of inputs that you deem safe.  Improper data
      validation has been the cause of many exploits, especially with
      CGI scripts on the world wide web.  For filenames you need to be
      extra careful about paths ("../", "/"), symbolic links, and
      shell escape characters.</para>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">Perl Taint mode</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Perl has a really cool feature called "Taint" mode which
      can be used to prevent scripts from using data derived outside
      the program in an unsafe way.  This mode will check command line
      arguments, environment variables, locale information, the
      results of certain syscalls (<function xmlns:xlink="http://www.w3.org/1999/xlink">readdir()</function>,
      <function xmlns:xlink="http://www.w3.org/1999/xlink">readlink()</function>,
      <function xmlns:xlink="http://www.w3.org/1999/xlink">getpwxxx()</function>), and all file input.</para>

      </sect1>

      <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="secure-race-conditions">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Race Conditions</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">A race condition is anomalous behavior caused by the
      unexpected dependence on the relative timing of events.  In
      other words, a programmer incorrectly assumed that a particular
      event would always happen before another.</para>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">race conditions</primary>
      <secondary xmlns:xlink="http://www.w3.org/1999/xlink">signals</secondary></indexterm>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">race conditions</primary>
      <secondary xmlns:xlink="http://www.w3.org/1999/xlink">access checks</secondary></indexterm>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">race conditions</primary>
      <secondary xmlns:xlink="http://www.w3.org/1999/xlink">file opens</secondary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Some of the common causes of race conditions are signals,
      access checks, and file opens.  Signals are asynchronous events
      by nature so special care must be taken in dealing with them.
      Checking access with <function xmlns:xlink="http://www.w3.org/1999/xlink">access(2)</function> then
      <function xmlns:xlink="http://www.w3.org/1999/xlink">open(2)</function> is clearly non-atomic.  Users can
      move files in between the two calls.  Instead, privileged
      applications should <function xmlns:xlink="http://www.w3.org/1999/xlink">seteuid()</function> and then call
      <function xmlns:xlink="http://www.w3.org/1999/xlink">open()</function> directly.  Along the same lines, an
      application should always set a proper umask before
      <function xmlns:xlink="http://www.w3.org/1999/xlink">open()</function> to obviate the need for spurious
      <function xmlns:xlink="http://www.w3.org/1999/xlink">chmod()</function> calls.</para>

      </sect1>

     </chapter>

    
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="l10n">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Localization and Internationalization - L10N and I18N</title>

    <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="l10n-programming">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Programming I18N Compliant Applications</title>
      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">Qt</primary></indexterm>
      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">GTK</primary></indexterm>
      <para xmlns:xlink="http://www.w3.org/1999/xlink">To make your application more useful for speakers of other
	languages, we hope that you will program I18N compliant.  The GNU
	gcc compiler and GUI libraries like QT and GTK support I18N through
	special handling of strings.  Making a program I18N compliant is
	very easy.  It allows contributors to port your application to
	other languages quickly.  Refer to the library specific I18N
	documentation for more details.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">In contrast with common perception, I18N compliant code is
	easy to write.  Usually, it only involves wrapping your strings
	with library specific functions.  In addition, please be sure to
	allow for wide or multibyte character support.</para>

      <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">A Call to Unify the I18N Effort</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">It has come to our attention that the individual I18N/L10N
	  efforts for each country has been repeating each others'
	  efforts.  Many of us have been reinventing the wheel repeatedly
	  and inefficiently.  We hope that the various major groups in
	  I18N could congregate into a group effort similar to the Core
	  Team's responsibility.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Currently, we hope that, when you write or port I18N
	  programs, you would send it out to each country's related
	  FreeBSD mailing list for testing.  In the future, we hope to
	  create applications that work in all the languages
	  out-of-the-box without dirty hacks.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The <link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://lists.FreeBSD.org/mailman/listinfo/freebsd-i18n">FreeBSD internationalization mailing list</link> has been established.  If you are an I18N/L10N
	  developer, please send your comments, ideas, questions, and
	  anything you deem related to it.</para>
      </sect2>

      <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Perl and Python</title>
        <indexterm xmlns:xlink="http://www.w3.org/1999/xlink">
         <primary xmlns:xlink="http://www.w3.org/1999/xlink">Perl</primary>
        </indexterm>
        <indexterm xmlns:xlink="http://www.w3.org/1999/xlink">
          <primary xmlns:xlink="http://www.w3.org/1999/xlink">Python</primary>
        </indexterm>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Perl and Python have I18N and wide character handling
	  libraries.  Please use them for I18N compliance.</para>
      </sect2>
    </sect1>

    <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="posix-nls">
      <info><title xmlns:xlink="http://www.w3.org/1999/xlink">Localized Messages with POSIX.1 Native Language Support (NLS)</title>
	<authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
	  <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Gábor</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Kövesdán</surname></personname><contrib xmlns:xlink="http://www.w3.org/1999/xlink">Contributed by </contrib></author>
	</authorgroup>
      </info>

      

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Beyond the basic I18N functions, like supporting various input
	encodings or supporting national conventions, such as the different
	decimal	separators, at a higher level of I18N, it is possible to localize the
	messages written to the output by the various programs.  A common way of doing
	this is using the POSIX.1 NLS functions, which are provided as a part
	of the FreeBSD base system.</para>

      <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="nls-catalogs">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Organizing Localized Messages into Catalog Files</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">POSIX.1 NLS is based on catalog files, which contain the
	  localized messages in the desired encoding.  The messages are
	  organized into sets and each message is identified by an integer
	  number in the containing set.  The catalog files are conventionally
	  named after the locale they contain localized messages for, followed
	  by the <literal xmlns:xlink="http://www.w3.org/1999/xlink">.msg</literal> extension.  For instance, the
	  Hungarian messages for ISO8859-2 encoding should be stored in a file
	  called <filename xmlns:xlink="http://www.w3.org/1999/xlink">hu_HU.ISO8859-2</filename>.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">These catalog files are common text files that contain the
	  numbered messages.  It is possible to write comments by starting
	  the line with a <literal xmlns:xlink="http://www.w3.org/1999/xlink">$</literal> sign.  Set boundaries are also separated by
	  special comments, where the keyword <literal xmlns:xlink="http://www.w3.org/1999/xlink">set</literal> must
	  directly follow the <literal xmlns:xlink="http://www.w3.org/1999/xlink">$</literal> sign.  The <literal xmlns:xlink="http://www.w3.org/1999/xlink">set</literal> keyword
	  is then followed by the set number.  For example:</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">$set 1</programlisting>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The actual message entries start with the message number and
	  followed by the localized message.  The well-known
	  modifiers from <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">printf</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry> are accepted:</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">15 "File not found: %s\n"</programlisting>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The language catalog files have to be compiled into a binary
	  form before they can be opened from the program.  This conversion
	  is done with the <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">gencat</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">1</manvolnum></citerefentry> utility.  Its first argument is the
	  filename of the compiled catalog and its further arguments are the
	  input catalogs.  The localized messages can also be organized into
	  more catalog files and then all of them can be processed with
	  <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">gencat</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">1</manvolnum></citerefentry>.</para>
      </sect2>

      <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="nls-using">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Using the Catalog Files from the Source Code</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Using the catalog files is simple.  To use
	  the related functions, <filename xmlns:xlink="http://www.w3.org/1999/xlink">nl_types.h</filename> must be included.  Before
	  using a catalog, it has to be opened with <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">catopen</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry>.
	  The function takes two arguments.  The first parameter is the name of the
	  installed and compiled catalog.  Usually, the name of the
	  program is used, such as <application xmlns:xlink="http://www.w3.org/1999/xlink">grep</application>.
	  This name will be used when looking for the compiled
	  catalog file.  The <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">catopen</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry> call looks for this file
	  in <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/share/nls/<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">locale</replaceable>/<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">catname</replaceable></filename>
	  and in <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/local/share/nls/<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">locale</replaceable>/<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">catname</replaceable></filename>,
	  where <literal xmlns:xlink="http://www.w3.org/1999/xlink">locale</literal> is the locale set and
	  <literal xmlns:xlink="http://www.w3.org/1999/xlink">catname</literal> is the catalog name being
	  discussed.  The second parameter is a constant, which can have
	  two values:</para>

	<itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">NL_CAT_LOCALE</literal>, which means that
	      the used catalog file will be based on
	      <envar xmlns:xlink="http://www.w3.org/1999/xlink">LC_MESSAGES</envar>.</para>
	  </listitem>
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">0</literal>, which means that
	      <envar xmlns:xlink="http://www.w3.org/1999/xlink">LANG</envar> has to be used to open
	      the proper catalog.</para>
	  </listitem>
	</itemizedlist>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">catopen</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry> call returns a catalog identifier of
	  type <literal xmlns:xlink="http://www.w3.org/1999/xlink">nl_catd</literal>.  Please refer to the manual page for a list of possible returned error
	  codes.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">After opening a catalog <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">catgets</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry> can be used to retrieve
	  a message.  The first parameter is the catalog identifier returned
	  by <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">catopen</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry>, the second one is the number of the set, the
	  third one is the number of the messages, and the fourth one is a
	  fallback message, which will be returned if the requested message
	  cannot be retrieved from the catalog file.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">After using the catalog file, it must be closed by calling
	  <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">catclose</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry>, which has one argument, the catalog id.</para>
      </sect2>

      <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="nls-example">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">A Practical Example</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The following example will demonstrate an easy solution on how to
	  use NLS catalogs in a flexible way.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The below lines need to be put into a common header file of
	  the program, which is included into all source files where
	  localized messages are necessary:</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
#ifdef WITHOUT_NLS
#define getstr(n)	 nlsstr[n]
#else
#include &lt;nl_types.h&gt;

extern nl_catd		 catalog;
#define getstr(n)	 catgets(catalog, 1, n, nlsstr[n])
#endif

extern char		*nlsstr[];</programlisting>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Next, put these lines into the global declaration part of the
	  main source file:</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
#ifndef WITHOUT_NLS
#include &lt;nl_types.h&gt;
nl_catd	 catalog;
#endif

/*
 * Default messages to use when NLS is disabled or no catalog
 * is found.
 */
char    *nlsstr[] = {
        "",
/* 1*/  "some random message",
/* 2*/  "some other message"
};</programlisting>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Next come the real code snippets, which open, read, and
	  close the catalog:</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
#ifndef WITHOUT_NLS
	catalog = catopen("myapp", NL_CAT_LOCALE);
#endif

...

printf(getstr(1));

...

#ifndef WITHOUT_NLS
	catclose(catalog);
#endif</programlisting>

	<sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
	  <title xmlns:xlink="http://www.w3.org/1999/xlink">Reducing Strings to Localize</title>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">There is a good way of reducing the strings that
	    need to be localized by using <application xmlns:xlink="http://www.w3.org/1999/xlink">libc</application>
	    error messages.  This is also useful to just avoid duplication
	    and provide consistent error messages for the common errors
	    that can be encountered by a great many of programs.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">First, here is an example that does not use
	    <application xmlns:xlink="http://www.w3.org/1999/xlink">libc</application> error messages:</para>

	  <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
#include &lt;err.h&gt;
...
if (!S_ISDIR(st.st_mode))
	errx(1, "argument is not a directory");
	  </programlisting>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">This can be transformed to print an error message by
	    reading <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> and printing an error message
	    accordingly:</para>

	  <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
#include &lt;err.h&gt;
#include &lt;errno.h&gt;
...
if (!S_ISDIR(st.st_mode)) {
	errno = ENOTDIR;
	err(1, NULL);
}
	  </programlisting>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">In this example, the custom string is eliminated, thus
	    translators will have less work when localizing the program
	    and users will see the usual <quote xmlns:xlink="http://www.w3.org/1999/xlink">Not a directory</quote>
	    error message when they encounter this error.  This message
	    will probably seem more familiar to them.  Please note that
	    it was necessary to include <filename xmlns:xlink="http://www.w3.org/1999/xlink">errno.h</filename> in order to directly
	    access <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname>.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">It is worth to note that there are cases when
	    <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> is set automatically by a preceding
	    call, so it is not necessary to set it explicitly:</para>

	  <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
#include &lt;err.h&gt;
...
if ((p = malloc(size)) == NULL)
	err(1, NULL);
	  </programlisting>
	</sect3>
      </sect2>

      <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="nls-mk">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Making use of <filename xmlns:xlink="http://www.w3.org/1999/xlink">bsd.nls.mk</filename></title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Using the catalog files requires few repeatable steps,
	  such as compiling the catalogs and installing them to the
	  proper location.  In order to simplify this process even
	  more, <filename xmlns:xlink="http://www.w3.org/1999/xlink">bsd.nls.mk</filename> introduces some macros.
	  It is not necessary to include <filename xmlns:xlink="http://www.w3.org/1999/xlink">bsd.nls.mk</filename>
	  explicitly, it is pulled in from the common Makefiles,
	  such as <filename xmlns:xlink="http://www.w3.org/1999/xlink">bsd.prog.mk</filename> or
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">bsd.lib.mk</filename>.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Usually it is enough to define <varname xmlns:xlink="http://www.w3.org/1999/xlink">NLSNAME</varname>,
	  which should have the catalog name mentioned as the first
	  argument of <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">catopen</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry> and list the catalog files in
	  <varname xmlns:xlink="http://www.w3.org/1999/xlink">NLS</varname> without their <literal xmlns:xlink="http://www.w3.org/1999/xlink">.msg</literal>
	  extension.  Here is an example, which makes it possible to
	  to disable NLS when used with the code examples before.
	  The <varname xmlns:xlink="http://www.w3.org/1999/xlink">WITHOUT_NLS</varname> <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">make</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">1</manvolnum></citerefentry> variable has
	  to be defined in order to build the program without NLS
	  support.</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
.if !defined(WITHOUT_NLS)
NLS=	es_ES.ISO8859-1
NLS+=	hu_HU.ISO8859-2
NLS+=	pt_BR.ISO8859-1
.else
CFLAGS+=	-DWITHOUT_NLS
.endif</programlisting>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Conventionally, the catalog files are placed under the
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">nls</filename> subdirectory and
	  this is the default behaviour of <filename xmlns:xlink="http://www.w3.org/1999/xlink">bsd.nls.mk</filename>.
	  It is possible, though to override the location of the
	  catalogs with the <varname xmlns:xlink="http://www.w3.org/1999/xlink">NLSSRCDIR</varname> <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">make</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">1</manvolnum></citerefentry>
	  variable.  The default name of the precompiled catalog files
	  also follow the naming convention mentioned before.  It can be
	  overridden by setting the <varname xmlns:xlink="http://www.w3.org/1999/xlink">NLSNAME</varname> variable.
	  There are other options to fine tune the processing of the catalog
	  files but usually it is not needed, thus they are not described
	  here.  For further information on <filename xmlns:xlink="http://www.w3.org/1999/xlink">bsd.nls.mk</filename>,
	  please refer to the file itself, it is short and easy to
	  understand.</para>
      </sect2>
    </sect1>
  </chapter>

    
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="policies">
  <info><title xmlns:xlink="http://www.w3.org/1999/xlink">Source Tree Guidelines and Policies</title>
    <authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
      <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Poul-Henning</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Kamp</surname></personname><contrib xmlns:xlink="http://www.w3.org/1999/xlink">Contributed by </contrib></author>
      <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Giorgos</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Keramidas</surname></personname></author>
    </authorgroup>
    
  </info>

  

  <para xmlns:xlink="http://www.w3.org/1999/xlink">This chapter documents various guidelines and policies in
    force for the FreeBSD source tree.</para>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="policies-style">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Style Guidelines</title>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">style</primary></indexterm>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Consistent coding style is extremely important, particularly
      with large projects like FreeBSD.  Code should follow the FreeBSD
      coding styles described in <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">style</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry> and
      <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">style.Makefile</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">5</manvolnum></citerefentry>.</para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="policies-maintainer">
    <title xmlns:xlink="http://www.w3.org/1999/xlink"><varname xmlns:xlink="http://www.w3.org/1999/xlink">MAINTAINER</varname> on Makefiles</title>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">ports maintainer</primary></indexterm>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">If a particular portion of the FreeBSD
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">src/</filename> distribution is being maintained by a
      person or group of persons, this is communicated through an
      entry in the <filename xmlns:xlink="http://www.w3.org/1999/xlink">src/MAINTAINERS</filename> file.
      Maintainers of ports within the Ports Collection express their
      maintainership to the world by adding a
      <varname xmlns:xlink="http://www.w3.org/1999/xlink">MAINTAINER</varname> line to the
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">Makefile</filename> of the port in question:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><varname xmlns:xlink="http://www.w3.org/1999/xlink">MAINTAINER</varname>= <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">email-addresses</replaceable></programlisting>

    <tip xmlns:xlink="http://www.w3.org/1999/xlink">
      <para xmlns:xlink="http://www.w3.org/1999/xlink">For other parts of the repository, or for sections not
	listed as having a maintainer, or when you are unsure who the
	active maintainer is, try looking at the recent commit history
	of the relevant parts of the source tree.  It is quite often
	the case that a maintainer is not explicitly named, but the
	people who are actively working in a part of the source tree
	for, say, the last couple of years are interested in reviewing
	changes.  Even if this is not specifically mentioned in the
	documentation or the source itself, asking for a review as a
	form of courtesy is a very reasonable thing to do.</para>
    </tip>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The role of the maintainer is as follows:</para>

    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">The maintainer owns and is responsible for that code.
	  This means that he or she is responsible for fixing bugs and
	  answering problem reports pertaining to that piece of the
	  code, and in the case of contributed software, for tracking
	  new versions, as appropriate.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Changes to directories which have a maintainer defined
	  shall be sent to the maintainer for review before being
	  committed.  Only if the maintainer does not respond for an
	  unacceptable period of time, to several emails, will it be
	  acceptable to commit changes without review by the
	  maintainer.  However, it is suggested that you try to have
	  the changes reviewed by someone else if at all
	  possible.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">It is of course not acceptable to add a person or group
	  as maintainer unless they agree to assume this duty.  On the
	  other hand it does not have to be a committer and it can
	  easily be a group of people.</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="policies-contributed">
    <info><title xmlns:xlink="http://www.w3.org/1999/xlink">Contributed Software</title>
      <authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
	<author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Poul-Henning</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Kamp</surname></personname><contrib xmlns:xlink="http://www.w3.org/1999/xlink">Contributed by </contrib></author>
	<author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">David</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">O'Brien</surname></personname></author>
	<author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Gavin</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Atkinson</surname></personname></author>
      </authorgroup>
      
    </info>

    

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">contributed software</primary></indexterm>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Some parts of the FreeBSD distribution consist of software
      that is actively being maintained outside the FreeBSD project.
      For historical reasons, we call this
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">contributed</emphasis> software.  Some examples are
      <application xmlns:xlink="http://www.w3.org/1999/xlink">sendmail</application>,
      <application xmlns:xlink="http://www.w3.org/1999/xlink">gcc</application> and
      <application xmlns:xlink="http://www.w3.org/1999/xlink">patch</application>.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Over the last couple of years, various methods have been
      used in dealing with this type of software and all have some
      number of advantages and drawbacks.  No clear winner has
      emerged.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Since this is the case, after some debate one of these
      methods has been selected as the <quote xmlns:xlink="http://www.w3.org/1999/xlink">official</quote> method
      and will be required for future imports of software of this
      kind.  Furthermore, it is strongly suggested that existing
      contributed software converge on this model over time, as it has
      significant advantages over the old method, including the
      ability to easily obtain diffs relative to the
      <quote xmlns:xlink="http://www.w3.org/1999/xlink">official</quote> versions of the source by everyone (even
      without direct repository access).  This will make it
      significantly easier to return changes to the primary developers
      of the contributed software.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Ultimately, however, it comes down to the people actually
      doing the work.  If using this model is particularly unsuited to
      the package being dealt with, exceptions to these rules may be
      granted only with the approval of the core team and with the
      general consensus of the other developers.  The ability to
      maintain the package in the future will be a key issue in the
      decisions.</para>

    <note xmlns:xlink="http://www.w3.org/1999/xlink">
      <para xmlns:xlink="http://www.w3.org/1999/xlink">Because it makes it harder to import future versions
	minor, trivial and/or cosmetic changes are
	<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">strongly discouraged</emphasis> on files that are
	still tracking the vendor branch.</para>
    </note>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="vendor-import-svn">
      <info><title xmlns:xlink="http://www.w3.org/1999/xlink">Vendor Imports with SVN</title>
	<authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
	  <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Dag-Erling</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Smørgrav</surname></personname><contrib xmlns:xlink="http://www.w3.org/1999/xlink">Contributed by </contrib></author>
	</authorgroup>
      </info>
      

      <para xmlns:xlink="http://www.w3.org/1999/xlink">This section describes the vendor import procedure with
	<application xmlns:xlink="http://www.w3.org/1999/xlink">Subversion</application> in details.</para>

      <procedure xmlns:xlink="http://www.w3.org/1999/xlink">
	<step xmlns:xlink="http://www.w3.org/1999/xlink">
	  <title xmlns:xlink="http://www.w3.org/1999/xlink">Preparing the Tree</title>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">If this is your first import after the switch to
	    <acronym xmlns:xlink="http://www.w3.org/1999/xlink">SVN</acronym>, you will have to flatten and clean
	    up the vendor tree, and bootstrap merge history in the
	    main tree.  If not, you can safely omit this step.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">During the conversion from <acronym xmlns:xlink="http://www.w3.org/1999/xlink">CVS</acronym> to
	    <acronym xmlns:xlink="http://www.w3.org/1999/xlink">SVN</acronym>, vendor branches were imported with
	    the same layout as the main tree.  For example, the
	    <application xmlns:xlink="http://www.w3.org/1999/xlink">foo</application> vendor sources ended up in
	    <filename xmlns:xlink="http://www.w3.org/1999/xlink">vendor/<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">foo</replaceable>/dist/contrib/<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">foo</replaceable></filename>,
	    but it is pointless and rather inconvenient.  What we
	    really want is to have the vendor source directly in
	    <filename xmlns:xlink="http://www.w3.org/1999/xlink">vendor/<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">foo</replaceable>/dist</filename>,
	    like this:</para>

	  <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cd vendor/<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">foo</replaceable>/dist/contrib/<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">foo</replaceable></userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">svn move $(svn list) ../..</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cd ../..</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">svn remove contrib</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">svn propdel -R svn:mergeinfo</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">svn commit</userinput></screen>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Note that, the <literal xmlns:xlink="http://www.w3.org/1999/xlink">propdel</literal> bit is
	    necessary because starting with 1.5, Subversion will
	    automatically add <literal xmlns:xlink="http://www.w3.org/1999/xlink">svn:mergeinfo</literal> to any
	    directory you copy or move.  In this case, you will not
	    need this information, since you are not going to merge
	    anything from the tree you deleted.</para>

	  <note xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">You may want to flatten the tags as well.  The
	      procedure is exactly the same.  If you do this, put off
	      the commit until the end.</para>
	  </note>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Check the <filename xmlns:xlink="http://www.w3.org/1999/xlink">dist</filename> tree and perform
	    any cleanup that is deemed to be necessary.  You may want
	    to disable keyword expansion, as it makes no sense on
	    unmodified vendor code.  In some cases, it can be even be
	    harmful.</para>

	  <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">svn propdel svn:keywords -R .</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">svn commit</userinput></screen>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Bootstrapping of <literal xmlns:xlink="http://www.w3.org/1999/xlink">svn:mergeinfo</literal> on
	    the target directory (in the main tree) to the revision
	    that corresponds to the last change was made to the vendor
	    tree prior to importing new sources is also needed:</para>

	  <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cd head/contrib/<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">foo</replaceable></userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">svn merge --record-only <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">svn_base</replaceable>/vendor/<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">foo</replaceable>/dist@<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">12345678</replaceable> .</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">svn commit</userinput></screen>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">where <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">svn_base</replaceable> is the base
	    directory of your <acronym xmlns:xlink="http://www.w3.org/1999/xlink">SVN</acronym> repository, e.g.
	    <literal xmlns:xlink="http://www.w3.org/1999/xlink">svn+ssh://svn.FreeBSD.org/base</literal>.</para>
	</step>

	<step xmlns:xlink="http://www.w3.org/1999/xlink">
	  <title xmlns:xlink="http://www.w3.org/1999/xlink">Importing New Sources</title>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Prepare a full, clean tree of the vendor sources.
	    With <acronym xmlns:xlink="http://www.w3.org/1999/xlink">SVN</acronym>, we can keep a full
	    distribution in the vendor tree without bloating the main
	    tree.  Import everything but merge only what is
	    needed.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Note that you will need to add any files that were
	    added since the last vendor import, and remove any that
	    were removed.  To facilitate this, you should prepare
	    sorted lists of the contents of the vendor tree and of the
	    sources you are about to import:</para>

	  <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cd vendor/<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">foo</replaceable>/dist</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">svn list -R | grep -v '/$' | sort &gt; ../<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">old</replaceable></userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cd ../<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">foo-9.9</replaceable></userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">find . -type f | cut -c 3- | sort &gt; ../<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">new</replaceable></userinput></screen>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">With these two files, the following command will list
	    list removed files (files only in
	    <filename xmlns:xlink="http://www.w3.org/1999/xlink"><replaceable xmlns:xlink="http://www.w3.org/1999/xlink">old</replaceable></filename>):</para>

	  <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">comm -23 ../<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">old</replaceable> ../<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">new</replaceable></userinput></screen>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">While the command below will list added files (files
	    only in
	    <filename xmlns:xlink="http://www.w3.org/1999/xlink"><replaceable xmlns:xlink="http://www.w3.org/1999/xlink">new</replaceable></filename>):</para>

	  <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">comm -13 ../<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">old</replaceable> ../<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">new</replaceable></userinput></screen>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Let's put this together:</para>

	  <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cd vendor/<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">foo</replaceable>/<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">foo-9.9</replaceable></userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">tar cf - . | tar xf - -C ../dist</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cd ../dist</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">comm -23 ../<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">old</replaceable> ../<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">new</replaceable> | xargs svn remove</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">comm -13 ../<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">old</replaceable> ../<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">new</replaceable> | xargs svn add</userinput></screen>

	  <warning xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">If there are new directories in the new
	      distribution, the last command will fail.  You will have
	      to add the directories, and run it again.  Conversely,
	      if any directories were removed, you will have to remove
	      them manually.</para>
	  </warning>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Check properties on any new files:</para>

	  <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	    <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	      <para xmlns:xlink="http://www.w3.org/1999/xlink">All text files
		should have <literal xmlns:xlink="http://www.w3.org/1999/xlink">svn:eol-style</literal> set to
		<literal xmlns:xlink="http://www.w3.org/1999/xlink">native</literal>.</para>
	    </listitem>

	    <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	      <para xmlns:xlink="http://www.w3.org/1999/xlink">All binary files should have
		<literal xmlns:xlink="http://www.w3.org/1999/xlink">svn:mime-type</literal> set to
		<literal xmlns:xlink="http://www.w3.org/1999/xlink">application/octet-stream</literal>, unless
		there is a more appropriate media type.</para>
	    </listitem>

	    <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	      <para xmlns:xlink="http://www.w3.org/1999/xlink">Executable files should have
		<literal xmlns:xlink="http://www.w3.org/1999/xlink">svn:executable</literal> set to
		<literal xmlns:xlink="http://www.w3.org/1999/xlink">*</literal>.</para>
	    </listitem>

	    <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	      <para xmlns:xlink="http://www.w3.org/1999/xlink">There should be no other properties on any file in
		the tree.</para>
	    </listitem>
	  </itemizedlist>

	  <note xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">You are ready to commit, but you should first check
	      the output of <command xmlns:xlink="http://www.w3.org/1999/xlink">svn stat</command> and
	      <command xmlns:xlink="http://www.w3.org/1999/xlink">svn diff</command> to make sure everything is
	      in order.</para>
	  </note>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Once you have committed the new vendor release, you
	    should tag it for future reference.  The best and quickest
	    way is to do it directly in the repository:</para>

	  <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">svn copy <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">svn_base</replaceable>/vendor/<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">foo</replaceable>/dist <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">svn_base</replaceable>/vendor/<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">foo</replaceable>/<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">9.9</replaceable></userinput></screen>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">To get the new tag, you can update your working copy
	    of
	    <filename xmlns:xlink="http://www.w3.org/1999/xlink">vendor/<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">foo</replaceable></filename>.</para>

	  <note xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">If you choose to do the copy in the checkout
	      instead, do not forget to remove the generated
	      <literal xmlns:xlink="http://www.w3.org/1999/xlink">svn:mergeinfo</literal> as described
	      above.</para>
	  </note>
	</step>

	<step xmlns:xlink="http://www.w3.org/1999/xlink">
	  <title xmlns:xlink="http://www.w3.org/1999/xlink">Merging to <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">-HEAD</emphasis></title>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">After you have prepared your import, it is time to
	    merge.  Option <option xmlns:xlink="http://www.w3.org/1999/xlink">--accept=postpone</option> tells
	    <acronym xmlns:xlink="http://www.w3.org/1999/xlink">SVN</acronym> not to handle merge conflicts yet,
	    because they will be taken care of manually:</para>

	  <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cd head/contrib/<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">foo</replaceable></userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">svn update</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">svn merge --accept=postpone <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">svn_base</replaceable>/vendor/<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">foo</replaceable>/dist</userinput></screen>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Resolve any conflicts, and make sure that any files
	    that were added or removed in the vendor tree have been
	    properly added or removed in the main tree.  It is always
	    a good idea to check differences against the vendor
	    branch:</para>

	  <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">svn diff --no-diff-deleted --old=<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">svn_base</replaceable>/vendor/<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">foo</replaceable>/dist --new=.</userinput></screen>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">The <option xmlns:xlink="http://www.w3.org/1999/xlink">--no-diff-deleted</option> option tells
	    <acronym xmlns:xlink="http://www.w3.org/1999/xlink">SVN</acronym> not to check files that are in the
	    vendor tree but not in the main tree.</para>

	  <note xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">With <acronym xmlns:xlink="http://www.w3.org/1999/xlink">SVN</acronym>, there is no concept of
	      on or off the vendor branch.  If a file that previously
	      had local modifications no longer does, just remove any
	      left-over cruft, such as FreeBSD version tags, so it no
	      longer shows up in diffs against the vendor tree.</para>
	  </note>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">If any changes are required for the world to build
	    with the new sources, make them now &#8212; and test until
	    you are satisfied that everything build and runs
	    correctly.</para>
	</step>

	<step xmlns:xlink="http://www.w3.org/1999/xlink">
	  <title xmlns:xlink="http://www.w3.org/1999/xlink">Commit</title>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Now, you are ready to commit.  Make sure you get
	    everything in one go.  Ideally, you would have done all
	    steps in a clean tree, in which case you can just commit
	    from the top of that tree.  That is the best way to avoid
	    surprises.  If you do it properly, the tree will move
	    atomically from a consistent state with the old code to a
	    consistent state with the new code.</para>
	</step>
      </procedure>
    </sect2>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="policies-encumbered">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Encumbered Files</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">It might occasionally be necessary to include an encumbered
      file in the FreeBSD source tree.  For example, if a device
      requires a small piece of binary code to be loaded to it before
      the device will operate, and we do not have the source to that
      code, then the binary file is said to be encumbered.  The
      following policies apply to including encumbered files in the
      FreeBSD source tree.</para>

    <orderedlist xmlns:xlink="http://www.w3.org/1999/xlink">
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Any file which is interpreted or executed by the system
	  CPU(s) and not in source format is encumbered.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Any file with a license more restrictive than BSD or GNU
	  is encumbered.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">A file which contains downloadable binary data for use
	  by the hardware is not encumbered, unless (1) or (2) apply
	  to it.  It must be stored in an architecture neutral ASCII
	  format (file2c or uuencoding is recommended).</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Any encumbered file requires specific approval from the
	  <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.FreeBSD.org/administration.html#t-core">Core
	    Team</link> before it is added to the repository.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Encumbered files go in <filename xmlns:xlink="http://www.w3.org/1999/xlink">src/contrib</filename>
	  or <filename xmlns:xlink="http://www.w3.org/1999/xlink">src/sys/contrib</filename>.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">The entire module should be kept together.  There is no
	  point in splitting it, unless there is code-sharing with
	  non-encumbered code.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Object files are named
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink"><replaceable xmlns:xlink="http://www.w3.org/1999/xlink">arch</replaceable>/<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">filename</replaceable>.o.uu&gt;</filename>.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Kernel files:</para>

	<orderedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Should always be referenced in
	      <filename xmlns:xlink="http://www.w3.org/1999/xlink">conf/files.*</filename> (for build
	      simplicity).</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Should always be in <filename xmlns:xlink="http://www.w3.org/1999/xlink">LINT</filename>, but
	      the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.FreeBSD.org/administration.html#t-core">Core
		Team</link> decides per case if it should be
	      commented out or not.  The <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.FreeBSD.org/administration.html#t-core">Core
		Team</link> can, of course, change their minds later
	      on.</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">The <firstterm xmlns:xlink="http://www.w3.org/1999/xlink">Release Engineer</firstterm>
	      decides whether or not it goes into the release.</para>
	  </listitem>
	</orderedlist>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">User-land files:</para>

	<orderedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">The <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.FreeBSD.org/administration.html#t-core">Core
		team</link><indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">core
		  team</primary></indexterm> decides if
	      the code should be part of
	      <command xmlns:xlink="http://www.w3.org/1999/xlink">make world</command>.</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">The <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.FreeBSD.org/administration.html#t-re">Release
		Engineering</link><indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">release
		    engineering</primary></indexterm>
	      decides if it goes into the release.</para>
	  </listitem>
	</orderedlist>
      </listitem>
    </orderedlist>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="policies-shlib">
    <info><title xmlns:xlink="http://www.w3.org/1999/xlink">Shared Libraries</title>
      <authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
	<author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Satoshi</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Asami</surname></personname><contrib xmlns:xlink="http://www.w3.org/1999/xlink">Contributed by </contrib></author>
	<author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Peter</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Wemm</surname></personname></author>
	<author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">David</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">O'Brien</surname></personname></author>
      </authorgroup>
      
    </info>

    

    <para xmlns:xlink="http://www.w3.org/1999/xlink">If you are adding shared library support to a port or other
      piece of software that does not have one, the version numbers
      should follow these rules.  Generally, the resulting numbers
      will have nothing to do with the release version of the
      software.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The three principles of shared library building are:</para>

    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Start from <literal xmlns:xlink="http://www.w3.org/1999/xlink">1.0</literal></para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">If there is a change that is backwards compatible, bump
	  minor number (note that ELF systems ignore the minor
	  number)</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">If there is an incompatible change, bump major
	  number</para>
      </listitem>
    </itemizedlist>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">For instance, added functions and bugfixes result in the
      minor version number being bumped, while deleted functions,
      changed function call syntax, etc. will force the major version
      number to change.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Stick to version numbers of the form major.minor
      (<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">x</replaceable>.<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">y</replaceable>).
      Our a.out dynamic linker does not handle version numbers of the
      form
      <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">x</replaceable>.<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">y</replaceable>.<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">z</replaceable>
      well.  Any version number after the <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">y</replaceable>
      (i.e. the third digit) is totally ignored when comparing shared
      lib version numbers to decide which library to link with.  Given
      two shared libraries that differ only in the
      <quote xmlns:xlink="http://www.w3.org/1999/xlink">micro</quote> revision, <command xmlns:xlink="http://www.w3.org/1999/xlink">ld.so</command> will
      link with the higher one.  That is, if you link with
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">libfoo.so.3.3.3</filename>, the linker only records
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">3.3</literal> in the headers, and will link with
      anything starting with
      <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">libfoo.so.3</replaceable>.<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">(anything
	&gt;= 3)</replaceable>.<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">(highest
	available)</replaceable>.</para>

    <note xmlns:xlink="http://www.w3.org/1999/xlink">
      <para xmlns:xlink="http://www.w3.org/1999/xlink"><command xmlns:xlink="http://www.w3.org/1999/xlink">ld.so</command> will always use the highest
	<quote xmlns:xlink="http://www.w3.org/1999/xlink">minor</quote> revision.  For instance, it will use
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">libc.so.2.2</filename> in preference to
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">libc.so.2.0</filename>, even if the program was
	initially linked with <filename xmlns:xlink="http://www.w3.org/1999/xlink">libc.so.2.0</filename>.</para>
    </note>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">In addition, our ELF dynamic linker does not handle minor
      version numbers at all.  However, one should still specify a
      major and minor version number as our
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">Makefile</filename>s <quote xmlns:xlink="http://www.w3.org/1999/xlink">do the right thing</quote>
      based on the type of system.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">For non-port libraries, it is also our policy to change the
      shared library version number only once between releases.  In
      addition, it is our policy to change the major shared library
      version number only once between major OS releases (i.e. from
      6.0 to 7.0).  When you make a change to a system library that
      requires the version number to be bumped, check the
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">Makefile</filename>'s commit logs.  It is the
      responsibility of the committer to ensure that the first such
      change since the release will result in the shared library
      version number in the <filename xmlns:xlink="http://www.w3.org/1999/xlink">Makefile</filename> to be
      updated, and any subsequent changes will not.</para>
  </sect1>
</chapter>

    
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="testing">
  <title xmlns:xlink="http://www.w3.org/1999/xlink">Regression and Performance Testing</title>

  <para xmlns:xlink="http://www.w3.org/1999/xlink">Regression tests are used to exercise a particular bit of the
    system to check that it works as expected, and to make sure that
    old bugs are not reintroduced.</para>

  <para xmlns:xlink="http://www.w3.org/1999/xlink">The FreeBSD regression testing tools can be found in the FreeBSD
    source tree in the directory <filename xmlns:xlink="http://www.w3.org/1999/xlink">src/tools/regression</filename>.</para>

  <section xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="testing-micro-benchmark">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Micro Benchmark Checklist</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">This section contains hints for doing proper
      micro-benchmarking on FreeBSD or of FreeBSD itself.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">It is not possible to use all of the suggestions below every
      single time, but the more used, the better the benchmark's
      ability to test small differences will be.</para>

    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Disable <acronym xmlns:xlink="http://www.w3.org/1999/xlink">APM</acronym> and any other kind of
	  clock fiddling (<acronym xmlns:xlink="http://www.w3.org/1999/xlink">ACPI</acronym> ?).</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Run in single user mode.  E.g., <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">cron</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry>, and other
	  daemons only add noise.  The <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">sshd</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> daemon can also
	  cause problems.  If ssh access is required during testing
	  either disable the SSHv1 key regeneration, or kill the
	  parent <command xmlns:xlink="http://www.w3.org/1999/xlink">sshd</command> daemon during the
	  tests.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Do not run <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">ntpd</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry>.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">If <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">syslog</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry> events are generated, run
	  <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">syslogd</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> with an empty
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc/syslogd.conf</filename>, otherwise, do not
	  run it.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Minimize disk-I/O, avoid it entirely if possible.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Do not mount file systems that are not needed.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Mount <filename xmlns:xlink="http://www.w3.org/1999/xlink">/</filename>,
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr</filename>, and any other
	  file system as read-only if possible.  This removes atime
	  updates to disk (etc.) from the I/O picture.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Reinitialize the read/write test file system with
	  <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">newfs</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> and populate it from a <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">tar</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">1</manvolnum></citerefentry> or
	  <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">dump</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> file before every run.  Unmount and mount it
	  before starting the test.  This results in a consistent file
	  system layout.  For a worldstone test this would apply to
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/obj</filename> (just
	  reinitialize with <command xmlns:xlink="http://www.w3.org/1999/xlink">newfs</command> and mount).  To
	  get 100% reproducibility, populate the file system from a
	  <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">dd</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">1</manvolnum></citerefentry> file (i.e.: <command xmlns:xlink="http://www.w3.org/1999/xlink">dd
	    if=myimage of=/dev/ad0s1h
	    bs=1m</command>)</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Use malloc backed or preloaded <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">md</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">4</manvolnum></citerefentry>
	  partitions.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Reboot between individual iterations of the test, this
	  gives a more consistent state.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Remove all non-essential device drivers from the kernel.
	  For instance if USB is not needed for the test, do not put
	  USB in the kernel.  Drivers which attach often have timeouts
	  ticking away.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Unconfigure hardware that are not in use.  Detach disks
	  with <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">atacontrol</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> and <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">camcontrol</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> if the disks
	  are not used for the test.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Do not configure the network unless it is being tested,
	  or wait until after the test has been performed to ship the
	  results off to another computer.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">If the system must be connected to a public network,
	  watch out for spikes of broadcast traffic.  Even though it
	  is hardly noticeable, it will take up CPU cycles.  Multicast
	  has similar caveats.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Put each file system on its own disk.  This minimizes
	  jitter from head-seek optimizations.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Minimize output to serial or VGA consoles.  Running
	  output into files gives less jitter.  (Serial consoles
	  easily become a bottleneck.)  Do not touch keyboard while
	  the test is running, even <keycap xmlns:xlink="http://www.w3.org/1999/xlink">space</keycap> or
	  <keycap xmlns:xlink="http://www.w3.org/1999/xlink">back-space</keycap> shows up in the numbers.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Make sure the test is long enough, but not too long.  If
	  the test is too short, timestamping is a problem.  If it is
	  too long temperature changes and drift will affect the
	  frequency of the quartz crystals in the computer.  Rule of
	  thumb: more than a minute, less than an hour.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Try to keep the temperature as stable as possible around
	  the machine.  This affects both quartz crystals and disk
	  drive algorithms.  To get real stable clock, consider
	  stabilized clock injection.  E.g., get a OCXO + PLL, inject
	  output into clock circuits instead of motherboard xtal.
	  Contact Poul-Henning Kamp <email xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">phk@FreeBSD.org</email> for more information about this.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Run the test at least 3 times but it is better to run
	  more than 20 times both for <quote xmlns:xlink="http://www.w3.org/1999/xlink">before</quote> and
	  <quote xmlns:xlink="http://www.w3.org/1999/xlink">after</quote> code.  Try to interleave if possible
	  (i.e.: do not run 20 times before then 20 times after), this
	  makes it possible to spot environmental effects.  Do not
	  interleave 1:1, but 3:3, this makes it possible to spot
	  interaction effects.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">A good pattern is: <literal xmlns:xlink="http://www.w3.org/1999/xlink">bababa{bbbaaa}*</literal>.
	  This gives hint after the first 1+1 runs (so it is possible
	  to stop the test if it goes entirely the wrong way), a
	  standard deviation after the first 3+3 (gives a good
	  indication if it is going to be worth a long run) and
	  trending and interaction numbers later on.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Use <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">ministat</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">1</manvolnum></citerefentry>
	  to see if the numbers are significant.  Consider buying
	  <quote xmlns:xlink="http://www.w3.org/1999/xlink">Cartoon guide to statistics</quote> ISBN:
	  0062731025, highly recommended, if you have forgotten or
	  never learned about standard deviation and Student's
	  T.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Do not use background <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">fsck</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> unless the test is a
	  benchmark of background <command xmlns:xlink="http://www.w3.org/1999/xlink">fsck</command>.  Also,
	  disable <varname xmlns:xlink="http://www.w3.org/1999/xlink">background_fsck</varname> in
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc/rc.conf</filename> unless the benchmark is
	  not started at least 60+<quote xmlns:xlink="http://www.w3.org/1999/xlink"><command xmlns:xlink="http://www.w3.org/1999/xlink">fsck</command>
	    runtime</quote> seconds after the boot, as <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">rc</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry>
	  wakes up and checks if <command xmlns:xlink="http://www.w3.org/1999/xlink">fsck</command> needs to run
	  on any file systems when background <command xmlns:xlink="http://www.w3.org/1999/xlink">fsck</command>
	  is enabled.  Likewise, make sure there are no snapshots
	  lying around unless the benchmark is a test with
	  snapshots.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">If the benchmark show unexpected bad performance, check
	  for things like high interrupt volume from an unexpected
	  source.  Some versions of <acronym xmlns:xlink="http://www.w3.org/1999/xlink">ACPI</acronym> have been
	  reported to <quote xmlns:xlink="http://www.w3.org/1999/xlink">misbehave</quote> and generate excess
	  interrupts.  To help diagnose odd test results, take a few
	  snapshots of <command xmlns:xlink="http://www.w3.org/1999/xlink">vmstat -i</command> and look for
	  anything unusual.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Make sure to be careful about optimization parameters
	  for kernel and userspace, likewise debugging.  It is easy to
	  let something slip through and realize later the test was
	  not comparing the same thing.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Do not ever benchmark with the
	  <literal xmlns:xlink="http://www.w3.org/1999/xlink">WITNESS</literal> and <literal xmlns:xlink="http://www.w3.org/1999/xlink">INVARIANTS</literal>
	  kernel options enabled unless the test is interested to
	  benchmarking those features.  <literal xmlns:xlink="http://www.w3.org/1999/xlink">WITNESS</literal> can
	  cause 400%+ drops in performance.  Likewise, userspace
	  <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">malloc</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry> parameters default differently in -CURRENT
	  from the way they ship in production releases.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="testing-tinderbox">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">The FreeBSD Source Tinderbox</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The source Tinderbox consists of:</para>

    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">A build script, <filename xmlns:xlink="http://www.w3.org/1999/xlink">tinderbox</filename>, that
	  automates checking out a specific version of the FreeBSD source
	  tree and building it.</para>
      </listitem>
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">A supervisor script, <filename xmlns:xlink="http://www.w3.org/1999/xlink">tbmaster</filename>, that
	  monitors individual Tinderbox instances, logs their output,
	  and emails failure notices.</para>
      </listitem>
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">A <acronym xmlns:xlink="http://www.w3.org/1999/xlink">CGI</acronym> script named
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">index.cgi</filename> that reads a set of tbmaster
	  logs and presents an easy-to-read <acronym xmlns:xlink="http://www.w3.org/1999/xlink">HTML</acronym>
	  summary of them.</para>
      </listitem>
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">A set of build servers that continually test the tip of
	  the most important FreeBSD code branches.</para>
      </listitem>
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">A webserver that keeps a complete set of Tinderbox logs
	  and displays an up-to-date summary.</para>
      </listitem>
    </itemizedlist>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The scripts are maintained and were developed by Dag-Erling C. Smørgrav <email xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">des@FreeBSD.org</email>,
      and are now written in Perl, a move on from their original
      incarnation as shell scripts.  All scripts and configuration
      files are kept in <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.freebsd.org/cgi/cvsweb.cgi/projects/tinderbox/">/projects/tinderbox/</link>.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">For more information about the tinderbox and tbmaster
      scripts at this stage, see their respective man pages:
      tinderbox(1) and tbmaster(1).</para>

    <section xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">The <filename xmlns:xlink="http://www.w3.org/1999/xlink">index.cgi</filename> Script</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The <filename xmlns:xlink="http://www.w3.org/1999/xlink">index.cgi</filename> script generates the
	<acronym xmlns:xlink="http://www.w3.org/1999/xlink">HTML</acronym> summary of tinderbox and tbmaster
	logs.  Although originally intended to be used as a
	<acronym xmlns:xlink="http://www.w3.org/1999/xlink">CGI</acronym> script, as indicated by its name, this
	script can also be run from the command line or from a
	<citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">cron</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> job, in which case it will look for logs in the
	directory where the script is located.  It will automatically
	detect context, generating <acronym xmlns:xlink="http://www.w3.org/1999/xlink">HTTP</acronym> headers
	when it is run as a <acronym xmlns:xlink="http://www.w3.org/1999/xlink">CGI</acronym> script.  It
	conforms to <acronym xmlns:xlink="http://www.w3.org/1999/xlink">XHTML</acronym> standards and is styled
	using <acronym xmlns:xlink="http://www.w3.org/1999/xlink">CSS</acronym>.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The script starts in the <function xmlns:xlink="http://www.w3.org/1999/xlink">main()</function> block
	by attempting to verify that it is running on the official
	Tinderbox website.  If it is not, a page indicating it is not
	an official website is produced, and a <acronym xmlns:xlink="http://www.w3.org/1999/xlink">URL</acronym>
	to the official site is provided.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Next, it scans the log directory to get an inventory of
	configurations, branches and architectures for which log files
	exist, to avoid hard-coding a list into the script and
	potentially ending up with blank rows or columns.  This
	information is derived from the names of the log files
	matching the following pattern:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">tinderbox-$config-$branch-$arch-$machine.{brief,full}</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The configurations used on the official Tinderbox build
	servers are named for the branches they build.  For example,
	the <literal xmlns:xlink="http://www.w3.org/1999/xlink">releng_8</literal> configuration is used to build
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">RELENG_8</literal> as well as all still-supported
	release branches.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Once all of this startup procedure has been successfully
	completed, <function xmlns:xlink="http://www.w3.org/1999/xlink">do_config()</function> is called for each
	configuration.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The <function xmlns:xlink="http://www.w3.org/1999/xlink">do_config()</function> function generates
	<acronym xmlns:xlink="http://www.w3.org/1999/xlink">HTML</acronym> for a single Tinderbox
	configuration.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">It works by first generating a header row, then iterating
	over each branch build with the specified configuration,
	producing a single row of results for each in the following
	manner:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">For each item:</para>
	  <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	    <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	      <para xmlns:xlink="http://www.w3.org/1999/xlink">For each machine within that architecture:</para>
	      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
		<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		  <para xmlns:xlink="http://www.w3.org/1999/xlink">If a brief log file exists, then:</para>
		  <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
		    <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		      <para xmlns:xlink="http://www.w3.org/1999/xlink">Call <function xmlns:xlink="http://www.w3.org/1999/xlink">success()</function> to
			determine the outcome of the build.</para>
		    </listitem>
		    <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		      <para xmlns:xlink="http://www.w3.org/1999/xlink">Output the modification size.</para>
		    </listitem>
		    <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		      <para xmlns:xlink="http://www.w3.org/1999/xlink">Output the size of the brief log file with
			a link to the log file itself.</para>
		    </listitem>
		    <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		      <para xmlns:xlink="http://www.w3.org/1999/xlink">If a full log file also exists,
			then:</para>
		      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
			<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
			  <para xmlns:xlink="http://www.w3.org/1999/xlink">Output the size of the full log file
			    with a link to the log file itself.</para>
			</listitem>
		      </itemizedlist>
		    </listitem>
		  </itemizedlist>
		</listitem>
		<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		  <para xmlns:xlink="http://www.w3.org/1999/xlink">Otherwise:</para>
		  <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
		    <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		      <para xmlns:xlink="http://www.w3.org/1999/xlink">No output.</para>
		    </listitem>
		  </itemizedlist>
		</listitem>
	      </itemizedlist>
	    </listitem>
	  </itemizedlist>
	</listitem>
      </itemizedlist>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The <function xmlns:xlink="http://www.w3.org/1999/xlink">success()</function> function mentioned
	above scans a brief log file for the string <quote xmlns:xlink="http://www.w3.org/1999/xlink">tinderbox
	  run completed</quote> in order to determine whether the
	build was successful.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Configurations and branches are sorted according to their
	branch rank.  This is computed as follows:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">HEAD</literal> and <literal xmlns:xlink="http://www.w3.org/1999/xlink">CURRENT</literal>
	    have rank 9999.</para>
	</listitem>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">RELENG_<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">x</replaceable></literal>
	    has rank <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">xx</replaceable>99.</para>
	</listitem>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">RELENG_<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">x</replaceable>_<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">y</replaceable></literal>
	    has rank <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">xxyy</replaceable>.</para>
	</listitem>
      </itemizedlist>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">This means that <literal xmlns:xlink="http://www.w3.org/1999/xlink">HEAD</literal> always ranks
	highest, and <literal xmlns:xlink="http://www.w3.org/1999/xlink">RELENG</literal> branches are ranked in
	numerical order, with each <literal xmlns:xlink="http://www.w3.org/1999/xlink">STABLE</literal> branch
	ranking higher than the release branches forked off of it.
	For instance, for FreeBSD 8, the order from highest to
	lowest would be:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">RELENG_8</literal> (branch rank 899).</para>
	</listitem>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">RELENG_8_3</literal> (branch rank
	    803).</para>
	</listitem>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">RELENG_8_2</literal> (branch rank
	    802).</para>
	</listitem>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">RELENG_8_1</literal> (branch rank
	    801).</para>
	</listitem>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">RELENG_8_0</literal> (branch rank
	    800).</para>
	</listitem>
      </itemizedlist>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The colors that Tinderbox uses for each cell in the table
	are defined by <acronym xmlns:xlink="http://www.w3.org/1999/xlink">CSS</acronym>.  Successful builds are
	displayed with green text; unsuccessful builds are displayed
	with red text.  The color fades as time passes since the
	corresponding build, with every half an hour bringing the
	color closer to grey.</para>
    </section>

    <section xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Official Build Servers</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The official Tinderbox build servers are hosted by <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.sentex.ca">Sentex Data
	  Communications</link>, who also host the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.freebsd.org/projects/netperf/cluster.html">FreeBSD
	  Netperf Cluster</link>.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Three build servers currently exist:</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">freebsd-current.sentex.ca</emphasis>
	builds:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">HEAD</literal> for amd64, arm, i386,
	    i386/pc98, ia64, mips, powerpc, powerpc64, and
	    sparc64.</para>
	</listitem>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">RELENG_9</literal> and supported
	    9.<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">X</replaceable> branches for amd64, arm,
	    i386, i386/pc98, ia64, mips, powerpc, powerpc64, and
	    sparc64.</para>
	</listitem>
      </itemizedlist>

      <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">freebsd-stable.sentex.ca</emphasis>
	builds:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">RELENG_8</literal> and supported
	    8.<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">X</replaceable> branches for amd64, i386,
	    i386/pc98, ia64, mips, powerpc and sparc64.</para>
	</listitem>
      </itemizedlist>

      <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">freebsd-legacy.sentex.ca</emphasis>
	builds:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">RELENG_7</literal> and supported
	    7.<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">X</replaceable> branches for amd64, i386,
	    i386/pc98, ia64, powerpc, and sparc64.</para>
	</listitem>
      </itemizedlist>
    </section>

    <section xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Official Summary Site</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Summaries and logs from the official build servers are
	available online at <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://tinderbox.FreeBSD.org">http://tinderbox.FreeBSD.org</link>,
	hosted by Dag-Erling C. Smørgrav <email xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">des@FreeBSD.org</email> and set up as follows:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">A <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">cron</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> job checks the build servers at regular
	    intervals and downloads any new log files using
	    <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" vendor="ports"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">rsync</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">1</manvolnum></citerefentry>.</para>
	</listitem>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Apache is set up to use <filename xmlns:xlink="http://www.w3.org/1999/xlink">index.cgi</filename>
	    as <literal xmlns:xlink="http://www.w3.org/1999/xlink">DirectoryIndex</literal>.</para>
	</listitem>
      </itemizedlist>
    </section>
  </section>
</chapter>

  </part>

  <part xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="ipc">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Interprocess Communication</title>

    
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="sockets">
  <info><title xmlns:xlink="http://www.w3.org/1999/xlink">Sockets</title>
    <authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
      <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">G. Adam</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Stanislav</surname></personname><contrib xmlns:xlink="http://www.w3.org/1999/xlink">Contributed by </contrib></author>
    </authorgroup>
  </info>

  

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sockets-synopsis">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Synopsis</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink"><acronym xmlns:xlink="http://www.w3.org/1999/xlink">BSD</acronym> sockets take interprocess
      communications to a new level. It is no longer necessary for the
      communicating processes to run on the same machine. They still
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">can</emphasis>, but they do not have to.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Not only do these processes not have to run on the same
      machine, they do not have to run under the same operating
      system. Thanks to <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BSD</acronym> sockets, your FreeBSD
      software can smoothly cooperate with a program running on a
      <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">Macintosh</trademark>, another one running on a <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Sun</trademark> workstation, yet another
      one running under <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">Windows</trademark> 2000, all connected with an
      Ethernet-based local area network.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">But your software can equally well cooperate with processes
      running in another building, or on another continent, inside a
      submarine, or a space shuttle.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">It can also cooperate with processes that are not part of a
      computer (at least not in the strict sense of the word), but of
      such devices as printers, digital cameras, medical equipment.
      Just about anything capable of digital communications.</para>

  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sockets-diversity">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Networking and Diversity</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">We have already hinted on the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">diversity</emphasis>
      of networking. Many different systems have to talk to each
      other. And they have to speak the same language. They also have
      to <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">understand</emphasis> the same language the same
      way.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">People often think that <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">body language</emphasis>
      is universal. But it is not. Back in my early teens, my father
      took me to Bulgaria. We were sitting at a table in a park in
      Sofia, when a vendor approached us trying to sell us some
      roasted almonds.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">I had not learned much Bulgarian by then, so, instead of
      saying no, I shook my head from side to side, the
      <quote xmlns:xlink="http://www.w3.org/1999/xlink">universal</quote> body language for
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">no</emphasis>. The vendor quickly started serving us
      some almonds.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">I then remembered I had been told that in Bulgaria shaking
      your head sideways meant <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">yes</emphasis>. Quickly, I
      started nodding my head up and down. The vendor noticed, took
      his almonds, and walked away. To an uninformed observer, I did
      not change the body language: I continued using the language of
      shaking and nodding my head. What changed was the
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">meaning</emphasis> of the body language. At first, the
      vendor and I interpreted the same language as having completely
      different meaning. I had to adjust my own interpretation of that
      language so the vendor would understand.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">It is the same with computers: The same symbols may have
      different, even outright opposite meaning. Therefore, for
      two computers to understand each other, they must not only
      agree on the same <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">language</emphasis>, but on the
      same <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">interpretation</emphasis> of the language.
      </para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sockets-protocols">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Protocols</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">While various programming languages tend to have complex
      syntax and use a number of multi-letter reserved words (which
      makes them easy for the human programmer to understand), the
      languages of data communications tend to be very terse. Instead
      of multi-byte words, they often use individual
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">bits</emphasis>.  There is a very convincing reason
      for it: While data travels <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">inside</emphasis> your
      computer at speeds approaching the speed of light, it often
      travels considerably slower between two computers.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Because the languages used in data communications are so
      terse, we usually refer to them as
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">protocols</emphasis> rather than languages.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">As data travels from one computer to another, it always uses
      more than one protocol. These protocols are
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">layered</emphasis>.  The data can be compared to the
      inside of an onion: You have to peel off several layers of
      <quote xmlns:xlink="http://www.w3.org/1999/xlink">skin</quote> to get to the data.  This is best
      illustrated with a picture:</para>

    <mediaobject xmlns:xlink="http://www.w3.org/1999/xlink">
      <imageobject xmlns:xlink="http://www.w3.org/1999/xlink">
        <imagedata fileref="sockets/layers"/>
      </imageobject>

      <textobject xmlns:xlink="http://www.w3.org/1999/xlink">
        <literallayout xmlns:xlink="http://www.w3.org/1999/xlink" class="monospaced">+----------------+
|    Ethernet    |
|+--------------+|
||      IP      ||
||+------------+||
|||     TCP    |||
|||+----------+|||
||||   HTTP   ||||
||||+--------+||||
|||||   PNG  |||||
|||||+------+|||||
|||||| Data ||||||
|||||+------+|||||
||||+--------+||||
|||+----------+|||
||+------------+||
|+--------------+|
+----------------+</literallayout>
      </textobject>

      <textobject xmlns:xlink="http://www.w3.org/1999/xlink">
        <phrase xmlns:xlink="http://www.w3.org/1999/xlink">Protocol Layers</phrase>
      </textobject>
    </mediaobject>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">In this example, we are trying to get an image from a web
      page we are connected to via an Ethernet.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The image consists of raw data, which is simply a sequence
      of <acronym xmlns:xlink="http://www.w3.org/1999/xlink">RGB</acronym> values that our software can process,
      i.e., convert into an image and display on our monitor.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Alas, our software has no way of knowing how the raw data is
      organized: Is it a sequence of <acronym xmlns:xlink="http://www.w3.org/1999/xlink">RGB</acronym> values, or
      a sequence of grayscale intensities, or perhaps of
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">CMYK</acronym> encoded colors? Is the data represented
      by 8-bit quanta, or are they 16 bits in size, or perhaps 4 bits?
      How many rows and columns does the image consist of? Should
      certain pixels be transparent?</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">I think you get the picture...</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">To inform our software how to handle the raw data, it is
      encoded as a <acronym xmlns:xlink="http://www.w3.org/1999/xlink">PNG</acronym> file. It could be a
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">GIF</acronym>, or a <acronym xmlns:xlink="http://www.w3.org/1999/xlink">JPEG</acronym>, but it is
      a <acronym xmlns:xlink="http://www.w3.org/1999/xlink">PNG</acronym>.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">And <acronym xmlns:xlink="http://www.w3.org/1999/xlink">PNG</acronym> is a protocol.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">At this point, I can hear some of you yelling,
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><quote xmlns:xlink="http://www.w3.org/1999/xlink">No, it is not! It is a file
      format!</quote></emphasis></para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Well, of course it is a file format. But from the
      perspective of data communications, a file format is a protocol:
      The file structure is a <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">language</emphasis>, a terse
      one at that, communicating to our <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">process</emphasis>
      how the data is organized. Ergo, it is a
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">protocol</emphasis>.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Alas, if all we received was the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">PNG</acronym>
      file, our software would be facing a serious problem: How is it
      supposed to know the data is representing an image, as opposed
      to some text, or perhaps a sound, or what not? Secondly, how is
      it supposed to know the image is in the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">PNG</acronym>
      format as opposed to <acronym xmlns:xlink="http://www.w3.org/1999/xlink">GIF</acronym>, or
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">JPEG</acronym>, or some other image format?</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">To obtain that information, we are using another protocol:
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">HTTP</acronym>. This protocol can tell us exactly that
      the data represents an image, and that it uses the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">PNG</acronym> protocol. It can also tell us some other
      things, but let us stay focused on protocol layers here.
      </para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">So, now we have some data wrapped in the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">PNG</acronym>
      protocol, wrapped in the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">HTTP</acronym> protocol.
      How did we get it from the server?</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">By using <acronym xmlns:xlink="http://www.w3.org/1999/xlink">TCP/IP</acronym> over Ethernet, that is
      how.  Indeed, that is three more protocols. Instead of
      continuing inside out, I am now going to talk about Ethernet,
      simply because it is easier to explain the rest that way.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Ethernet is an interesting system of connecting computers in
      a <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">local area network</emphasis>
      (<acronym xmlns:xlink="http://www.w3.org/1999/xlink">LAN</acronym>).  Each computer has a <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">network
      interface card</emphasis> (<acronym xmlns:xlink="http://www.w3.org/1999/xlink">NIC</acronym>), which has a
      unique 48-bit <acronym xmlns:xlink="http://www.w3.org/1999/xlink">ID</acronym> called its
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">address</emphasis>. No two Ethernet
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">NIC</acronym>s in the world have the same address.
      </para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">These <acronym xmlns:xlink="http://www.w3.org/1999/xlink">NIC</acronym>s are all connected with each
      other. Whenever one computer wants to communicate with another
      in the same Ethernet <acronym xmlns:xlink="http://www.w3.org/1999/xlink">LAN</acronym>, it sends a message
      over the network. Every <acronym xmlns:xlink="http://www.w3.org/1999/xlink">NIC</acronym> sees the
      message. But as part of the Ethernet
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">protocol</emphasis>, the data contains the address of
      the destination <acronym xmlns:xlink="http://www.w3.org/1999/xlink">NIC</acronym> (among other things). So,
      only one of all the network interface cards will pay attention
      to it, the rest will ignore it.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">But not all computers are connected to the same
      network. Just because we have received the data over our
      Ethernet does not mean it originated in our own local area
      network. It could have come to us from some other network (which
      may not even be Ethernet based) connected with our own network
      via the Internet.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">All data is transferred over the Internet using
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IP</acronym>, which stands for <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">Internet
      Protocol</emphasis>. Its basic role is to let us know where in
      the world the data has arrived from, and where it is supposed to
      go to. It does not <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">guarantee</emphasis> we will
      receive the data, only that we will know where it came from
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">if</emphasis> we do receive it.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Even if we do receive the data, <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IP</acronym> does
      not guarantee we will receive various chunks of data in the same
      order the other computer has sent it to us. So, we can receive
      the center of our image before we receive the upper left corner
      and after the lower right, for example.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">It is <acronym xmlns:xlink="http://www.w3.org/1999/xlink">TCP</acronym> (<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">Transmission Control
      Protocol</emphasis>) that asks the sender to resend any lost
      data and that places it all into the proper order.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">All in all, it took <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">five</emphasis> different
      protocols for one computer to communicate to another what an
      image looks like.  We received the data wrapped into the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">PNG</acronym> protocol, which was wrapped into the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">HTTP</acronym> protocol, which was wrapped into the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">TCP</acronym> protocol, which was wrapped into the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IP</acronym> protocol, which was wrapped into the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">Ethernet</acronym> protocol.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Oh, and by the way, there probably were several other
      protocols involved somewhere on the way. For example, if our
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">LAN</acronym> was connected to the Internet through a
      dial-up call, it used the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">PPP</acronym> protocol over
      the modem which used one (or several) of the various modem
      protocols, et cetera, et cetera, et cetera...</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">As a developer you should be asking by now,
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><quote xmlns:xlink="http://www.w3.org/1999/xlink">How am I supposed to handle it
      all?</quote></emphasis></para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Luckily for you, you are <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">not</emphasis> supposed
      to handle it all. You <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">are</emphasis> supposed to
      handle some of it, but not all of it. Specifically, you need not
      worry about the physical connection (in our case Ethernet and
      possibly <acronym xmlns:xlink="http://www.w3.org/1999/xlink">PPP</acronym>, etc). Nor do you need to handle
      the Internet Protocol, or the Transmission Control
      Protocol.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">In other words, you do not have to do anything to receive
      the data from the other computer. Well, you do have to
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">ask</emphasis> for it, but that is almost as simple as
      opening a file.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Once you have received the data, it is up to you to figure
      out what to do with it. In our case, you would need to
      understand the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">HTTP</acronym> protocol and the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">PNG</acronym> file structure.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">To use an analogy, all the internetworking protocols become
      a gray area: Not so much because we do not understand how it
      works, but because we are no longer concerned about it. The
      sockets interface takes care of this gray area for us:</para>

    <mediaobject xmlns:xlink="http://www.w3.org/1999/xlink">
      <imageobject xmlns:xlink="http://www.w3.org/1999/xlink">
        <imagedata fileref="sockets/slayers"/>
      </imageobject>

      <textobject xmlns:xlink="http://www.w3.org/1999/xlink">
        <literallayout xmlns:xlink="http://www.w3.org/1999/xlink" class="monospaced">+----------------+
|xxxxEthernetxxxx|
|+--------------+|
||xxxxxxIPxxxxxx||
||+------------+||
|||xxxxxTCPxxxx|||
|||+----------+|||
||||   HTTP   ||||
||||+--------+||||
|||||   PNG  |||||
|||||+------+|||||
|||||| Data ||||||
|||||+------+|||||
||||+--------+||||
|||+----------+|||
||+------------+||
|+--------------+|
+----------------+</literallayout>
      </textobject>

      <textobject xmlns:xlink="http://www.w3.org/1999/xlink">
        <phrase xmlns:xlink="http://www.w3.org/1999/xlink">Sockets Covered Protocol Layers</phrase>
      </textobject>
    </mediaobject>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">We only need to understand any protocols that tell us how to
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">interpret the data</emphasis>, not how to
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">receive</emphasis> it from another process, nor how to
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">send</emphasis> it to another process.</para>

  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sockets-model">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">The Sockets Model</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink"><acronym xmlns:xlink="http://www.w3.org/1999/xlink">BSD</acronym> sockets are built on the basic <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark>
      model: <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">Everything is a file.</emphasis> In our
      example, then, sockets would let us receive an <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">HTTP
      file</emphasis>, so to speak. It would then be up to us to
      extract the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><acronym xmlns:xlink="http://www.w3.org/1999/xlink">PNG</acronym> file</emphasis>
      from it.
      </para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Because of the complexity of internetworking, we cannot just
      use the <function xmlns:xlink="http://www.w3.org/1999/xlink" role="syscall">open</function> system call, or
      the <function xmlns:xlink="http://www.w3.org/1999/xlink">open()</function> C function. Instead, we need to
      take several steps to <quote xmlns:xlink="http://www.w3.org/1999/xlink">opening</quote> a socket.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Once we do, however, we can start treating the
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">socket</emphasis> the same way we treat any
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">file descriptor</emphasis>: We can
      <function xmlns:xlink="http://www.w3.org/1999/xlink">read</function> from it, <function xmlns:xlink="http://www.w3.org/1999/xlink">write</function> to
      it, <function xmlns:xlink="http://www.w3.org/1999/xlink">pipe</function> it, and, eventually,
      <function xmlns:xlink="http://www.w3.org/1999/xlink">close</function> it.</para>

  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sockets-essential-functions">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Essential Socket Functions</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">While FreeBSD offers different functions to work with
      sockets, we only <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">need</emphasis> four to
      <quote xmlns:xlink="http://www.w3.org/1999/xlink">open</quote> a socket.  And in some cases we only need
      two.</para>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sockets-client-server">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">The Client-Server Difference</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Typically, one of the ends of a socket-based data
        communication is a <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">server</emphasis>, the other is a
        <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">client</emphasis>.</para>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sockets-common-elements">
        <title xmlns:xlink="http://www.w3.org/1999/xlink">The Common Elements</title>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sockets-socket">
	  <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">socket</function></title>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">The one function used by both, clients and servers, is
	    <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">socket</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry>. It is declared this way:</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
int socket(int domain, int type, int protocol);
</programlisting>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">The return value is of the same type as that of
	    <function xmlns:xlink="http://www.w3.org/1999/xlink">open</function>, an integer. FreeBSD allocates
	    its value from the same pool as that of file handles.
	    That is what allows sockets to be treated the same way as
	    files.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">The <varname xmlns:xlink="http://www.w3.org/1999/xlink">domain</varname> argument tells the
	    system what <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">protocol family</emphasis> you want
	    it to use. Many of them exist, some are vendor specific,
	    others are very common. They are declared in
	    <filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/socket.h</filename>.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Use <constant xmlns:xlink="http://www.w3.org/1999/xlink">PF_INET</constant> for
	    <acronym xmlns:xlink="http://www.w3.org/1999/xlink">UDP</acronym>, <acronym xmlns:xlink="http://www.w3.org/1999/xlink">TCP</acronym> and other
	    Internet protocols (<acronym xmlns:xlink="http://www.w3.org/1999/xlink">IP</acronym>v4).</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Five values are defined for the
	    <varname xmlns:xlink="http://www.w3.org/1999/xlink">type</varname> argument, again, in
	    <filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/socket.h</filename>.  All of them start with
	    <quote xmlns:xlink="http://www.w3.org/1999/xlink"><constant xmlns:xlink="http://www.w3.org/1999/xlink">SOCK_</constant></quote>.  The most
	    common one is <constant xmlns:xlink="http://www.w3.org/1999/xlink">SOCK_STREAM</constant>, which
	    tells the system you are asking for a <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">reliable
	    stream delivery service</emphasis> (which is
	    <acronym xmlns:xlink="http://www.w3.org/1999/xlink">TCP</acronym> when used with
	    <constant xmlns:xlink="http://www.w3.org/1999/xlink">PF_INET</constant>).</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">If you asked for <constant xmlns:xlink="http://www.w3.org/1999/xlink">SOCK_DGRAM</constant>, you
	    would be requesting a <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">connectionless datagram
	    delivery service</emphasis> (in our case,
	    <acronym xmlns:xlink="http://www.w3.org/1999/xlink">UDP</acronym>).</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">If you wanted to be in charge of the low-level
	    protocols (such as <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IP</acronym>), or even network
	    interfaces (e.g., the Ethernet), you would need to specify
	    <constant xmlns:xlink="http://www.w3.org/1999/xlink">SOCK_RAW</constant>.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Finally, the <varname xmlns:xlink="http://www.w3.org/1999/xlink">protocol</varname> argument
	    depends on the previous two arguments, and is not always
	    meaningful.  In that case, use <constant xmlns:xlink="http://www.w3.org/1999/xlink">0</constant> for
	    its value.</para>

	  <note xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sockets-unconnected">
	    <title xmlns:xlink="http://www.w3.org/1999/xlink">The Unconnected Socket</title>

	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Nowhere, in the <function xmlns:xlink="http://www.w3.org/1999/xlink">socket</function> function
	      have we specified to what other system we should be
	      connected.  Our newly created socket remains
	      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">unconnected</emphasis>.</para>

	    <para xmlns:xlink="http://www.w3.org/1999/xlink">This is on purpose: To use a telephone analogy, we
	      have just attached a modem to the phone line. We have
	      neither told the modem to make a call, nor to answer if
	      the phone rings.</para>
	  </note>

	</sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sockets-sockaddr">
	  <title xmlns:xlink="http://www.w3.org/1999/xlink"><varname xmlns:xlink="http://www.w3.org/1999/xlink">sockaddr</varname></title>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Various functions of the sockets family expect the
 	    address of (or pointer to, to use C terminology) a small
 	    area of the memory. The various C declarations in the
 	    <filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/socket.h</filename> refer to it as
 	    <varname xmlns:xlink="http://www.w3.org/1999/xlink">struct sockaddr</varname>. This structure is
 	    declared in the same file:</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
/*
 * Structure used by kernel to store most
 * addresses.
 */
struct sockaddr {
	unsigned char	sa_len;		/* total length */
	sa_family_t	sa_family;	/* address family */
	char		sa_data[14];	/* actually longer; address value */
};
#define	SOCK_MAXADDRLEN	255		/* longest possible addresses */
</programlisting>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Please note the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">vagueness</emphasis> with
	    which the <varname xmlns:xlink="http://www.w3.org/1999/xlink">sa_data</varname> field is declared,
	    just as an array of <constant xmlns:xlink="http://www.w3.org/1999/xlink">14</constant> bytes, with
	    the comment hinting there can be more than
	    <constant xmlns:xlink="http://www.w3.org/1999/xlink">14</constant> of them.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">This vagueness is quite deliberate. Sockets is a very
	    powerful interface. While most people perhaps think of it
	    as nothing more than the Internet interface&#8212;and most
	    applications probably use it for that
	    nowadays&#8212;sockets can be used for just about
	    <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">any</emphasis> kind of interprocess
	    communications, of which the Internet (or, more precisely,
	    <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IP</acronym>) is only one.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">The <filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/socket.h</filename> refers to the
	    various types of protocols sockets will handle as
	    <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">address families</emphasis>, and lists them
	    right before the definition of
	    <varname xmlns:xlink="http://www.w3.org/1999/xlink">sockaddr</varname>:</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
/*
 * Address families.
 */
#define	AF_UNSPEC	0		/* unspecified */
#define	AF_LOCAL	1		/* local to host (pipes, portals) */
#define	AF_UNIX		AF_LOCAL	/* backward compatibility */
#define	AF_INET		2		/* internetwork: UDP, TCP, etc. */
#define	AF_IMPLINK	3		/* arpanet imp addresses */
#define	AF_PUP		4		/* pup protocols: e.g. BSP */
#define	AF_CHAOS	5		/* mit CHAOS protocols */
#define	AF_NS		6		/* XEROX NS protocols */
#define	AF_ISO		7		/* ISO protocols */
#define	AF_OSI		AF_ISO
#define	AF_ECMA		8		/* European computer manufacturers */
#define	AF_DATAKIT	9		/* datakit protocols */
#define	AF_CCITT	10		/* CCITT protocols, X.25 etc */
#define	AF_SNA		11		/* IBM SNA */
#define AF_DECnet	12		/* DECnet */
#define AF_DLI		13		/* DEC Direct data link interface */
#define AF_LAT		14		/* LAT */
#define	AF_HYLINK	15		/* NSC Hyperchannel */
#define	AF_APPLETALK	16		/* Apple Talk */
#define	AF_ROUTE	17		/* Internal Routing Protocol */
#define	AF_LINK		18		/* Link layer interface */
#define	pseudo_AF_XTP	19		/* eXpress Transfer Protocol (no AF) */
#define	AF_COIP		20		/* connection-oriented IP, aka ST II */
#define	AF_CNT		21		/* Computer Network Technology */
#define pseudo_AF_RTIP	22		/* Help Identify RTIP packets */
#define	AF_IPX		23		/* Novell Internet Protocol */
#define	AF_SIP		24		/* Simple Internet Protocol */
#define	pseudo_AF_PIP	25		/* Help Identify PIP packets */
#define	AF_ISDN		26		/* Integrated Services Digital Network*/
#define	AF_E164		AF_ISDN		/* CCITT E.164 recommendation */
#define	pseudo_AF_KEY	27		/* Internal key-management function */
#define	AF_INET6	28		/* IPv6 */
#define	AF_NATM		29		/* native ATM access */
#define	AF_ATM		30		/* ATM */
#define pseudo_AF_HDRCMPLT 31		/* Used by BPF to not rewrite headers
					 * in interface output routine
					 */
#define	AF_NETGRAPH	32		/* Netgraph sockets */
#define	AF_SLOW		33		/* 802.3ad slow protocol */
#define	AF_SCLUSTER	34		/* Sitara cluster protocol */
#define	AF_ARP		35
#define	AF_BLUETOOTH	36		/* Bluetooth sockets */
#define	AF_MAX		37

</programlisting>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">The one used for <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IP</acronym> is
	    <symbol xmlns:xlink="http://www.w3.org/1999/xlink">AF_INET</symbol>.  It is a symbol for the constant
	    <constant xmlns:xlink="http://www.w3.org/1999/xlink">2</constant>.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">It is the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">address family</emphasis> listed
	    in the <varname xmlns:xlink="http://www.w3.org/1999/xlink">sa_family</varname> field of
	    <varname xmlns:xlink="http://www.w3.org/1999/xlink">sockaddr</varname> that decides how exactly the
	    vaguely named bytes of <varname xmlns:xlink="http://www.w3.org/1999/xlink">sa_data</varname> will be
	    used.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Specifically, whenever the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">address
	    family</emphasis> is <symbol xmlns:xlink="http://www.w3.org/1999/xlink">AF_INET</symbol>, we can use
	    <varname xmlns:xlink="http://www.w3.org/1999/xlink">struct sockaddr_in</varname> found in
	    <filename xmlns:xlink="http://www.w3.org/1999/xlink">netinet/in.h</filename>, wherever
	    <varname xmlns:xlink="http://www.w3.org/1999/xlink">sockaddr</varname> is expected:</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
/*
 * Socket address, internet style.
 */
struct sockaddr_in {
	uint8_t		sin_len;
	sa_family_t	sin_family;
	in_port_t	sin_port;
	struct	in_addr sin_addr;
	char	sin_zero[8];
};
</programlisting>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">We can visualize its organization this way:</para>

          <mediaobject xmlns:xlink="http://www.w3.org/1999/xlink">
           <imageobject xmlns:xlink="http://www.w3.org/1999/xlink">
             <imagedata fileref="sockets/sain"/>
           </imageobject>

           <textobject xmlns:xlink="http://www.w3.org/1999/xlink">
             <literallayout xmlns:xlink="http://www.w3.org/1999/xlink" class="monospaced">        0        1        2       3
   +--------+--------+-----------------+
 0 |    0   | Family |       Port      |
   +--------+--------+-----------------+
 4 |             IP Address            |
   +-----------------------------------+
 8 |                 0                 |
   +-----------------------------------+
12 |                 0                 |
   +-----------------------------------+</literallayout>
           </textobject>

           <textobject xmlns:xlink="http://www.w3.org/1999/xlink">
             <phrase xmlns:xlink="http://www.w3.org/1999/xlink">sockaddr_in</phrase>
           </textobject>
         </mediaobject>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">The three important fields are
	    <varname xmlns:xlink="http://www.w3.org/1999/xlink">sin_family</varname>, which is byte 1 of the
	    structure, <varname xmlns:xlink="http://www.w3.org/1999/xlink">sin_port</varname>, a 16-bit value
	    found in bytes 2 and 3, and <varname xmlns:xlink="http://www.w3.org/1999/xlink">sin_addr</varname>, a
	    32-bit integer representation of the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IP</acronym>
	    address, stored in bytes 4-7.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Now, let us try to fill it out. Let us assume we are
	    trying to write a client for the
	    <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">daytime</emphasis> protocol, which simply states
	    that its server will write a text string representing the
	    current date and time to port 13. We want to use
	    <acronym xmlns:xlink="http://www.w3.org/1999/xlink">TCP/IP</acronym>, so we need to specify
	    <constant xmlns:xlink="http://www.w3.org/1999/xlink">AF_INET</constant> in the address family
	    field. <constant xmlns:xlink="http://www.w3.org/1999/xlink">AF_INET</constant> is defined as
	    <constant xmlns:xlink="http://www.w3.org/1999/xlink">2</constant>. Let us use the
	    <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IP</acronym> address of <systemitem xmlns:xlink="http://www.w3.org/1999/xlink" class="ipaddress">192.43.244.18</systemitem>, which is the time
	    server of US federal government (<systemitem xmlns:xlink="http://www.w3.org/1999/xlink" class="fqdomainname">time.nist.gov</systemitem>).</para>

          <mediaobject xmlns:xlink="http://www.w3.org/1999/xlink">
            <imageobject xmlns:xlink="http://www.w3.org/1999/xlink">
              <imagedata fileref="sockets/sainfill"/>
            </imageobject>

            <textobject xmlns:xlink="http://www.w3.org/1999/xlink">
              <literallayout xmlns:xlink="http://www.w3.org/1999/xlink" class="monospaced">        0        1        2       3
   +--------+--------+-----------------+
 0 |    0   |   2    |        13       |
   +-----------------+-----------------+
 4 |           192.43.244.18           |
   +-----------------------------------+
 8 |                 0                 |
   +-----------------------------------+
12 |                 0                 |
   +-----------------------------------+</literallayout>
            </textobject>

            <textobject xmlns:xlink="http://www.w3.org/1999/xlink">
              <phrase xmlns:xlink="http://www.w3.org/1999/xlink">Specific example of sockaddr_in</phrase>
            </textobject>
          </mediaobject>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">By the way the <varname xmlns:xlink="http://www.w3.org/1999/xlink">sin_addr</varname> field is
 	    declared as being of the <varname xmlns:xlink="http://www.w3.org/1999/xlink">struct in_addr</varname>
 	    type, which is defined in
 	    <filename xmlns:xlink="http://www.w3.org/1999/xlink">netinet/in.h</filename>:</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
/*
 * Internet address (a structure for historical reasons)
 */
struct in_addr {
	in_addr_t s_addr;
};
</programlisting>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">In addition, <varname xmlns:xlink="http://www.w3.org/1999/xlink">in_addr_t</varname> is a 32-bit
            integer.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">The <systemitem xmlns:xlink="http://www.w3.org/1999/xlink" class="ipaddress">192.43.244.18</systemitem> is
	    just a convenient notation of expressing a 32-bit integer
	    by listing all of its 8-bit bytes, starting with the
	    <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">most significant</emphasis> one.</para>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">So far, we have viewed <varname xmlns:xlink="http://www.w3.org/1999/xlink">sockaddr</varname> as
	    an abstraction.  Our computer does not store
	    <varname xmlns:xlink="http://www.w3.org/1999/xlink">short</varname> integers as a single 16-bit
	    entity, but as a sequence of 2 bytes. Similarly, it stores
	    32-bit integers as a sequence of 4 bytes.</para>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Suppose we coded something like this:</para>

	  <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">sa.sin_family      = AF_INET;
sa.sin_port        = 13;
sa.sin_addr.s_addr = (((((192 &lt;&lt; 8) | 43) &lt;&lt; 8) | 244) &lt;&lt; 8) | 18;</programlisting>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">What would the result look like?</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Well, that depends, of course. On a <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">Pentium</trademark>, or other
	    x86, based computer, it would look like this:</para>

          <mediaobject xmlns:xlink="http://www.w3.org/1999/xlink">
            <imageobject xmlns:xlink="http://www.w3.org/1999/xlink">
              <imagedata fileref="sockets/sainlsb"/>
            </imageobject>

            <textobject xmlns:xlink="http://www.w3.org/1999/xlink">
              <literallayout xmlns:xlink="http://www.w3.org/1999/xlink" class="monospaced">        0        1        2       3
   +--------+--------+--------+--------+
 0 |    0   |   2    |   13   |   0    |
   +--------+--------+--------+--------+
 4 |   18   |  244   |   43   |  192   |
   +-----------------------------------+
 8 |                 0                 |
   +-----------------------------------+
12 |                 0                 |
   +-----------------------------------+</literallayout>
            </textobject>

            <textobject xmlns:xlink="http://www.w3.org/1999/xlink">
              <phrase xmlns:xlink="http://www.w3.org/1999/xlink">sockaddr_in on an Intel system</phrase>
            </textobject>
          </mediaobject>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">On a different system, it might look like this:
	    </para>

          <mediaobject xmlns:xlink="http://www.w3.org/1999/xlink">
            <imageobject xmlns:xlink="http://www.w3.org/1999/xlink">
              <imagedata fileref="sockets/sainmsb"/>
            </imageobject>

            <textobject xmlns:xlink="http://www.w3.org/1999/xlink">
              <literallayout xmlns:xlink="http://www.w3.org/1999/xlink" class="monospaced">        0        1        2       3
   +--------+--------+--------+--------+
 0 |    0   |   2    |    0   |   13   |
   +--------+--------+--------+--------+
 4 |   192  |   43   |   244  |   18   |
   +-----------------------------------+
 8 |                 0                 |
   +-----------------------------------+
12 |                 0                 |
   +-----------------------------------+</literallayout>
            </textobject>

            <textobject xmlns:xlink="http://www.w3.org/1999/xlink">
              <phrase xmlns:xlink="http://www.w3.org/1999/xlink">sockaddr_in on an MSB system</phrase>
            </textobject>
          </mediaobject>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">And on a PDP it might look different yet. But the
	    above two are the most common ways in use today.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Ordinarily, wanting to write portable code,
	    programmers pretend that these differences do not
	    exist. And they get away with it (except when they code in
	    assembly language). Alas, you cannot get away with it that
	    easily when coding for sockets.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Why?</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Because when communicating with another computer, you
	    usually do not know whether it stores data <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">most
	    significant byte</emphasis> (<acronym xmlns:xlink="http://www.w3.org/1999/xlink">MSB</acronym>) or
	    <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">least significant byte</emphasis>
	    (<acronym xmlns:xlink="http://www.w3.org/1999/xlink">LSB</acronym>) first.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">You might be wondering, <emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><quote xmlns:xlink="http://www.w3.org/1999/xlink">So, will
	    sockets not handle it for me?</quote></emphasis></para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">It will not.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">While that answer may surprise you at first, remember
 	    that the general sockets interface only understands the
 	    <varname xmlns:xlink="http://www.w3.org/1999/xlink">sa_len</varname> and <varname xmlns:xlink="http://www.w3.org/1999/xlink">sa_family</varname>
 	    fields of the <varname xmlns:xlink="http://www.w3.org/1999/xlink">sockaddr</varname> structure. You
 	    do not have to worry about the byte order there (of
 	    course, on FreeBSD <varname xmlns:xlink="http://www.w3.org/1999/xlink">sa_family</varname> is only 1
 	    byte anyway, but many other <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> systems do not have
 	    <varname xmlns:xlink="http://www.w3.org/1999/xlink">sa_len</varname> and use 2 bytes for
 	    <varname xmlns:xlink="http://www.w3.org/1999/xlink">sa_family</varname>, and expect the data in
 	    whatever order is native to the computer).</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">But the rest of the data is just
	    <varname xmlns:xlink="http://www.w3.org/1999/xlink">sa_data[14]</varname> as far as sockets
	    goes. Depending on the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">address
	    family</emphasis>, sockets just forwards that data to its
	    destination.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Indeed, when we enter a port number, it is because we
	    want the other computer to know what service we are asking
	    for. And, when we are the server, we read the port number
	    so we know what service the other computer is expecting
	    from us. Either way, sockets only has to forward the port
	    number as data. It does not interpret it in any way.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Similarly, we enter the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IP</acronym> address
	    to tell everyone on the way where to send our data
	    to. Sockets, again, only forwards it as data.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">That is why, we (the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">programmers</emphasis>,
	    not the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">sockets</emphasis>) have to distinguish
	    between the byte order used by our computer and a
	    conventional byte order to send the data in to the other
	    computer.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">We will call the byte order our computer uses the
	    <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">host byte order</emphasis>, or just the
	    <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">host order</emphasis>.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">There is a convention of sending the multi-byte data
	    over <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IP</acronym>
	    <emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><acronym xmlns:xlink="http://www.w3.org/1999/xlink">MSB</acronym> first</emphasis>.  This,
	    we will refer to as the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">network byte
	    order</emphasis>, or simply the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">network
	    order</emphasis>.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Now, if we compiled the above code for an Intel based
	    computer, our <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">host byte order</emphasis> would
	    produce:</para>

	  <mediaobject xmlns:xlink="http://www.w3.org/1999/xlink">
	    <imageobject xmlns:xlink="http://www.w3.org/1999/xlink">
              <imagedata fileref="sockets/sainlsb"/>
            </imageobject>

            <textobject xmlns:xlink="http://www.w3.org/1999/xlink">
              <literallayout xmlns:xlink="http://www.w3.org/1999/xlink" class="monospaced">        0        1        2       3
   +--------+--------+--------+--------+
 0 |    0   |   2    |   13   |   0    |
   +--------+--------+--------+--------+
 4 |   18   |  244   |   43   |  192   |
   +-----------------------------------+
 8 |                 0                 |
   +-----------------------------------+
12 |                 0                 |
   +-----------------------------------+</literallayout>
            </textobject>

            <textobject xmlns:xlink="http://www.w3.org/1999/xlink">
              <phrase xmlns:xlink="http://www.w3.org/1999/xlink">Host byte order on an Intel system</phrase>
            </textobject>
          </mediaobject>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">But the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">network byte order</emphasis>
 	    requires that we store the data <acronym xmlns:xlink="http://www.w3.org/1999/xlink">MSB</acronym>
 	    first:</para>

          <mediaobject xmlns:xlink="http://www.w3.org/1999/xlink">
            <imageobject xmlns:xlink="http://www.w3.org/1999/xlink">
              <imagedata fileref="sockets/sainmsb"/>
            </imageobject>

            <textobject xmlns:xlink="http://www.w3.org/1999/xlink">
              <literallayout xmlns:xlink="http://www.w3.org/1999/xlink" class="monospaced">        0        1        2       3
   +--------+--------+--------+--------+
 0 |    0   |   2    |    0   |   13   |
   +--------+--------+--------+--------+
 4 |   192  |   43   |   244  |   18   |
   +-----------------------------------+
 8 |                 0                 |
   +-----------------------------------+
12 |                 0                 |
   +-----------------------------------+</literallayout>
            </textobject>

            <textobject xmlns:xlink="http://www.w3.org/1999/xlink">
              <phrase xmlns:xlink="http://www.w3.org/1999/xlink">Network byte order</phrase>
            </textobject>
          </mediaobject>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Unfortunately, our <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">host order</emphasis> is
	    the exact opposite of the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">network
	    order</emphasis>.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">We have several ways of dealing with it. One would be
	    to <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">reverse</emphasis> the values in our code:
	    </para>

	  <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">sa.sin_family      = AF_INET;
sa.sin_port        = 13 &lt;&lt; 8;
sa.sin_addr.s_addr = (((((18 &lt;&lt; 8) | 244) &lt;&lt; 8) | 43) &lt;&lt; 8) | 192;</programlisting>

           <para xmlns:xlink="http://www.w3.org/1999/xlink">This will <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">trick</emphasis> our compiler
	     into storing the data in the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">network byte
	     order</emphasis>. In some cases, this is exactly the way
	     to do it (e.g., when programming in assembly
	     language). In most cases, however, it can cause a
	     problem.</para>

	   <para xmlns:xlink="http://www.w3.org/1999/xlink">Suppose, you wrote a sockets-based program in C. You
	     know it is going to run on a <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">Pentium</trademark>, so you enter all
	     your constants in reverse and force them to the
	     <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">network byte order</emphasis>. It works
	     well.</para>

           <para xmlns:xlink="http://www.w3.org/1999/xlink">Then, some day, your trusted old <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">Pentium</trademark> becomes a
	     rusty old <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">Pentium</trademark>.  You replace it with a system whose
	     <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">host order</emphasis> is the same as the
	     <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">network order</emphasis>. You need to recompile
	     all your software. All of your software continues to
	     perform well, except the one program you wrote.</para>

	   <para xmlns:xlink="http://www.w3.org/1999/xlink">You have since forgotten that you had forced all of
	     your constants to the opposite of the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">host
	     order</emphasis>. You spend some quality time tearing out
	     your hair, calling the names of all gods you ever heard
	     of (and some you made up), hitting your monitor with a
	     nerf bat, and performing all the other traditional
	     ceremonies of trying to figure out why something that has
	     worked so well is suddenly not working at all.</para>

	   <para xmlns:xlink="http://www.w3.org/1999/xlink">Eventually, you figure it out, say a couple of swear
	     words, and start rewriting your code.</para>

	   <para xmlns:xlink="http://www.w3.org/1999/xlink">Luckily, you are not the first one to face the
	     problem. Someone else has created the <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">htons</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry> and
	     <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">htonl</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry> C functions to convert a
	     <varname xmlns:xlink="http://www.w3.org/1999/xlink">short</varname> and <varname xmlns:xlink="http://www.w3.org/1999/xlink">long</varname>
	     respectively from the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">host byte
	     order</emphasis> to the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">network byte
	     order</emphasis>, and the <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">ntohs</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry> and <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">ntohl</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry>
	     C functions to go the other way.</para>

	   <para xmlns:xlink="http://www.w3.org/1999/xlink">On <emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><acronym xmlns:xlink="http://www.w3.org/1999/xlink">MSB</acronym>-first</emphasis>
	     systems these functions do nothing. On
	     <emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><acronym xmlns:xlink="http://www.w3.org/1999/xlink">LSB</acronym>-first</emphasis> systems
	     they convert values to the proper order.</para>

	   <para xmlns:xlink="http://www.w3.org/1999/xlink">So, regardless of what system your software is
	     compiled on, your data will end up in the correct order
	     if you use these functions.</para>

	 </sect4>

      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sockets-client-functions">
        <title xmlns:xlink="http://www.w3.org/1999/xlink">Client Functions</title>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Typically, the client initiates the connection to the
	  server. The client knows which server it is about to call:
	  It knows its <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IP</acronym> address, and it knows the
	  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">port</emphasis> the server resides at. It is akin
	  to you picking up the phone and dialing the number (the
	  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">address</emphasis>), then, after someone answers,
	  asking for the person in charge of wingdings (the
	  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">port</emphasis>).</para>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sockets-connect">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">connect</function></title>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Once a client has created a socket, it needs to
	    connect it to a specific port on a remote system. It uses
	    <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">connect</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry>:</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
int connect(int s, const struct sockaddr *name, socklen_t namelen);
</programlisting>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">The <varname xmlns:xlink="http://www.w3.org/1999/xlink">s</varname> argument is the socket, i.e.,
	    the value returned by the <function xmlns:xlink="http://www.w3.org/1999/xlink">socket</function>
	    function. The <varname xmlns:xlink="http://www.w3.org/1999/xlink">name</varname> is a pointer to
	    <varname xmlns:xlink="http://www.w3.org/1999/xlink">sockaddr</varname>, the structure we have talked
	    about extensively. Finally, <varname xmlns:xlink="http://www.w3.org/1999/xlink">namelen</varname>
	    informs the system how many bytes are in our
	    <varname xmlns:xlink="http://www.w3.org/1999/xlink">sockaddr</varname> structure.</para>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">If <function xmlns:xlink="http://www.w3.org/1999/xlink">connect</function> is successful, it
	    returns <constant xmlns:xlink="http://www.w3.org/1999/xlink">0</constant>. Otherwise it returns
	    <constant xmlns:xlink="http://www.w3.org/1999/xlink">-1</constant> and stores the error code in
	    <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname>.</para>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">There are many reasons why
	    <function xmlns:xlink="http://www.w3.org/1999/xlink">connect</function> may fail.  For example, with
	    an attempt to an Internet connection, the
	    <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IP</acronym> address may not exist, or it may be
	    down, or just too busy, or it may not have a server
	    listening at the specified port. Or it may outright
	    <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">refuse</emphasis> any request for specific
	    code.</para>

	</sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sockets-first-client">
          <title xmlns:xlink="http://www.w3.org/1999/xlink">Our First Client</title>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">We now know enough to write a very simple client, one
	    that will get current time from <systemitem xmlns:xlink="http://www.w3.org/1999/xlink" class="ipaddress">192.43.244.18</systemitem> and print it to
	    <filename xmlns:xlink="http://www.w3.org/1999/xlink">stdout</filename>.</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
/*
 * daytime.c
 *
 * Programmed by G. Adam Stanislav
 */
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;

int main() {
  register int s;
  register int bytes;
  struct sockaddr_in sa;
  char buffer[BUFSIZ+1];

  if ((s = socket(PF_INET, SOCK_STREAM, 0)) &lt; 0) {
    perror("socket");
    return 1;
  }

  bzero(&amp;sa, sizeof sa);

  sa.sin_family = AF_INET;
  sa.sin_port = htons(13);
  sa.sin_addr.s_addr = htonl((((((192 &lt;&lt; 8) | 43) &lt;&lt; 8) | 244) &lt;&lt; 8) | 18);
  if (connect(s, (struct sockaddr *)&amp;sa, sizeof sa) &lt; 0) {
    perror("connect");
    close(s);
    return 2;
  }

  while ((bytes = read(s, buffer, BUFSIZ)) &gt; 0)
    write(1, buffer, bytes);

  close(s);
  return 0;
}
</programlisting>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Go ahead, enter it in your editor, save it as
	    <filename xmlns:xlink="http://www.w3.org/1999/xlink">daytime.c</filename>, then compile and run
	    it:</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cc -O3 -o daytime daytime.c</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">./daytime</userinput>

52079 01-06-19 02:29:25 50 0 1 543.9 UTC(NIST) *
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt></screen>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">In this case, the date was June 19, 2001, the time was
	    02:29:25 <acronym xmlns:xlink="http://www.w3.org/1999/xlink">UTC</acronym>. Naturally, your results
	    will vary.</para>

	</sect4>

      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sockets-server-functions">
        <title xmlns:xlink="http://www.w3.org/1999/xlink">Server Functions</title>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">The typical server does not initiate the
	  connection. Instead, it waits for a client to call it and
	  request services. It does not know when the client will
	  call, nor how many clients will call. It may be just sitting
	  there, waiting patiently, one moment, The next moment, it
	  can find itself swamped with requests from a number of
	  clients, all calling in at the same time.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The sockets interface offers three basic functions to
	  handle this.</para>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sockets-bind">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">bind</function></title>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Ports are like extensions to a phone line: After you
	    dial a number, you dial the extension to get to a specific
	    person or department.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">There are 65535 <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IP</acronym> ports, but a
	    server usually processes requests that come in on only one
	    of them. It is like telling the phone room operator that
	    we are now at work and available to answer the phone at a
	    specific extension. We use <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">bind</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> to tell sockets
	    which port we want to serve.</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
int bind(int s, const struct sockaddr *addr, socklen_t addrlen);
</programlisting>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Beside specifying the port in <varname xmlns:xlink="http://www.w3.org/1999/xlink">addr</varname>,
	    the server may include its <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IP</acronym>
	    address. However, it can just use the symbolic constant
	    <symbol xmlns:xlink="http://www.w3.org/1999/xlink">INADDR_ANY</symbol> to indicate it will serve all
	    requests to the specified port regardless of what its
	    <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IP</acronym> address is. This symbol, along with
	    several similar ones, is declared in
	    <filename xmlns:xlink="http://www.w3.org/1999/xlink">netinet/in.h</filename></para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
#define	INADDR_ANY		(u_int32_t)0x00000000
</programlisting>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Suppose we were writing a server for the
	    <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">daytime</emphasis> protocol over
	    <acronym xmlns:xlink="http://www.w3.org/1999/xlink">TCP</acronym>/<acronym xmlns:xlink="http://www.w3.org/1999/xlink">IP</acronym>. Recall that
	    it uses port 13. Our <varname xmlns:xlink="http://www.w3.org/1999/xlink">sockaddr_in</varname>
	    structure would look like this:</para>

          <mediaobject xmlns:xlink="http://www.w3.org/1999/xlink">
            <imageobject xmlns:xlink="http://www.w3.org/1999/xlink">
              <imagedata fileref="sockets/sainserv"/>
            </imageobject>

            <textobject xmlns:xlink="http://www.w3.org/1999/xlink">
              <literallayout xmlns:xlink="http://www.w3.org/1999/xlink" class="monospaced">        0        1        2       3
   +--------+--------+--------+--------+
 0 |    0   |   2    |    0   |   13   |
   +--------+--------+--------+--------+
 4 |                 0                 |
   +-----------------------------------+
 8 |                 0                 |
   +-----------------------------------+
12 |                 0                 |
   +-----------------------------------+</literallayout>
            </textobject>

            <textobject xmlns:xlink="http://www.w3.org/1999/xlink">
              <phrase xmlns:xlink="http://www.w3.org/1999/xlink">Example Server sockaddr_in</phrase>
            </textobject>
          </mediaobject>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sockets-listen">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">listen</function></title>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">To continue our office phone analogy, after you have
	    told the phone central operator what extension you will be
	    at, you now walk into your office, and make sure your own
	    phone is plugged in and the ringer is turned on. Plus, you
	    make sure your call waiting is activated, so you can hear
	    the phone ring even while you are talking to someone.</para>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">The server ensures all of that with the <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">listen</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry>
            function.</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
int listen(int s, int backlog);
</programlisting>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">In here, the <varname xmlns:xlink="http://www.w3.org/1999/xlink">backlog</varname> variable tells
	    sockets how many incoming requests to accept while you are
	    busy processing the last request. In other words, it
	    determines the maximum size of the queue of pending
	    connections.</para>

        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sockets-accept">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">accept</function></title>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">After you hear the phone ringing, you accept the call
	    by answering the call. You have now established a
	    connection with your client. This connection remains
	    active until either you or your client hang up.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">The server accepts the connection by using the
  	    <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">accept</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> function.</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
int accept(int s, struct sockaddr *addr, socklen_t *addrlen);
</programlisting>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Note that this time <varname xmlns:xlink="http://www.w3.org/1999/xlink">addrlen</varname> is a
            pointer. This is necessary because in this case it is the
            socket that fills out <varname xmlns:xlink="http://www.w3.org/1999/xlink">addr</varname>, the
            <varname xmlns:xlink="http://www.w3.org/1999/xlink">sockaddr_in</varname> structure.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">The return value is an integer. Indeed, the
	    <function xmlns:xlink="http://www.w3.org/1999/xlink">accept</function> returns a <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">new
	    socket</emphasis>. You will use this new socket to
	    communicate with the client.</para>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">What happens to the old socket? It continues to listen
	    for more requests (remember the <varname xmlns:xlink="http://www.w3.org/1999/xlink">backlog</varname>
	    variable we passed to <function xmlns:xlink="http://www.w3.org/1999/xlink">listen</function>?) until
	    we <function xmlns:xlink="http://www.w3.org/1999/xlink">close</function> it.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Now, the new socket is meant only for
	    communications. It is fully connected. We cannot pass it
	    to <function xmlns:xlink="http://www.w3.org/1999/xlink">listen</function> again, trying to accept
	    additional connections.</para>

        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sockets-first-server">
          <title xmlns:xlink="http://www.w3.org/1999/xlink">Our First Server</title>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Our first server will be somewhat more complex than
	    our first client was: Not only do we have more sockets
	    functions to use, but we need to write it as a
	    daemon.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">This is best achieved by creating a <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">child
	    process</emphasis> after binding the port. The main
	    process then exits and returns control to the
	    <application xmlns:xlink="http://www.w3.org/1999/xlink">shell</application> (or whatever program
	    invoked it).</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">The child calls <function xmlns:xlink="http://www.w3.org/1999/xlink">listen</function>, then
	    starts an endless loop, which accepts a connection, serves
	    it, and eventually closes its socket.</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
/*
 * daytimed - a port 13 server
 *
 * Programmed by G. Adam Stanislav
 * June 19, 2001
 */
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;time.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;

#define BACKLOG 4

int main() {
    register int s, c;
    int b;
    struct sockaddr_in sa;
    time_t t;
    struct tm *tm;
    FILE *client;

    if ((s = socket(PF_INET, SOCK_STREAM, 0)) &lt; 0) {
        perror("socket");
        return 1;
    }

    bzero(&amp;sa, sizeof sa);

    sa.sin_family = AF_INET;
    sa.sin_port   = htons(13);

    if (INADDR_ANY)
        sa.sin_addr.s_addr = htonl(INADDR_ANY);

    if (bind(s, (struct sockaddr *)&amp;sa, sizeof sa) &lt; 0) {
        perror("bind");
        return 2;
    }

    switch (fork()) {
        case -1:
            perror("fork");
            return 3;
            break;
        default:
            close(s);
            return 0;
            break;
        case 0:
            break;
    }

    listen(s, BACKLOG);

    for (;;) {
        b = sizeof sa;

        if ((c = accept(s, (struct sockaddr *)&amp;sa, &amp;b)) &lt; 0) {
            perror("daytimed accept");
            return 4;
        }

        if ((client = fdopen(c, "w")) == NULL) {
            perror("daytimed fdopen");
            return 5;
        }

        if ((t = time(NULL)) &lt; 0) {
            perror("daytimed time");

            return 6;
        }

        tm = gmtime(&amp;t);
        fprintf(client, "%.4i-%.2i-%.2iT%.2i:%.2i:%.2iZ\n",
            tm-&gt;tm_year + 1900,
            tm-&gt;tm_mon + 1,
            tm-&gt;tm_mday,
            tm-&gt;tm_hour,
            tm-&gt;tm_min,
            tm-&gt;tm_sec);

        fclose(client);
    }
}
</programlisting>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">We start by creating a socket. Then we fill out the
	    <varname xmlns:xlink="http://www.w3.org/1999/xlink">sockaddr_in</varname> structure in
	    <varname xmlns:xlink="http://www.w3.org/1999/xlink">sa</varname>.  Note the conditional use of
	    <symbol xmlns:xlink="http://www.w3.org/1999/xlink">INADDR_ANY</symbol>:</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
    if (INADDR_ANY)
        sa.sin_addr.s_addr = htonl(INADDR_ANY);
</programlisting>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Its value is <constant xmlns:xlink="http://www.w3.org/1999/xlink">0</constant>. Since we have
	    just used <function xmlns:xlink="http://www.w3.org/1999/xlink">bzero</function> on the entire
	    structure, it would be redundant to set it to
	    <constant xmlns:xlink="http://www.w3.org/1999/xlink">0</constant> again. But if we port our code to
	    some other system where <symbol xmlns:xlink="http://www.w3.org/1999/xlink">INADDR_ANY</symbol> is
	    perhaps not a zero, we need to assign it to
	    <varname xmlns:xlink="http://www.w3.org/1999/xlink">sa.sin_addr.s_addr</varname>. Most modern C
	    compilers are clever enough to notice that
	    <symbol xmlns:xlink="http://www.w3.org/1999/xlink">INADDR_ANY</symbol> is a constant. As long as it
	    is a zero, they will optimize the entire conditional
	    statement out of the code.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">After we have called <function xmlns:xlink="http://www.w3.org/1999/xlink">bind</function>
	    successfully, we are ready to become a
	    <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">daemon</emphasis>: We use
	    <function xmlns:xlink="http://www.w3.org/1999/xlink">fork</function> to create a child process. In
	    both, the parent and the child, the <varname xmlns:xlink="http://www.w3.org/1999/xlink">s</varname>
	    variable is our socket. The parent process will not need
	    it, so it calls <function xmlns:xlink="http://www.w3.org/1999/xlink">close</function>, then it
	    returns <constant xmlns:xlink="http://www.w3.org/1999/xlink">0</constant> to inform its own parent it
	    had terminated successfully.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Meanwhile, the child process continues working in the
	    background.  It calls <function xmlns:xlink="http://www.w3.org/1999/xlink">listen</function> and sets
	    its backlog to <constant xmlns:xlink="http://www.w3.org/1999/xlink">4</constant>. It does not need a
	    large value here because <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">daytime</emphasis> is
	    not a protocol many clients request all the time, and
	    because it can process each request instantly anyway.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Finally, the daemon starts an endless loop, which
	    performs the following steps:</para>

	  <procedure xmlns:xlink="http://www.w3.org/1999/xlink">
	    <step xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink"> Call <function xmlns:xlink="http://www.w3.org/1999/xlink">accept</function>. It waits
	      here until a client contacts it. At that point, it
	      receives a new socket, <varname xmlns:xlink="http://www.w3.org/1999/xlink">c</varname>, which it
	      can use to communicate with this particular client.
	      </para></step>

            <step xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">It uses the C function
	      <function xmlns:xlink="http://www.w3.org/1999/xlink">fdopen</function> to turn the socket from a
	      low-level <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">file descriptor</emphasis> to a
	      C-style <varname xmlns:xlink="http://www.w3.org/1999/xlink">FILE</varname> pointer. This will allow
	      the use of <function xmlns:xlink="http://www.w3.org/1999/xlink">fprintf</function> later on.
	      </para></step>

	    <step xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">It checks the time, and prints it in the
	      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><acronym xmlns:xlink="http://www.w3.org/1999/xlink">ISO</acronym> 8601</emphasis> format
	      to the <varname xmlns:xlink="http://www.w3.org/1999/xlink">client</varname> <quote xmlns:xlink="http://www.w3.org/1999/xlink">file</quote>. It
	      then uses <function xmlns:xlink="http://www.w3.org/1999/xlink">fclose</function> to close the
	      file. That will automatically close the socket as well.
	      </para></step>

	  </procedure>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">We can <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">generalize</emphasis> this, and use
	    it as a model for many other servers:</para>

          <mediaobject xmlns:xlink="http://www.w3.org/1999/xlink">
            <imageobject xmlns:xlink="http://www.w3.org/1999/xlink">
              <imagedata fileref="sockets/serv"/>
            </imageobject>

            <textobject xmlns:xlink="http://www.w3.org/1999/xlink">
              <literallayout xmlns:xlink="http://www.w3.org/1999/xlink" class="monospaced">+-----------------+
|  Create Socket  |
+-----------------+
          |
+-----------------+
|    Bind Port    |       Daemon Process
+-----------------+
          |                 +--------+
          +-------------+--&gt;|  Init  |
          |             |   +--------+
+-----------------+     |         |
|        Exit     |     |   +--------+
+-----------------+     |   | Listen |
                        |   +--------+
                        |         |
                        |   +--------+
                        |   | Accept |
                        |   +--------+
                        |         |
                        |   +--------+
                        |   | Serve  |
                        |   +--------+
                        |         |
                        |   +--------+
                        |   | Close  |
                        |&lt;--------+</literallayout>
            </textobject>

            <textobject xmlns:xlink="http://www.w3.org/1999/xlink">
              <phrase xmlns:xlink="http://www.w3.org/1999/xlink">Sequential Server</phrase>
            </textobject>
          </mediaobject>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">This flowchart is good for <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">sequential
	    servers</emphasis>, i.e., servers that can serve one
	    client at a time, just as we were able to with our
	    <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">daytime</emphasis> server. This is only possible
	    whenever there is no real <quote xmlns:xlink="http://www.w3.org/1999/xlink">conversation</quote>
	    going on between the client and the server: As soon as the
	    server detects a connection to the client, it sends out
	    some data and closes the connection. The entire operation
	    may take nanoseconds, and it is finished.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">The advantage of this flowchart is that, except for
	    the brief moment after the parent
	    <function xmlns:xlink="http://www.w3.org/1999/xlink">fork</function>s and before it exits, there is
	    always only one <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">process</emphasis> active: Our
	    server does not take up much memory and other system
	    resources.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Note that we have added <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">initialize
	    daemon</emphasis> in our flowchart. We did not need to
	    initialize our own daemon, but this is a good place in the
	    flow of the program to set up any
	    <function xmlns:xlink="http://www.w3.org/1999/xlink">signal</function> handlers, open any files we
	    may need, etc.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Just about everything in the flow chart can be used
	    literally on many different servers. The
	    <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">serve</emphasis> entry is the exception.  We
	    think of it as a <emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><quote xmlns:xlink="http://www.w3.org/1999/xlink">black
	    box</quote></emphasis>, i.e., something you design
	    specifically for your own server, and just <quote xmlns:xlink="http://www.w3.org/1999/xlink">plug it
	    into the rest.</quote></para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Not all protocols are that simple. Many receive a
	    request from the client, reply to it, then receive another
	    request from the same client. Because of that, they do not
	    know in advance how long they will be serving the
	    client. Such servers usually start a new process for each
	    client. While the new process is serving its client, the
	    daemon can continue listening for more connections.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Now, go ahead, save the above source code as
	    <filename xmlns:xlink="http://www.w3.org/1999/xlink">daytimed.c</filename> (it is customary to end
	    the names of daemons with the letter
	    <constant xmlns:xlink="http://www.w3.org/1999/xlink">d</constant>). After you have compiled it, try
	    running it:</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">./daytimed</userinput>
bind: Permission denied
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt></screen>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">What happened here? As you will recall, the
	    <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">daytime</emphasis> protocol uses port 13. But
	    all ports below 1024 are reserved to the superuser
	    (otherwise, anyone could start a daemon pretending to
	    serve a commonly used port, while causing a security
	    breach).</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Try again, this time as the superuser:</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">./daytimed</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt></screen>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">What... Nothing? Let us try again:</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">./daytimed</userinput>

bind: Address already in use
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt></screen>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Every port can only be bound by one program at a
	    time. Our first attempt was indeed successful: It started
	    the child daemon and returned quietly. It is still running
	    and will continue to run until you either kill it, or any
	    of its system calls fail, or you reboot the system.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Fine, we know it is running in the background. But is
	    it working?  How do we know it is a proper
	    <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">daytime</emphasis> server?  Simple:</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">telnet localhost 13</userinput>

Trying ::1...
telnet: connect to address ::1: Connection refused
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
2001-06-19T21:04:42Z
Connection closed by foreign host.
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt></screen>

          <para xmlns:xlink="http://www.w3.org/1999/xlink"><application xmlns:xlink="http://www.w3.org/1999/xlink">telnet</application> tried the new
	    <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IP</acronym>v6, and failed. It retried with
	    <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IP</acronym>v4 and succeeded.  The daemon
	    works.</para>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">If you have access to another <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> system via
	    <application xmlns:xlink="http://www.w3.org/1999/xlink">telnet</application>, you can use it to test
	    accessing the server remotely. My computer does not have a
	    static <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IP</acronym> address, so this is what I
	    did:</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">who</userinput>

whizkid          ttyp0   Jun 19 16:59   (216.127.220.143)
xxx              ttyp1   Jun 19 16:06   (xx.xx.xx.xx)
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">telnet 216.127.220.143 13</userinput>

Trying 216.127.220.143...
Connected to r47.bfm.org.
Escape character is '^]'.
2001-06-19T21:31:11Z
Connection closed by foreign host.
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt></screen>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Again, it worked. Will it work using the domain name?
	    </para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">telnet r47.bfm.org 13</userinput>

Trying 216.127.220.143...
Connected to r47.bfm.org.
Escape character is '^]'.
2001-06-19T21:31:40Z
Connection closed by foreign host.
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt></screen>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">By the way, <application xmlns:xlink="http://www.w3.org/1999/xlink">telnet</application> prints
	    the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">Connection closed by foreign host</emphasis>
	    message after our daemon has closed the socket. This shows
	    us that, indeed, using
	    <function xmlns:xlink="http://www.w3.org/1999/xlink">fclose(client);</function> in our code works as
	    advertised.</para>

        </sect4>

      </sect3>

    </sect2>

  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sockets-helper-functions">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Helper Functions</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">FreeBSD C library contains many helper functions for sockets
      programming.  For example, in our sample client we hard coded
      the <systemitem xmlns:xlink="http://www.w3.org/1999/xlink" class="fqdomainname">time.nist.gov</systemitem>
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IP</acronym> address. But we do not always know the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IP</acronym> address.  Even if we do, our software is
      more flexible if it allows the user to enter the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IP</acronym> address, or even the domain name.
      </para>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sockets-gethostbyname">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">gethostbyname</function></title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">While there is no way to pass the domain name directly to
        any of the sockets functions, the FreeBSD C library comes with
        the <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">gethostbyname</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry> and <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">gethostbyname2</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry> functions,
        declared in <filename xmlns:xlink="http://www.w3.org/1999/xlink">netdb.h</filename>.</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
struct hostent * gethostbyname(const char *name);
struct hostent * gethostbyname2(const char *name, int af);
</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Both return a pointer to the <varname xmlns:xlink="http://www.w3.org/1999/xlink">hostent</varname>
        structure, with much information about the domain. For our
        purposes, the <varname xmlns:xlink="http://www.w3.org/1999/xlink">h_addr_list[0]</varname> field of the
        structure points at <varname xmlns:xlink="http://www.w3.org/1999/xlink">h_length</varname> bytes of the
        correct address, already stored in the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">network byte
        order</emphasis>.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">This allows us to create a much more flexible&#8212;and
        much more useful&#8212;version of our
        <application xmlns:xlink="http://www.w3.org/1999/xlink">daytime</application> program:</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
/*
 * daytime.c
 *
 * Programmed by G. Adam Stanislav
 * 19 June 2001
 */
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;netdb.h&gt;

int main(int argc, char *argv[]) {
  register int s;
  register int bytes;
  struct sockaddr_in sa;
  struct hostent *he;
  char buf[BUFSIZ+1];
  char *host;

  if ((s = socket(PF_INET, SOCK_STREAM, 0)) &lt; 0) {
    perror("socket");
    return 1;
  }

  bzero(&amp;sa, sizeof sa);

  sa.sin_family = AF_INET;
  sa.sin_port = htons(13);

  host = (argc &gt; 1) ? (char *)argv[1] : "time.nist.gov";

  if ((he = gethostbyname(host)) == NULL) {
    herror(host);
    return 2;
  }

  bcopy(he-&gt;h_addr_list[0],&amp;sa.sin_addr, he-&gt;h_length);

  if (connect(s, (struct sockaddr *)&amp;sa, sizeof sa) &lt; 0) {
    perror("connect");
    return 3;
  }

  while ((bytes = read(s, buf, BUFSIZ)) &gt; 0)
    write(1, buf, bytes);

  close(s);
  return 0;
}
</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">We now can type a domain name (or an <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IP</acronym>
        address, it works both ways) on the command line, and the
        program will try to connect to its
        <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">daytime</emphasis> server. Otherwise, it will still
        default to <systemitem xmlns:xlink="http://www.w3.org/1999/xlink" class="fqdomainname">time.nist.gov</systemitem>. However, even in
        this case we will use <function xmlns:xlink="http://www.w3.org/1999/xlink">gethostbyname</function>
        rather than hard coding <systemitem xmlns:xlink="http://www.w3.org/1999/xlink" class="ipaddress">192.43.244.18</systemitem>. That way, even if its
        <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IP</acronym> address changes in the future, we will
        still find it.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Since it takes virtually no time to get the time from your
        local server, you could run <application xmlns:xlink="http://www.w3.org/1999/xlink">daytime</application>
        twice in a row: First to get the time from <systemitem xmlns:xlink="http://www.w3.org/1999/xlink" class="fqdomainname">time.nist.gov</systemitem>, the second time from
        your own system. You can then compare the results and see how
        exact your system clock is:</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">daytime ; daytime localhost</userinput>


52080 01-06-20 04:02:33 50 0 0 390.2 UTC(NIST) *
2001-06-20T04:02:35Z
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt></screen>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">As you can see, my system was two seconds ahead of the
        <acronym xmlns:xlink="http://www.w3.org/1999/xlink">NIST</acronym> time.</para>

    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sockets-getservbyname">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">getservbyname</function></title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Sometimes you may not be sure what port a certain service
        uses.  The <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">getservbyname</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry> function, also declared in
        <filename xmlns:xlink="http://www.w3.org/1999/xlink">netdb.h</filename> comes in very handy in those
        cases:</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
struct servent * getservbyname(const char *name, const char *proto);
</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The <varname xmlns:xlink="http://www.w3.org/1999/xlink">servent</varname> structure contains the
        <varname xmlns:xlink="http://www.w3.org/1999/xlink">s_port</varname>, which contains the proper port,
        already in <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">network byte order</emphasis>.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Had we not known the correct port for the
        <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">daytime</emphasis> service, we could have found it
        this way:</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
  struct servent *se;
  ...
  if ((se = getservbyname("daytime", "tcp")) == NULL {
    fprintf(stderr, "Cannot determine which port to use.\n");
    return 7;
  }
  sa.sin_port = se-&gt;s_port;
</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">You usually do know the port. But if you are developing a
        new protocol, you may be testing it on an unofficial
        port. Some day, you will register the protocol and its port
        (if nowhere else, at least in your
        <filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc/services</filename>, which is where
        <function xmlns:xlink="http://www.w3.org/1999/xlink">getservbyname</function> looks). Instead of
        returning an error in the above code, you just use the
        temporary port number.  Once you have listed the protocol in
        <filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc/services</filename>, your software will find
        its port without you having to rewrite the code.</para>

    </sect2>

  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sockets-concurrent-servers">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Concurrent Servers</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Unlike a sequential server, a <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">concurrent
      server</emphasis> has to be able to serve more than one client
      at a time. For example, a <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">chat server</emphasis> may
      be serving a specific client for hours&#8212;it cannot wait till
      it stops serving a client before it serves the next one.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">This requires a significant change in our flowchart:</para>

    <mediaobject xmlns:xlink="http://www.w3.org/1999/xlink">
      <imageobject xmlns:xlink="http://www.w3.org/1999/xlink">
        <imagedata fileref="sockets/serv2"/>
      </imageobject>

      <textobject xmlns:xlink="http://www.w3.org/1999/xlink">
        <literallayout xmlns:xlink="http://www.w3.org/1999/xlink" class="monospaced">+-----------------+
|  Create Socket  |
+-----------------+
          |
+-----------------+
|    Bind Port    |       Daemon Process
+-----------------+
          |                 +--------+
          +-------------+--&gt;|  Init  |
          |             |   +--------+
+-----------------+     |         |
|        Exit     |     |   +--------+
+-----------------+     |   | Listen |
                        |   +--------+
                        |         |
                        |   +--------+
                        |   | Accept |
                        |   +--------+
                        |         |       +------------------+
                        |         +------&gt;| Close Top Socket |
                        |         |       +------------------+
                        |   +--------+             |
                        |   | Close  |    +------------------+
                        |   +--------+    |     Serve        |
                        |         |       +------------------+
                        |&lt;--------+                |
                                          +------------------+
                                          | Close Acc Socket |
                            +--------+    +------------------+
                            | Signal |             |
                            +--------+    +------------------+
                                          |      Exit        |
                                          +------------------+</literallayout>
      </textobject>

      <textobject xmlns:xlink="http://www.w3.org/1999/xlink">
        <phrase xmlns:xlink="http://www.w3.org/1999/xlink">Concurrent Server</phrase>
      </textobject>
    </mediaobject>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">We moved the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">serve</emphasis> from the
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">daemon process</emphasis> to its own <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">server
      process</emphasis>. However, because each child process inherits
      all open files (and a socket is treated just like a file), the
      new process inherits not only the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><quote xmlns:xlink="http://www.w3.org/1999/xlink">accepted
      handle,</quote></emphasis> i.e., the socket returned by the
      <function xmlns:xlink="http://www.w3.org/1999/xlink">accept</function> call, but also the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">top
      socket</emphasis>, i.e., the one opened by the top process right
      at the beginning.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">However, the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">server process</emphasis> does not
      need this socket and should <function xmlns:xlink="http://www.w3.org/1999/xlink">close</function> it
      immediately. Similarly, the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">daemon process</emphasis>
      no longer needs the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">accepted socket</emphasis>, and
      not only should, but <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">must</emphasis>
      <function xmlns:xlink="http://www.w3.org/1999/xlink">close</function> it&#8212;otherwise, it will run out
      of available <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">file descriptors</emphasis> sooner or
      later.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">After the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">server process</emphasis> is done
      serving, it should close the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">accepted
      socket</emphasis>. Instead of returning to
      <function xmlns:xlink="http://www.w3.org/1999/xlink">accept</function>, it now exits.
      </para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Under <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark>, a process does not really
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">exit</emphasis>. Instead, it
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">returns</emphasis> to its parent. Typically, a parent
      process <function xmlns:xlink="http://www.w3.org/1999/xlink">wait</function>s for its child process, and
      obtains a return value. However, our <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">daemon
      process</emphasis> cannot simply stop and wait. That would
      defeat the whole purpose of creating additional processes. But
      if it never does <function xmlns:xlink="http://www.w3.org/1999/xlink">wait</function>, its children will
      become <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">zombies</emphasis>&#8212;no longer functional
      but still roaming around.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">For that reason, the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">daemon process</emphasis>
      needs to set <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">signal handlers</emphasis> in its
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">initialize daemon</emphasis> phase. At least a
      <symbol xmlns:xlink="http://www.w3.org/1999/xlink">SIGCHLD</symbol> signal has to be processed, so the
      daemon can remove the zombie return values from the system and
      release the system resources they are taking up.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">That is why our flowchart now contains a <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">process
      signals</emphasis> box, which is not connected to any other box.
      By the way, many servers also process <symbol xmlns:xlink="http://www.w3.org/1999/xlink">SIGHUP</symbol>,
      and typically interpret as the signal from the superuser that
      they should reread their configuration files. This allows us to
      change settings without having to kill and restart these
      servers.</para>

  </sect1>

</chapter>

    
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="ipv6">
  <title xmlns:xlink="http://www.w3.org/1999/xlink">IPv6 Internals</title>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="ipv6-implementation">
    <info><title xmlns:xlink="http://www.w3.org/1999/xlink">IPv6/IPsec Implementation</title>
      <authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
	<author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Yoshinobu</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Inoue</surname></personname><contrib xmlns:xlink="http://www.w3.org/1999/xlink">Contributed by </contrib></author>
      </authorgroup>
      
    </info>

    

    <para xmlns:xlink="http://www.w3.org/1999/xlink">This section should explain IPv6 and IPsec related implementation
    internals.  These functionalities are derived from <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.kame.net/">KAME project</link></para>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="ipv6details">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">IPv6</title>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
        <title xmlns:xlink="http://www.w3.org/1999/xlink">Conformance</title>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">The IPv6 related functions conforms, or tries to conform to
	the latest set of IPv6 specifications.  For future reference we list
	some of the relevant documents below (<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">NOTE</emphasis>: this
	is not a complete list - this is too hard to maintain...).</para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">For details please refer to specific chapter in the document,
	RFCs, manual pages, or comments in the source code.</para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Conformance tests have been performed on the KAME STABLE kit
        at TAHI project.  Results can be viewed at
	<uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.tahi.org/report/KAME/">http://www.tahi.org/report/KAME/</uri>.
	We also attended Univ. of New Hampshire IOL tests
	(<uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.iol.unh.edu/">http://www.iol.unh.edu/</uri>) in the
	past, with our past snapshots.</para>

        <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">RFC1639: FTP Operation Over Big Address Records
	    (FOOBAR)</para>
	    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	        <para xmlns:xlink="http://www.w3.org/1999/xlink">RFC2428 is preferred over RFC1639.  FTP clients will
		first try RFC2428, then RFC1639 if failed.</para>
	      </listitem>
	    </itemizedlist>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">RFC1886: DNS Extensions to support IPv6</para>
	  </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">RFC1933: Transition Mechanisms for IPv6 Hosts and
	    Routers</para>
	    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	        <para xmlns:xlink="http://www.w3.org/1999/xlink">IPv4 compatible address is not supported.</para>
	      </listitem>
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	        <para xmlns:xlink="http://www.w3.org/1999/xlink">automatic tunneling (described in 4.3 of this RFC) is not
		supported.</para>
	      </listitem>
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	        <para xmlns:xlink="http://www.w3.org/1999/xlink"><citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">gif</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">4</manvolnum></citerefentry> interface implements IPv[46]-over-IPv[46]
		tunnel in a generic way, and it covers "configured tunnel"
		described in the spec.  See <link xmlns:xlink="http://www.w3.org/1999/xlink" linkend="gif">23.5.1.5</link>
		in this document for details.</para>
	      </listitem>
	    </itemizedlist>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
            <para xmlns:xlink="http://www.w3.org/1999/xlink">RFC1981: Path MTU Discovery for IPv6</para>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
            <para xmlns:xlink="http://www.w3.org/1999/xlink">RFC2080: RIPng for IPv6</para>
	    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">usr.sbin/route6d support this.</para>
              </listitem>
	    </itemizedlist>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
            <para xmlns:xlink="http://www.w3.org/1999/xlink">RFC2292: Advanced Sockets API for IPv6</para>
	    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">For supported library functions/kernel APIs, see
		<filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/netinet6/ADVAPI</filename>.</para>
	      </listitem>
	    </itemizedlist>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">RFC2362: Protocol Independent Multicast-Sparse
	    Mode (PIM-SM)</para>
	    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">RFC2362 defines packet formats for PIM-SM.
		<filename xmlns:xlink="http://www.w3.org/1999/xlink">draft-ietf-pim-ipv6-01.txt</filename> is
		written based on this.</para>
	      </listitem>
	    </itemizedlist>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">RFC2373: IPv6 Addressing Architecture</para>
	    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">supports node required addresses, and conforms to
		the scope requirement.</para>
	      </listitem>
	    </itemizedlist>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">RFC2374: An IPv6 Aggregatable Global Unicast Address
	    Format</para>
	    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">supports 64-bit length of Interface ID.</para>
	      </listitem>
	    </itemizedlist>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">RFC2375: IPv6 Multicast Address Assignments</para>
	    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">Userland applications use the well-known addresses
		assigned in the RFC.</para>
	      </listitem>
	    </itemizedlist>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">RFC2428: FTP Extensions for IPv6 and NATs</para>
	    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">RFC2428 is preferred over RFC1639.  FTP clients will
		first try RFC2428, then RFC1639 if failed.</para>
	      </listitem>
	    </itemizedlist>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">RFC2460: IPv6 specification</para>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">RFC2461: Neighbor discovery for IPv6</para>
	    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">See <link xmlns:xlink="http://www.w3.org/1999/xlink" linkend="neighbor-discovery">23.5.1.2</link>
		in this document for details.</para>
	      </listitem>
	    </itemizedlist>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">RFC2462: IPv6 Stateless Address Autoconfiguration</para>
	    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">See <link xmlns:xlink="http://www.w3.org/1999/xlink" linkend="ipv6-pnp">23.5.1.4</link> in this
		document for details.</para>
	      </listitem>
	    </itemizedlist>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">RFC2463: ICMPv6 for IPv6 specification</para>
	    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">See <link xmlns:xlink="http://www.w3.org/1999/xlink" linkend="icmpv6">23.5.1.9</link> in this
		document for details.</para>
	      </listitem>
	    </itemizedlist>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">RFC2464: Transmission of IPv6 Packets over Ethernet
	    Networks</para>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">RFC2465: MIB for IPv6: Textual Conventions and General
	    Group</para>
	    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">Necessary statistics are gathered by the kernel.  Actual
		IPv6 MIB support is provided as a patchkit for ucd-snmp.</para>
	      </listitem>
	    </itemizedlist>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">RFC2466: MIB for IPv6: ICMPv6 group</para>
	    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">Necessary statistics are gathered by the kernel.  Actual
		IPv6 MIB support is provided as patchkit for ucd-snmp.</para>
	      </listitem>
	    </itemizedlist>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">RFC2467: Transmission of IPv6 Packets over FDDI
	    Networks</para>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">RFC2497: Transmission of IPv6 packet over ARCnet
	    Networks</para>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">RFC2553: Basic Socket Interface Extensions for IPv6</para>
	    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">IPv4 mapped address (3.7) and special behavior of IPv6
		wildcard bind socket (3.8) are supported.  See <link xmlns:xlink="http://www.w3.org/1999/xlink" linkend="ipv6-wildcard-socket">23.5.1.12</link>
		in this document for details.</para>
	      </listitem>
	    </itemizedlist>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">RFC2675: IPv6 Jumbograms</para>
	    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">See <link xmlns:xlink="http://www.w3.org/1999/xlink" linkend="ipv6-jumbo">23.5.1.7</link> in
		this document for details.</para>
	      </listitem>
	    </itemizedlist>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">RFC2710: Multicast Listener Discovery for IPv6</para>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">RFC2711: IPv6 router alert option</para>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">draft-ietf-ipngwg-router-renum-08</filename>: Router
	    renumbering for IPv6</para>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">draft-ietf-ipngwg-icmp-namelookups-02</filename>:
	    IPv6 Name Lookups Through ICMP</para>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">draft-ietf-ipngwg-icmp-name-lookups-03</filename>:
	    IPv6 Name Lookups Through ICMP</para>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">draft-ietf-pim-ipv6-01.txt</filename>:
	    PIM for IPv6</para>
	    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink"><citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">pim6dd</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> implements dense mode.  <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">pim6sd</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry>
		implements sparse mode.</para>
	      </listitem>
	    </itemizedlist>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">draft-itojun-ipv6-tcp-to-anycast-00</filename>:
	    Disconnecting TCP connection toward IPv6 anycast address</para>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">draft-yamamoto-wideipv6-comm-model-00</filename>
	    </para>
	    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">See <link xmlns:xlink="http://www.w3.org/1999/xlink" linkend="ipv6-sas">23.5.1.6</link> in this
		document for details.</para>
	      </listitem>
	    </itemizedlist>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">draft-ietf-ipngwg-scopedaddr-format-00.txt
	    </filename>: An Extension of Format for IPv6 Scoped
	    Addresses</para>
          </listitem>
        </itemizedlist>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="neighbor-discovery">
        <title xmlns:xlink="http://www.w3.org/1999/xlink">Neighbor Discovery</title>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Neighbor Discovery is fairly stable.  Currently Address
	Resolution, Duplicated Address Detection, and Neighbor Unreachability
	Detection are supported.  In the near future we will be adding Proxy
	Neighbor Advertisement support in the kernel and Unsolicited Neighbor
	Advertisement transmission command as admin tool.</para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">If DAD fails, the address will be marked "duplicated" and
	message will be generated to syslog (and usually to console).  The
	"duplicated" mark can be checked with <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">ifconfig</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry>.  It is
	administrators' responsibility to check for and recover from DAD
	failures.  The behavior should be improved in the near future.</para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Some of the network driver loops multicast packets back to itself,
        even if instructed not to do so (especially in promiscuous mode).
        In such cases DAD may fail, because DAD engine sees inbound NS packet
        (actually from the node itself) and considers it as a sign of duplicate.
        You may want to look at #if condition marked "heuristics" in
        sys/netinet6/nd6_nbr.c:nd6_dad_timer() as workaround (note that the code
        fragment in "heuristics" section is not spec conformant).</para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Neighbor Discovery specification (RFC2461) does not talk about
	neighbor cache handling in the following cases:</para>

	<orderedlist xmlns:xlink="http://www.w3.org/1999/xlink">
          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">when there was no neighbor cache entry, node
	    received unsolicited RS/NS/NA/redirect packet without
	    link-layer address</para>
          </listitem>
          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
            <para xmlns:xlink="http://www.w3.org/1999/xlink">neighbor cache handling on medium without link-layer
	    address (we need a neighbor cache entry for IsRouter bit)</para>
          </listitem>
	</orderedlist>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">For first case, we implemented workaround based on discussions
	on IETF ipngwg mailing list.  For more details, see the comments in
	the source code and email thread started from (IPng 7155), dated
	Feb 6 1999.</para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">IPv6 on-link determination rule (RFC2461) is quite different
	from assumptions in BSD network code.  At this moment, no on-link
	determination rule is supported where default router list is empty
	(RFC2461, section 5.2, last sentence in 2nd paragraph - note that
	the spec misuse the word "host" and "node" in several places in
	the section).</para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">To avoid possible DoS attacks and infinite loops, only 10
	options on ND packet is accepted now.  Therefore, if you have 20
	prefix options attached to RA, only the first 10 prefixes will be
	recognized.  If this troubles you, please ask it on FREEBSD-CURRENT
	mailing list and/or modify nd6_maxndopt in
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/netinet6/nd6.c</filename>.  If there are high demands
	we may provide sysctl knob for the variable.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="ipv6-scope-index">
        <title xmlns:xlink="http://www.w3.org/1999/xlink">Scope Index</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">IPv6 uses scoped addresses.  Therefore, it is very important to
	specify scope index (interface index for link-local address, or
	site index for site-local address) with an IPv6 address.  Without
	scope index, scoped IPv6 address is ambiguous to the kernel, and
	kernel will not be able to determine the outbound interface for a
	packet.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Ordinary userland applications should use advanced API
	(RFC2292) to specify scope index, or interface index.  For similar
	purpose, sin6_scope_id member in sockaddr_in6 structure is defined
	in RFC2553.  However, the semantics for sin6_scope_id is rather vague.
	If you care about portability of your application, we suggest you to
	use advanced API rather than sin6_scope_id.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">In the kernel, an interface index for link-local scoped address is
	embedded into 2nd 16bit-word (3rd and 4th byte) in IPv6 address.  For
	example, you may see something like:
	</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink">	fe80:1::200:f8ff:fe01:6317
	</screen>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">in the routing table and interface address structure (struct
	in6_ifaddr).  The address above is a link-local unicast address
	which belongs to a network interface whose interface identifier is 1.
	The embedded index enables us to identify IPv6 link local
	addresses over multiple interfaces effectively and with only a
	little code change.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Routing daemons and configuration programs, like <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">route6d</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry>
	and <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">ifconfig</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry>, will need to manipulate the "embedded" scope
	index.  These programs use routing sockets and ioctls (like
	SIOCGIFADDR_IN6) and the kernel API will return IPv6 addresses with
	2nd 16bit-word filled in.  The APIs are for manipulating kernel
	internal structure.  Programs that use these APIs have to be prepared
	about differences in kernels anyway.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">When you specify scoped address to the command line, NEVER write
	the embedded form (such as ff02:1::1 or fe80:2::fedc).  This is not
	supposed to work.  Always use standard form, like ff02::1 or
	fe80::fedc, with command line option for specifying interface (like
	<command xmlns:xlink="http://www.w3.org/1999/xlink">ping6 -I ne0 ff02::1</command>).  In general, if a command
	does not have command line option to specify outgoing interface, that
	command is not ready to accept scoped address.  This may seem to be
	opposite from IPv6's premise to support "dentist office" situation.
	We believe that specifications need some improvements for this.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Some of the userland tools support extended numeric IPv6 syntax,
	as documented in
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">draft-ietf-ipngwg-scopedaddr-format-00.txt</filename>.  You
	can specify outgoing link, by using name of the outgoing interface
	like "fe80::1%ne0".  This way you will be able to specify link-local
	scoped address without much trouble.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">To use this extension in your program, you will need to use
	<citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">getaddrinfo</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry>, and <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">getnameinfo</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry> with NI_WITHSCOPEID.
	The implementation currently assumes 1-to-1 relationship between a
	link and an interface, which is stronger than what specs say.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="ipv6-pnp">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Plug and Play</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Most of the IPv6 stateless address autoconfiguration is implemented
	in the kernel.  Neighbor Discovery functions are implemented in the
	kernel as a whole.  Router Advertisement (RA) input for hosts is
	implemented in the kernel.  Router Solicitation (RS) output for
	endhosts, RS input for routers, and RA output for routers are
	implemented in the userland.</para>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink">
	  <title xmlns:xlink="http://www.w3.org/1999/xlink">Assignment of link-local, and special addresses</title>

 	  <para xmlns:xlink="http://www.w3.org/1999/xlink">IPv6 link-local address is generated from IEEE802 address
	  (Ethernet MAC address).  Each of interface is assigned an IPv6
	  link-local address automatically, when the interface becomes up
	  (IFF_UP).  Also, direct route for the link-local address is added
	  to routing table.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Here is an output of netstat command:</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink">Internet6:
Destination                   Gateway                   Flags      Netif Expire
fe80:1::%ed0/64               link#1                    UC          ed0
fe80:2::%ep0/64               link#2                    UC          ep0</screen>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Interfaces that has no IEEE802 address (pseudo interfaces
	  like tunnel interfaces, or ppp interfaces) will borrow IEEE802
	  address from other interfaces, such as Ethernet interfaces,
	  whenever possible.  If there is no IEEE802 hardware attached,
	  a last resort pseudo-random value, MD5(hostname), will
	  be used as source of link-local address.  If it is not suitable
	  for your usage, you will need to configure the link-local address
	  manually.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">If an interface is not capable of handling IPv6 (such as
	  lack of multicast support), link-local address will not be
	  assigned to that interface.  See section 2 for details.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Each interface joins the solicited multicast address and the
	  link-local all-nodes multicast addresses (e.g. fe80::1:ff01:6317
	  and ff02::1, respectively, on the link the interface is attached).
	  In addition to a link-local address, the loopback address (::1)
	  will be assigned to the loopback interface.  Also, ::1/128 and
	  ff01::/32 are automatically added to routing table, and loopback
	  interface joins node-local multicast group ff01::1.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink">
	  <title xmlns:xlink="http://www.w3.org/1999/xlink">Stateless address autoconfiguration on hosts</title>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">In IPv6 specification, nodes are separated into two categories:
	  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">routers</emphasis> and <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">hosts</emphasis>.  Routers
	  forward packets addressed to others, hosts does not forward the
	  packets.  net.inet6.ip6.forwarding defines whether this node is
	  router or host (router if it is 1, host if it is 0).</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">When a host hears Router Advertisement from the router, a host
	  may autoconfigure itself by stateless address autoconfiguration.
	  This behavior can be controlled by net.inet6.ip6.accept_rtadv (host
	  autoconfigures itself if it is set to 1).  By autoconfiguration,
	  network address prefix for the receiving interface (usually global
	  address prefix) is added.  Default route is also configured.
	  Routers periodically generate Router Advertisement packets.  To
	  request an adjacent router to generate RA packet, a host can
	  transmit Router Solicitation.  To generate a RS packet at any time,
	  use the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">rtsol</emphasis> command.  <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">rtsold</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> daemon is
	  also available.  <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">rtsold</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> generates Router Solicitation whenever
	  necessary, and it works great for nomadic usage (notebooks/laptops).
	  If one wishes to ignore Router Advertisements, use sysctl to set
	  net.inet6.ip6.accept_rtadv to 0.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">To generate Router Advertisement from a router, use the
	  <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">rtadvd</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> daemon.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Note that, IPv6 specification assumes the following items, and
	  nonconforming cases are left unspecified:</para>

	  <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	    <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	      <para xmlns:xlink="http://www.w3.org/1999/xlink">Only hosts will listen to router advertisements</para>
	    </listitem>
	    <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	      <para xmlns:xlink="http://www.w3.org/1999/xlink">Hosts have single network interface (except loopback)</para>
	    </listitem>
	  </itemizedlist>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Therefore, this is unwise to enable net.inet6.ip6.accept_rtadv
	  on routers, or multi-interface host.  A misconfigured node can
	  behave strange (nonconforming configuration allowed for those who
	  would like to do some experiments).</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">To summarize the sysctl knob:</para>

        <screen xmlns:xlink="http://www.w3.org/1999/xlink">	accept_rtadv	forwarding	role of the node
	---		---		---
	0		0		host (to be manually configured)
	0		1		router
	1		0		autoconfigured host
					(spec assumes that host has single
					interface only, autoconfigured host
					with multiple interface is
					out-of-scope)
	1		1		invalid, or experimental
					(out-of-scope of spec)</screen>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">RFC2462 has validation rule against incoming RA prefix
	  information option, in 5.5.3 (e).  This is to protect hosts from
	  malicious (or misconfigured) routers that advertise very short
	  prefix lifetime.  There was an update from Jim Bound to ipngwg
	  mailing list (look for "(ipng 6712)" in the archive) and it is
	  implemented Jim's update.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">See <link xmlns:xlink="http://www.w3.org/1999/xlink" linkend="neighbor-discovery">23.5.1.2</link> in
	  the document for relationship between DAD and
	  autoconfiguration.</para>
        </sect4>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="gif">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Generic tunnel interface</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">GIF (Generic InterFace) is a pseudo interface for configured
	tunnel.  Details are described in <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">gif</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">4</manvolnum></citerefentry>.  Currently</para>

	<itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">v6 in v6</para>
	  </listitem>
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">v6 in v4</para>
	  </listitem>
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">v4 in v6</para>
	  </listitem>
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">v4 in v4</para>
	  </listitem>
	</itemizedlist>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">are available.  Use <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">gifconfig</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> to assign physical (outer)
	source and destination address to gif interfaces.  Configuration that
	uses same address family for inner and outer IP header (v4 in v4, or
	v6 in v6) is dangerous.  It is very easy to configure interfaces and
	routing tables to perform infinite level of tunneling.
	<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">Please be warned</emphasis>.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">gif can be configured to be ECN-friendly.  See <link xmlns:xlink="http://www.w3.org/1999/xlink" linkend="ipsec-ecn">23.5.4.5</link> for ECN-friendliness of
	tunnels, and <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">gif</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">4</manvolnum></citerefentry> for how to configure.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">If you would like to configure an IPv4-in-IPv6 tunnel with gif
	interface, read <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">gif</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">4</manvolnum></citerefentry> carefully.  You will need to
	remove IPv6 link-local address automatically assigned to the gif
	interface.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="ipv6-sas">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Source Address Selection</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Current source selection rule is scope oriented (there are some
	exceptions - see below).  For a given destination, a source IPv6
	address is selected by the following rule:</para>

	<orderedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
  	    <para xmlns:xlink="http://www.w3.org/1999/xlink">If the source address is explicitly specified by
	    the user (e.g.  via the advanced API), the specified address
	    is used.</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">If there is an address assigned to the outgoing
	    interface (which is usually determined by looking up the
	    routing table) that has the same scope as the destination
	    address, the address is used.</para>

	    <para xmlns:xlink="http://www.w3.org/1999/xlink">This is the most typical case.</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">If there is no address that satisfies the above
	    condition, choose a global address assigned to one of
	    the interfaces on the sending node.</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">If there is no address that satisfies the above condition,
	    and destination address is site local scope, choose a site local
	    address assigned to one of the interfaces on the sending node.
	    </para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">If there is no address that satisfies the above condition,
	    choose the address associated with the routing table entry for the
	    destination.  This is the last resort, which may cause scope
	    violation.</para>
	  </listitem>
	</orderedlist>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">For instance, ::1 is selected for ff01::1,
	fe80:1::200:f8ff:fe01:6317 for fe80:1::2a0:24ff:feab:839b (note
	that embedded interface index - described in <link xmlns:xlink="http://www.w3.org/1999/xlink" linkend="ipv6-scope-index">23.5.1.3</link> - helps us
	choose the right source address.  Those embedded indices will not
	be on the wire).  If the outgoing interface has multiple address for
	the scope, a source is selected longest match basis (rule 3).  Suppose
	2001:0DB8:808:1:200:f8ff:fe01:6317 and 2001:0DB8:9:124:200:f8ff:fe01:6317
	are given to the outgoing interface.  2001:0DB8:808:1:200:f8ff:fe01:6317
	is chosen as the source for the destination 2001:0DB8:800::1.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Note that the above rule is not documented in the IPv6 spec.
	It is considered "up to implementation" item.  There are some cases
	where we do not use the above rule.  One example is connected TCP
	session, and we use the address kept in tcb as the source.  Another
	example is source address for Neighbor Advertisement.  Under the spec
	(RFC2461 7.2.2) NA's source should be the target address of the
	corresponding NS's target.  In this case we follow the spec rather
	than the above longest-match rule.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">For new connections (when rule 1 does not apply), deprecated
	addresses (addresses with preferred lifetime = 0) will not be chosen
	as source address if other choices are available.  If no other choices
	are available, deprecated address will be used as a last resort.  If
	there are multiple choice of deprecated addresses, the above scope
	rule will be used to choose from those deprecated addresses.  If you
	would like to prohibit the use of deprecated address for some reason,
	configure net.inet6.ip6.use_deprecated to 0.  The issue related to
	deprecated address is described in RFC2462 5.5.4 (NOTE: there is
	some debate underway in IETF ipngwg on how to use "deprecated"
	address).</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="ipv6-jumbo">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Jumbo Payload</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The Jumbo Payload hop-by-hop option is implemented and can
	be used to send IPv6 packets with payloads longer than 65,535 octets.
	But currently no physical interface whose MTU is more than 65,535 is
	supported, so such payloads can be seen only on the loopback
	interface (i.e. lo0).</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">If you want to try jumbo payloads, you first have to reconfigure
	the kernel so that the MTU of the loopback interface is more than
	65,535 bytes; add the following to the kernel configuration file:</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">
	  options		"LARGE_LOMTU"		#To test jumbo payload
	</literal></para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">and recompile the new kernel.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Then you can test jumbo payloads by the <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">ping6</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> command
	with -b and -s options.  The -b option must be specified to enlarge
	the size of the socket buffer and the -s option specifies the length
	of the packet, which should be more than 65,535.  For example,
	type as follows:</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">ping6 -b 70000 -s 68000 ::1</userinput></screen>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The IPv6 specification requires that the Jumbo Payload option
	must not be used in a packet that carries a fragment header.  If
	this condition is broken, an ICMPv6 Parameter Problem message must
	be sent to the sender.  specification is followed, but you cannot
	usually see an ICMPv6 error caused by this requirement.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">When an IPv6 packet is received, the frame length is checked and
	compared to the length specified in the payload length field of the
	IPv6 header or in the value of the Jumbo Payload option, if any.  If
	the former is shorter than the latter, the packet is discarded and
	statistics are incremented. You can see the statistics as output of
	<citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">netstat</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> command with `-s -p ip6' option:</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">netstat -s -p ip6</userinput>
	  ip6:
		(snip)
		1 with data size &lt; data length</screen>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">So, kernel does not send an ICMPv6 error unless the erroneous
	packet is an actual Jumbo Payload, that is, its packet size is more
	than 65,535 bytes.  As described above, currently no physical interface
	with such a huge MTU is supported, so it rarely returns an
	ICMPv6 error.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">TCP/UDP over jumbogram is not supported at this moment.  This
	is because we have no medium (other than loopback) to test this.
	Contact us if you need this.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">IPsec does not work on jumbograms.  This is due to some
	specification twists in supporting AH with jumbograms (AH header
	size influences payload length, and this makes it real hard to
	authenticate inbound packet with jumbo payload option as well as AH).
	</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">There are fundamental issues in *BSD support for jumbograms.
	We would like to address those, but we need more time to finalize
	these.  To name a few:</para>

	<itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">mbuf pkthdr.len field is typed as "int" in 4.4BSD, so
	    it will not hold jumbogram with len &gt; 2G on 32bit architecture
	    CPUs.  If we would like to support jumbogram properly, the field
	    must be expanded to hold 4G + IPv6 header + link-layer header.
	    Therefore, it must be expanded to at least int64_t
	    (u_int32_t is NOT enough).</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">We mistakingly use "int" to hold packet length in many
	    places.  We need to convert them into larger integral type.
	    It needs a great care, as we may experience overflow during
	    packet length computation.</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">We mistakingly check for ip6_plen field of IPv6 header
	    for packet payload length in various places.  We should be
	    checking mbuf pkthdr.len instead.  ip6_input() will perform
	    sanity check on jumbo payload option on input, and we can
	    safely use mbuf pkthdr.len afterwards.</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">TCP code needs a careful update in bunch of places, of
	    course.</para>
	  </listitem>
	</itemizedlist>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Loop prevention in header processing</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">IPv6 specification allows arbitrary number of extension headers
	to be placed onto packets.  If we implement IPv6 packet processing
	code in the way BSD IPv4 code is implemented, kernel stack may
	overflow due to long function call chain.  sys/netinet6 code
	is carefully designed to avoid kernel stack overflow.  Because of
	this, sys/netinet6 code defines its own protocol switch
	structure, as "struct ip6protosw" (see
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">netinet6/ip6protosw.h</filename>).  There is no such
	update to IPv4 part (sys/netinet) for compatibility, but small
	change is added to its pr_input() prototype. So "struct ipprotosw"
	is also defined.  Because of this, if you receive IPsec-over-IPv4
	packet with massive number of IPsec headers, kernel stack may blow
	up.  IPsec-over-IPv6 is okay.  (Off-course, for those all IPsec
	headers to be processed, each such IPsec header must pass each
	IPsec check. So an anonymous attacker will not be able to do such an
	attack.)</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="icmpv6">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">ICMPv6</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">After RFC2463 was published, IETF ipngwg has decided to
	disallow ICMPv6 error packet against ICMPv6 redirect, to prevent
	ICMPv6 storm on a network medium.  This is already implemented
	into the kernel.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Applications</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">For userland programming, we support IPv6 socket API as
	specified in RFC2553, RFC2292 and upcoming Internet drafts.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">TCP/UDP over IPv6 is available and quite stable.  You can
	enjoy <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">telnet</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">1</manvolnum></citerefentry>, <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">ftp</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">1</manvolnum></citerefentry>, <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">rlogin</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">1</manvolnum></citerefentry>, <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">rsh</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">1</manvolnum></citerefentry>,
	<citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">ssh</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">1</manvolnum></citerefentry>, etc.  These applications are protocol independent.
	That is, they automatically chooses IPv4 or IPv6 according to DNS.
	</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Kernel Internals</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">While ip_forward() calls ip_output(), ip6_forward() directly
	calls if_output() since routers must not divide IPv6 packets into
	fragments.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">ICMPv6 should contain the original packet as long as possible
	up to 1280.  UDP6/IP6 port unreach, for instance, should contain
	all extension headers and the *unchanged* UDP6 and IP6 headers.
	So, all IP6 functions except TCP never convert network byte
	order into host byte order, to save the original packet.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">tcp_input(), udp6_input() and icmp6_input() can not assume that
	IP6 header is preceding the transport headers due to extension
	headers.  So, in6_cksum() was implemented to handle packets whose IP6
	header and transport header is not continuous.  TCP/IP6 nor UDP6/IP6
	header structures do not exist for checksum calculation.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">To process IP6 header, extension headers and transport headers
	easily, network drivers are now required to store packets in one
	internal mbuf or one or more external mbufs.  A typical old driver
	prepares two internal mbufs for 96 - 204 bytes data, however, now
	such packet data is stored in one external mbuf.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink"><command xmlns:xlink="http://www.w3.org/1999/xlink">netstat -s -p ip6</command> tells you whether or not
	your driver conforms such requirement.  In the following example,
	"cce0" violates the requirement. (For more information, refer to
	Section 2.)</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink">Mbuf statistics:
                317 one mbuf
                two or more mbuf::
                        lo0 = 8
			cce0 = 10
                3282 one ext mbuf
                0 two or more ext mbuf
	</screen>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Each input function calls IP6_EXTHDR_CHECK in the beginning to
	check if the region between IP6 and its header is continuous.
	IP6_EXTHDR_CHECK calls m_pullup() only if the mbuf has M_LOOP flag,
	that is, the packet comes from the loopback interface.  m_pullup()
	is never called for packets coming from physical network interfaces.
	</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Both IP and IP6 reassemble functions never call m_pullup().</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="ipv6-wildcard-socket">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">IPv4 mapped address and IPv6 wildcard socket</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">RFC2553 describes IPv4 mapped address (3.7) and special behavior
	of IPv6 wildcard bind socket (3.8).  The spec allows you to:</para>
	<itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Accept IPv4 connections by AF_INET6 wildcard bind
	    socket.</para>
	  </listitem>
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Transmit IPv4 packet over AF_INET6 socket by using
	    special form of the address like ::ffff:10.1.1.1.</para>
	  </listitem>
	</itemizedlist>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">but the spec itself is very complicated and does not specify
	how the socket layer should behave.  Here we call the former one
	"listening side" and the latter one "initiating side", for
	reference purposes.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">You can perform wildcard bind on both of the address families,
	on the same port.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The following table show the behavior of FreeBSD 4.x.</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink">listening side          initiating side
                (AF_INET6 wildcard      (connection to ::ffff:10.1.1.1)
                socket gets IPv4 conn.)
                ---                     ---
FreeBSD 4.x     configurable            supported
                default: enabled
	</screen>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The following sections will give you more details, and how you can
	configure the behavior.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Comments on listening side:</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">It looks that RFC2553 talks too little on wildcard bind issue,
	especially on the port space issue, failure mode and relationship
	between AF_INET/INET6 wildcard bind.  There can be several separate
	interpretation for this RFC which conform to it but behaves differently.
	So, to implement portable application you should assume nothing
	about the behavior in the kernel.  Using <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">getaddrinfo</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry> is the
	safest way.  Port number space and wildcard bind issues were discussed
	in detail on ipv6imp mailing list, in mid March 1999 and it looks
	that there is no concrete consensus (means, up to implementers).
	You may want to check the mailing list archives.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">If a server application would like to accept IPv4 and IPv6
	connections, there will be two alternatives.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">One is using AF_INET and AF_INET6 socket (you will need two
	sockets).  Use <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">getaddrinfo</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry> with AI_PASSIVE into ai_flags,
	and <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">socket</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> and <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">bind</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> to all the addresses returned.
	By opening multiple sockets, you can accept connections onto the
	socket with proper address family.  IPv4 connections will be
	accepted by AF_INET socket, and IPv6 connections will be accepted
	by AF_INET6 socket.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Another way is using one AF_INET6 wildcard bind socket.  Use
	<citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">getaddrinfo</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry> with AI_PASSIVE into ai_flags and with
	AF_INET6 into ai_family, and set the 1st argument hostname to
	NULL. And <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">socket</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> and <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">bind</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> to the address returned.
	(should be IPv6 unspecified addr).  You can accept either of IPv4
	and IPv6 packet via this one socket.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">To support only IPv6 traffic on AF_INET6 wildcard binded socket
	portably, always check the peer address when a connection is made
	toward AF_INET6 listening socket.  If the address is IPv4 mapped
	address, you may want to reject the connection.  You can check the
	condition by using IN6_IS_ADDR_V4MAPPED() macro.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">To resolve this issue more easily, there is system dependent
	<citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">setsockopt</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> option, IPV6_BINDV6ONLY, used like below.</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink">	int on;

	setsockopt(s, IPPROTO_IPV6, IPV6_BINDV6ONLY,
		   (char *)&amp;on, sizeof (on)) &lt; 0));
	</screen>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">When this call succeed, then this socket only receive IPv6
	packets.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Comments on initiating side:</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Advise to application implementers: to implement a portable
	IPv6 application (which works on multiple IPv6 kernels), we believe
	that the following is the key to the success:</para>

	<itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">NEVER hardcode AF_INET nor AF_INET6.</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Use <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">getaddrinfo</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry> and <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">getnameinfo</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry>
	    throughout the system.  Never use gethostby*(), getaddrby*(),
	    inet_*() or getipnodeby*(). (To update existing applications
	    to be IPv6 aware easily, sometime getipnodeby*() will be
	    useful. But if possible, try to rewrite the code to use
	    <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">getaddrinfo</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry> and <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">getnameinfo</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry>.)</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">If you would like to connect to destination, use
	    <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">getaddrinfo</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry> and try all the destination returned,
	    like <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">telnet</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">1</manvolnum></citerefentry> does.</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Some of the IPv6 stack is shipped with buggy
	    <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">getaddrinfo</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry>.  Ship a minimal working version with
	    your application and use that as last resort.</para>
	  </listitem>
	</itemizedlist>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">If you would like to use AF_INET6 socket for both IPv4 and
	IPv6 outgoing connection, you will need to use <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">getipnodebyname</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry>.
	When you would like to update your existing application to be IPv6
	aware with minimal effort, this approach might be chosen. But please
	note that it is a temporal solution, because <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">getipnodebyname</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry>
	itself is not recommended as it does not handle scoped IPv6 addresses
	at all.  For IPv6 name resolution, <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">getaddrinfo</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry> is the
	preferred API. So you should rewrite your application to use
	<citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">getaddrinfo</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry>, when you get the time to do it.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">When writing applications that make outgoing connections,
	story goes much simpler if you treat AF_INET and AF_INET6 as totally
	separate address family.  {set,get}sockopt issue goes simpler,
	DNS issue will be made simpler.  We do not recommend you to rely
	upon IPv4 mapped address.</para>

	<sect4 xmlns:xlink="http://www.w3.org/1999/xlink">
	  <title xmlns:xlink="http://www.w3.org/1999/xlink">unified tcp and inpcb code</title>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">FreeBSD 4.x uses shared tcp code between IPv4 and IPv6
	  (from sys/netinet/tcp*) and separate udp4/6 code.  It uses
	  unified inpcb structure.</para>

	  <para xmlns:xlink="http://www.w3.org/1999/xlink">The platform can be configured to support IPv4 mapped address.
	  Kernel configuration is summarized as follows:</para>

	  <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	    <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	      <para xmlns:xlink="http://www.w3.org/1999/xlink">By default, AF_INET6 socket will grab IPv4
	      connections in certain condition, and can initiate
	      connection to IPv4 destination embedded in IPv4 mapped
	      IPv6 address.</para>
	    </listitem>

	    <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	      <para xmlns:xlink="http://www.w3.org/1999/xlink">You can disable it on entire system with sysctl like
	      below.</para>

	      <para xmlns:xlink="http://www.w3.org/1999/xlink">
	        <command xmlns:xlink="http://www.w3.org/1999/xlink">sysctl net.inet6.ip6.mapped_addr=0</command>
	      </para>

	    </listitem>
	  </itemizedlist>

	  <sect5 xmlns:xlink="http://www.w3.org/1999/xlink">
	    <title xmlns:xlink="http://www.w3.org/1999/xlink">listening side</title>

	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Each socket can be configured to support special AF_INET6
	    wildcard bind (enabled by default).  You can disable it on
	    each socket basis with <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">setsockopt</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> like below.</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink">	int on;

	setsockopt(s, IPPROTO_IPV6, IPV6_BINDV6ONLY,
		   (char *)&amp;on, sizeof (on)) &lt; 0));
	</screen>

	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Wildcard AF_INET6 socket grabs IPv4 connection if and only
	    if the following conditions are satisfied:</para>

	    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">there is no AF_INET socket that matches the IPv4
		connection</para>
	      </listitem>

	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">the AF_INET6 socket is configured to accept IPv4
		traffic, i.e.  getsockopt(IPV6_BINDV6ONLY) returns 0.</para>
	      </listitem>
	    </itemizedlist>

	    <para xmlns:xlink="http://www.w3.org/1999/xlink">There is no problem with open/close ordering.</para>
	  </sect5>

	  <sect5 xmlns:xlink="http://www.w3.org/1999/xlink">
	    <title xmlns:xlink="http://www.w3.org/1999/xlink">initiating side</title>

	    <para xmlns:xlink="http://www.w3.org/1999/xlink">FreeBSD 4.x supports outgoing connection to IPv4 mapped
	    address (::ffff:10.1.1.1), if the node is configured to support
	    IPv4 mapped address.</para>
	  </sect5>
	</sect4>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">sockaddr_storage</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">When RFC2553 was about to be finalized, there was discussion on
	how struct sockaddr_storage members are named.  One proposal is to
	prepend "__" to the members (like "__ss_len") as they should not be
	touched.  The other proposal was not to prepend it (like "ss_len")
	as we need to touch those members directly.  There was no clear
	consensus on it.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">As a result, RFC2553 defines struct sockaddr_storage as
	follows:</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink">	struct sockaddr_storage {
		u_char	__ss_len;	/* address length */
		u_char	__ss_family;	/* address family */
		/* and bunch of padding */
	};
	</screen>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">On the contrary, XNET draft defines as follows:</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink">	struct sockaddr_storage {
		u_char	ss_len;		/* address length */
		u_char	ss_family;	/* address family */
		/* and bunch of padding */
	};
	</screen>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">In December 1999, it was agreed that RFC2553bis should pick
	the latter (XNET) definition.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Current implementation conforms to XNET definition, based on
	RFC2553bis discussion.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">If you look at multiple IPv6 implementations, you will be able
	to see both definitions.  As an userland programmer, the most
	portable way of dealing with it is to:</para>

	<orderedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">ensure ss_family and/or ss_len are available on the
	    platform, by using GNU autoconf,</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">have -Dss_family=__ss_family to unify all occurrences
	    (including header file) into __ss_family, or</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">never touch __ss_family.  cast to sockaddr * and use sa_family
	    like:</para>

	    <screen xmlns:xlink="http://www.w3.org/1999/xlink">	struct sockaddr_storage ss;
	family = ((struct sockaddr *)&amp;ss)-&gt;sa_family
	    </screen>

	  </listitem>
	</orderedlist>
      </sect3>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Network Drivers</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Now following two items are required to be supported by standard
      drivers:</para>

      <orderedlist xmlns:xlink="http://www.w3.org/1999/xlink">
        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink">mbuf clustering requirement. In this stable release, we
          changed MINCLSIZE into MHLEN+1 for all the operating systems
          in order to make all the drivers behave as we expect.</para>
        </listitem>

        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink">multicast.  If <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">ifmcstat</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> yields no multicast group for
          a interface, that interface has to be patched.</para>
        </listitem>
      </orderedlist>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">If any of the drivers do not support the requirements, then
      the drivers can not be used for IPv6 and/or IPsec communication.  If
      you find any problem with your card using IPv6/IPsec, then, please
      report it to the <link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://lists.FreeBSD.org/mailman/listinfo/freebsd-bugs">FreeBSD problem reports mailing list</link>.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">(NOTE: In the past we required all PCMCIA drivers to have a
      call to in6_ifattach().  We have no such requirement any more)</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Translator</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">We categorize IPv4/IPv6 translator into 4 types:</para>

	<itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">Translator A</emphasis> --- It is used in the early
	    stage of transition to make it possible to establish a
	    connection from an IPv6 host in an IPv6 island to an IPv4 host
	    in the IPv4 ocean.</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">Translator B</emphasis> --- It is used in the early
	    stage of transition to make it possible to establish a connection
	    from an IPv4 host in the IPv4 ocean to an IPv6 host in an
	    IPv6 island.</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">Translator C</emphasis> --- It is used in the late
	    stage of transition to make it possible to establish a
	    connection from an IPv4 host in an IPv4 island to an IPv6 host
	    in the IPv6 ocean.</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">Translator D</emphasis> --- It is used in the late
	    stage of transition to make it possible to establish a
	    connection from an IPv6 host in the IPv6 ocean to an IPv4 host
	    in an IPv4 island.</para>
	  </listitem>
	</itemizedlist>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">TCP relay translator for category A is supported.  This is called
	"FAITH".  We also provide IP header translator for category A.
	(The latter is not yet put into FreeBSD 4.x yet.)</para>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">FAITH TCP relay translator</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">FAITH system uses TCP relay daemon called <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">faithd</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> helped
	by the kernel.  FAITH will reserve an IPv6 address prefix, and relay
	TCP connection toward that prefix to IPv4 destination.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">For example, if the reserved IPv6 prefix is
	2001:0DB8:0200:ffff::, and the IPv6 destination for TCP connection
	is 2001:0DB8:0200:ffff::163.221.202.12, the connection will be
	relayed toward IPv4 destination 163.221.202.12.</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink">	destination IPv4 node (163.221.202.12)
	  ^
	  | IPv4 tcp toward 163.221.202.12
	FAITH-relay dual stack node
	  ^
	  | IPv6 TCP toward 2001:0DB8:0200:ffff::163.221.202.12
	source IPv6 node
	</screen>

	<para xmlns:xlink="http://www.w3.org/1999/xlink"><citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">faithd</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> must be invoked on FAITH-relay dual stack
	node.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">For more details, consult
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">src/usr.sbin/faithd/README</filename></para>
      </sect3>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="ipsec-implementation">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">IPsec</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">IPsec is mainly organized by three components.</para>

      <orderedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Policy Management</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Key Management</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">AH and ESP handling</para>
	</listitem>
      </orderedlist>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Policy Management</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The kernel implements experimental policy management code.
	There are two way to manage security policy.  One is to configure
	per-socket policy using <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">setsockopt</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry>.  In this cases, policy
	configuration is described in <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">ipsec_set_policy</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry>.  The other
	is to configure kernel packet filter-based policy using PF_KEY
	interface, via <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">setkey</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry>.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The policy entry is not re-ordered with its
	indexes, so the order of entry when you add is very significant.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Key Management</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The key management code implemented in this kit (sys/netkey)
	is a home-brew PFKEY v2 implementation.  This conforms to RFC2367.
	</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The home-brew IKE daemon, "racoon" is included in the
	kit (kame/kame/racoon).  Basically you will need to run racoon as
	daemon, then set up a policy to require keys (like
	<command xmlns:xlink="http://www.w3.org/1999/xlink">ping -P 'out ipsec esp/transport//use'</command>).
	The kernel will contact racoon daemon as necessary to exchange
	keys.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">AH and ESP handling</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">IPsec module is implemented as "hooks" to the standard IPv4/IPv6
	processing.  When sending a packet, ip{,6}_output() checks if ESP/AH
	processing is required by checking if a matching SPD (Security
	Policy Database) is found.  If ESP/AH is needed,
	{esp,ah}{4,6}_output() will be called and mbuf will be updated
	accordingly.  When a packet is received, {esp,ah}4_input() will be
	called based on protocol number, i.e. (*inetsw[proto])().
	{esp,ah}4_input() will decrypt/check authenticity of the packet,
	and strips off daisy-chained header and padding for ESP/AH.  It is
	safe to strip off the ESP/AH header on packet reception, since we
	will never use the received packet in "as is" form.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">By using ESP/AH, TCP4/6 effective data segment size will be
	affected by extra daisy-chained headers inserted by ESP/AH.  Our
	code takes care of the case.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Basic crypto functions can be found in directory "sys/crypto".
	ESP/AH transform are listed in {esp,ah}_core.c with wrapper functions.
	If you wish to add some algorithm, add wrapper function in
	{esp,ah}_core.c, and add your crypto algorithm code into
	sys/crypto.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Tunnel mode is partially supported in this release, with the
	following restrictions:</para>

	<itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">IPsec tunnel is not combined with GIF generic tunneling
	    interface.  It needs a great care because we may create an
	    infinite loop between ip_output() and tunnelifp-&gt;if_output().
	    Opinion varies if it is better to unify them, or not.</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">MTU and Don't Fragment bit (IPv4) considerations need more
	    checking, but basically works fine.</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Authentication model for AH tunnel must be revisited.
	    We will need to improve the policy management engine,
	    eventually.</para>
	  </listitem>
	</itemizedlist>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Conformance to RFCs and IDs</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The IPsec code in the kernel conforms (or, tries to conform)
	to the following standards:</para>

    	<para xmlns:xlink="http://www.w3.org/1999/xlink">"old IPsec" specification documented in
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">rfc182[5-9].txt</filename></para>

    	<para xmlns:xlink="http://www.w3.org/1999/xlink">"new IPsec" specification documented in
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">rfc240[1-6].txt</filename>,
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">rfc241[01].txt</filename>, <filename xmlns:xlink="http://www.w3.org/1999/xlink">rfc2451.txt</filename>
	and <filename xmlns:xlink="http://www.w3.org/1999/xlink">draft-mcdonald-simple-ipsec-api-01.txt</filename>
	(draft expired, but you can take from <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="ftp://ftp.kame.net/pub/internet-drafts/">
	ftp://ftp.kame.net/pub/internet-drafts/</link>).
	(NOTE: IKE specifications, <filename xmlns:xlink="http://www.w3.org/1999/xlink">rfc241[7-9].txt</filename> are
	implemented in userland, as "racoon" IKE daemon)</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Currently supported algorithms are:</para>
	<itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">old IPsec AH</para>
	    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">null crypto checksum (no document, just for
		debugging)</para>
	      </listitem>
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">keyed MD5 with 128bit crypto checksum
		(<filename xmlns:xlink="http://www.w3.org/1999/xlink">rfc1828.txt</filename>)</para>
	      </listitem>
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">keyed SHA1 with 128bit crypto checksum
		(no document)</para>
	      </listitem>
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">HMAC MD5 with 128bit crypto checksum
		(<filename xmlns:xlink="http://www.w3.org/1999/xlink">rfc2085.txt</filename>)</para>
	      </listitem>
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">HMAC SHA1 with 128bit crypto checksum
		(no document)</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
            <para xmlns:xlink="http://www.w3.org/1999/xlink">old IPsec ESP</para>
	    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	        <para xmlns:xlink="http://www.w3.org/1999/xlink">null encryption (no document, similar to
		<filename xmlns:xlink="http://www.w3.org/1999/xlink">rfc2410.txt</filename>)</para>
	      </listitem>
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	        <para xmlns:xlink="http://www.w3.org/1999/xlink">DES-CBC mode (<filename xmlns:xlink="http://www.w3.org/1999/xlink">rfc1829.txt</filename>)</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">new IPsec AH</para>
	    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">null crypto checksum (no document,
		just for debugging)</para>
	      </listitem>
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">keyed MD5 with 96bit crypto checksum
		(no document)</para>
	      </listitem>
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">keyed SHA1 with 96bit crypto checksum
		(no document)</para>
	      </listitem>
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">HMAC MD5 with 96bit crypto checksum
		(<filename xmlns:xlink="http://www.w3.org/1999/xlink">rfc2403.txt</filename>)</para>
	      </listitem>
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">HMAC SHA1 with 96bit crypto checksum
		(<filename xmlns:xlink="http://www.w3.org/1999/xlink">rfc2404.txt</filename>)</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
            <para xmlns:xlink="http://www.w3.org/1999/xlink">new IPsec ESP</para>
	    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">null encryption
		(<filename xmlns:xlink="http://www.w3.org/1999/xlink">rfc2410.txt</filename>)</para>
	      </listitem>
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">DES-CBC with derived IV
		(<filename xmlns:xlink="http://www.w3.org/1999/xlink">draft-ietf-ipsec-ciph-des-derived-01.txt</filename>,
		draft expired)</para>
	      </listitem>
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">DES-CBC with explicit IV
		(<filename xmlns:xlink="http://www.w3.org/1999/xlink">rfc2405.txt</filename>)</para>
	      </listitem>
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">3DES-CBC with explicit IV
		(<filename xmlns:xlink="http://www.w3.org/1999/xlink">rfc2451.txt</filename>)</para>
	      </listitem>
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">BLOWFISH CBC
		(<filename xmlns:xlink="http://www.w3.org/1999/xlink">rfc2451.txt</filename>)</para>
	      </listitem>
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">CAST128 CBC
		(<filename xmlns:xlink="http://www.w3.org/1999/xlink">rfc2451.txt</filename>)</para>
	      </listitem>
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">RC5 CBC
		(<filename xmlns:xlink="http://www.w3.org/1999/xlink">rfc2451.txt</filename>)</para>
	      </listitem>
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">each of the above can be combined with:</para>
	 	<itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
		  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    	    <para xmlns:xlink="http://www.w3.org/1999/xlink">ESP authentication with HMAC-MD5(96bit)</para>
		  </listitem>
		  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	            <para xmlns:xlink="http://www.w3.org/1999/xlink">ESP authentication with HMAC-SHA1(96bit)</para>
		  </listitem>
	        </itemizedlist>
	      </listitem>
	    </itemizedlist>
	  </listitem>
	</itemizedlist>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The following algorithms are NOT supported:</para>
	<itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">

	    <para xmlns:xlink="http://www.w3.org/1999/xlink">old IPsec AH</para>

	    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">HMAC MD5 with 128bit crypto checksum + 64bit
		replay prevention (<filename xmlns:xlink="http://www.w3.org/1999/xlink">rfc2085.txt</filename>)</para>
	      </listitem>
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">keyed SHA1 with 160bit crypto checksum + 32bit padding
		(<filename xmlns:xlink="http://www.w3.org/1999/xlink">rfc1852.txt</filename>)</para>
	      </listitem>
	    </itemizedlist>

	  </listitem>
	</itemizedlist>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">IPsec (in kernel) and IKE (in userland as "racoon") has been
	tested at several interoperability test events, and it is known to
	interoperate with many other implementations well.  Also, current
	IPsec implementation as quite wide coverage for IPsec crypto
	algorithms documented in RFC (we cover algorithms without intellectual
	property issues only).</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="ipsec-ecn">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">ECN consideration on IPsec tunnels</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">ECN-friendly IPsec tunnel is supported as described in
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">draft-ipsec-ecn-00.txt</filename>.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Normal IPsec tunnel is described in RFC2401.  On encapsulation,
	IPv4 TOS field (or, IPv6 traffic class field) will be copied from inner
	IP header to outer IP header.  On decapsulation outer IP header
	will be simply dropped.  The decapsulation rule is not compatible
	with ECN, since ECN bit on the outer IP TOS/traffic class field will be
	lost.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">To make IPsec tunnel ECN-friendly, we should modify encapsulation
	and decapsulation procedure.  This is described in <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.aciri.org/floyd/papers/draft-ipsec-ecn-00.txt">
	http://www.aciri.org/floyd/papers/draft-ipsec-ecn-00.txt</link>,
	chapter 3.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">IPsec tunnel implementation can give you three behaviors, by
	setting net.inet.ipsec.ecn (or net.inet6.ipsec6.ecn) to some
	value:</para>

	<itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">RFC2401: no consideration for ECN (sysctl value -1)</para>
	  </listitem>
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">ECN forbidden (sysctl value 0)</para>
	  </listitem>
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">ECN allowed (sysctl value 1)</para>
	  </listitem>
	</itemizedlist>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Note that the behavior is configurable in per-node manner,
	not per-SA manner (draft-ipsec-ecn-00 wants per-SA configuration,
	but it looks too much for me).</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The behavior is summarized as follows (see source code for
	more detail):</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink">
                encapsulate                     decapsulate
                ---                             ---
RFC2401         copy all TOS bits               drop TOS bits on outer
                from inner to outer.            (use inner TOS bits as is)

ECN forbidden   copy TOS bits except for ECN    drop TOS bits on outer
                (masked with 0xfc) from inner   (use inner TOS bits as is)
                to outer.  set ECN bits to 0.

ECN allowed     copy TOS bits except for ECN    use inner TOS bits with some
                CE (masked with 0xfe) from      change.  if outer ECN CE bit
                inner to outer.                 is 1, enable ECN CE bit on
                set ECN CE bit to 0.            the inner.

	</screen>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">General strategy for configuration is as follows:</para>
	<itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">if both IPsec tunnel endpoint are capable of ECN-friendly
	    behavior, you should better configure both end to <quote xmlns:xlink="http://www.w3.org/1999/xlink">ECN allowed</quote>
	    (sysctl value 1).</para>
	  </listitem>
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
            <para xmlns:xlink="http://www.w3.org/1999/xlink">if the other end is very strict about TOS bit, use "RFC2401"
            (sysctl value -1).</para>
	  </listitem>
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">in other cases, use "ECN forbidden" (sysctl value 0).</para>
	  </listitem>
	</itemizedlist>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The default behavior is "ECN forbidden" (sysctl value 0).</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">For more information, please refer to:</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink"><link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.aciri.org/floyd/papers/draft-ipsec-ecn-00.txt">
	http://www.aciri.org/floyd/papers/draft-ipsec-ecn-00.txt</link>,
	RFC2481 (Explicit Congestion Notification),
	src/sys/netinet6/{ah,esp}_input.c</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">(Thanks goes to Kenjiro Cho <email xmlns:xlink="http://www.w3.org/1999/xlink">kjc@csl.sony.co.jp</email>
	for detailed analysis)</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Interoperability</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Here are (some of) platforms that KAME code have tested
	IPsec/IKE interoperability in the past.  Note that both ends may
	have modified their implementation, so use the following list just
	for reference purposes.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Altiga, Ashley-laurent (vpcom.com), Data Fellows (F-Secure),
	Ericsson ACC, FreeS/WAN, HITACHI, IBM <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">AIX</trademark>, IIJ, Intel,
	<trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">Microsoft</trademark> <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">Windows NT</trademark>, NIST (linux IPsec + plutoplus), Netscreen, OpenBSD,
	RedCreek, Routerware, SSH, Secure Computing, Soliton, Toshiba,
	VPNet, Yamaha RT100i</para>
      </sect3>
    </sect2>
  </sect1>
</chapter>


  </part>

  <part xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="kernel">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Kernel</title>

    
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="kernelbuild">
  <title xmlns:xlink="http://www.w3.org/1999/xlink">Building and Installing a FreeBSD Kernel</title>

  <para xmlns:xlink="http://www.w3.org/1999/xlink">Being a kernel developer requires understanding of the kernel
    build process.  To debug the FreeBSD kernel it is required to be able
    to build one.  There are two known ways to do so:</para>

  <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
    <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
      <para xmlns:xlink="http://www.w3.org/1999/xlink">The <quote xmlns:xlink="http://www.w3.org/1999/xlink">Traditional</quote> Way</para>
    </listitem>

    <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
      <para xmlns:xlink="http://www.w3.org/1999/xlink">The <quote xmlns:xlink="http://www.w3.org/1999/xlink">New</quote> Way</para>
    </listitem>
  </itemizedlist>

  <note xmlns:xlink="http://www.w3.org/1999/xlink">
    <para xmlns:xlink="http://www.w3.org/1999/xlink">It is supposed that the reader of this chapter is familiar
      with the information described in the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="../handbook/kernelconfig-building.html">Building and
	Installing a Custom Kernel</link> chapter of the FreeBSD
      Handbook.  If this is not the case, please read through the above
      mentioned chapter to understand how the build process
      works.</para>
  </note>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="kernelbuild-traditional">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Building a Kernel the <quote xmlns:xlink="http://www.w3.org/1999/xlink">Traditional</quote> Way</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Up to version 4.X of FreeBSD this was the recommended way to
      build a new kernel.  It can still be used on newer versions
      (instead of the <quote xmlns:xlink="http://www.w3.org/1999/xlink">buildkernel</quote> target of the toplevel
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/</filename> makefiles).
      Building the kernel this way may be useful when working on the
      kernel code and it may actually be faster than the
      <quote xmlns:xlink="http://www.w3.org/1999/xlink">New</quote> procedure when only a single option or two were
      tweaked in the kernel configuration file.  On the other hand, it
      might lead to unexpected kernel build breakage when used by
      beginners on newer versions of FreeBSD.</para>

    <procedure xmlns:xlink="http://www.w3.org/1999/xlink">
      <step xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Run <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">config</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> to generate the kernel source
	  code:</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">/usr/sbin/config <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">MYKERNEL</replaceable></userinput></screen>
      </step>

      <step xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Change into the build directory.  <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">config</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> will
	  print the name of this directory after being run as
	  above.</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cd ../compile/<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">MYKERNEL</replaceable></userinput></screen>
      </step>

      <step xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Compile the kernel:</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">make depend</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">make</userinput></screen>
      </step>

      <step xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Install the new kernel:</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">make install</userinput></screen>
      </step>
    </procedure>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="kernelbuild-new">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Building a Kernel the <quote xmlns:xlink="http://www.w3.org/1999/xlink">New</quote> Way</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">This procedure is well supported and recommended under the
      latest FreeBSD releases and is documented in the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="../handbook/kernelconfig-building.html">Building and
	Installing a Custom Kernel</link> chapter of the FreeBSD
      Handbook.</para>
  </sect1>
</chapter>

    
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="kerneldebug">
  <info><title xmlns:xlink="http://www.w3.org/1999/xlink">Kernel Debugging</title>
    <authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
      <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Paul</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Richards</surname></personname><contrib xmlns:xlink="http://www.w3.org/1999/xlink">Contributed by </contrib></author>
      <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Jörg</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Wunsch</surname></personname></author>
      <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Robert</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Watson</surname></personname></author>
    </authorgroup>
  </info>

  

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="kerneldebug-obtain">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Obtaining a Kernel Crash Dump</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">When running a development kernel (e.g., FreeBSD-CURRENT), such as a
      kernel under extreme conditions (e.g., very high load averages,
      tens of thousands of connections, exceedingly high number of
      concurrent users, hundreds of <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">jail</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry>s, etc.), or using a
      new feature or device driver on FreeBSD-STABLE (e.g.,
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">PAE</acronym>), sometimes a kernel will panic.  In the
      event that it does, this chapter will demonstrate how to extract
      useful information out of a crash.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">A system reboot is inevitable once a kernel panics.  Once a
      system is rebooted, the contents of a system's physical memory
      (<acronym xmlns:xlink="http://www.w3.org/1999/xlink">RAM</acronym>) is lost, as well as any bits that are
      on the swap device before the panic.  To preserve the bits in
      physical memory, the kernel makes use of the swap device as a
      temporary place to store the bits that are in RAM across a
      reboot after a crash.  In doing this, when FreeBSD boots after a
      crash, a kernel image can now be extracted and debugging can
      take place.</para>

    <note xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">A swap device that has been configured as a dump
      device still acts as a swap device.  Dumps to non-swap devices
      (such as tapes or CDRWs, for example) are not supported at this time.  A
      <quote xmlns:xlink="http://www.w3.org/1999/xlink">swap device</quote> is synonymous with a <quote xmlns:xlink="http://www.w3.org/1999/xlink">swap
      partition.</quote></para></note>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Several types of kernel crash dumps are available: full memory
      dumps, which hold the complete contents of physical memory,
      minidumps, which hold only memory pages in use by the kernel
      (FreeBSD  6.2 and higher), and textdumps, which hold captured
      scripted or interactive debugger output (FreeBSD 7.1 and higher).
      Minidumps are the default dump type as of FreeBSD 7.0, and in most
      cases will capture all necessary information present in a full
      memory dump, as most problems can be isolated only using kernel
      state.</para>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="config-dumpdev">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Configuring the Dump Device</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Before the kernel will dump the contents of its physical
	memory to a dump device, a dump device must be configured.  A
	dump device is specified by using the <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">dumpon</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> command
	to tell the kernel where to save kernel crash dumps.  The
	<citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">dumpon</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> program must be called after the swap partition
	has been configured with <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">swapon</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry>.  This is normally
	handled by setting the <varname xmlns:xlink="http://www.w3.org/1999/xlink">dumpdev</varname> variable in
	<citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">rc.conf</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">5</manvolnum></citerefentry> to the path of the swap device (the
	recommended way to extract a kernel dump) or
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">AUTO</literal> to use the first configured swap
	device.  The default for <varname xmlns:xlink="http://www.w3.org/1999/xlink">dumpdev</varname> is
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">AUTO</literal> in HEAD, and changed to
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">NO</literal> on RELENG_* branches (except for RELENG_7,
	which was left set to <literal xmlns:xlink="http://www.w3.org/1999/xlink">AUTO</literal>).
	On FreeBSD 9.0-RELEASE and later versions,
	<application xmlns:xlink="http://www.w3.org/1999/xlink">bsdinstall</application> will ask whether crash dumps
	should be enabled on the target system during the install process.</para>

      <tip xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Check <filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc/fstab</filename> or
	<citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">swapinfo</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> for a list of swap devices.</para></tip>

      <important xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Make sure the <varname xmlns:xlink="http://www.w3.org/1999/xlink">dumpdir</varname>
        specified in <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">rc.conf</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">5</manvolnum></citerefentry> exists before a kernel
        crash!</para>

        <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">mkdir /var/crash</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">chmod 700 /var/crash</userinput></screen>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Also, remember that the contents of
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">/var/crash</filename> is sensitive and very likely
	  contains confidential information such as passwords.</para>
      </important>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="extract-dump">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Extracting a Kernel Dump</title>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Once a dump has been written to a dump device, the dump
	  must be extracted before the swap device is mounted.
	  To extract a dump
	  from a dump device, use the <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">savecore</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> program.  If
	  <varname xmlns:xlink="http://www.w3.org/1999/xlink">dumpdev</varname> has been set in <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">rc.conf</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">5</manvolnum></citerefentry>,
	  <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">savecore</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> will be called automatically on the first
	  multi-user boot after the crash and before the swap device
	  is mounted.  The location of the extracted core is placed in
	  the <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">rc.conf</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">5</manvolnum></citerefentry> value <varname xmlns:xlink="http://www.w3.org/1999/xlink">dumpdir</varname>, by
	  default <filename xmlns:xlink="http://www.w3.org/1999/xlink">/var/crash</filename> and will be named
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">vmcore.0</filename>.</para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">In the event that there is already a file called
          <filename xmlns:xlink="http://www.w3.org/1999/xlink">vmcore.0</filename> in
          <filename xmlns:xlink="http://www.w3.org/1999/xlink">/var/crash</filename> (or whatever
          <varname xmlns:xlink="http://www.w3.org/1999/xlink">dumpdir</varname> is set to), the kernel will
          increment the trailing number for every crash to avoid
          overwriting an existing <filename xmlns:xlink="http://www.w3.org/1999/xlink">vmcore</filename> (e.g.,
          <filename xmlns:xlink="http://www.w3.org/1999/xlink">vmcore.1</filename>).  While debugging, it is
          highly likely that you will want to use the highest version
          <filename xmlns:xlink="http://www.w3.org/1999/xlink">vmcore</filename> in
          <filename xmlns:xlink="http://www.w3.org/1999/xlink">/var/crash</filename> when searching for the right
          <filename xmlns:xlink="http://www.w3.org/1999/xlink">vmcore</filename>.</para>

    <tip xmlns:xlink="http://www.w3.org/1999/xlink">
      <para xmlns:xlink="http://www.w3.org/1999/xlink">If you are testing a new kernel but need to boot a different one in
      order to get your system up and running again, boot it only into single
      user mode using the <option xmlns:xlink="http://www.w3.org/1999/xlink">-s</option> flag at the boot prompt, and
      then perform the following steps:</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">fsck -p</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">mount -a -t ufs</userinput>       # make sure /var/crash is writable
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">savecore /var/crash /dev/ad0s1b</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">exit</userinput>                  # exit to multi-user</screen>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">This instructs <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">savecore</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> to extract a kernel dump
      from <filename xmlns:xlink="http://www.w3.org/1999/xlink">/dev/ad0s1b</filename> and place the contents in
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/var/crash</filename>.  Do not forget to make sure the
      destination directory <filename xmlns:xlink="http://www.w3.org/1999/xlink">/var/crash</filename> has enough
      space for the dump.  Also, do not forget to specify the correct path to your swap
      device as it is likely different than
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/dev/ad0s1b</filename>!</para></tip>
    </sect2>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="kerneldebug-gdb">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Debugging a Kernel Crash Dump with <command xmlns:xlink="http://www.w3.org/1999/xlink">kgdb</command></title>

    <note xmlns:xlink="http://www.w3.org/1999/xlink">
      <para xmlns:xlink="http://www.w3.org/1999/xlink">This section covers <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">kgdb</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">1</manvolnum></citerefentry> as found in FreeBSD 5.3
	and later.  In previous versions, one must use
	<command xmlns:xlink="http://www.w3.org/1999/xlink">gdb -k</command> to read a core dump file.</para>
    </note>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Once a dump has been obtained, getting useful information
      out of the dump is relatively easy for simple problems.  Before
      launching into the internals of <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">kgdb</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">1</manvolnum></citerefentry> to debug
      the crash dump, locate the debug version of your kernel
      (normally called <filename xmlns:xlink="http://www.w3.org/1999/xlink">kernel.debug</filename>) and the path
      to the source files used to build your kernel (normally
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/obj/usr/src/sys/<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">KERNCONF</replaceable></filename>,
      where <filename xmlns:xlink="http://www.w3.org/1999/xlink"><replaceable xmlns:xlink="http://www.w3.org/1999/xlink">KERNCONF</replaceable></filename>
      is the <varname xmlns:xlink="http://www.w3.org/1999/xlink">ident</varname> specified in a kernel
      <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">config</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">5</manvolnum></citerefentry>).  With those two pieces of info, let the
      debugging commence!</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">To enter into the debugger and begin getting information
      from the dump, the following steps are required at a minimum:</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cd /usr/obj/usr/src/sys/<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">KERNCONF</replaceable></userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">kgdb kernel.debug /var/crash/vmcore.0</userinput></screen>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">You can debug the crash dump using the kernel sources just like
      you can for any other program.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">This first dump is from a 5.2-BETA kernel and the crash
      comes from deep within the kernel.  The output below has been
      modified to include line numbers on the left.  This first trace
      inspects the instruction pointer and obtains a back trace.  The
      address that is used on line 41 for the <command xmlns:xlink="http://www.w3.org/1999/xlink">list</command>
      command is the instruction pointer and can be found on line
      17.  Most developers will request having at least this
      information sent to them if you are unable to debug the problem
      yourself.  If, however, you do solve the problem, make sure that
      your patch winds its way into the source tree via a problem
      report, mailing lists, or by being able to commit it!</para>

      <screen xmlns:xlink="http://www.w3.org/1999/xlink"> 1:<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cd /usr/obj/usr/src/sys/<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">KERNCONF</replaceable></userinput>
 2:<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">kgdb kernel.debug /var/crash/vmcore.0</userinput>
 3:GNU gdb 5.2.1 (FreeBSD)
 4:Copyright 2002 Free Software Foundation, Inc.
 5:GDB is free software, covered by the GNU General Public License, and you are
 6:welcome to change it and/or distribute copies of it under certain conditions.
 7:Type "show copying" to see the conditions.
 8:There is absolutely no warranty for GDB.  Type "show warranty" for details.
 9:This GDB was configured as "i386-undermydesk-freebsd"...
10:panic: page fault
11:panic messages:
12:---
13:Fatal trap 12: page fault while in kernel mode
14:cpuid = 0; apic id = 00
15:fault virtual address   = 0x300
16:fault code:             = supervisor read, page not present
17:instruction pointer     = 0x8:0xc0713860
18:stack pointer           = 0x10:0xdc1d0b70
19:frame pointer           = 0x10:0xdc1d0b7c
20:code segment            = base 0x0, limit 0xfffff, type 0x1b
21:                        = DPL 0, pres 1, def32 1, gran 1
22:processor eflags        = resume, IOPL = 0
23:current process         = 14394 (uname)
24:trap number             = 12
25:panic: page fault
26      cpuid = 0;
27:Stack backtrace:
28
29:syncing disks, buffers remaining... 2199 2199 panic: mi_switch: switch in a critical section
30:cpuid = 0;
31:Uptime: 2h43m19s
32:Dumping 255 MB
33: 16 32 48 64 80 96 112 128 144 160 176 192 208 224 240
34:---
35:Reading symbols from /boot/kernel/snd_maestro3.ko...done.
36:Loaded symbols for /boot/kernel/snd_maestro3.ko
37:Reading symbols from /boot/kernel/snd_pcm.ko...done.
38:Loaded symbols for /boot/kernel/snd_pcm.ko
39:#0  doadump () at /usr/src/sys/kern/kern_shutdown.c:240
40:240             dumping++;
41:<prompt xmlns:xlink="http://www.w3.org/1999/xlink">(kgdb)</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">list *0xc0713860</userinput>
42:0xc0713860 is in lapic_ipi_wait (/usr/src/sys/i386/i386/local_apic.c:663).
43:658                     incr = 0;
44:659                     delay = 1;
45:660             } else
46:661                     incr = 1;
47:662             for (x = 0; x &lt; delay; x += incr) {
48:663                     if ((lapic-&gt;icr_lo &amp; APIC_DELSTAT_MASK) == APIC_DELSTAT_IDLE)
49:664                             return (1);
50:665                     ia32_pause();
51:666             }
52:667             return (0);
53:<prompt xmlns:xlink="http://www.w3.org/1999/xlink">(kgdb)</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">backtrace</userinput>
54:#0  doadump () at /usr/src/sys/kern/kern_shutdown.c:240
55:#1  0xc055fd9b in boot (howto=260) at /usr/src/sys/kern/kern_shutdown.c:372
56:#2  0xc056019d in panic () at /usr/src/sys/kern/kern_shutdown.c:550
57:#3  0xc0567ef5 in mi_switch () at /usr/src/sys/kern/kern_synch.c:470
58:#4  0xc055fa87 in boot (howto=256) at /usr/src/sys/kern/kern_shutdown.c:312
59:#5  0xc056019d in panic () at /usr/src/sys/kern/kern_shutdown.c:550
60:#6  0xc0720c66 in trap_fatal (frame=0xdc1d0b30, eva=0)
61:    at /usr/src/sys/i386/i386/trap.c:821
62:#7  0xc07202b3 in trap (frame=
63:      {tf_fs = -1065484264, tf_es = -1065484272, tf_ds = -1065484272, tf_edi = 1, tf_esi = 0, tf_ebp = -602076292, tf_isp = -602076324, tf_ebx = 0, tf_edx = 0, tf_ecx = 1000000, tf_eax = 243, tf_trapno = 12, tf_err = 0, tf_eip = -1066321824, tf_cs = 8, tf_eflags = 65671, tf_esp = 243, tf_ss = 0})
64:    at /usr/src/sys/i386/i386/trap.c:250
65:#8  0xc070c9f8 in calltrap () at {standard input}:94
66:#9  0xc07139f3 in lapic_ipi_vectored (vector=0, dest=0)
67:    at /usr/src/sys/i386/i386/local_apic.c:733
68:#10 0xc0718b23 in ipi_selected (cpus=1, ipi=1)
69:    at /usr/src/sys/i386/i386/mp_machdep.c:1115
70:#11 0xc057473e in kseq_notify (ke=0xcc05e360, cpu=0)
71:    at /usr/src/sys/kern/sched_ule.c:520
72:#12 0xc0575cad in sched_add (td=0xcbcf5c80)
73:    at /usr/src/sys/kern/sched_ule.c:1366
74:#13 0xc05666c6 in setrunqueue (td=0xcc05e360)
75:    at /usr/src/sys/kern/kern_switch.c:422
76:#14 0xc05752f4 in sched_wakeup (td=0xcbcf5c80)
77:    at /usr/src/sys/kern/sched_ule.c:999
78:#15 0xc056816c in setrunnable (td=0xcbcf5c80)
79:    at /usr/src/sys/kern/kern_synch.c:570
80:#16 0xc0567d53 in wakeup (ident=0xcbcf5c80)
81:    at /usr/src/sys/kern/kern_synch.c:411
82:#17 0xc05490a8 in exit1 (td=0xcbcf5b40, rv=0)
83:    at /usr/src/sys/kern/kern_exit.c:509
84:#18 0xc0548011 in sys_exit () at /usr/src/sys/kern/kern_exit.c:102
85:#19 0xc0720fd0 in syscall (frame=
86:      {tf_fs = 47, tf_es = 47, tf_ds = 47, tf_edi = 0, tf_esi = -1, tf_ebp = -1077940712, tf_isp = -602075788, tf_ebx = 672411944, tf_edx = 10, tf_ecx = 672411600, tf_eax = 1, tf_trapno = 12, tf_err = 2, tf_eip = 671899563, tf_cs = 31, tf_eflags = 642, tf_esp = -1077940740, tf_ss = 47})
87:    at /usr/src/sys/i386/i386/trap.c:1010
88:#20 0xc070ca4d in Xint0x80_syscall () at {standard input}:136
89:---Can't read userspace from dump, or kernel process---
90:<prompt xmlns:xlink="http://www.w3.org/1999/xlink">(kgdb)</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">quit</userinput></screen>


    <para xmlns:xlink="http://www.w3.org/1999/xlink">This next trace is an older dump from the FreeBSD 2 time
      frame, but is more involved and demonstrates more of the
      features of <command xmlns:xlink="http://www.w3.org/1999/xlink">gdb</command>.  Long lines have been folded
      to improve readability, and the lines are numbered for
      reference. Despite this, it is a real-world error trace taken
      during the development of the pcvt console driver.</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink"> 1:Script started on Fri Dec 30 23:15:22 1994
 2:<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cd /sys/compile/URIAH</userinput>
 3:<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">gdb -k kernel /var/crash/vmcore.1</userinput>
 4:Reading symbol data from /usr/src/sys/compile/URIAH/kernel
...done.
 5:IdlePTD 1f3000
 6:panic: because you said to!
 7:current pcb at 1e3f70
 8:Reading in symbols for ../../i386/i386/machdep.c...done.
 9:<prompt xmlns:xlink="http://www.w3.org/1999/xlink">(kgdb)</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">backtrace</userinput>
10:#0  boot (arghowto=256) (../../i386/i386/machdep.c line 767)
11:#1  0xf0115159 in panic ()
12:#2  0xf01955bd in diediedie () (../../i386/i386/machdep.c line 698)
13:#3  0xf010185e in db_fncall ()
14:#4  0xf0101586 in db_command (-266509132, -266509516, -267381073)
15:#5  0xf0101711 in db_command_loop ()
16:#6  0xf01040a0 in db_trap ()
17:#7  0xf0192976 in kdb_trap (12, 0, -272630436, -266743723)
18:#8  0xf019d2eb in trap_fatal (...)
19:#9  0xf019ce60 in trap_pfault (...)
20:#10 0xf019cb2f in trap (...)
21:#11 0xf01932a1 in exception:calltrap ()
22:#12 0xf0191503 in cnopen (...)
23:#13 0xf0132c34 in spec_open ()
24:#14 0xf012d014 in vn_open ()
25:#15 0xf012a183 in open ()
26:#16 0xf019d4eb in syscall (...)
27:<prompt xmlns:xlink="http://www.w3.org/1999/xlink">(kgdb)</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">up 10</userinput>
28:Reading in symbols for ../../i386/i386/trap.c...done.
29:#10 0xf019cb2f in trap (frame={tf_es = -260440048, tf_ds = 16, tf_\
30:edi = 3072, tf_esi = -266445372, tf_ebp = -272630356, tf_isp = -27\
31:2630396, tf_ebx = -266427884, tf_edx = 12, tf_ecx = -266427884, tf\
32:_eax = 64772224, tf_trapno = 12, tf_err = -272695296, tf_eip = -26\
33:6672343, tf_cs = -266469368, tf_eflags = 66066, tf_esp = 3072, tf_\
34:ss = -266427884}) (../../i386/i386/trap.c line 283)
35:283                             (void) trap_pfault(&amp;frame, FALSE);
36:<prompt xmlns:xlink="http://www.w3.org/1999/xlink">(kgdb)</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">frame frame-&gt;tf_ebp frame-&gt;tf_eip</userinput>
37:Reading in symbols for ../../i386/isa/pcvt/pcvt_drv.c...done.
38:#0  0xf01ae729 in pcopen (dev=3072, flag=3, mode=8192, p=(struct p\
39:roc *) 0xf07c0c00) (../../i386/isa/pcvt/pcvt_drv.c line 403)
40:403             return ((*linesw[tp-&gt;t_line].l_open)(dev, tp));
41:<prompt xmlns:xlink="http://www.w3.org/1999/xlink">(kgdb)</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">list</userinput>
42:398
43:399             tp-&gt;t_state |= TS_CARR_ON;
44:400             tp-&gt;t_cflag |= CLOCAL;  /* cannot be a modem (:-) */
45:401
46:402     #if PCVT_NETBSD || (PCVT_FREEBSD &gt;= 200)
47:403             return ((*linesw[tp-&gt;t_line].l_open)(dev, tp));
48:404     #else
49:405             return ((*linesw[tp-&gt;t_line].l_open)(dev, tp, flag));
50:406     #endif /* PCVT_NETBSD || (PCVT_FREEBSD &gt;= 200) */
51:407     }
52:<prompt xmlns:xlink="http://www.w3.org/1999/xlink">(kgdb)</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">print tp</userinput>
53:Reading in symbols for ../../i386/i386/cons.c...done.
54:$1 = (struct tty *) 0x1bae
55:<prompt xmlns:xlink="http://www.w3.org/1999/xlink">(kgdb)</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">print tp-&gt;t_line</userinput>
56:$2 = 1767990816
57:<prompt xmlns:xlink="http://www.w3.org/1999/xlink">(kgdb)</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">up</userinput>
58:#1  0xf0191503 in cnopen (dev=0x00000000, flag=3, mode=8192, p=(st\
59:ruct proc *) 0xf07c0c00) (../../i386/i386/cons.c line 126)
60:       return ((*cdevsw[major(dev)].d_open)(dev, flag, mode, p));
61:<prompt xmlns:xlink="http://www.w3.org/1999/xlink">(kgdb)</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">up</userinput>
62:#2  0xf0132c34 in spec_open ()
63:<prompt xmlns:xlink="http://www.w3.org/1999/xlink">(kgdb)</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">up</userinput>
64:#3  0xf012d014 in vn_open ()
65:<prompt xmlns:xlink="http://www.w3.org/1999/xlink">(kgdb)</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">up</userinput>
66:#4  0xf012a183 in open ()
67:<prompt xmlns:xlink="http://www.w3.org/1999/xlink">(kgdb)</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">up</userinput>
68:#5  0xf019d4eb in syscall (frame={tf_es = 39, tf_ds = 39, tf_edi =\
69: 2158592, tf_esi = 0, tf_ebp = -272638436, tf_isp = -272629788, tf\
70:_ebx = 7086, tf_edx = 1, tf_ecx = 0, tf_eax = 5, tf_trapno = 582, \
71:tf_err = 582, tf_eip = 75749, tf_cs = 31, tf_eflags = 582, tf_esp \
72:= -272638456, tf_ss = 39}) (../../i386/i386/trap.c line 673)
73:673             error = (*callp-&gt;sy_call)(p, args, rval);
74:<prompt xmlns:xlink="http://www.w3.org/1999/xlink">(kgdb)</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">up</userinput>
75:Initial frame selected; you cannot go up.
76:<prompt xmlns:xlink="http://www.w3.org/1999/xlink">(kgdb)</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">quit</userinput></screen>
    <para xmlns:xlink="http://www.w3.org/1999/xlink">Comments to the above script:</para>

    <variablelist xmlns:xlink="http://www.w3.org/1999/xlink">
      <varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	<term xmlns:xlink="http://www.w3.org/1999/xlink">line 6:</term>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">This is a dump taken from within DDB (see below), hence the
	    panic comment <quote xmlns:xlink="http://www.w3.org/1999/xlink">because you said to!</quote>, and a rather
	    long stack trace; the initial reason for going into DDB has been a
	    page fault trap though.</para>
	</listitem>
      </varlistentry>

      <varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	<term xmlns:xlink="http://www.w3.org/1999/xlink">line 20:</term>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">This is the location of function <function xmlns:xlink="http://www.w3.org/1999/xlink">trap()</function>
	    in the stack trace.</para>
	</listitem>
      </varlistentry>

      <varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	<term xmlns:xlink="http://www.w3.org/1999/xlink">line 36:</term>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Force usage of a new stack frame; this is no longer necessary.
	    The stack frames are supposed to point to the right
	    locations now, even in case of a trap.
	    From looking at the code in source line 403, there is a
	    high probability that either the pointer access for
	    <quote xmlns:xlink="http://www.w3.org/1999/xlink">tp</quote> was messed up, or the array access was out of
	    bounds.</para>
	</listitem>
      </varlistentry>

      <varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	<term xmlns:xlink="http://www.w3.org/1999/xlink">line 52:</term>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">The pointer looks suspicious, but happens to be a valid
	    address.</para>
	</listitem>
      </varlistentry>

      <varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	<term xmlns:xlink="http://www.w3.org/1999/xlink">line 56:</term>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">However, it obviously points to garbage, so we have found our
	    error! (For those unfamiliar with that particular piece of code:
	    <literal xmlns:xlink="http://www.w3.org/1999/xlink">tp-&gt;t_line</literal> refers to the line discipline  of
	    the console device here, which must be a rather small integer
	    number.)</para>
	</listitem>
      </varlistentry>
    </variablelist>

    <tip xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">If your system is crashing regularly and you are running
      out of disk space, deleting old <filename xmlns:xlink="http://www.w3.org/1999/xlink">vmcore</filename>
      files in <filename xmlns:xlink="http://www.w3.org/1999/xlink">/var/crash</filename> could save a
      considerable amount of disk space!</para></tip>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="kerneldebug-ddd">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Debugging a Crash Dump with DDD</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Examining a kernel crash dump with a graphical debugger like
      <command xmlns:xlink="http://www.w3.org/1999/xlink">ddd</command> is also possible (you will need to install
      the <package xmlns:xlink="http://www.w3.org/1999/xlink">devel/ddd</package> port in order to use the
      <command xmlns:xlink="http://www.w3.org/1999/xlink">ddd</command> debugger).  Add the <option xmlns:xlink="http://www.w3.org/1999/xlink">-k</option>
      option to the <command xmlns:xlink="http://www.w3.org/1999/xlink">ddd</command> command line you would use
      normally.  For example;</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">ddd --debugger kgdb kernel.debug /var/crash/vmcore.0</userinput></screen>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">You should then be able to go about looking at the crash dump using
      <command xmlns:xlink="http://www.w3.org/1999/xlink">ddd</command>'s graphical interface.</para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="kerneldebug-online-ddb">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">On-Line Kernel Debugging Using DDB</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">While <command xmlns:xlink="http://www.w3.org/1999/xlink">kgdb</command> as an off-line debugger provides a very
      high level of user interface, there are some things it cannot do.  The
      most important ones being breakpointing and single-stepping kernel
      code.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">If you need to do low-level debugging on your kernel, there is an
      on-line debugger available called DDB.  It allows setting of
      breakpoints, single-stepping kernel functions, examining and changing
      kernel variables, etc.  However, it cannot access kernel source files,
      and only has access to the global and static symbols, not to the full
      debug information like <command xmlns:xlink="http://www.w3.org/1999/xlink">gdb</command> does.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">To configure your kernel to include DDB, add the options

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">options KDB</programlisting>
      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">options DDB</programlisting>

      to your config file, and rebuild.  (See <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.FreeBSD.org/doc/en_US.ISO8859-1/books/handbook/index.html">The FreeBSD Handbook</link> for details on
      configuring the FreeBSD kernel).</para>

    <note xmlns:xlink="http://www.w3.org/1999/xlink">
      <para xmlns:xlink="http://www.w3.org/1999/xlink">If you have an older version of the boot blocks, your
	debugger symbols might not be loaded at all.  Update the boot blocks;
	the recent ones load the DDB symbols automatically.</para>
    </note>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Once your DDB kernel is running, there are several ways to enter
      DDB.  The first, and earliest way is to type the boot flag
      <option xmlns:xlink="http://www.w3.org/1999/xlink">-d</option> right at the boot prompt.  The kernel will start up
      in debug mode and enter DDB prior to any device probing.  Hence you can
      even debug the device probe/attach functions.  Users of FreeBSD-CURRENT
      will need to use the boot menu option, six, to escape to a command
      prompt.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The second scenario is to drop to the debugger once the
      system has booted.  There are two simple ways to accomplish
      this.  If you would like to break to the debugger from the
      command prompt, simply type the command:</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">sysctl debug.kdb.enter=1</userinput></screen>
    <note xmlns:xlink="http://www.w3.org/1999/xlink">
      <para xmlns:xlink="http://www.w3.org/1999/xlink">To force a panic on the fly, issue the following command:</para>
      <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">sysctl debug.kdb.panic=1</userinput></screen>
    </note>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Alternatively, if you are at the system console, you may use
      a hot-key on the keyboard.  The default break-to-debugger
      sequence is <keycombo xmlns:xlink="http://www.w3.org/1999/xlink" action="simul"><keycap xmlns:xlink="http://www.w3.org/1999/xlink">Ctrl</keycap>
      <keycap xmlns:xlink="http://www.w3.org/1999/xlink">Alt</keycap><keycap xmlns:xlink="http://www.w3.org/1999/xlink">ESC</keycap></keycombo>.  For
      syscons, this sequence can be remapped and some of the
      distributed maps out there do this, so check to make sure you
      know the right sequence to use.  There is an option available
      for serial consoles that allows the use of a serial line BREAK on the
      console line to enter DDB (<literal xmlns:xlink="http://www.w3.org/1999/xlink">options BREAK_TO_DEBUGGER</literal>
      in the kernel config file).  It is not the default since there are a lot
      of serial adapters around that gratuitously generate a BREAK
      condition, for example when pulling the cable.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The third way is that any panic condition will branch to DDB if the
      kernel is configured to use it.  For this reason, it is not wise to
      configure a kernel with DDB for a machine running unattended.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">To obtain the unattended functionality, add:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">options	KDB_UNATTENDED</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">to the kernel configuration file and rebuild/reinstall.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The DDB commands roughly resemble some <command xmlns:xlink="http://www.w3.org/1999/xlink">gdb</command>
      commands.  The first thing you probably need to do is to set a
      breakpoint:</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><userinput xmlns:xlink="http://www.w3.org/1999/xlink">break function-name address</userinput></screen>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Numbers are taken hexadecimal by default, but to make them distinct
      from symbol names; hexadecimal numbers starting with the letters
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">a-f</literal> need to be preceded with <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x</literal>
      (this is optional for other numbers).  Simple expressions are allowed,
      for example: <literal xmlns:xlink="http://www.w3.org/1999/xlink">function-name + 0x103</literal>.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">To exit the debugger and continue execution,
      type:</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><userinput xmlns:xlink="http://www.w3.org/1999/xlink">continue</userinput></screen>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">To get a stack trace, use:</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><userinput xmlns:xlink="http://www.w3.org/1999/xlink">trace</userinput></screen>

    <note xmlns:xlink="http://www.w3.org/1999/xlink">
      <para xmlns:xlink="http://www.w3.org/1999/xlink">Note that when entering DDB via a hot-key, the kernel is currently
	servicing an interrupt, so the stack trace might be not of much use
	to you.</para>
    </note>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">If you want to remove a breakpoint, use</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><userinput xmlns:xlink="http://www.w3.org/1999/xlink">del</userinput>
<userinput xmlns:xlink="http://www.w3.org/1999/xlink">del address-expression</userinput></screen>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The first form will be accepted immediately after a breakpoint hit,
      and deletes the current breakpoint.  The second form can remove any
      breakpoint, but you need to specify the exact address; this can be
      obtained from:</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><userinput xmlns:xlink="http://www.w3.org/1999/xlink">show b</userinput></screen>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">or:</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><userinput xmlns:xlink="http://www.w3.org/1999/xlink">show break</userinput></screen>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">To single-step the kernel, try:</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><userinput xmlns:xlink="http://www.w3.org/1999/xlink">s</userinput></screen>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">This will step into functions, but you can make DDB trace them until
      the matching return statement is reached by:</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><userinput xmlns:xlink="http://www.w3.org/1999/xlink">n</userinput></screen>

    <note xmlns:xlink="http://www.w3.org/1999/xlink">
      <para xmlns:xlink="http://www.w3.org/1999/xlink">This is different from <command xmlns:xlink="http://www.w3.org/1999/xlink">gdb</command>'s
	<command xmlns:xlink="http://www.w3.org/1999/xlink">next</command> statement; it is like <command xmlns:xlink="http://www.w3.org/1999/xlink">gdb</command>'s
	<command xmlns:xlink="http://www.w3.org/1999/xlink">finish</command>.  Pressing <keycap xmlns:xlink="http://www.w3.org/1999/xlink">n</keycap> more than once
        will cause a continue.</para>
    </note>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">To examine data from memory, use (for example):

      <screen xmlns:xlink="http://www.w3.org/1999/xlink"><userinput xmlns:xlink="http://www.w3.org/1999/xlink">x/wx 0xf0133fe0,40</userinput>
<userinput xmlns:xlink="http://www.w3.org/1999/xlink">x/hd db_symtab_space</userinput>
<userinput xmlns:xlink="http://www.w3.org/1999/xlink">x/bc termbuf,10</userinput>
<userinput xmlns:xlink="http://www.w3.org/1999/xlink">x/s stringbuf</userinput></screen>

      for word/halfword/byte access, and hexadecimal/decimal/character/ string
      display.  The number after the comma is the object count.  To display
      the next 0x10 items, simply use:</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><userinput xmlns:xlink="http://www.w3.org/1999/xlink">x ,10</userinput></screen>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Similarly, use

      <screen xmlns:xlink="http://www.w3.org/1999/xlink"><userinput xmlns:xlink="http://www.w3.org/1999/xlink">x/ia foofunc,10</userinput></screen>

      to disassemble the first 0x10 instructions of
      <function xmlns:xlink="http://www.w3.org/1999/xlink">foofunc</function>, and display them along with their offset
      from the beginning of <function xmlns:xlink="http://www.w3.org/1999/xlink">foofunc</function>.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">To modify memory, use the write command:</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><userinput xmlns:xlink="http://www.w3.org/1999/xlink">w/b termbuf 0xa 0xb 0</userinput>
<userinput xmlns:xlink="http://www.w3.org/1999/xlink">w/w 0xf0010030 0 0</userinput></screen>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The command modifier
      (<literal xmlns:xlink="http://www.w3.org/1999/xlink">b</literal>/<literal xmlns:xlink="http://www.w3.org/1999/xlink">h</literal>/<literal xmlns:xlink="http://www.w3.org/1999/xlink">w</literal>)
      specifies the size of the data to be written, the first following
      expression is the address to write to and the remainder is interpreted
      as data to write to successive memory locations.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">If you need to know the current registers, use:</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><userinput xmlns:xlink="http://www.w3.org/1999/xlink">show reg</userinput></screen>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Alternatively, you can display a single register value by e.g.

      <screen xmlns:xlink="http://www.w3.org/1999/xlink"><userinput xmlns:xlink="http://www.w3.org/1999/xlink">p $eax</userinput></screen>

      and modify it by:</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><userinput xmlns:xlink="http://www.w3.org/1999/xlink">set $eax new-value</userinput></screen>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Should you need to call some kernel functions from DDB, simply
      say:</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><userinput xmlns:xlink="http://www.w3.org/1999/xlink">call func(arg1, arg2, ...)</userinput></screen>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The return value will be printed.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">For a <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">ps</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">1</manvolnum></citerefentry> style summary of all running processes, use:</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><userinput xmlns:xlink="http://www.w3.org/1999/xlink">ps</userinput></screen>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Now you have examined why your kernel failed, and you wish to
      reboot.  Remember that, depending on the severity of previous
      malfunctioning, not all parts of the kernel might still be working as
      expected.  Perform one of the following actions to shut down and reboot
      your system:</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><userinput xmlns:xlink="http://www.w3.org/1999/xlink">panic</userinput></screen>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">This will cause your kernel to dump core and reboot, so you can
      later analyze the core on a higher level with <command xmlns:xlink="http://www.w3.org/1999/xlink">gdb</command>.
      This command
      usually must be followed by another <command xmlns:xlink="http://www.w3.org/1999/xlink">continue</command>
      statement.</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><userinput xmlns:xlink="http://www.w3.org/1999/xlink">call boot(0)</userinput></screen>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Might be a good way to cleanly shut down the running system,
      <function xmlns:xlink="http://www.w3.org/1999/xlink">sync()</function> all disks, and finally, in some cases,
      reboot.  As long as
      the disk and filesystem interfaces of the kernel are not damaged, this
      could be a good way for an almost clean shutdown.</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><userinput xmlns:xlink="http://www.w3.org/1999/xlink">call cpu_reset()</userinput></screen>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">This is the final way out of disaster and almost the same as hitting the
      Big Red Button.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">If you need a short command summary, simply type:</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><userinput xmlns:xlink="http://www.w3.org/1999/xlink">help</userinput></screen>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">It is highly recommended to have a printed copy of the
	<citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">ddb</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">4</manvolnum></citerefentry> manual page ready for a debugging
      session.  Remember that it is hard to read the on-line manual while
      single-stepping the kernel.</para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="kerneldebug-online-gdb">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">On-Line Kernel Debugging Using Remote GDB</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">This feature has been supported since FreeBSD 2.2, and it is
      actually a very neat one.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">GDB has already supported <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">remote debugging</emphasis> for
      a long time.  This is done using a very simple protocol along a serial
      line.  Unlike the other methods described above, you will need two
      machines for doing this.  One is the host providing the debugging
      environment, including all the sources, and a copy of the kernel binary
      with all the symbols in it, and the other one is the target machine that
      simply runs a similar copy of the very same kernel (but stripped of the
      debugging information).</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">You should configure the kernel in question with <command xmlns:xlink="http://www.w3.org/1999/xlink">config
	-g</command> if building the <quote xmlns:xlink="http://www.w3.org/1999/xlink">traditional</quote> way.  If
      building the <quote xmlns:xlink="http://www.w3.org/1999/xlink">new</quote> way, make sure that
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">makeoptions DEBUG=-g</literal> is in the configuration.
      In both cases, include <option xmlns:xlink="http://www.w3.org/1999/xlink">DDB</option> in the configuration, and
      compile it as usual.  This gives a large binary, due to the
      debugging information.  Copy this kernel to the target machine, strip
      the debugging symbols off with <command xmlns:xlink="http://www.w3.org/1999/xlink">strip -x</command>, and boot it
      using the <option xmlns:xlink="http://www.w3.org/1999/xlink">-d</option> boot option.  Connect the serial line
      of the target machine that has "flags 080" set on its uart device
      to any serial line of the debugging host.  See <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">uart</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">4</manvolnum></citerefentry> for
      information on how to set the flags on an uart device.
      Now, on the debugging machine, go to the compile directory of the target
      kernel, and start <command xmlns:xlink="http://www.w3.org/1999/xlink">gdb</command>:</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">kgdb kernel</userinput>
GDB is free software and you are welcome to distribute copies of it
 under certain conditions; type "show copying" to see the conditions.
There is absolutely no warranty for GDB; type "show warranty" for details.
GDB 4.16 (i386-unknown-freebsd),
Copyright 1996 Free Software Foundation, Inc...
<prompt xmlns:xlink="http://www.w3.org/1999/xlink">(kgdb)</prompt> </screen>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Initialize the remote debugging session (assuming the first serial
      port is being used) by:</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns:xlink="http://www.w3.org/1999/xlink">(kgdb)</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">target remote /dev/cuau0</userinput></screen>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Now, on the target host (the one that entered DDB right before even
      starting the device probe), type:</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink">Debugger("Boot flags requested debugger")
Stopped at Debugger+0x35: movb	$0, edata+0x51bc
<prompt xmlns:xlink="http://www.w3.org/1999/xlink">db&gt;</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">gdb</userinput></screen>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">DDB will respond with:</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink">Next trap will enter GDB remote protocol mode</screen>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Every time you type <command xmlns:xlink="http://www.w3.org/1999/xlink">gdb</command>, the mode will be toggled
      between remote GDB and local DDB.  In order to force a next trap
      immediately, simply type <command xmlns:xlink="http://www.w3.org/1999/xlink">s</command> (step).  Your hosting GDB
      will now gain control over the target kernel:</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink">Remote debugging using /dev/cuau0
Debugger (msg=0xf01b0383 "Boot flags requested debugger")
    at ../../i386/i386/db_interface.c:257
<prompt xmlns:xlink="http://www.w3.org/1999/xlink">(kgdb)</prompt></screen>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">You can use this session almost as any other GDB session, including
      full access to the source, running it in gud-mode inside an Emacs window
      (which gives you an automatic source code display in another Emacs
      window), etc.</para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="kerneldebug-console">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Debugging a Console Driver</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Since you need a console driver to run DDB on, things are more
      complicated if the console driver itself is failing.  You might remember
      the use of a serial console (either with modified boot blocks, or by
      specifying <option xmlns:xlink="http://www.w3.org/1999/xlink">-h</option> at the <prompt xmlns:xlink="http://www.w3.org/1999/xlink">Boot:</prompt> prompt),
      and hook up a standard terminal onto your first serial port.  DDB works
      on any configured console driver, including a serial
      console.</para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="kerneldebug-deadlocks">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Debugging Deadlocks</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">You may experience so called deadlocks, a situation where
      a system stops doing useful work.  To provide a helpful bug
      report in this situation, use <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">ddb</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">4</manvolnum></citerefentry> as described in the
      previous section.  Include the output of <command xmlns:xlink="http://www.w3.org/1999/xlink">ps</command>
      and <command xmlns:xlink="http://www.w3.org/1999/xlink">trace</command> for suspected processes in the
      report.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">If possible, consider doing further investigation.  The
      recipe below is especially useful if you suspect that a deadlock
      occurs in the VFS layer.  Add these options to the kernel
      configuration file.</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">makeoptions 	DEBUG=-g
options 	INVARIANTS
options 	INVARIANT_SUPPORT
options 	WITNESS
options 	WITNESS_SKIPSPIN
options 	DEBUG_LOCKS
options 	DEBUG_VFS_LOCKS
options 	DIAGNOSTIC</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">When a deadlock occurs, in addition to the output of the
      <command xmlns:xlink="http://www.w3.org/1999/xlink">ps</command> command, provide information from the
      <command xmlns:xlink="http://www.w3.org/1999/xlink">show pcpu</command>, <command xmlns:xlink="http://www.w3.org/1999/xlink">show allpcpu</command>,
      <command xmlns:xlink="http://www.w3.org/1999/xlink">show locks</command>, <command xmlns:xlink="http://www.w3.org/1999/xlink">show alllocks</command>,
      <command xmlns:xlink="http://www.w3.org/1999/xlink">show lockedvnods</command> and
      <command xmlns:xlink="http://www.w3.org/1999/xlink">alltrace</command>.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">To obtain meaningful backtraces for threaded processes, use
      <command xmlns:xlink="http://www.w3.org/1999/xlink">thread thread-id</command> to switch to the thread
      stack, and do a backtrace with <command xmlns:xlink="http://www.w3.org/1999/xlink">where</command>.</para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="kerneldebug-dcons">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Kernel debugging with Dcons</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink"><citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">dcons</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">4</manvolnum></citerefentry> is a very simple console driver that is
      not directly connected with any physical devices.  It just reads
      and writes characters from and to a buffer in a kernel or
      loader.  Due to its simple nature, it is very useful for kernel
      debugging, especially with a <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">FireWire</trademark> device.  Currently, FreeBSD
      provides two ways to interact with the buffer from outside of
      the kernel using <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">dconschat</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry>.</para>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Dcons over <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">FireWire</trademark></title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Most <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">FireWire</trademark> (IEEE1394) host controllers are
	based on the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">OHCI</acronym> specification that
	supports physical access to the host memory.  This means that
	once the host controller is initialized, we can access the
	host memory without the help of software (kernel).   We can
	exploit this facility for interaction with <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">dcons</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">4</manvolnum></citerefentry>.
	<citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">dcons</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">4</manvolnum></citerefentry> provides similar functionality as a serial
	console.  It emulates two serial ports, one for the console
	and <acronym xmlns:xlink="http://www.w3.org/1999/xlink">DDB</acronym>, the other for
	<acronym xmlns:xlink="http://www.w3.org/1999/xlink">GDB</acronym>.  Because remote memory access is fully
	handled by the hardware, the <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">dcons</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">4</manvolnum></citerefentry> buffer is
	accessible even when the system crashes.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink"><trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">FireWire</trademark> devices are not limited to those
	integrated into motherboards.  <acronym xmlns:xlink="http://www.w3.org/1999/xlink">PCI</acronym> cards
	exist for desktops, and a cardbus interface can be purchased
	for laptops.</para>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Enabling <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">FireWire</trademark> and Dcons support on the target
	  machine</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">To enable <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">FireWire</trademark> and Dcons support in the kernel of
	  the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">target machine</emphasis>:</para>

	<itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Make sure your kernel supports
	      <literal xmlns:xlink="http://www.w3.org/1999/xlink">dcons</literal>, <literal xmlns:xlink="http://www.w3.org/1999/xlink">dcons_crom</literal>
	      and <literal xmlns:xlink="http://www.w3.org/1999/xlink">firewire</literal>.
	      <literal xmlns:xlink="http://www.w3.org/1999/xlink">Dcons</literal> should be statically linked
	      with the kernel.  For <literal xmlns:xlink="http://www.w3.org/1999/xlink">dcons_crom</literal> and
	      <literal xmlns:xlink="http://www.w3.org/1999/xlink">firewire</literal>, modules should be
	      OK.</para>
	  </listitem>
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Make sure physical <acronym xmlns:xlink="http://www.w3.org/1999/xlink">DMA</acronym> is enabled.
	      You may need to add
	      <literal xmlns:xlink="http://www.w3.org/1999/xlink">hw.firewire.phydma_enable=1</literal> to
	      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/boot/loader.conf</filename>.</para>
	  </listitem>
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Add options for debugging.</para>
	  </listitem>
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Add <literal xmlns:xlink="http://www.w3.org/1999/xlink">dcons_gdb=1</literal> in
	      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/boot/loader.conf</filename> if you use GDB
	      over <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">FireWire</trademark>.</para>
	  </listitem>
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Enable <literal xmlns:xlink="http://www.w3.org/1999/xlink">dcons</literal> in
	      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc/ttys</filename>.</para>
	  </listitem>
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Optionally, to force <literal xmlns:xlink="http://www.w3.org/1999/xlink">dcons</literal> to
	      be the high-level console, add 
	      <literal xmlns:xlink="http://www.w3.org/1999/xlink">hw.firewire.dcons_crom.force_console=1</literal> 
	      to <filename xmlns:xlink="http://www.w3.org/1999/xlink">loader.conf</filename>.</para>
	  </listitem>
        </itemizedlist>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">To enable <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">FireWire</trademark> and Dcons support in <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">loader</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry>
	  on i386 or amd64:</para>
	    
        <para xmlns:xlink="http://www.w3.org/1999/xlink">Add
	  <literal xmlns:xlink="http://www.w3.org/1999/xlink">LOADER_FIREWIRE_SUPPORT=YES</literal> in
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc/make.conf</filename> and rebuild
	  <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">loader</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry>:</para>

        <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cd /sys/boot/i386 &amp;&amp; make clean &amp;&amp; make &amp;&amp; make install</userinput></screen>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">To enable <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">dcons</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">4</manvolnum></citerefentry> as an active low-level
	  console, add <literal xmlns:xlink="http://www.w3.org/1999/xlink">boot_multicons="YES"</literal> to 
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">/boot/loader.conf</filename>.</para>
	  
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Here are a few configuration examples.  A sample kernel
	  configuration file would contain:</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink">device dcons
device dcons_crom
options KDB
options DDB
options GDB
options ALT_BREAK_TO_DEBUGGER</screen>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">And a sample <filename xmlns:xlink="http://www.w3.org/1999/xlink">/boot/loader.conf</filename>
	  would contain:</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink">dcons_crom_load="YES"
dcons_gdb=1
boot_multicons="YES"
hw.firewire.phydma_enable=1
hw.firewire.dcons_crom.force_console=1</screen>

      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Enabling <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">FireWire</trademark> and Dcons support on the host
	  machine</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">To enable <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">FireWire</trademark> support in the kernel on the
	  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">host machine</emphasis>:</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">kldload firewire</userinput></screen>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Find out the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">EUI64</acronym> (the unique 64
	  bit identifier) of the <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">FireWire</trademark> host controller, and
	  use <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">fwcontrol</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> or <command xmlns:xlink="http://www.w3.org/1999/xlink">dmesg</command> to
	  find the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">EUI64</acronym> of the target machine.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Run <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">dconschat</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry>, with:</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">dconschat -e \# -br -G 12345 -t <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">00-11-22-33-44-55-66-77</replaceable></userinput></screen>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The following key combinations can be used once
	  <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">dconschat</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> is running:</para>

	<informaltable xmlns:xlink="http://www.w3.org/1999/xlink" pgwide="1">
	  <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="2">
	    <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
	      <row xmlns:xlink="http://www.w3.org/1999/xlink">
		<entry xmlns:xlink="http://www.w3.org/1999/xlink">
		  <keycombo xmlns:xlink="http://www.w3.org/1999/xlink" action="seq">
		    <keycap xmlns:xlink="http://www.w3.org/1999/xlink">~</keycap>
		    <keycap xmlns:xlink="http://www.w3.org/1999/xlink">.</keycap>
		  </keycombo>
		</entry>
		<entry xmlns:xlink="http://www.w3.org/1999/xlink">Disconnect</entry>
	      </row>
	      <row xmlns:xlink="http://www.w3.org/1999/xlink">
		<entry xmlns:xlink="http://www.w3.org/1999/xlink">
		  <keycombo xmlns:xlink="http://www.w3.org/1999/xlink" action="seq">
		    <keycap xmlns:xlink="http://www.w3.org/1999/xlink">~</keycap>
		    <keycombo xmlns:xlink="http://www.w3.org/1999/xlink" action="simul">
		      <keycap xmlns:xlink="http://www.w3.org/1999/xlink">Ctrl</keycap>
		      <keycap xmlns:xlink="http://www.w3.org/1999/xlink">B</keycap>
		    </keycombo>
		  </keycombo>
		</entry>	  
		<entry xmlns:xlink="http://www.w3.org/1999/xlink">ALT BREAK</entry>
	      </row>
	      <row xmlns:xlink="http://www.w3.org/1999/xlink">
		<entry xmlns:xlink="http://www.w3.org/1999/xlink">
		  <keycombo xmlns:xlink="http://www.w3.org/1999/xlink" action="seq">
		    <keycap xmlns:xlink="http://www.w3.org/1999/xlink">~</keycap>
		    <keycombo xmlns:xlink="http://www.w3.org/1999/xlink" action="simul">
		      <keycap xmlns:xlink="http://www.w3.org/1999/xlink">Ctrl</keycap>
		      <keycap xmlns:xlink="http://www.w3.org/1999/xlink">R</keycap>
		    </keycombo>
		  </keycombo>
		</entry>
		<entry xmlns:xlink="http://www.w3.org/1999/xlink">RESET target</entry>
	      </row>
	      <row xmlns:xlink="http://www.w3.org/1999/xlink">
		<entry xmlns:xlink="http://www.w3.org/1999/xlink">
		  <keycombo xmlns:xlink="http://www.w3.org/1999/xlink" action="seq">
		    <keycap xmlns:xlink="http://www.w3.org/1999/xlink">~</keycap>
		    <keycombo xmlns:xlink="http://www.w3.org/1999/xlink" action="simul">
		      <keycap xmlns:xlink="http://www.w3.org/1999/xlink">Ctrl</keycap>
		      <keycap xmlns:xlink="http://www.w3.org/1999/xlink">Z</keycap>
		    </keycombo>
		  </keycombo>
		</entry>	
		<entry xmlns:xlink="http://www.w3.org/1999/xlink">Suspend dconschat</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</informaltable>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Attach remote <acronym xmlns:xlink="http://www.w3.org/1999/xlink">GDB</acronym> by starting
	  <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">kgdb</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">1</manvolnum></citerefentry> with a remote debugging session:</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink"><userinput xmlns:xlink="http://www.w3.org/1999/xlink">kgdb -r :12345 kernel</userinput></screen>

      </sect3>
      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Some general tips</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Here are some general tips:</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">To take full advantage of the speed of <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">FireWire</trademark>,
	  disable other slow console drivers:</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> conscontrol delete ttyd0	     # serial console
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> conscontrol delete consolectl	# video/keyboard</screen>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">There exists a <acronym xmlns:xlink="http://www.w3.org/1999/xlink">GDB</acronym> mode for
	  <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" vendor="ports"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">emacs</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">1</manvolnum></citerefentry>; this is what you will need to add to your
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">.emacs</filename>:</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink"><userinput xmlns:xlink="http://www.w3.org/1999/xlink">(setq gud-gdba-command-name "kgdb -a -a -a -r :12345")
(setq gdb-many-windows t)
(xterm-mouse-mode 1)
M-x gdba</userinput></screen>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">And for <acronym xmlns:xlink="http://www.w3.org/1999/xlink">DDD</acronym> (<filename xmlns:xlink="http://www.w3.org/1999/xlink">devel/ddd</filename>):</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink"># remote serial protocol
LANG=C ddd --debugger kgdb -r :12345 kernel
# live core debug
LANG=C ddd --debugger kgdb kernel /dev/fwmem0.2</screen>
      </sect3>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Dcons with KVM</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">We can directly read the <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">dcons</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">4</manvolnum></citerefentry> buffer via
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">/dev/mem</filename> for live systems, and in the
	core dump for crashed systems.  These give you similar output
	to <command xmlns:xlink="http://www.w3.org/1999/xlink">dmesg -a</command>, but the <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">dcons</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">4</manvolnum></citerefentry> buffer
	includes more information.</para> 

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Using Dcons with KVM</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">To use <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">dcons</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">4</manvolnum></citerefentry> with <acronym xmlns:xlink="http://www.w3.org/1999/xlink">KVM</acronym>:</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Dump a <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">dcons</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">4</manvolnum></citerefentry> buffer of a live system:</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">dconschat -1</userinput></screen>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Dump a <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">dcons</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">4</manvolnum></citerefentry> buffer of a crash dump:</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">dconschat -1 -M vmcore.XX</userinput></screen>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Live core debugging can be done via:</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">fwcontrol -m target_eui64</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">kgdb kernel /dev/fwmem0.2</userinput></screen>
      </sect3>
    </sect2>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="kerneldebug-options">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Glossary of Kernel Options for Debugging</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">This section provides a brief glossary of compile-time kernel
      options used for debugging:</para>

    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">options KDB</literal>: compiles in the kernel
	  debugger framework.  Required for <literal xmlns:xlink="http://www.w3.org/1999/xlink">options DDB</literal>
	  and <literal xmlns:xlink="http://www.w3.org/1999/xlink">options GDB</literal>.  Little or no performance
	  overhead.  By default, the debugger will be entered on panic
	  instead of an automatic reboot.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">options KDB_UNATTENDED</literal>: change the default
	  value of the <literal xmlns:xlink="http://www.w3.org/1999/xlink">debug.debugger_on_panic</literal> sysctl to
	  0, which controls whether the debugger is entered on panic.  When
	  <literal xmlns:xlink="http://www.w3.org/1999/xlink">options KDB</literal> is not compiled into the kernel, the
	  behavior is to automatically reboot on panic; when it is compiled
	  into the kernel, the default behavior is to drop into the debugger
	  unless <literal xmlns:xlink="http://www.w3.org/1999/xlink">options KDB_UNATTENDED</literal> is compiled in.
	  If you want to leave the kernel debugger compiled into the kernel
	  but want the system to come back up unless you're on-hand to use
	  the debugger for diagnostics, use this option.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">options KDB_TRACE</literal>: change the default value
	  of the <literal xmlns:xlink="http://www.w3.org/1999/xlink">debug.trace_on_panic</literal> sysctl to 1, which
	  controls whether the debugger automatically prints a stack trace
	  on panic.  Especially if running with <literal xmlns:xlink="http://www.w3.org/1999/xlink">options
	  KDB_UNATTENDED</literal>, this can be helpful to gather basic
	  debugging information on the serial or firewire console while
	  still rebooting to recover.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">options DDB</literal>: compile in support for the
	  console debugger, DDB.  This interactive debugger runs on whatever
	  the active low-level console of the system is, which includes the
	  video console, serial console, or firewire console.  It provides
	  basic integrated debugging facilities, such as stack tracing,
	  process and thread listing, dumping of lock state, VM state, file
	  system state, and kernel memory management.  DDB does not require
	  software running on a second machine or being able to generate a
	  core dump or full debugging kernel symbols, and provides detailed
	  diagnostics of the kernel at run-time.  Many bugs can be fully
	  diagnosed using only DDB output.  This option depends on
	  <literal xmlns:xlink="http://www.w3.org/1999/xlink">options KDB</literal>.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">options GDB</literal>: compile in support for the
	  remote debugger, GDB, which can operate over serial cable or
	  firewire.  When the debugger is entered, GDB may be attached to
	  inspect structure contents, generate stack traces, etc.  Some
	  kernel state is more awkward to access than in DDB, which is able
	  to generate useful summaries of kernel state automatically, such
	  as automatically walking lock debugging or kernel memory
	  management structures, and a second machine running the debugger
	  is required.  On the other hand, GDB combines information from
	  the kernel source and full debugging symbols, and is aware of full
	  data structure definitions, local variables, and is scriptable.
	  This option is not required to run GDB on a kernel core dump.
	  This option depends on <literal xmlns:xlink="http://www.w3.org/1999/xlink">options KDB</literal>.
	  </para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">options BREAK_TO_DEBUGGER</literal>, <literal xmlns:xlink="http://www.w3.org/1999/xlink">options
	  ALT_BREAK_TO_DEBUGGER</literal>: allow a break signal or
	  alternative signal on the console to enter the debugger.  If the
	  system hangs without a panic, this is a useful way to reach the
	  debugger.  Due to the current kernel locking, a break signal
	  generated on a serial console is significantly more reliable at
	  getting into the debugger, and is generally recommended.  This
	  option has little or no performance impact.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
        <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">options INVARIANTS</literal>: compile into the kernel
	  a large number of run-time assertion checks and tests, which
	  constantly test the integrity of kernel data structures and the
	  invariants of kernel algorithms.  These tests can be expensive, so
	  are not compiled in by default, but help provide useful "fail stop"
	  behavior, in which certain classes of undesired behavior enter the
	  debugger before kernel data corruption occurs, making them easier
	  to debug.  Tests include memory scrubbing and use-after-free
	  testing, which is one of the more significant sources of overhead.
	  This option depends on <literal xmlns:xlink="http://www.w3.org/1999/xlink">options INVARIANT_SUPPORT</literal>.
	  </para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">options INVARIANT_SUPPORT</literal>: many of the tests
	  present in <literal xmlns:xlink="http://www.w3.org/1999/xlink">options INVARIANTS</literal> require modified
	  data structures or additional kernel symbols to be defined.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">options WITNESS</literal>: this option enables run-time
	  lock order tracking and verification, and is an invaluable tool for
	  deadlock diagnosis.  WITNESS maintains a graph of acquired lock
	  orders by lock type, and checks the graph at each acquire for
	  cycles (implicit or explicit).  If a cycle is detected, a warning
	  and stack trace are generated to the console, indicating that a
	  potential deadlock might have occurred.  WITNESS is required in
	  order to use the <command xmlns:xlink="http://www.w3.org/1999/xlink">show locks</command>, <command xmlns:xlink="http://www.w3.org/1999/xlink">show
	  witness</command> and <command xmlns:xlink="http://www.w3.org/1999/xlink">show alllocks</command> DDB
	  commands.  This debug option has significant performance overhead,
	  which may be somewhat mitigated through the use of <literal xmlns:xlink="http://www.w3.org/1999/xlink">options
	  WITNESS_SKIPSPIN</literal>.  Detailed documentation may be found in
	  <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">witness</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">4</manvolnum></citerefentry>.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">options WITNESS_SKIPSPIN</literal>: disable run-time
	  checking of spinlock lock order with WITNESS.  As spin locks are
	  acquired most frequently in the scheduler, and scheduler events
	  occur often, this option can significantly speed up systems
	  running with WITNESS.  This option depends on <literal xmlns:xlink="http://www.w3.org/1999/xlink">options
	  WITNESS</literal>.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">options WITNESS_KDB</literal>: change the default
	  value of the <literal xmlns:xlink="http://www.w3.org/1999/xlink">debug.witness.kdb</literal> sysctl to 1,
	  which causes WITNESS to enter the debugger when a lock order
	  violation is detected, rather than simply printing a warning.  This
	  option depends on <literal xmlns:xlink="http://www.w3.org/1999/xlink">options WITNESS</literal>.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">options SOCKBUF_DEBUG</literal>: perform extensive
	  run-time consistency checking on socket buffers, which can be
	  useful for debugging both socket bugs and race conditions in
	  protocols and device drivers that interact with sockets.  This
	  option significantly impacts network performance, and may change
	  the timing in device driver races.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">options DEBUG_VFS_LOCKS</literal>: track lock
	  acquisition points for lockmgr/vnode locks, expanding the amount
	  of information displayed by <command xmlns:xlink="http://www.w3.org/1999/xlink">show lockedvnods</command>
	  in DDB.  This option has a measurable performance impact.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">options DEBUG_MEMGUARD</literal>: a replacement for
	  the <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">malloc</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry> kernel memory allocator that uses the VM system
	  to detect reads or writes from allocated memory after free.
	  Details may be found in <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">memguard</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry>.  This option has a
	  significant performance impact, but can be very helpful in
	  debugging kernel memory corruption bugs.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">options DIAGNOSTIC</literal>: enable additional, more
	  expensive diagnostic tests along the lines of <literal xmlns:xlink="http://www.w3.org/1999/xlink">options
	  INVARIANTS</literal>.</para>
      </listitem>

    </itemizedlist>
  </sect1>

</chapter>


  </part>

  <part xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="architectures">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Architectures</title>

    
<!--
     The FreeBSD Documentation Project

     This file is automatically generated.  Please do not make commits
     to this file.  Updates should be sent to the author :

     G. Adam Stanislav (adam@redprince.net)

     This chapter is an exception to our general rule, and the author
     retains the copyright.  Among other things, this means that this
     chapter should not be included in any printed version of the
     Developer's Handbook without Adam's explicit permission.

     Eventually we will have to replace this chapter or convince the
     author to assign us the copyright.  For now, it is valuable
     content so it should stay.

     $FreeBSD$
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="x86">

<title xmlns:xlink="http://www.w3.org/1999/xlink">x86 Assembly Language Programming</title>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">
This chapter was written by G. Adam Stanislav <email xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">adam@redprince.net</email>.
</emphasis></para>



<sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-intro">
<title xmlns:xlink="http://www.w3.org/1999/xlink">Synopsis</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Assembly language programming under <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> is highly undocumented. It
is generally assumed that no one would ever want to use it because
various <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> systems run on different microprocessors, so everything
should be written in C for portability.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
In reality, C portability is quite a myth. Even C programs need
to be modified when ported from one <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> to another, regardless of
what processor each runs on. Typically, such a program is full
of conditional statements depending on the system it is
compiled for.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Even if we believe that all of <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> software should be written in C,
or some other high-level language, we still need assembly language
programmers: Who else would write the section of C library
that accesses the kernel?
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
In this chapter I will attempt to show you
how you can use assembly language writing
<trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> programs, specifically under FreeBSD.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
This chapter does not explain the basics of assembly language.
There are enough resources about that (for a complete
online course in assembly language, see Randall Hyde's
<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://webster.cs.ucr.edu/">Art
of Assembly Language</link>; or if you prefer
a printed book, take a look at Jeff Duntemann's
<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.int80h.org/cgi-bin/isbn?isbn=0471375233">Assembly
Language Step-by-Step</link>). However,
once the chapter is finished, any assembly language programmer
will be able to write programs for FreeBSD
quickly and efficiently.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Copyright © 2000-2001 G. Adam Stanislav. All rights reserved.
</para>

</sect1>

<sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-the-tools">
<title xmlns:xlink="http://www.w3.org/1999/xlink">The Tools</title>

<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-the-assembler">
<title xmlns:xlink="http://www.w3.org/1999/xlink">The Assembler</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The most important tool for assembly language programming is the
assembler, the software that converts assembly language code
into machine language.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Two very different assemblers are available for FreeBSD. One is
<citerefentry xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">as</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">1</manvolnum></citerefentry>,
which uses the traditional <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> assembly language syntax. It
comes with the system.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The other is <application xmlns:xlink="http://www.w3.org/1999/xlink">/usr/ports/devel/nasm</application>.
It uses the Intel syntax. Its main advantage is that it
can assemble code for many operating systems. It needs
to be installed separately, but is completely free.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
This chapter uses <application xmlns:xlink="http://www.w3.org/1999/xlink">nasm</application>
syntax because most assembly language programmers
coming to FreeBSD from other operating systems
will find it easier to understand. And, because,
quite frankly, that is what I am used to.
</para>

</sect2>

<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-the-linker">
<title xmlns:xlink="http://www.w3.org/1999/xlink">The Linker</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The output of the assembler, like that of any
compiler, needs to be linked to form an executable file.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The standard
<citerefentry xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">ld</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">1</manvolnum></citerefentry>
linker comes with FreeBSD. It works with the
code assembled with either assembler.
</para>

</sect2>
</sect1>

<sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-system-calls">
<title xmlns:xlink="http://www.w3.org/1999/xlink">System Calls</title>

<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-default-calling-convention">
<title xmlns:xlink="http://www.w3.org/1999/xlink">Default Calling Convention</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
By default, the FreeBSD kernel uses the C calling
convention. Further, although the kernel is accessed
using <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">int 80h</function>,
it is assumed the program will call a function that
issues <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">int 80h</function>, rather than
issuing <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">int 80h</function> directly.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
This convention is very convenient, and quite superior to the
<trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">Microsoft</trademark> convention used by <acronym xmlns:xlink="http://www.w3.org/1999/xlink"><trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">MS-DOS</trademark></acronym>.
Why? Because the <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> convention allows any program written in
any language to access the kernel.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
An assembly language program can do that as well.
For example, we could open a file:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
kernel:
	int	80h	; Call kernel
	ret

open:
	push	dword mode
	push	dword flags
	push	dword path
	mov	eax, 5
	call	kernel
	add	esp, byte 12
	ret
</programlisting>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
This is a very clean and portable way of coding. If you need to
port the code to a <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> system which uses a different interrupt,
or a different way of passing parameters, all you need to change
is the kernel procedure.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
But assembly language programmers like to shave off cycles. The above example
requires a <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">call/ret</function> combination.
We can eliminate it by
<function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">push</function>ing an extra dword:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
open:
	push	dword mode
	push	dword flags
	push	dword path
	mov	eax, 5
	push	eax		; Or any other dword
	int	80h
	add	esp, byte 16
</programlisting>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The <constant xmlns:xlink="http://www.w3.org/1999/xlink">5</constant> that we have placed in
<varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">EAX</varname> identifies
the kernel function, in this case <function xmlns:xlink="http://www.w3.org/1999/xlink" role="syscall">open</function>.
</para>

</sect2>
<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-alternate-calling-convention">
<title xmlns:xlink="http://www.w3.org/1999/xlink">Alternate Calling Convention</title>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
FreeBSD is an extremely flexible system. It offers other ways of
calling the kernel. For it to work, however, the system must
have Linux emulation installed.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Linux is a <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> like system. However, its kernel uses the same
system-call convention of passing parameters in registers
<acronym xmlns:xlink="http://www.w3.org/1999/xlink"><trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">MS-DOS</trademark></acronym> does. As with the <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> convention,
the function number is placed in <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">EAX</varname>.
The parameters, however, are not passed on the stack but in
<varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">EBX, ECX, EDX, ESI, EDI, EBP</varname>:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
open:
	mov	eax, 5
	mov	ebx, path
	mov	ecx, flags
	mov	edx, mode
	int	80h
</programlisting>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
This convention has a great disadvantage over
the <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> way, at least as far as assembly language programming
is concerned: Every time you make a kernel call
you must <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">push</function> the registers, then
<function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">pop</function> them later. This makes your code
bulkier and slower. Nevertheless, FreeBSD gives
you a choice.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
If you do choose the Linux convention, you must let
the system know about it. After your program is assembled and
linked, you need to brand the executable:
</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">brandelf -t Linux <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">filename</replaceable></userinput></screen>

</sect2>

<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-use-geneva">
<title xmlns:xlink="http://www.w3.org/1999/xlink">Which Convention Should You Use?</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
If you are coding specifically for FreeBSD, you should always
use the <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> convention: It is faster, you can store global
variables in registers, you do not have to brand
the executable, and you do not impose the installation of
the Linux emulation package on the target system.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
If you want to create portable code that can also run
on Linux, you will probably still want to give the FreeBSD
users as efficient a code as possible. I will show you
how you can accomplish that after I have explained the basics.
</para>

</sect2>

<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-call-numbers">
<title xmlns:xlink="http://www.w3.org/1999/xlink">Call Numbers</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
To tell the kernel which system service you are calling,
place its number in <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">EAX</varname>. Of course, you need
to know what the number is.
</para>

<sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-the-syscalls-file">
<title xmlns:xlink="http://www.w3.org/1999/xlink">The <filename xmlns:xlink="http://www.w3.org/1999/xlink">syscalls</filename> File</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The numbers are listed in <filename xmlns:xlink="http://www.w3.org/1999/xlink">syscalls</filename>.
<command xmlns:xlink="http://www.w3.org/1999/xlink">locate syscalls</command> finds this file
in several different formats, all produced automatically
from <filename xmlns:xlink="http://www.w3.org/1999/xlink">syscalls.master</filename>.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
You can find the master file for the default <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> calling
convention in
<filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/sys/kern/syscalls.master</filename>.
If you need to use the other convention implemented
in the Linux emulation mode, read
<filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/sys/i386/linux/syscalls.master</filename>.
</para>

<note xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
Not only do FreeBSD and Linux use different calling
conventions, they sometimes use different numbers for
the same functions.
</para>
</note>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
<filename xmlns:xlink="http://www.w3.org/1999/xlink">syscalls.master</filename> describes how
the call is to be made:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
0	STD	NOHIDE	{ int nosys(void); } syscall nosys_args int
1	STD	NOHIDE	{ void exit(int rval); } exit rexit_args void
2	STD	POSIX	{ int fork(void); }
3	STD	POSIX	{ ssize_t read(int fd, void *buf, size_t nbyte); }
4	STD	POSIX	{ ssize_t write(int fd, const void *buf, size_t nbyte); }
5	STD	POSIX	{ int open(char *path, int flags, int mode); }
6	STD	POSIX	{ int close(int fd); }
etc...
</programlisting>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
It is the leftmost column that tells us the number to place in
<varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">EAX</varname>.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The rightmost column tells us what parameters to
<function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">push</function>. They are <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">push</function>ed
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">from right to left</emphasis>.
</para>

<informalexample xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
For example, to <function xmlns:xlink="http://www.w3.org/1999/xlink">open</function> a file, we need
to <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">push</function> the <varname xmlns:xlink="http://www.w3.org/1999/xlink">mode</varname> first,
then <varname xmlns:xlink="http://www.w3.org/1999/xlink">flags</varname>, then the address at which
the <varname xmlns:xlink="http://www.w3.org/1999/xlink">path</varname> is stored.
</para>
</informalexample>

</sect3>

</sect2>

</sect1>

<sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-return-values">
<title xmlns:xlink="http://www.w3.org/1999/xlink">Return Values</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
A system call would not be useful most of the time
if it did not return some kind of a value: The file
descriptor of an open file, the number of bytes read
to a buffer, the system time, etc.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Additionally, the system needs to inform us if an error
occurs: A file does not exist, system resources are exhausted,
we passed an invalid parameter, etc.
</para>

<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-man-pages">
<title xmlns:xlink="http://www.w3.org/1999/xlink">Man Pages</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The traditional place to look for information about various
system calls under <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> systems are the manual pages.
FreeBSD describes its system calls in section 2, sometimes
in section 3.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
For example, <citerefentry xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">open</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> says:
</para>

<blockquote xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
If successful, <function xmlns:xlink="http://www.w3.org/1999/xlink">open()</function> returns a non-negative
integer, termed a file descriptor. It returns <varname xmlns:xlink="http://www.w3.org/1999/xlink">-1</varname> on failure,
and sets <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> to indicate the error.
</para>

</blockquote>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
The assembly language programmer new to <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> and FreeBSD will
immediately ask the puzzling question: Where is
<varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> and how do I get to it?
</para>

<note xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
The information presented in the manual pages applies
to C programs. The assembly language programmer needs additional
information.
</para>
</note>

</sect2>

<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-where-return-values">
<title xmlns:xlink="http://www.w3.org/1999/xlink">Where Are the Return Values?</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Unfortunately, it depends... For most system calls it is
in <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">EAX</varname>, but not for all.
A good rule of thumb,
when working with a system call for
the first time, is to look for
the return value in <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">EAX</varname>.
If it is not there, you
need further research.
</para>

<note xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
I am aware of one system call that returns the value in
<varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">EDX</varname>: <function xmlns:xlink="http://www.w3.org/1999/xlink" role="syscall">SYS_fork</function>. All others
I have worked with use <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">EAX</varname>.
But I have not worked with them all yet.
</para>
</note>

<tip xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
If you cannot find the answer here or anywhere else,
study <application xmlns:xlink="http://www.w3.org/1999/xlink">libc</application> source code and see how it
interfaces with the kernel.
</para>
</tip>

</sect2>
<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-where-errno">
<title xmlns:xlink="http://www.w3.org/1999/xlink">Where Is <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname>?</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Actually, nowhere...
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
<varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> is part of the C language, not the
<trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> kernel. When accessing kernel services directly, the
error code is returned in <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">EAX</varname>,
the same register the proper
return value generally ends up in.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
This makes perfect sense. If there is no error, there is
no error code. If there is an error, there is no return
value. One register can contain either.
</para>

</sect2>

<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-how-to-know-error">
<title xmlns:xlink="http://www.w3.org/1999/xlink">Determining an Error Occurred</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
When using the standard FreeBSD calling convention,
the <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">carry flag</varname> is cleared upon success,
set upon failure.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
When using the Linux emulation mode, the signed
value in <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">EAX</varname> is non-negative upon success,
and contains the return value. In case of an error, the value
is negative, i.e., <varname xmlns:xlink="http://www.w3.org/1999/xlink">-errno</varname>.
</para>

</sect2>

</sect1>

<sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-portable-code">
<title xmlns:xlink="http://www.w3.org/1999/xlink">Creating Portable Code</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Portability is generally not one of the strengths of assembly language.
Yet, writing assembly language programs for different platforms is
possible, especially with <application xmlns:xlink="http://www.w3.org/1999/xlink">nasm</application>. I have written
assembly language libraries that can be assembled for such different
operating systems as <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">Windows</trademark> and FreeBSD.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
It is all the more possible when you want your code to run
on two platforms which, while different, are based on
similar architectures.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
For example, FreeBSD is <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark>, Linux is <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> like. I only
mentioned three differences between them (from an assembly language
programmer's perspective): The calling convention, the
function numbers, and the way of returning values.
</para>

<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-deal-with-function-numbers"><title xmlns:xlink="http://www.w3.org/1999/xlink">Dealing with Function Numbers</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
In many cases the function numbers are the same. However,
even when they are not, the problem is easy to deal with:
Instead of using numbers in your code, use constants which
you have declared differently depending on the target
architecture:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
%ifdef	LINUX
%define	SYS_execve	11
%else
%define	SYS_execve	59
%endif
</programlisting>
</sect2>
<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-deal-with-geneva"><title xmlns:xlink="http://www.w3.org/1999/xlink">Dealing with Conventions</title>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
Both, the calling convention, and the return value (the
<varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> problem) can be resolved with macros:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
%ifdef	LINUX

%macro	system	0
	call	kernel
%endmacro

align 4
kernel:
	push	ebx
	push	ecx
	push	edx
	push	esi
	push	edi
	push	ebp

	mov	ebx, [esp+32]
	mov	ecx, [esp+36]
	mov	edx, [esp+40]
	mov	esi, [esp+44]
	mov	ebp, [esp+48]
	int	80h

	pop	ebp
	pop	edi
	pop	esi
	pop	edx
	pop	ecx
	pop	ebx

	or	eax, eax
	js	.errno
	clc
	ret

.errno:
	neg	eax
	stc
	ret

%else

%macro	system	0
	int	80h
%endmacro

%endif
</programlisting>

</sect2>

<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-deal-with-other-portability"><title xmlns:xlink="http://www.w3.org/1999/xlink">Dealing with Other Portability Issues</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The above solutions can handle most cases of writing code
portable between FreeBSD and Linux. Nevertheless, with some
kernel services the differences are deeper.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
In that case, you need to write two different handlers
for those particular system calls, and use conditional
assembly. Luckily, most of your code does something other
than calling the kernel, so usually you will only need
a few such conditional sections in your code.
</para>

</sect2>

<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-portable-library"><title xmlns:xlink="http://www.w3.org/1999/xlink">Using a Library</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
You can avoid portability issues in your main code altogether
by writing a library of system calls. Create a separate library
for FreeBSD, a different one for Linux, and yet other libraries
for more operating systems.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
In your library, write a separate function (or procedure, if
you prefer the traditional assembly language terminology) for each system
call. Use the C calling convention of passing parameters.
But still use <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">EAX</varname> to pass the call number in.
In that case, your FreeBSD library can be very simple, as
many seemingly different functions can be just labels to
the same code:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
sys.open:
sys.close:
[etc...]
	int	80h
	ret
</programlisting>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Your Linux library will require more different functions.
But even here you can group system calls using the same
number of parameters:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
sys.exit:
sys.close:
[etc... one-parameter functions]
	push	ebx
	mov	ebx, [esp+12]
	int	80h
	pop	ebx
	jmp	sys.return

...

sys.return:
	or	eax, eax
	js	sys.err
	clc
	ret

sys.err:
	neg	eax
	stc
	ret
</programlisting>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The library approach may seem inconvenient at first because
it requires you to produce a separate file your code depends
on. But it has many advantages: For one, you only need to
write it once and can use it for all your programs. You can
even let other assembly language programmers use it, or perhaps use
one written by someone else. But perhaps the greatest
advantage of the library is that your code can be ported
to other systems, even by other programmers, by simply
writing a new library without any changes to your code.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
If you do not like the idea of having a library, you can
at least place all your system calls in a separate assembly language file
and link it with your main program. Here, again, all porters
have to do is create a new object file to link with your
main program.
</para>

</sect2>

<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-portable-include">
<title xmlns:xlink="http://www.w3.org/1999/xlink">Using an Include File</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
If you are releasing your software as (or with)
source code, you can use macros and place them
in a separate file, which you include in your
code.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Porters of your software will simply write a new
include file. No library or external object file
is necessary, yet your code is portable without any
need to edit the code.
</para>

<note xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
This is the approach we will use throughout this chapter.
We will name our include file <filename xmlns:xlink="http://www.w3.org/1999/xlink">system.inc</filename>, and
add to it whenever we deal with a new system call.
</para>
</note>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We can start our <filename xmlns:xlink="http://www.w3.org/1999/xlink">system.inc</filename> by declaring the
standard file descriptors:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
%define	stdin	0
%define	stdout	1
%define	stderr	2
</programlisting>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Next, we create a symbolic name for each system call:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
%define	SYS_nosys	0
%define	SYS_exit	1
%define	SYS_fork	2
%define	SYS_read	3
%define	SYS_write	4
; [etc...]
</programlisting>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We add a short, non-global procedure with a long name,
so we do not accidentally reuse the name in our code:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
section	.text
align 4
access.the.bsd.kernel:
	int	80h
	ret
</programlisting>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We create a macro which takes one argument, the syscall number:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
%macro	system	1
	mov	eax, %1
	call	access.the.bsd.kernel
%endmacro
</programlisting>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Finally, we create macros for each syscall. These macros take
no arguments.
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
%macro	sys.exit	0
	system	SYS_exit
%endmacro

%macro	sys.fork	0
	system	SYS_fork
%endmacro

%macro	sys.read	0
	system	SYS_read
%endmacro

%macro	sys.write	0
	system	SYS_write
%endmacro

; [etc...]
</programlisting>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Go ahead, enter it into your editor and save it as
<filename xmlns:xlink="http://www.w3.org/1999/xlink">system.inc</filename>. We will add more to it as we
discuss more syscalls.
</para>

</sect2>

</sect1>

<sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-first-program">
<title xmlns:xlink="http://www.w3.org/1999/xlink">Our First Program</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We are now ready for our first program, the mandatory
<application xmlns:xlink="http://www.w3.org/1999/xlink">Hello, World!</application>
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
 1:	%include	'system.inc'
 2:
 3:	section	.data
 4:	hello	db	'Hello, World!', 0Ah
 5:	hbytes	equ	$-hello
 6:
 7:	section	.text
 8:	global	_start
 9:	_start:
10:	push	dword hbytes
11:	push	dword hello
12:	push	dword stdout
13:	sys.write
14:
15:	push	dword 0
16:	sys.exit
</programlisting>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Here is what it does: Line 1 includes the defines, the macros,
and the code from <filename xmlns:xlink="http://www.w3.org/1999/xlink">system.inc</filename>.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Lines 3-5 are the data: Line 3 starts the data section/segment.
Line 4 contains the string "Hello, World!" followed by a new
line (<constant xmlns:xlink="http://www.w3.org/1999/xlink">0Ah</constant>). Line 5 creates a constant that contains
the length of the string from line 4 in bytes.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Lines 7-16 contain the code. Note that FreeBSD uses the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">elf</emphasis>
file format for its executables, which requires every
program to start at the point labeled <varname xmlns:xlink="http://www.w3.org/1999/xlink">_start</varname> (or, more
precisely, the linker expects that). This label has to be
global.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Lines 10-13 ask the system to write <varname xmlns:xlink="http://www.w3.org/1999/xlink">hbytes</varname> bytes
of the <varname xmlns:xlink="http://www.w3.org/1999/xlink">hello</varname> string to <varname xmlns:xlink="http://www.w3.org/1999/xlink">stdout</varname>.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Lines 15-16 ask the system to end the program with the return
value of <constant xmlns:xlink="http://www.w3.org/1999/xlink">0</constant>. The <function xmlns:xlink="http://www.w3.org/1999/xlink" role="syscall">SYS_exit</function> syscall never
returns, so the code ends there.
</para>

<note xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
If you have come to <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> from <acronym xmlns:xlink="http://www.w3.org/1999/xlink"><trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">MS-DOS</trademark></acronym>
assembly language background, you may be used to writing directly
to the video hardware. You will never have to worry about
this in FreeBSD, or any other flavor of <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark>. As far as
you are concerned, you are writing to a file known as
<filename xmlns:xlink="http://www.w3.org/1999/xlink">stdout</filename>. This can be the video screen, or
a <application xmlns:xlink="http://www.w3.org/1999/xlink">telnet</application> terminal, or an actual file,
or even the input of another program. Which one it is,
is for the system to figure out.
</para>
</note>

<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-assemble-1"><title xmlns:xlink="http://www.w3.org/1999/xlink">Assembling the Code</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Type the code (except the line numbers) in an editor, and save
it in a file named <filename xmlns:xlink="http://www.w3.org/1999/xlink">hello.asm</filename>. You need
<application xmlns:xlink="http://www.w3.org/1999/xlink">nasm</application> to assemble it.
</para>

<sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-get-nasm"><title xmlns:xlink="http://www.w3.org/1999/xlink">Installing <application xmlns:xlink="http://www.w3.org/1999/xlink">nasm</application></title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
If you do not have <application xmlns:xlink="http://www.w3.org/1999/xlink">nasm</application>, type:
</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">su</userinput>
Password:<userinput xmlns:xlink="http://www.w3.org/1999/xlink"><replaceable xmlns:xlink="http://www.w3.org/1999/xlink">your root password</replaceable></userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cd /usr/ports/devel/nasm</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">make install</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">exit</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt></screen>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
You may type <userinput xmlns:xlink="http://www.w3.org/1999/xlink">make install clean</userinput> instead of just
<userinput xmlns:xlink="http://www.w3.org/1999/xlink">make install</userinput> if you do not want to keep
<application xmlns:xlink="http://www.w3.org/1999/xlink">nasm</application> source code.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Either way, FreeBSD will automatically download
<application xmlns:xlink="http://www.w3.org/1999/xlink">nasm</application> from the Internet,
compile it, and install it on your system.
</para>

<note xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
If your system is not FreeBSD, you need to get
<application xmlns:xlink="http://www.w3.org/1999/xlink">nasm</application> from its
<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://sourceforge.net/projects/nasm">home
page</link>. You can still use it to assemble FreeBSD code.
</para>
</note>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Now you can assemble, link, and run the code:
</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">nasm -f elf hello.asm</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">ld -s -o hello hello.o</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">./hello</userinput>
Hello, World!
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt></screen>

</sect3>

</sect2>

</sect1>

<sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-unix-filters">
<title xmlns:xlink="http://www.w3.org/1999/xlink">Writing <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> Filters</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
A common type of <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> application is a filter&#8212;a program
that reads data from the <filename xmlns:xlink="http://www.w3.org/1999/xlink">stdin</filename>, processes it
somehow, then writes the result to <filename xmlns:xlink="http://www.w3.org/1999/xlink">stdout</filename>.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
In this chapter, we shall develop a simple filter, and
learn how to read from <filename xmlns:xlink="http://www.w3.org/1999/xlink">stdin</filename> and write to
<filename xmlns:xlink="http://www.w3.org/1999/xlink">stdout</filename>. This filter will convert each byte
of its input into a hexadecimal number followed by a
blank space.
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
%include	'system.inc'

section	.data
hex	db	'0123456789ABCDEF'
buffer	db	0, 0, ' '

section	.text
global	_start
_start:
	; read a byte from stdin
	push	dword 1
	push	dword buffer
	push	dword stdin
	sys.read
	add	esp, byte 12
	or	eax, eax
	je	.done

	; convert it to hex
	movzx	eax, byte [buffer]
	mov	edx, eax
	shr	dl, 4
	mov	dl, [hex+edx]
	mov	[buffer], dl
	and	al, 0Fh
	mov	al, [hex+eax]
	mov	[buffer+1], al

	; print it
	push	dword 3
	push	dword buffer
	push	dword stdout
	sys.write
	add	esp, byte 12
	jmp	short _start

.done:
	push	dword 0
	sys.exit
</programlisting>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
In the data section we create an array called <varname xmlns:xlink="http://www.w3.org/1999/xlink">hex</varname>.
It contains the 16 hexadecimal digits in ascending order.
The array is followed by a buffer which we will use for
both input and output. The first two bytes of the buffer
are initially set to <constant xmlns:xlink="http://www.w3.org/1999/xlink">0</constant>. This is where we will write
the two hexadecimal digits (the first byte also is
where we will read the input). The third byte is a
space.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The code section consists of four parts: Reading the byte,
converting it to a hexadecimal number, writing the result,
and eventually exiting the program.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
To read the byte, we ask the system to read one byte
from <filename xmlns:xlink="http://www.w3.org/1999/xlink">stdin</filename>, and store it in the first byte
of the <varname xmlns:xlink="http://www.w3.org/1999/xlink">buffer</varname>. The system returns the number
of bytes read in <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">EAX</varname>. This will be <constant xmlns:xlink="http://www.w3.org/1999/xlink">1</constant>
while data is coming, or <constant xmlns:xlink="http://www.w3.org/1999/xlink">0</constant>, when no more input
data is available. Therefore, we check the value of
<varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">EAX</varname>. If it is <constant xmlns:xlink="http://www.w3.org/1999/xlink">0</constant>,
we jump to <varname xmlns:xlink="http://www.w3.org/1999/xlink">.done</varname>, otherwise we continue.
</para>

<note xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
For simplicity sake, we are ignoring the possibility
of an error condition at this time.
</para>
</note>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The hexadecimal conversion reads the byte from the
<varname xmlns:xlink="http://www.w3.org/1999/xlink">buffer</varname> into <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">EAX</varname>, or actually just
<varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">AL</varname>, while clearing the remaining bits of
<varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">EAX</varname> to zeros. We also copy the byte to
<varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">EDX</varname> because we need to convert the upper
four bits (nibble) separately from the lower
four bits. We store the result in the first two
bytes of the buffer.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Next, we ask the system to write the three bytes
of the buffer, i.e., the two hexadecimal digits and
the blank space, to <filename xmlns:xlink="http://www.w3.org/1999/xlink">stdout</filename>. We then
jump back to the beginning of the program and
process the next byte.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Once there is no more input left, we ask the system
to exit our program, returning a zero, which is
the traditional value meaning the program was
successful.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Go ahead, and save the code in a file named <filename xmlns:xlink="http://www.w3.org/1999/xlink">hex.asm</filename>,
then type the following (the <userinput xmlns:xlink="http://www.w3.org/1999/xlink">^D</userinput> means press the
control key and type <userinput xmlns:xlink="http://www.w3.org/1999/xlink">D</userinput> while holding the
control key down):
</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">nasm -f elf hex.asm</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">ld -s -o hex hex.o</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">./hex</userinput>
<userinput xmlns:xlink="http://www.w3.org/1999/xlink">Hello, World!</userinput>
48 65 6C 6C 6F 2C 20 57 6F 72 6C 64 21 0A <userinput xmlns:xlink="http://www.w3.org/1999/xlink">Here I come!</userinput>
48 65 72 65 20 49 20 63 6F 6D 65 21 0A <userinput xmlns:xlink="http://www.w3.org/1999/xlink">^D</userinput> <prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt></screen>

<note xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
If you are migrating to <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> from <acronym xmlns:xlink="http://www.w3.org/1999/xlink"><trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">MS-DOS</trademark></acronym>,
you may be wondering why each line ends with <constant xmlns:xlink="http://www.w3.org/1999/xlink">0A</constant>
instead of <constant xmlns:xlink="http://www.w3.org/1999/xlink">0D 0A</constant>.
This is because <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> does not use the cr/lf convention, but
a "new line" convention, which is <constant xmlns:xlink="http://www.w3.org/1999/xlink">0A</constant> in hexadecimal.
</para>
</note>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Can we improve this? Well, for one, it is a bit confusing because
once we have converted a line of text, our input no longer
starts at the beginning of the line. We can modify it to print
a new line instead of a space after each <constant xmlns:xlink="http://www.w3.org/1999/xlink">0A</constant>:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
%include	'system.inc'

section	.data
hex	db	'0123456789ABCDEF'
buffer	db	0, 0, ' '

section	.text
global	_start
_start:
	mov	cl, ' '

.loop:
	; read a byte from stdin
	push	dword 1
	push	dword buffer
	push	dword stdin
	sys.read
	add	esp, byte 12
	or	eax, eax
	je	.done

	; convert it to hex
	movzx	eax, byte [buffer]
	mov	[buffer+2], cl
	cmp	al, 0Ah
	jne	.hex
	mov	[buffer+2], al

.hex:
	mov	edx, eax
	shr	dl, 4
	mov	dl, [hex+edx]
	mov	[buffer], dl
	and	al, 0Fh
	mov	al, [hex+eax]
	mov	[buffer+1], al

	; print it
	push	dword 3
	push	dword buffer
	push	dword stdout
	sys.write
	add	esp, byte 12
	jmp	short .loop

.done:
	push	dword 0
	sys.exit
</programlisting>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
We have stored the space in the <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">CL</varname> register. We can
do this safely because, unlike <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">Microsoft</trademark> <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">Windows</trademark>, <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> system
calls do not modify the value of any register they do not use
to return a value in.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
That means we only need to set <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">CL</varname> once. We have, therefore,
added a new label <varname xmlns:xlink="http://www.w3.org/1999/xlink">.loop</varname> and jump to it for the next byte
instead of jumping at <varname xmlns:xlink="http://www.w3.org/1999/xlink">_start</varname>. We have also added the
<varname xmlns:xlink="http://www.w3.org/1999/xlink">.hex</varname> label so we can either have a blank space or a
new line as the third byte of the <varname xmlns:xlink="http://www.w3.org/1999/xlink">buffer</varname>.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Once you have changed <filename xmlns:xlink="http://www.w3.org/1999/xlink">hex.asm</filename> to reflect
these changes, type:
</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">nasm -f elf hex.asm</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">ld -s -o hex hex.o</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">./hex</userinput>
<userinput xmlns:xlink="http://www.w3.org/1999/xlink">Hello, World!</userinput>
48 65 6C 6C 6F 2C 20 57 6F 72 6C 64 21 0A
<userinput xmlns:xlink="http://www.w3.org/1999/xlink">Here I come!</userinput>
48 65 72 65 20 49 20 63 6F 6D 65 21 0A
<userinput xmlns:xlink="http://www.w3.org/1999/xlink">^D</userinput> <prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt></screen>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
That looks better. But this code is quite inefficient! We
are making a system call for every single byte twice (once
to read it, another time to write the output).
</para>

</sect1>

<sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-buffered-io">
<title xmlns:xlink="http://www.w3.org/1999/xlink">Buffered Input and Output</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We can improve the efficiency of our code by buffering our
input and output. We create an input buffer and read a whole
sequence of bytes at one time. Then we fetch them one by one
from the buffer.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We also create an output buffer. We store our output in it until
it is full. At that time we ask the kernel to write the contents
of the buffer to <filename xmlns:xlink="http://www.w3.org/1999/xlink">stdout</filename>.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The program ends when there is no more input. But we still need
to ask the kernel to write the contents of our output buffer
to <filename xmlns:xlink="http://www.w3.org/1999/xlink">stdout</filename> one last time, otherwise some of our output
would make it to the output buffer, but never be sent out.
Do not forget that, or you will be wondering why some of your
output is missing.
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
%include	'system.inc'

%define	BUFSIZE	2048

section	.data
hex	db	'0123456789ABCDEF'

section .bss
ibuffer	resb	BUFSIZE
obuffer	resb	BUFSIZE

section	.text
global	_start
_start:
	sub	eax, eax
	sub	ebx, ebx
	sub	ecx, ecx
	mov	edi, obuffer

.loop:
	; read a byte from stdin
	call	getchar

	; convert it to hex
	mov	dl, al
	shr	al, 4
	mov	al, [hex+eax]
	call	putchar

	mov	al, dl
	and	al, 0Fh
	mov	al, [hex+eax]
	call	putchar

	mov	al, ' '
	cmp	dl, 0Ah
	jne	.put
	mov	al, dl

.put:
	call	putchar
	jmp	short .loop

align 4
getchar:
	or	ebx, ebx
	jne	.fetch

	call	read

.fetch:
	lodsb
	dec	ebx
	ret

read:
	push	dword BUFSIZE
	mov	esi, ibuffer
	push	esi
	push	dword stdin
	sys.read
	add	esp, byte 12
	mov	ebx, eax
	or	eax, eax
	je	.done
	sub	eax, eax
	ret

align 4
.done:
	call	write		; flush output buffer
	push	dword 0
	sys.exit

align 4
putchar:
	stosb
	inc	ecx
	cmp	ecx, BUFSIZE
	je	write
	ret

align 4
write:
	sub	edi, ecx	; start of buffer
	push	ecx
	push	edi
	push	dword stdout
	sys.write
	add	esp, byte 12
	sub	eax, eax
	sub	ecx, ecx	; buffer is empty now
	ret
</programlisting>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
We now have a third section in the source code, named
<varname xmlns:xlink="http://www.w3.org/1999/xlink">.bss</varname>. This section is not included in our
executable file, and, therefore, cannot be initialized. We use
<function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">resb</function> instead of <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">db</function>.
It simply reserves the requested size of uninitialized memory
for our use.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We take advantage of the fact that the system does not modify the
registers: We use registers for what, otherwise, would have to be
global variables stored in the <varname xmlns:xlink="http://www.w3.org/1999/xlink">.data</varname> section. This is
also why the <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> convention of passing parameters to system calls
on the stack is superior to the Microsoft convention of passing
them in the registers: We can keep the registers for our own use.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We use <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">EDI</varname> and <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">ESI</varname> as pointers to the next byte
to be read from or written to. We use <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">EBX</varname> and
<varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">ECX</varname> to keep count of the number of bytes in the
two buffers, so we know when to dump the output to, or read more
input from, the system.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Let us see how it works now:
</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">nasm -f elf hex.asm</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">ld -s -o hex hex.o</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">./hex</userinput>
<userinput xmlns:xlink="http://www.w3.org/1999/xlink">Hello, World!</userinput>
<userinput xmlns:xlink="http://www.w3.org/1999/xlink">Here I come!</userinput>
48 65 6C 6C 6F 2C 20 57 6F 72 6C 64 21 0A
48 65 72 65 20 49 20 63 6F 6D 65 21 0A
<userinput xmlns:xlink="http://www.w3.org/1999/xlink">^D</userinput> <prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt></screen>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Not what you expected? The program did not print the output
until we pressed <userinput xmlns:xlink="http://www.w3.org/1999/xlink">^D</userinput>. That is easy to fix by
inserting three lines of code to write the output every time
we have converted a new line to <constant xmlns:xlink="http://www.w3.org/1999/xlink">0A</constant>. I have marked
the three lines with &gt; (do not copy the &gt; in your
<filename xmlns:xlink="http://www.w3.org/1999/xlink">hex.asm</filename>).
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
%include	'system.inc'

%define	BUFSIZE	2048

section	.data
hex	db	'0123456789ABCDEF'

section .bss
ibuffer	resb	BUFSIZE
obuffer	resb	BUFSIZE

section	.text
global	_start
_start:
	sub	eax, eax
	sub	ebx, ebx
	sub	ecx, ecx
	mov	edi, obuffer

.loop:
	; read a byte from stdin
	call	getchar

	; convert it to hex
	mov	dl, al
	shr	al, 4
	mov	al, [hex+eax]
	call	putchar

	mov	al, dl
	and	al, 0Fh
	mov	al, [hex+eax]
	call	putchar

	mov	al, ' '
	cmp	dl, 0Ah
	jne	.put
	mov	al, dl

.put:
	call	putchar
&gt;	cmp	al, 0Ah
&gt;	jne	.loop
&gt;	call	write
	jmp	short .loop

align 4
getchar:
	or	ebx, ebx
	jne	.fetch

	call	read

.fetch:
	lodsb
	dec	ebx
	ret

read:
	push	dword BUFSIZE
	mov	esi, ibuffer
	push	esi
	push	dword stdin
	sys.read
	add	esp, byte 12
	mov	ebx, eax
	or	eax, eax
	je	.done
	sub	eax, eax
	ret

align 4
.done:
	call	write		; flush output buffer
	push	dword 0
	sys.exit

align 4
putchar:
	stosb
	inc	ecx
	cmp	ecx, BUFSIZE
	je	write
	ret

align 4
write:
	sub	edi, ecx	; start of buffer
	push	ecx
	push	edi
	push	dword stdout
	sys.write
	add	esp, byte 12
	sub	eax, eax
	sub	ecx, ecx	; buffer is empty now
	ret
</programlisting>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Now, let us see how it works:
</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">nasm -f elf hex.asm</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">ld -s -o hex hex.o</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">./hex</userinput>
<userinput xmlns:xlink="http://www.w3.org/1999/xlink">Hello, World!</userinput>
48 65 6C 6C 6F 2C 20 57 6F 72 6C 64 21 0A
<userinput xmlns:xlink="http://www.w3.org/1999/xlink">Here I come!</userinput>
48 65 72 65 20 49 20 63 6F 6D 65 21 0A
<userinput xmlns:xlink="http://www.w3.org/1999/xlink">^D</userinput> <prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt></screen>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Not bad for a 644-byte executable, is it!
</para>

<note xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
This approach to buffered input/output still
contains a hidden danger. I will discuss&#8212;and
fix&#8212;it later, when I talk about the
<link xmlns:xlink="http://www.w3.org/1999/xlink" linkend="x86-buffered-dark-side">dark
side of buffering</link>.</para>
</note>

<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-ungetc">
<title xmlns:xlink="http://www.w3.org/1999/xlink">How to Unread a Character</title>

<warning xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">
This may be a somewhat advanced topic, mostly of interest to
programmers familiar with the theory of compilers. If you wish,
you may <link xmlns:xlink="http://www.w3.org/1999/xlink" linkend="x86-command-line">skip to the next
section</link>, and perhaps read this later.
</para>
</warning>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
While our sample program does not require it, more sophisticated
filters often need to look ahead. In other words, they may need
to see what the next character is (or even several characters).
If the next character is of a certain value, it is part of the
token currently being processed. Otherwise, it is not.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
For example, you may be parsing the input stream for a textual
string (e.g., when implementing a language compiler): If a
character is followed by another character, or perhaps a digit,
it is part of the token you are processing. If it is followed by
white space, or some other value, then it is not part of the
current token.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
This presents an interesting problem: How to return the next
character back to the input stream, so it can be read again
later?
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
One possible solution is to store it in a character variable,
then set a flag. We can modify <function xmlns:xlink="http://www.w3.org/1999/xlink">getchar</function> to check the flag,
and if it is set, fetch the byte from that variable instead of the
input buffer, and reset the flag. But, of course, that slows us
down.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The C language has an <function xmlns:xlink="http://www.w3.org/1999/xlink">ungetc()</function> function, just for that
purpose. Is there a quick way to implement it in our code?
I would like you to scroll back up and take a look at the
<function xmlns:xlink="http://www.w3.org/1999/xlink">getchar</function> procedure and see if you can find a nice and
fast solution before reading the next paragraph. Then come back
here and see my own solution.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The key to returning a character back to the stream is in how
we are getting the characters to start with:
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
First we check if the buffer is empty by testing the value
of <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">EBX</varname>. If it is zero, we call the
<function xmlns:xlink="http://www.w3.org/1999/xlink">read</function> procedure.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
If we do have a character available, we use <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">lodsb</function>, then
decrease the value of <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">EBX</varname>. The <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">lodsb</function>
instruction is effectively identical to:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
	mov	al, [esi]
	inc	esi
</programlisting>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The byte we have fetched remains in the buffer until the next
time <function xmlns:xlink="http://www.w3.org/1999/xlink">read</function> is called. We do not know when that happens,
but we do know it will not happen until the next call to
<function xmlns:xlink="http://www.w3.org/1999/xlink">getchar</function>. Hence, to "return" the last-read byte back
to the stream, all we have to do is decrease the value of
<varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">ESI</varname> and increase the value of <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">EBX</varname>:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
ungetc:
	dec	esi
	inc	ebx
	ret
</programlisting>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
But, be careful! We are perfectly safe doing this if our look-ahead
is at most one character at a time. If we are examining more than
one upcoming character and call <function xmlns:xlink="http://www.w3.org/1999/xlink">ungetc</function> several times
in a row, it will work most of the time, but not all the time
(and will be tough to debug). Why?
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Because as long as <function xmlns:xlink="http://www.w3.org/1999/xlink">getchar</function> does not have to call
<function xmlns:xlink="http://www.w3.org/1999/xlink">read</function>, all of the pre-read bytes are still in the buffer,
and our <function xmlns:xlink="http://www.w3.org/1999/xlink">ungetc</function> works without a glitch. But the moment
<function xmlns:xlink="http://www.w3.org/1999/xlink">getchar</function> calls <function xmlns:xlink="http://www.w3.org/1999/xlink">read</function>,
the contents of the buffer change.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We can always rely on <function xmlns:xlink="http://www.w3.org/1999/xlink">ungetc</function> working properly on the last
character we have read with <function xmlns:xlink="http://www.w3.org/1999/xlink">getchar</function>, but not on anything
we have read before that.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
If your program reads more than one byte ahead, you have at least
two choices:
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
If possible, modify the program so it only reads one byte ahead.
This is the simplest solution.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
If that option is not available, first of all determine the maximum
number of characters your program needs to return to the input
stream at one time. Increase that number slightly, just to be
sure, preferably to a multiple of 16&#8212;so it aligns nicely.
Then modify the <varname xmlns:xlink="http://www.w3.org/1999/xlink">.bss</varname> section of your code, and create
a small "spare" buffer right before your input buffer,
something like this:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
section	.bss
	resb	16	; or whatever the value you came up with
ibuffer	resb	BUFSIZE
obuffer	resb	BUFSIZE
</programlisting>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
You also need to modify your <function xmlns:xlink="http://www.w3.org/1999/xlink">ungetc</function> to pass the value
of the byte to unget in <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">AL</varname>:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
ungetc:
	dec	esi
	inc	ebx
	mov	[esi], al
	ret
</programlisting>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
With this modification, you can call <function xmlns:xlink="http://www.w3.org/1999/xlink">ungetc</function>
up to 17 times in a row safely (the first call will still
be within the buffer, the remaining 16 may be either within
the buffer or within the "spare").
</para>

</sect2>

</sect1>

<sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-command-line"><title xmlns:xlink="http://www.w3.org/1999/xlink">Command Line Arguments</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Our <application xmlns:xlink="http://www.w3.org/1999/xlink">hex</application> program will be more useful if it can
read the names of an input and output file from its command
line, i.e., if it can process the command line arguments.
But... Where are they?
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Before a <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> system starts a program, it <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">push</function>es some
data on the stack, then jumps at the <varname xmlns:xlink="http://www.w3.org/1999/xlink">_start</varname>
label of the program. Yes, I said jumps, not calls. That means the
data can be accessed by reading <varname xmlns:xlink="http://www.w3.org/1999/xlink">[esp+offset]</varname>,
or by simply <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">pop</function>ping it.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The value at the top of the stack contains the number of
command line arguments. It is traditionally called
<varname xmlns:xlink="http://www.w3.org/1999/xlink">argc</varname>, for "argument count."
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Command line arguments follow next, all <varname xmlns:xlink="http://www.w3.org/1999/xlink">argc</varname> of them.
These are typically referred to as <varname xmlns:xlink="http://www.w3.org/1999/xlink">argv</varname>, for
"argument value(s)." That is, we get <varname xmlns:xlink="http://www.w3.org/1999/xlink">argv[0]</varname>,
<varname xmlns:xlink="http://www.w3.org/1999/xlink">argv[1]</varname>, <varname xmlns:xlink="http://www.w3.org/1999/xlink">...</varname>,
<varname xmlns:xlink="http://www.w3.org/1999/xlink">argv[argc-1]</varname>. These are not the actual
arguments, but pointers to arguments, i.e., memory addresses of
the actual arguments. The arguments themselves are
NUL-terminated character strings.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The <varname xmlns:xlink="http://www.w3.org/1999/xlink">argv</varname> list is followed by a NULL pointer,
which is simply a <constant xmlns:xlink="http://www.w3.org/1999/xlink">0</constant>. There is more, but this is
enough for our purposes right now.
</para>

<note xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
If you have come from the <acronym xmlns:xlink="http://www.w3.org/1999/xlink"><trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">MS-DOS</trademark></acronym> programming
environment, the main difference is that each argument is in
a separate string. The second difference is that there is no
practical limit on how many arguments there can be.
</para>
</note>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Armed with this knowledge, we are almost ready for the next
version of <filename xmlns:xlink="http://www.w3.org/1999/xlink">hex.asm</filename>. First, however, we need to
add a few lines to <filename xmlns:xlink="http://www.w3.org/1999/xlink">system.inc</filename>:
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
First, we need to add two new entries to our list of system
call numbers:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
%define	SYS_open	5
%define	SYS_close	6
</programlisting>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Then we add two new macros at the end of the file:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
%macro	sys.open	0
	system	SYS_open
%endmacro

%macro	sys.close	0
	system	SYS_close
%endmacro
</programlisting>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Here, then, is our modified source code:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
%include	'system.inc'

%define	BUFSIZE	2048

section	.data
fd.in	dd	stdin
fd.out	dd	stdout
hex	db	'0123456789ABCDEF'

section .bss
ibuffer	resb	BUFSIZE
obuffer	resb	BUFSIZE

section	.text
align 4
err:
	push	dword 1		; return failure
	sys.exit

align 4
global	_start
_start:
	add	esp, byte 8	; discard argc and argv[0]

	pop	ecx
	jecxz	.init		; no more arguments

	; ECX contains the path to input file
	push	dword 0		; O_RDONLY
	push	ecx
	sys.open
	jc	err		; open failed

	add	esp, byte 8
	mov	[fd.in], eax

	pop	ecx
	jecxz	.init		; no more arguments

	; ECX contains the path to output file
	push	dword 420	; file mode (644 octal)
	push	dword 0200h | 0400h | 01h
	; O_CREAT | O_TRUNC | O_WRONLY
	push	ecx
	sys.open
	jc	err

	add	esp, byte 12
	mov	[fd.out], eax

.init:
	sub	eax, eax
	sub	ebx, ebx
	sub	ecx, ecx
	mov	edi, obuffer

.loop:
	; read a byte from input file or stdin
	call	getchar

	; convert it to hex
	mov	dl, al
	shr	al, 4
	mov	al, [hex+eax]
	call	putchar

	mov	al, dl
	and	al, 0Fh
	mov	al, [hex+eax]
	call	putchar

	mov	al, ' '
	cmp	dl, 0Ah
	jne	.put
	mov	al, dl

.put:
	call	putchar
	cmp	al, dl
	jne	.loop
	call	write
	jmp	short .loop

align 4
getchar:
	or	ebx, ebx
	jne	.fetch

	call	read

.fetch:
	lodsb
	dec	ebx
	ret

read:
	push	dword BUFSIZE
	mov	esi, ibuffer
	push	esi
	push	dword [fd.in]
	sys.read
	add	esp, byte 12
	mov	ebx, eax
	or	eax, eax
	je	.done
	sub	eax, eax
	ret

align 4
.done:
	call	write		; flush output buffer

	; close files
	push	dword [fd.in]
	sys.close

	push	dword [fd.out]
	sys.close

	; return success
	push	dword 0
	sys.exit

align 4
putchar:
	stosb
	inc	ecx
	cmp	ecx, BUFSIZE
	je	write
	ret

align 4
write:
	sub	edi, ecx	; start of buffer
	push	ecx
	push	edi
	push	dword [fd.out]
	sys.write
	add	esp, byte 12
	sub	eax, eax
	sub	ecx, ecx	; buffer is empty now
	ret
</programlisting>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
In our <varname xmlns:xlink="http://www.w3.org/1999/xlink">.data</varname> section we now have two new variables,
<varname xmlns:xlink="http://www.w3.org/1999/xlink">fd.in</varname> and <varname xmlns:xlink="http://www.w3.org/1999/xlink">fd.out</varname>. We store the input and
output file descriptors here.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
In the <varname xmlns:xlink="http://www.w3.org/1999/xlink">.text</varname> section we have replaced the references
to <varname xmlns:xlink="http://www.w3.org/1999/xlink">stdin</varname> and <varname xmlns:xlink="http://www.w3.org/1999/xlink">stdout</varname> with
<varname xmlns:xlink="http://www.w3.org/1999/xlink">[fd.in]</varname> and <varname xmlns:xlink="http://www.w3.org/1999/xlink">[fd.out]</varname>.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The <varname xmlns:xlink="http://www.w3.org/1999/xlink">.text</varname> section now starts with a simple error
handler, which does nothing but exit the program with a return
value of <constant xmlns:xlink="http://www.w3.org/1999/xlink">1</constant>.
The error handler is before <varname xmlns:xlink="http://www.w3.org/1999/xlink">_start</varname> so we are
within a short distance from where the errors occur.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Naturally, the program execution still begins at <varname xmlns:xlink="http://www.w3.org/1999/xlink">_start</varname>.
First, we remove <varname xmlns:xlink="http://www.w3.org/1999/xlink">argc</varname> and <varname xmlns:xlink="http://www.w3.org/1999/xlink">argv[0]</varname> from the
stack: They are of no interest to us (in this program, that is).
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We pop <varname xmlns:xlink="http://www.w3.org/1999/xlink">argv[1]</varname> to <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">ECX</varname>. This
register is particularly suited for pointers, as we can handle
NULL pointers with <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">jecxz</function>. If <varname xmlns:xlink="http://www.w3.org/1999/xlink">argv[1]</varname>
is not NULL, we try to open the file named in the first
argument. Otherwise, we continue the program as before: Reading
from <varname xmlns:xlink="http://www.w3.org/1999/xlink">stdin</varname>, writing to <varname xmlns:xlink="http://www.w3.org/1999/xlink">stdout</varname>.
If we fail to open the input file (e.g., it does not exist),
we jump to the error handler and quit.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
If all went well, we now check for the second argument. If
it is there, we open the output file. Otherwise, we send
the output to <varname xmlns:xlink="http://www.w3.org/1999/xlink">stdout</varname>. If we fail to open the output
file (e.g., it exists and we do not have the write permission),
we, again, jump to the error handler.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The rest of the code is the same as before, except we close
the input and output files before exiting, and, as mentioned,
we use <varname xmlns:xlink="http://www.w3.org/1999/xlink">[fd.in]</varname> and <varname xmlns:xlink="http://www.w3.org/1999/xlink">[fd.out]</varname>.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Our executable is now a whopping 768 bytes long.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Can we still improve it? Of course! Every program can be improved.
Here are a few ideas of what we could do:
</para>

<itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
Have our error handler print a message to
<varname xmlns:xlink="http://www.w3.org/1999/xlink">stderr</varname>.
</para>
</listitem>

<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
Add error handlers to the <function xmlns:xlink="http://www.w3.org/1999/xlink">read</function>
and <function xmlns:xlink="http://www.w3.org/1999/xlink">write</function> functions.
</para>
</listitem>

<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
Close <varname xmlns:xlink="http://www.w3.org/1999/xlink">stdin</varname> when we open an input file,
<varname xmlns:xlink="http://www.w3.org/1999/xlink">stdout</varname> when we open an output file.
</para>
</listitem>

<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
Add command line switches, such as <parameter xmlns:xlink="http://www.w3.org/1999/xlink">-i</parameter>
and <parameter xmlns:xlink="http://www.w3.org/1999/xlink">-o</parameter>, so we can list the input and
output files in any order, or perhaps read from
<varname xmlns:xlink="http://www.w3.org/1999/xlink">stdin</varname> and write to a file.
</para>
</listitem>

<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
Print a usage message if command line arguments are incorrect.
</para>
</listitem>

</itemizedlist>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
I shall leave these enhancements as an exercise to the reader:
You already know everything you need to know to implement them.
</para>

</sect1>

<sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-environment">
<title xmlns:xlink="http://www.w3.org/1999/xlink"><trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> Environment</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
An important <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> concept is the environment, which is defined by
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">environment variables</emphasis>. Some are set by the system, others
by you, yet others by the <application xmlns:xlink="http://www.w3.org/1999/xlink">shell</application>, or any program
that loads another program.
</para>

<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-find-environment">
<title xmlns:xlink="http://www.w3.org/1999/xlink">How to Find Environment Variables</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
I said earlier that when a program starts executing, the stack
contains <varname xmlns:xlink="http://www.w3.org/1999/xlink">argc</varname> followed by the NULL-terminated
<varname xmlns:xlink="http://www.w3.org/1999/xlink">argv</varname> array, followed by something else. The
"something else" is the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">environment</emphasis>, or,
to be more precise, a NULL-terminated array of pointers to
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">environment variables</emphasis>. This is often referred
to as <varname xmlns:xlink="http://www.w3.org/1999/xlink">env</varname>.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The structure of <varname xmlns:xlink="http://www.w3.org/1999/xlink">env</varname> is the same as that of
<varname xmlns:xlink="http://www.w3.org/1999/xlink">argv</varname>, a list of memory addresses followed by a
NULL (<constant xmlns:xlink="http://www.w3.org/1999/xlink">0</constant>). In this case, there is no
<varname xmlns:xlink="http://www.w3.org/1999/xlink">"envc"</varname>&#8212;we figure out where the array ends
by searching for the final NULL.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The variables usually come in the <varname xmlns:xlink="http://www.w3.org/1999/xlink">name=value</varname>
format, but sometimes the <varname xmlns:xlink="http://www.w3.org/1999/xlink">=value</varname> part
may be missing. We need to account for that possibility.
</para>

</sect2>

<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-webvar">
<title xmlns:xlink="http://www.w3.org/1999/xlink">webvars</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
I could just show you some code that prints the environment
the same way the <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> <application xmlns:xlink="http://www.w3.org/1999/xlink">env</application> command does. But
I thought it would be more interesting to write a simple
assembly language CGI utility.
</para>

<sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-cgi">
<title xmlns:xlink="http://www.w3.org/1999/xlink">CGI: A Quick Overview</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
I have a
<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.whizkidtech.redprince.net/cgi-bin/tutorial">detailed
<acronym xmlns:xlink="http://www.w3.org/1999/xlink">CGI</acronym> tutorial</link> on my web site,
but here is a very quick overview of <acronym xmlns:xlink="http://www.w3.org/1999/xlink">CGI</acronym>:
</para>

<itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
The web server communicates with the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">CGI</acronym>
program by setting <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">environment variables</emphasis>.
</para>
</listitem>

<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
The <acronym xmlns:xlink="http://www.w3.org/1999/xlink">CGI</acronym> program
sends its output to <filename xmlns:xlink="http://www.w3.org/1999/xlink">stdout</filename>.
The web server reads it from there.
</para>
</listitem>

<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
It must start with an <acronym xmlns:xlink="http://www.w3.org/1999/xlink">HTTP</acronym>
header followed by two blank lines.
</para>
</listitem>

<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
It then prints the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">HTML</acronym>
code, or whatever other type of data it is producing.
</para>
</listitem>

</itemizedlist>
<note xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
While certain <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">environment variables</emphasis> use
standard names, others vary, depending on the web server. That
makes <application xmlns:xlink="http://www.w3.org/1999/xlink">webvars</application>
quite a useful diagnostic tool.
</para>
</note>

</sect3>

<sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-webvars-the-code">
<title xmlns:xlink="http://www.w3.org/1999/xlink">The Code</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Our <application xmlns:xlink="http://www.w3.org/1999/xlink">webvars</application> program, then, must send out
the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">HTTP</acronym> header followed by some
<acronym xmlns:xlink="http://www.w3.org/1999/xlink">HTML</acronym> mark-up. It then must read
the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">environment variables</emphasis> one by one
and send them out as part of the
<acronym xmlns:xlink="http://www.w3.org/1999/xlink">HTML</acronym> page.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The code follows. I placed comments and explanations
right inside the code:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
;;;;;;; webvars.asm ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Copyright (c) 2000 G. Adam Stanislav
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions
; are met:
; 1. Redistributions of source code must retain the above copyright
;    notice, this list of conditions and the following disclaimer.
; 2. Redistributions in binary form must reproduce the above copyright
;    notice, this list of conditions and the following disclaimer in the
;    documentation and/or other materials provided with the distribution.
;
; THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
; OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
; SUCH DAMAGE.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Version 1.0
;
; Started:	 8-Dec-2000
; Updated:	 8-Dec-2000
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%include	'system.inc'

section	.data
http	db	'Content-type: text/html', 0Ah, 0Ah
	db	'&lt;?xml version="1.0" encoding="utf-8"?&gt;', 0Ah
	db	'&lt;!DOCTYPE html PUBLIC "-//W3C/DTD XHTML Strict//EN" '
	db	'"DTD/xhtml1-strict.dtd"&gt;', 0Ah
	db	'&lt;html xmlns="http://www.w3.org/1999/xhtml" '
	db	'xml.lang="en" lang="en"&gt;', 0Ah
	db	'&lt;head&gt;', 0Ah
	db	'&lt;title&gt;Web Environment&lt;/title&gt;', 0Ah
	db	'&lt;meta name="author" content="G. Adam Stanislav" /&gt;', 0Ah
	db	'&lt;/head&gt;', 0Ah, 0Ah
	db	'&lt;body bgcolor="#ffffff" text="#000000" link="#0000ff" '
	db	'vlink="#840084" alink="#0000ff"&gt;', 0Ah
	db	'&lt;div class="webvars"&gt;', 0Ah
	db	'&lt;h1&gt;Web Environment&lt;/h1&gt;', 0Ah
	db	'&lt;p&gt;The following &lt;b&gt;environment variables&lt;/b&gt; are defined '
	db	'on this web server:&lt;/p&gt;', 0Ah, 0Ah
	db	'&lt;table align="center" width="80" border="0" cellpadding="10" '
	db	'cellspacing="0" class="webvars"&gt;', 0Ah
httplen	equ	$-http
left	db	'&lt;tr&gt;', 0Ah
	db	'&lt;td class="name"&gt;&lt;tt&gt;'
leftlen	equ	$-left
middle	db	'&lt;/tt&gt;&lt;/td&gt;', 0Ah
	db	'&lt;td class="value"&gt;&lt;tt&gt;&lt;b&gt;'
midlen	equ	$-middle
undef	db	'&lt;i&gt;(undefined)&lt;/i&gt;'
undeflen	equ	$-undef
right	db	'&lt;/b&gt;&lt;/tt&gt;&lt;/td&gt;', 0Ah
	db	'&lt;/tr&gt;', 0Ah
rightlen	equ	$-right
wrap	db	'&lt;/table&gt;', 0Ah
	db	'&lt;/div&gt;', 0Ah
	db	'&lt;/body&gt;', 0Ah
	db	'&lt;/html&gt;', 0Ah, 0Ah
wraplen	equ	$-wrap

section	.text
global	_start
_start:
	; First, send out all the http and xhtml stuff that is
	; needed before we start showing the environment
	push	dword httplen
	push	dword http
	push	dword stdout
	sys.write

	; Now find how far on the stack the environment pointers
	; are. We have 12 bytes we have pushed before "argc"
	mov	eax, [esp+12]

	; We need to remove the following from the stack:
	;
	;	The 12 bytes we pushed for sys.write
	;	The  4 bytes of argc
	;	The EAX*4 bytes of argv
	;	The  4 bytes of the NULL after argv
	;
	; Total:
	;	20 + eax * 4
	;
	; Because stack grows down, we need to ADD that many bytes
	; to ESP.
	lea	esp, [esp+20+eax*4]
	cld		; This should already be the case, but let's be sure.

	; Loop through the environment, printing it out
.loop:
	pop	edi
	or	edi, edi	; Done yet?
	je	near .wrap

	; Print the left part of HTML
	push	dword leftlen
	push	dword left
	push	dword stdout
	sys.write

	; It may be tempting to search for the '=' in the env string next.
	; But it is possible there is no '=', so we search for the
	; terminating NUL first.
	mov	esi, edi	; Save start of string
	sub	ecx, ecx
	not	ecx		; ECX = FFFFFFFF
	sub	eax, eax
repne	scasb
	not	ecx		; ECX = string length + 1
	mov	ebx, ecx	; Save it in EBX

	; Now is the time to find '='
	mov	edi, esi	; Start of string
	mov	al, '='
repne	scasb
	not	ecx
	add	ecx, ebx	; Length of name

	push	ecx
	push	esi
	push	dword stdout
	sys.write

	; Print the middle part of HTML table code
	push	dword midlen
	push	dword middle
	push	dword stdout
	sys.write

	; Find the length of the value
	not	ecx
	lea	ebx, [ebx+ecx-1]

	; Print "undefined" if 0
	or	ebx, ebx
	jne	.value

	mov	ebx, undeflen
	mov	edi, undef

.value:
	push	ebx
	push	edi
	push	dword stdout
	sys.write

	; Print the right part of the table row
	push	dword rightlen
	push	dword right
	push	dword stdout
	sys.write

	; Get rid of the 60 bytes we have pushed
	add	esp, byte 60

	; Get the next variable
	jmp	.loop

.wrap:
	; Print the rest of HTML
	push	dword wraplen
	push	dword wrap
	push	dword stdout
	sys.write

	; Return success
	push	dword 0
	sys.exit
</programlisting>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
This code produces a 1,396-byte executable. Most of it is data,
i.e., the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">HTML</acronym> mark-up we need to send out.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Assemble and link it as usual:
</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">nasm -f elf webvars.asm</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">ld -s -o webvars webvars.o</userinput></screen>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
To use it, you need to upload <filename xmlns:xlink="http://www.w3.org/1999/xlink">webvars</filename> to your
web server. Depending on how your web server is set up, you
may have to store it in a special <filename xmlns:xlink="http://www.w3.org/1999/xlink">cgi-bin</filename> directory,
or perhaps rename it with a <filename xmlns:xlink="http://www.w3.org/1999/xlink">.cgi</filename> extension.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Then you need to use your browser to view its output.
To see its output on my web server, please go to
<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.int80h.org/webvars/"><filename xmlns:xlink="http://www.w3.org/1999/xlink">http://www.int80h.org/webvars/</filename></link>.
If curious about the additional environment variables
present in a password protected web directory, go to
<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.int80h.org/private/"><filename xmlns:xlink="http://www.w3.org/1999/xlink">http://www.int80h.org/private/</filename></link>,
using the name <userinput xmlns:xlink="http://www.w3.org/1999/xlink">asm</userinput> and password
<userinput xmlns:xlink="http://www.w3.org/1999/xlink">programmer</userinput>.
</para>

</sect3>

</sect2>

</sect1>

<sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-files">
<title xmlns:xlink="http://www.w3.org/1999/xlink">Working with Files</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We have already done some basic file work: We know how
to open and close them, how to read and write them using
buffers. But <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> offers much more functionality when it
comes to files. We will examine some of it in this section,
and end up with a nice file conversion utility.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Indeed, let us start at the end, that is, with the file
conversion utility. It always makes programming easier
when we know from the start what the end product is
supposed to do.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
One of the first programs I wrote for <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> was
<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="ftp://ftp.int80h.org/unix/tuc/"><application xmlns:xlink="http://www.w3.org/1999/xlink">tuc</application></link>,
a text-to-<trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> file converter. It converts a text
file from other operating systems to a <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> text file.
In other words, it changes from different kind of line endings
to the newline convention of <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark>. It saves the output
in a different file. Optionally, it converts a <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> text
file to a <acronym xmlns:xlink="http://www.w3.org/1999/xlink">DOS</acronym> text file.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
I have used <application xmlns:xlink="http://www.w3.org/1999/xlink">tuc</application> extensively, but always
only to convert from some other <acronym xmlns:xlink="http://www.w3.org/1999/xlink">OS</acronym>
to <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark>, never the other way. I have always wished
it would just overwrite the file instead of me having
to send the output to a different file. Most of the time,
I end up using it like this:
</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">tuc <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">myfile tempfile</replaceable></userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">mv <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">tempfile myfile</replaceable></userinput></screen>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
It would be nice to have a <application xmlns:xlink="http://www.w3.org/1999/xlink">ftuc</application>,
i.e., <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">fast tuc</emphasis>, and use it like this:
</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">ftuc <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">myfile</replaceable></userinput></screen>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
In this chapter, then, we will write
<application xmlns:xlink="http://www.w3.org/1999/xlink">ftuc</application> in assembly language
(the original <application xmlns:xlink="http://www.w3.org/1999/xlink">tuc</application>
is in C), and study various
file-oriented kernel services in the process.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
At first sight, such a file conversion is very
simple: All you have to do is strip the carriage
returns, right?
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
If you answered yes, think again: That approach will
work most of the time (at least with <acronym xmlns:xlink="http://www.w3.org/1999/xlink">MS
DOS</acronym> text files), but will fail occasionally.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The problem is that not all non <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> text files end their
line with the carriage return / line feed sequence. Some
use carriage returns without line feeds. Others combine several
blank lines into a single carriage return followed by several
line feeds. And so on.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
A text file converter, then, must be able to handle
any possible line endings:
</para>

<itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
carriage return / line feed
</para>
</listitem>

<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
carriage return
</para>
</listitem>

<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
line feed / carriage return
</para>
</listitem>

<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
line feed
</para>
</listitem>

</itemizedlist>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
It should also handle files that use some kind of a
combination of the above (e.g., carriage return followed
by several line feeds).
</para>

<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-finite-state-machine">
<title xmlns:xlink="http://www.w3.org/1999/xlink">Finite State Machine</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The problem is easily solved by the use of a technique
called <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">finite state machine</emphasis>, originally developed
by the designers of digital electronic circuits. A
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">finite state machine</emphasis> is a digital circuit
whose output is dependent not only on its input but on
its previous input, i.e., on its state. The microprocessor
is an example of a <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">finite state machine</emphasis>: Our
assembly language code is assembled to machine language in which
some assembly language code produces a single byte
of machine language, while others produce several bytes.
As the microprocessor fetches the bytes from the memory
one by one, some of them simply change its state rather than
produce some output. When all the bytes of the op code are
fetched, the microprocessor produces some output, or changes
the value of a register, etc.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Because of that, all software is essentially a sequence of state
instructions for the microprocessor. Nevertheless, the concept
of <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">finite state machine</emphasis> is useful in software design as well.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Our text file converter can be designed as a <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">finite state machine</emphasis> with three
possible states. We could call them states 0-2,
but it will make our life easier if we give them symbolic names:
</para>

<itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
<symbol xmlns:xlink="http://www.w3.org/1999/xlink">ordinary
</symbol></para>
</listitem>

<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
<symbol xmlns:xlink="http://www.w3.org/1999/xlink">cr
</symbol></para>
</listitem>

<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
<symbol xmlns:xlink="http://www.w3.org/1999/xlink">lf
</symbol></para>
</listitem>

</itemizedlist>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
Our program will start in the <symbol xmlns:xlink="http://www.w3.org/1999/xlink">ordinary</symbol>
state. During this state, the program action depends on
its input as follows:
</para>

<itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
If the input is anything other than a carriage return
or line feed, the input is simply passed on to the output. The
state remains unchanged.
</para>
</listitem>

<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
If the input is a carriage return, the state is changed
to <symbol xmlns:xlink="http://www.w3.org/1999/xlink">cr</symbol>. The input is then discarded, i.e.,
no output is made.
</para>
</listitem>

<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
If the input is a line feed, the state is changed to
<symbol xmlns:xlink="http://www.w3.org/1999/xlink">lf</symbol>. The input is then discarded.
</para>
</listitem>

</itemizedlist>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
Whenever we are in the <symbol xmlns:xlink="http://www.w3.org/1999/xlink">cr</symbol> state, it is
because the last input was a carriage return, which was
unprocessed. What our software does in this state again
depends on the current input:
</para>

<itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
If the input is anything other than a carriage return
or line feed, output a line feed, then output the input, then
change the state to <symbol xmlns:xlink="http://www.w3.org/1999/xlink">ordinary</symbol>.
</para>
</listitem>

<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
If the input is a carriage return, we have received
two (or more) carriage returns in a row. We discard the
input, we output a line feed, and leave the state unchanged.
</para>
</listitem>

<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
If the input is a line feed, we output the line feed
and change the state to <symbol xmlns:xlink="http://www.w3.org/1999/xlink">ordinary</symbol>. Note that
this is not the same as the first case above &#8211; if we tried
to combine them, we would be outputting two line feeds
instead of one.
</para>
</listitem>

</itemizedlist>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
Finally, we are in the <symbol xmlns:xlink="http://www.w3.org/1999/xlink">lf</symbol> state after
we have received a line feed that was not preceded by a
carriage return. This will happen when our file already is
in <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> format, or whenever several lines in a row are
expressed by a single carriage return followed by several
line feeds, or when line ends with a line feed /
carriage return sequence. Here is how we need to handle
our input in this state:
</para>

<itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
If the input is anything other than a carriage return or
line feed, we output a line feed, then output the input, then
change the state to <symbol xmlns:xlink="http://www.w3.org/1999/xlink">ordinary</symbol>. This is exactly
the same action as in the <symbol xmlns:xlink="http://www.w3.org/1999/xlink">cr</symbol> state upon
receiving the same kind of input.
</para>
</listitem>

<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
If the input is a carriage return, we discard the input,
we output a line feed, then change the state to <symbol xmlns:xlink="http://www.w3.org/1999/xlink">ordinary</symbol>.
</para>
</listitem>

<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
If the input is a line feed, we output the line feed,
and leave the state unchanged.
</para>
</listitem>

</itemizedlist>
<sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-final-state">
<title xmlns:xlink="http://www.w3.org/1999/xlink">The Final State</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The above <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">finite state machine</emphasis> works for the entire file, but leaves
the possibility that the final line end will be ignored. That will
happen whenever the file ends with a single carriage return or
a single line feed. I did not think of it when I wrote
<application xmlns:xlink="http://www.w3.org/1999/xlink">tuc</application>, just to discover that
occasionally it strips the last line ending.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
This problem is easily fixed by checking the state after the
entire file was processed. If the state is not
<symbol xmlns:xlink="http://www.w3.org/1999/xlink">ordinary</symbol>, we simply
need to output one last line feed.
</para>

<note xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
Now that we have expressed our algorithm as a <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">finite state machine</emphasis>,
we could easily design a dedicated digital electronic
circuit (a "chip") to do the conversion for us. Of course,
doing so would be considerably more expensive than writing
an assembly language program.
</para>
</note>

</sect3>

<sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-tuc-counter">
<title xmlns:xlink="http://www.w3.org/1999/xlink">The Output Counter</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Because our file conversion program may be combining two
characters into one, we need to use an output counter. We
initialize it to <constant xmlns:xlink="http://www.w3.org/1999/xlink">0</constant>, and increase it
every time we send a character to the output. At the end of
the program, the counter will tell us what size we need
to set the file to.
</para>

</sect3>

</sect2>

<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-software-fsm">
<title xmlns:xlink="http://www.w3.org/1999/xlink">Implementing FSM in Software</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The hardest part of working with a <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">finite state machine</emphasis>
is analyzing the problem and expressing it as a
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">finite state machine</emphasis>. That accomplished,
the software almost writes itself.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
In a high-level language, such as C, there are several main
approaches. One is to use a <function xmlns:xlink="http://www.w3.org/1999/xlink" role="statement">switch</function> statement
which chooses what function should be run. For example,
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
	switch (state) {
	default:
	case REGULAR:
		regular(inputchar);
		break;
	case CR:
		cr(inputchar);
		break;
	case LF:
		lf(inputchar);
		break;
	}
</programlisting>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Another approach is by using an array of function pointers,
something like this:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
	(output[state])(inputchar);
</programlisting>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Yet another is to have <varname xmlns:xlink="http://www.w3.org/1999/xlink">state</varname> be a
function pointer, set to point at the appropriate function:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
	(*state)(inputchar);
</programlisting>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
This is the approach we will use in our program because it is very easy to do in assembly language, and very fast, too. We will simply keep the address of the right procedure in <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">EBX</varname>, and then just issue:</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
	call	ebx
</programlisting>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
This is possibly faster than hardcoding the address in the code
because the microprocessor does not have to fetch the address from
the memory&#8212;it is already stored in one of its registers. I said
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">possibly</emphasis> because with the caching modern
microprocessors do, either way may be equally fast.
</para>

</sect2>

<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="memory-mapped-files">
<title xmlns:xlink="http://www.w3.org/1999/xlink">Memory Mapped Files</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Because our program works on a single file, we cannot use the
approach that worked for us before, i.e., to read from an input
file and to write to an output file.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
<trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> allows us to map a file, or a section of a file,
into memory. To do that, we first need to open the file with the
appropriate read/write flags. Then we use the <function xmlns:xlink="http://www.w3.org/1999/xlink" role="syscall">mmap</function>
system call to map it into the memory. One nice thing about
<function xmlns:xlink="http://www.w3.org/1999/xlink" role="syscall">mmap</function> is that it automatically works with
virtual memory: We can map more of the file into the memory than
we have physical memory available, yet still access it through
regular memory op codes, such as <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">mov</function>,
<function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">lods</function>, and <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">stos</function>.
Whatever changes we make to the memory image of the file will be
written to the file by the system. We do not even have to keep
the file open: As long as it stays mapped, we can
read from it and write to it.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The 32-bit Intel microprocessors can access up to four
gigabytes of memory &#8211; physical or virtual. The FreeBSD system
allows us to use up to a half of it for file mapping.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
For simplicity sake, in this tutorial we will only convert files
that can be mapped into the memory in their entirety. There are
probably not too many text files that exceed two gigabytes in size.
If our program encounters one, it will simply display a message
suggesting we use the original
<application xmlns:xlink="http://www.w3.org/1999/xlink">tuc</application> instead.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
If you examine your copy of <filename xmlns:xlink="http://www.w3.org/1999/xlink">syscalls.master</filename>,
you will find two separate syscalls named <function xmlns:xlink="http://www.w3.org/1999/xlink" role="syscall">mmap</function>.
This is because of evolution of <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark>: There was the traditional
<acronym xmlns:xlink="http://www.w3.org/1999/xlink">BSD</acronym> <function xmlns:xlink="http://www.w3.org/1999/xlink" role="syscall">mmap</function>,
syscall 71. That one was superseded by the <acronym xmlns:xlink="http://www.w3.org/1999/xlink"><trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">POSIX</trademark></acronym> <function xmlns:xlink="http://www.w3.org/1999/xlink" role="syscall">mmap</function>,
syscall 197. The FreeBSD system supports both because
older programs were written by using the original <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BSD</acronym>
version. But new software uses the <acronym xmlns:xlink="http://www.w3.org/1999/xlink"><trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">POSIX</trademark></acronym> version,
which is what we will use.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The <filename xmlns:xlink="http://www.w3.org/1999/xlink">syscalls.master</filename> file lists
the <acronym xmlns:xlink="http://www.w3.org/1999/xlink"><trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">POSIX</trademark></acronym> version like this:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
197	STD	BSD	{ caddr_t mmap(caddr_t addr, size_t len, int prot, \
			    int flags, int fd, long pad, off_t pos); }
</programlisting>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
This differs slightly from what
<citerefentry xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">mmap</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry>
says. That is because
<citerefentry xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">mmap</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry>
describes the C version.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The difference is in the <varname xmlns:xlink="http://www.w3.org/1999/xlink">long pad</varname> argument, which is not present in the C version. However, the FreeBSD syscalls add a 32-bit pad after <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">push</function>ing a 64-bit argument. In this case, <varname xmlns:xlink="http://www.w3.org/1999/xlink">off_t</varname> is a 64-bit value.</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
When we are finished working with a memory-mapped file,
we unmap it with the <function xmlns:xlink="http://www.w3.org/1999/xlink" role="syscall">munmap</function> syscall:
</para>

<tip xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
For an in-depth treatment of <function xmlns:xlink="http://www.w3.org/1999/xlink" role="syscall">mmap</function>, see
W. Richard Stevens'
<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.int80h.org/cgi-bin/isbn?isbn=0130810819">Unix
Network Programming, Volume 2, Chapter 12</link>.
</para>
</tip>

</sect2>

<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-file-size">
<title xmlns:xlink="http://www.w3.org/1999/xlink">Determining File Size</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Because we need to tell <function xmlns:xlink="http://www.w3.org/1999/xlink" role="syscall">mmap</function> how many bytes
of the file to map into the memory, and because we want to map
the entire file, we need to determine the size of the file.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We can use the <function xmlns:xlink="http://www.w3.org/1999/xlink" role="syscall">fstat</function> syscall to get all
the information about an open file that the system can give us.
That includes the file size.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Again, <filename xmlns:xlink="http://www.w3.org/1999/xlink">syscalls.master</filename> lists two versions
of <function xmlns:xlink="http://www.w3.org/1999/xlink" role="syscall">fstat</function>, a traditional one
(syscall 62), and a <acronym xmlns:xlink="http://www.w3.org/1999/xlink"><trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">POSIX</trademark></acronym> one
(syscall 189). Naturally, we will use the
<acronym xmlns:xlink="http://www.w3.org/1999/xlink"><trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">POSIX</trademark></acronym> version:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
189	STD	POSIX	{ int fstat(int fd, struct stat *sb); }
</programlisting>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
This is a very straightforward call: We pass to it the address
of a <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">stat</varname> structure and the descriptor
of an open file. It will fill out the contents of the
<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">stat</varname> structure.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
I do, however, have to say that I tried to declare the
<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">stat</varname> structure in the
<varname xmlns:xlink="http://www.w3.org/1999/xlink">.bss</varname> section, and
<function xmlns:xlink="http://www.w3.org/1999/xlink" role="syscall">fstat</function> did not like it: It set the carry
flag indicating an error. After I changed the code to allocate
the structure on the stack, everything was working fine.
</para>

</sect2>

<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-ftruncate">
<title xmlns:xlink="http://www.w3.org/1999/xlink">Changing the File Size</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Because our program may combine carriage return / line feed
sequences into straight line feeds, our output may be smaller
than our input. However, since we are placing our output into
the same file we read the input from, we may have to change the
size of the file.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The <function xmlns:xlink="http://www.w3.org/1999/xlink" role="syscall">ftruncate</function> system call allows us to do
just that. Despite its somewhat misleading name, the
<function xmlns:xlink="http://www.w3.org/1999/xlink" role="syscall">ftruncate</function> system call can be used to both
truncate the file (make it smaller) and to grow it.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
And yes, we will find two versions of <function xmlns:xlink="http://www.w3.org/1999/xlink" role="syscall">ftruncate</function>
in <filename xmlns:xlink="http://www.w3.org/1999/xlink">syscalls.master</filename>, an older one
(130), and a newer one (201). We will use
the newer one:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
201	STD	BSD	{ int ftruncate(int fd, int pad, off_t length); }
</programlisting>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Please note that this one contains a <varname xmlns:xlink="http://www.w3.org/1999/xlink">int pad</varname> again.
</para>

</sect2>

<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-ftuc">
<title xmlns:xlink="http://www.w3.org/1999/xlink">ftuc</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We now know everything we need to write <application xmlns:xlink="http://www.w3.org/1999/xlink">ftuc</application>.
We start by adding some new lines in <filename xmlns:xlink="http://www.w3.org/1999/xlink">system.inc</filename>.
First, we define some constants and structures, somewhere at
or near the beginning of the file:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
;;;;;;; open flags
%define	O_RDONLY	0
%define	O_WRONLY	1
%define	O_RDWR	2

;;;;;;; mmap flags
%define	PROT_NONE	0
%define	PROT_READ	1
%define	PROT_WRITE	2
%define	PROT_EXEC	4
;;
%define	MAP_SHARED	0001h
%define	MAP_PRIVATE	0002h

;;;;;;; stat structure
struc	stat
st_dev		resd	1	; = 0
st_ino		resd	1	; = 4
st_mode		resw	1	; = 8, size is 16 bits
st_nlink	resw	1	; = 10, ditto
st_uid		resd	1	; = 12
st_gid		resd	1	; = 16
st_rdev		resd	1	; = 20
st_atime	resd	1	; = 24
st_atimensec	resd	1	; = 28
st_mtime	resd	1	; = 32
st_mtimensec	resd	1	; = 36
st_ctime	resd	1	; = 40
st_ctimensec	resd	1	; = 44
st_size		resd	2	; = 48, size is 64 bits
st_blocks	resd	2	; = 56, ditto
st_blksize	resd	1	; = 64
st_flags	resd	1	; = 68
st_gen		resd	1	; = 72
st_lspare	resd	1	; = 76
st_qspare	resd	4	; = 80
endstruc
</programlisting>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We define the new syscalls:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
%define	SYS_mmap	197
%define	SYS_munmap	73
%define	SYS_fstat	189
%define	SYS_ftruncate	201
</programlisting>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We add the macros for their use:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
%macro	sys.mmap	0
	system	SYS_mmap
%endmacro

%macro	sys.munmap	0
	system	SYS_munmap
%endmacro

%macro	sys.ftruncate	0
	system	SYS_ftruncate
%endmacro

%macro	sys.fstat	0
	system	SYS_fstat
%endmacro
</programlisting>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
And here is our code:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
;;;;;;; Fast Text-to-Unix Conversion (ftuc.asm) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Started:	21-Dec-2000
;; Updated:	22-Dec-2000
;;
;; Copyright 2000 G. Adam Stanislav.
;; All rights reserved.
;;
;;;;;;; v.1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%include	'system.inc'

section	.data
	db	'Copyright 2000 G. Adam Stanislav.', 0Ah
	db	'All rights reserved.', 0Ah
usg	db	'Usage: ftuc filename', 0Ah
usglen	equ	$-usg
co	db	"ftuc: Can't open file.", 0Ah
colen	equ	$-co
fae	db	'ftuc: File access error.', 0Ah
faelen	equ	$-fae
ftl	db	'ftuc: File too long, use regular tuc instead.', 0Ah
ftllen	equ	$-ftl
mae	db	'ftuc: Memory allocation error.', 0Ah
maelen	equ	$-mae

section	.text

align 4
memerr:
	push	dword maelen
	push	dword mae
	jmp	short error

align 4
toolong:
	push	dword ftllen
	push	dword ftl
	jmp	short error

align 4
facerr:
	push	dword faelen
	push	dword fae
	jmp	short error

align 4
cantopen:
	push	dword colen
	push	dword co
	jmp	short error

align 4
usage:
	push	dword usglen
	push	dword usg

error:
	push	dword stderr
	sys.write

	push	dword 1
	sys.exit

align 4
global	_start
_start:
	pop	eax		; argc
	pop	eax		; program name
	pop	ecx		; file to convert
	jecxz	usage

	pop	eax
	or	eax, eax	; Too many arguments?
	jne	usage

	; Open the file
	push	dword O_RDWR
	push	ecx
	sys.open
	jc	cantopen

	mov	ebp, eax	; Save fd

	sub	esp, byte stat_size
	mov	ebx, esp

	; Find file size
	push	ebx
	push	ebp		; fd
	sys.fstat
	jc	facerr

	mov	edx, [ebx + st_size + 4]

	; File is too long if EDX != 0 ...
	or	edx, edx
	jne	near toolong
	mov	ecx, [ebx + st_size]
	; ... or if it is above 2 GB
	or	ecx, ecx
	js	near toolong

	; Do nothing if the file is 0 bytes in size
	jecxz	.quit

	; Map the entire file in memory
	push	edx
	push	edx		; starting at offset 0
	push	edx		; pad
	push	ebp		; fd
	push	dword MAP_SHARED
	push	dword PROT_READ | PROT_WRITE
	push	ecx		; entire file size
	push	edx		; let system decide on the address
	sys.mmap
	jc	near memerr

	mov	edi, eax
	mov	esi, eax
	push	ecx		; for SYS_munmap
	push	edi

	; Use EBX for state machine
	mov	ebx, ordinary
	mov	ah, 0Ah
	cld

.loop:
	lodsb
	call	ebx
	loop	.loop

	cmp	ebx, ordinary
	je	.filesize

	; Output final lf
	mov	al, ah
	stosb
	inc	edx

.filesize:
	; truncate file to new size
	push	dword 0		; high dword
	push	edx		; low dword
	push	eax		; pad
	push	ebp
	sys.ftruncate

	; close it (ebp still pushed)
	sys.close

	add	esp, byte 16
	sys.munmap

.quit:
	push	dword 0
	sys.exit

align 4
ordinary:
	cmp	al, 0Dh
	je	.cr

	cmp	al, ah
	je	.lf

	stosb
	inc	edx
	ret

align 4
.cr:
	mov	ebx, cr
	ret

align 4
.lf:
	mov	ebx, lf
	ret

align 4
cr:
	cmp	al, 0Dh
	je	.cr

	cmp	al, ah
	je	.lf

	xchg	al, ah
	stosb
	inc	edx

	xchg	al, ah
	; fall through

.lf:
	stosb
	inc	edx
	mov	ebx, ordinary
	ret

align 4
.cr:
	mov	al, ah
	stosb
	inc	edx
	ret

align 4
lf:
	cmp	al, ah
	je	.lf

	cmp	al, 0Dh
	je	.cr

	xchg	al, ah
	stosb
	inc	edx

	xchg	al, ah
	stosb
	inc	edx
	mov	ebx, ordinary
	ret

align 4
.cr:
	mov	ebx, ordinary
	mov	al, ah
	; fall through

.lf:
	stosb
	inc	edx
	ret
</programlisting>

<warning xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">
Do not use this program on files stored on a disk formatted
by <acronym xmlns:xlink="http://www.w3.org/1999/xlink"><trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">MS-DOS</trademark></acronym> or <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">Windows</trademark>. There seems to be a
subtle bug in the FreeBSD code when using <function xmlns:xlink="http://www.w3.org/1999/xlink" role="syscall">mmap</function>
on these drives mounted under FreeBSD: If the file is over
a certain size, <function xmlns:xlink="http://www.w3.org/1999/xlink" role="syscall">mmap</function> will just fill the memory
with zeros, and then copy them to the file overwriting
its contents.
</para>
</warning>
</sect2>

</sect1>

<sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-one-pointed-mind">
<title xmlns:xlink="http://www.w3.org/1999/xlink">One-Pointed Mind</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
As a student of Zen, I like the idea of a one-pointed mind:
Do one thing at a time, and do it well.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
This, indeed, is very much how <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> works as well. While
a typical <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">Windows</trademark> application is attempting to do everything
imaginable (and is, therefore, riddled with bugs), a
typical <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> program does only one thing, and it does it
well.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The typical <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> user then essentially assembles his own
applications by writing a shell script which combines the
various existing programs by piping the output of one
program to the input of another.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
When writing your own <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> software, it is generally a
good idea to see what parts of the problem you need to
solve can be handled by existing programs, and only
write your own programs for that part of the problem
that you do not have an existing solution for.
</para>

<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-csv"><title xmlns:xlink="http://www.w3.org/1999/xlink">CSV</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
I will illustrate this principle with a specific real-life
example I was faced with recently:
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
I needed to extract the 11th field of each record from a
database I downloaded from a web site. The database was a
<acronym xmlns:xlink="http://www.w3.org/1999/xlink">CSV</acronym> file, i.e., a list of
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">comma-separated values</emphasis>. That is quite
a standard format for sharing data among people who may be
using different database software.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The first line of the file contains the list of various fields
separated by commas. The rest of the file contains the data
listed line by line, with values separated by commas.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
I tried <application xmlns:xlink="http://www.w3.org/1999/xlink">awk</application>, using the comma as a separator.
But because several lines contained a quoted comma,
<application xmlns:xlink="http://www.w3.org/1999/xlink">awk</application> was extracting the wrong field
from those lines.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Therefore, I needed to write my own software to extract the 11th
field from the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">CSV</acronym> file. However, going with the <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark>
spirit, I only needed to write a simple filter that would do the
following:
</para>

<itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
Remove the first line from the file;
</para>
</listitem>

<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
Change all unquoted commas to a different character;
</para>
</listitem>

<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
Remove all quotation marks.
</para>
</listitem>

</itemizedlist>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
Strictly speaking, I could use <application xmlns:xlink="http://www.w3.org/1999/xlink">sed</application> to remove
the first line from the file, but doing so in my own program
was very easy, so I decided to do it and reduce the size of
the pipeline.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
At any rate, writing a program like this took me about
20 minutes. Writing a program that extracts the 11th field
from the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">CSV</acronym> file would take a lot longer,
and I could not reuse it to extract some other field from some
other database.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
This time I decided to let it do a little more work than
a typical tutorial program would:
</para>

<itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
It parses its command line for options;
</para>
</listitem>

<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
It displays proper usage if it finds wrong arguments;
</para>
</listitem>

<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
It produces meaningful error messages.
</para>
</listitem>

</itemizedlist>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
Here is its usage message:
</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink">Usage: csv [-t&lt;delim&gt;] [-c&lt;comma&gt;] [-p] [-o &lt;outfile&gt;] [-i &lt;infile&gt;]</screen>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
All parameters are optional, and can appear in any order.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The <parameter xmlns:xlink="http://www.w3.org/1999/xlink">-t</parameter> parameter declares what to replace
the commas with. The <constant xmlns:xlink="http://www.w3.org/1999/xlink">tab</constant> is the default here.
For example, <parameter xmlns:xlink="http://www.w3.org/1999/xlink">-t;</parameter> will replace all unquoted
commas with semicolons.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
I did not need the <parameter xmlns:xlink="http://www.w3.org/1999/xlink">-c</parameter> option, but it may
come in handy in the future. It lets me declare that I want a
character other than a comma replaced with something else.
For example, <parameter xmlns:xlink="http://www.w3.org/1999/xlink">-c@</parameter> will replace all at signs
(useful if you want to split a list of email addresses
to their user names and domains).
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The <parameter xmlns:xlink="http://www.w3.org/1999/xlink">-p</parameter> option preserves the first line, i.e.,
it does not delete it. By default, we delete the first
line because in a <acronym xmlns:xlink="http://www.w3.org/1999/xlink">CSV</acronym> file it contains the field
names rather than data.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The <parameter xmlns:xlink="http://www.w3.org/1999/xlink">-i</parameter> and <parameter xmlns:xlink="http://www.w3.org/1999/xlink">-o</parameter>
options let me specify the input and the output files. Defaults
are <filename xmlns:xlink="http://www.w3.org/1999/xlink">stdin</filename> and <filename xmlns:xlink="http://www.w3.org/1999/xlink">stdout</filename>,
so this is a regular <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> filter.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
I made sure that both <parameter xmlns:xlink="http://www.w3.org/1999/xlink">-i filename</parameter> and
<parameter xmlns:xlink="http://www.w3.org/1999/xlink">-ifilename</parameter> are accepted. I also made
sure that only one input and one output files may be
specified.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
To get the 11th field of each record, I can now do:
</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">csv '-t;' <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">data.csv</replaceable> | awk '-F;' '{print $11}'</userinput></screen>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The code stores the options (except for the file descriptors)
in <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">EDX</varname>: The comma in <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">DH</varname>, the new
separator in <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">DL</varname>, and the flag for
the <parameter xmlns:xlink="http://www.w3.org/1999/xlink">-p</parameter> option in the highest bit of
<varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">EDX</varname>, so a check for its sign will give us a
quick decision what to do.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Here is the code:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
;;;;;;; csv.asm ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Convert a comma-separated file to a something-else separated file.
;
; Started:	31-May-2001
; Updated:	 1-Jun-2001
;
; Copyright (c) 2001 G. Adam Stanislav
; All rights reserved.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

%include	'system.inc'

%define	BUFSIZE	2048

section	.data
fd.in	dd	stdin
fd.out	dd	stdout
usg	db	'Usage: csv [-t&lt;delim&gt;] [-c&lt;comma&gt;] [-p] [-o &lt;outfile&gt;] [-i &lt;infile&gt;]', 0Ah
usglen	equ	$-usg
iemsg	db	"csv: Can't open input file", 0Ah
iemlen	equ	$-iemsg
oemsg	db	"csv: Can't create output file", 0Ah
oemlen	equ	$-oemsg

section .bss
ibuffer	resb	BUFSIZE
obuffer	resb	BUFSIZE

section	.text
align 4
ierr:
	push	dword iemlen
	push	dword iemsg
	push	dword stderr
	sys.write
	push	dword 1		; return failure
	sys.exit

align 4
oerr:
	push	dword oemlen
	push	dword oemsg
	push	dword stderr
	sys.write
	push	dword 2
	sys.exit

align 4
usage:
	push	dword usglen
	push	dword usg
	push	dword stderr
	sys.write
	push	dword 3
	sys.exit

align 4
global	_start
_start:
	add	esp, byte 8	; discard argc and argv[0]
	mov	edx, (',' &lt;&lt; 8) | 9

.arg:
	pop	ecx
	or	ecx, ecx
	je	near .init		; no more arguments

	; ECX contains the pointer to an argument
	cmp	byte [ecx], '-'
	jne	usage

	inc	ecx
	mov	ax, [ecx]

.o:
	cmp	al, 'o'
	jne	.i

	; Make sure we are not asked for the output file twice
	cmp	dword [fd.out], stdout
	jne	usage

	; Find the path to output file - it is either at [ECX+1],
	; i.e., -ofile --
	; or in the next argument,
	; i.e., -o file

	inc	ecx
	or	ah, ah
	jne	.openoutput
	pop	ecx
	jecxz	usage

.openoutput:
	push	dword 420	; file mode (644 octal)
	push	dword 0200h | 0400h | 01h
	; O_CREAT | O_TRUNC | O_WRONLY
	push	ecx
	sys.open
	jc	near oerr

	add	esp, byte 12
	mov	[fd.out], eax
	jmp	short .arg

.i:
	cmp	al, 'i'
	jne	.p

	; Make sure we are not asked twice
	cmp	dword [fd.in], stdin
	jne	near usage

	; Find the path to the input file
	inc	ecx
	or	ah, ah
	jne	.openinput
	pop	ecx
	or	ecx, ecx
	je near usage

.openinput:
	push	dword 0		; O_RDONLY
	push	ecx
	sys.open
	jc	near ierr		; open failed

	add	esp, byte 8
	mov	[fd.in], eax
	jmp	.arg

.p:
	cmp	al, 'p'
	jne	.t
	or	ah, ah
	jne	near usage
	or	edx, 1 &lt;&lt; 31
	jmp	.arg

.t:
	cmp	al, 't'		; redefine output delimiter
	jne	.c
	or	ah, ah
	je	near usage
	mov	dl, ah
	jmp	.arg

.c:
	cmp	al, 'c'
	jne	near usage
	or	ah, ah
	je	near usage
	mov	dh, ah
	jmp	.arg

align 4
.init:
	sub	eax, eax
	sub	ebx, ebx
	sub	ecx, ecx
	mov	edi, obuffer

	; See if we are to preserve the first line
	or	edx, edx
	js	.loop

.firstline:
	; get rid of the first line
	call	getchar
	cmp	al, 0Ah
	jne	.firstline

.loop:
	; read a byte from stdin
	call	getchar

	; is it a comma (or whatever the user asked for)?
	cmp	al, dh
	jne	.quote

	; Replace the comma with a tab (or whatever the user wants)
	mov	al, dl

.put:
	call	putchar
	jmp	short .loop

.quote:
	cmp	al, '"'
	jne	.put

	; Print everything until you get another quote or EOL. If it
	; is a quote, skip it. If it is EOL, print it.
.qloop:
	call	getchar
	cmp	al, '"'
	je	.loop

	cmp	al, 0Ah
	je	.put

	call	putchar
	jmp	short .qloop

align 4
getchar:
	or	ebx, ebx
	jne	.fetch

	call	read

.fetch:
	lodsb
	dec	ebx
	ret

read:
	jecxz	.read
	call	write

.read:
	push	dword BUFSIZE
	mov	esi, ibuffer
	push	esi
	push	dword [fd.in]
	sys.read
	add	esp, byte 12
	mov	ebx, eax
	or	eax, eax
	je	.done
	sub	eax, eax
	ret

align 4
.done:
	call	write		; flush output buffer

	; close files
	push	dword [fd.in]
	sys.close

	push	dword [fd.out]
	sys.close

	; return success
	push	dword 0
	sys.exit

align 4
putchar:
	stosb
	inc	ecx
	cmp	ecx, BUFSIZE
	je	write
	ret

align 4
write:
	jecxz	.ret	; nothing to write
	sub	edi, ecx	; start of buffer
	push	ecx
	push	edi
	push	dword [fd.out]
	sys.write
	add	esp, byte 12
	sub	eax, eax
	sub	ecx, ecx	; buffer is empty now
.ret:
	ret
</programlisting>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Much of it is taken from <filename xmlns:xlink="http://www.w3.org/1999/xlink">hex.asm</filename> above. But there
is one important difference: I no longer call <function xmlns:xlink="http://www.w3.org/1999/xlink">write</function>
whenever I am outputting a line feed. Yet, the code can be
used interactively.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
I have found a better solution for the interactive problem
since I first started writing this chapter. I wanted to
make sure each line is printed out separately only when needed.
After all, there is no need to flush out every line when used
non-interactively.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The new solution I use now is to call <function xmlns:xlink="http://www.w3.org/1999/xlink">write</function> every
time I find the input buffer empty. That way, when running in
the interactive mode, the program reads one line from the user's
keyboard, processes it, and sees its input buffer is empty. It
flushes its output and reads the next line.
</para>

<sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-buffered-dark-side">
<title xmlns:xlink="http://www.w3.org/1999/xlink">The Dark Side of Buffering</title>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
This change prevents a mysterious lockup
in a very specific case. I refer to it as the
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">dark side of buffering</emphasis>, mostly
because it presents a danger that is not
quite obvious.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
It is unlikely to happen with a program like the
<application xmlns:xlink="http://www.w3.org/1999/xlink">csv</application> above, so let us consider yet
another filter: In this case we expect our input
to be raw data representing color values, such as
the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">red</emphasis>, <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">green</emphasis>, and
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">blue</emphasis> intensities of a pixel. Our
output will be the negative of our input.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Such a filter would be very simple to write.
Most of it would look just like all the other
filters we have written so far, so I am only
going to show you its inner loop:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
.loop:
	call	getchar
	not	al		; Create a negative
	call	putchar
	jmp	short .loop
</programlisting>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
Because this filter works with raw data,
it is unlikely to be used interactively.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
But it could be called by image manipulation software.
And, unless it calls <function xmlns:xlink="http://www.w3.org/1999/xlink">write</function> before each call
to <function xmlns:xlink="http://www.w3.org/1999/xlink">read</function>, chances are it will lock up.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Here is what might happen:
</para>

<procedure xmlns:xlink="http://www.w3.org/1999/xlink"><step xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">
The image editor will load our filter using the
C function <function xmlns:xlink="http://www.w3.org/1999/xlink">popen()</function>.
</para>
</step>
<step xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">
It will read the first row of pixels from
a bitmap or pixmap.
</para>
</step>
<step xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">
It will write the first row of pixels to
the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">pipe</emphasis> leading to
the <varname xmlns:xlink="http://www.w3.org/1999/xlink">fd.in</varname> of our filter.
</para>
</step>
<step xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">
Our filter will read each pixel
from its input, turn it to a negative,
and write it to its output buffer.
</para>
</step>
<step xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">
Our filter will call <function xmlns:xlink="http://www.w3.org/1999/xlink">getchar</function>
to fetch the next pixel.
</para>
</step>
<step xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">
<function xmlns:xlink="http://www.w3.org/1999/xlink">getchar</function> will find an empty
input buffer, so it will call
<function xmlns:xlink="http://www.w3.org/1999/xlink">read</function>.
</para>
</step>
<step xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">
<function xmlns:xlink="http://www.w3.org/1999/xlink">read</function> will call the
<function xmlns:xlink="http://www.w3.org/1999/xlink" role="syscall">SYS_read</function> system call.
</para>
</step>
<step xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">
The <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">kernel</emphasis> will suspend
our filter until the image editor
sends more data to the pipe.
</para>
</step>
<step xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">
The image editor will read from the
other pipe, connected to the
<varname xmlns:xlink="http://www.w3.org/1999/xlink">fd.out</varname> of our filter so it can set the first row of the
output image <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">before</emphasis>
it sends us the second row of the input.
</para>
</step>
<step xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">
The <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">kernel</emphasis> suspends
the image editor until it receives
some output from our filter, so it
can pass it on to the image editor.
</para>
</step>
</procedure>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
At this point our filter waits for the image
editor to send it more data to process, while
the image editor is waiting for our filter
to send it the result of the processing
of the first row. But the result sits in
our output buffer.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The filter and the image editor will continue
waiting for each other forever (or, at least,
until they are killed). Our software has just
entered a
<link xmlns:xlink="http://www.w3.org/1999/xlink" linkend="secure-race-conditions">race condition</link>.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
This problem does not exist if our filter flushes
its output buffer <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">before</emphasis> asking the
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">kernel</emphasis> for more input data.
</para>

</sect3>

</sect2>

</sect1>

<sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-fpu">
<title xmlns:xlink="http://www.w3.org/1999/xlink">Using the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">FPU</acronym></title>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
Strangely enough, most of assembly language literature does not
even mention the existence of the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">FPU</acronym>,
or <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">floating point unit</emphasis>, let alone discuss
programming it.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Yet, never does assembly language shine more than when
we create highly optimized <acronym xmlns:xlink="http://www.w3.org/1999/xlink">FPU</acronym>
code by doing things that can be done <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">only</emphasis> in assembly language.</para>

<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-fpu-organization"><title xmlns:xlink="http://www.w3.org/1999/xlink">Organization of the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">FPU</acronym></title>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
The <acronym xmlns:xlink="http://www.w3.org/1999/xlink">FPU</acronym> consists of 8 80&#8211;bit floating&#8211;point registers.
These are organized in a stack fashion&#8212;you can
<function xmlns:xlink="http://www.w3.org/1999/xlink">push</function> a value on <acronym xmlns:xlink="http://www.w3.org/1999/xlink">TOS</acronym>
(<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">top of stack</emphasis>) and you can
<function xmlns:xlink="http://www.w3.org/1999/xlink">pop</function> it.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
That said, the assembly language op codes are not <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">push</function>
and <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">pop</function> because those are already taken.</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
You can <function xmlns:xlink="http://www.w3.org/1999/xlink">push</function> a value on <acronym xmlns:xlink="http://www.w3.org/1999/xlink">TOS</acronym>
by using <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">fld</function>, <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">fild</function>,
and <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">fbld</function>. Several other op codes
let you <function xmlns:xlink="http://www.w3.org/1999/xlink">push</function> many common
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">constants</emphasis>&#8212;such as <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">pi</emphasis>&#8212;on
the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">TOS</acronym>.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Similarly, you can <function xmlns:xlink="http://www.w3.org/1999/xlink">pop</function> a value by
using <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">fst</function>, <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">fstp</function>,
<function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">fist</function>, <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">fistp</function>, and
<function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">fbstp</function>. Actually, only the op
codes that end with a <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">p</emphasis> will
literally <function xmlns:xlink="http://www.w3.org/1999/xlink">pop</function> the value,
the rest will <function xmlns:xlink="http://www.w3.org/1999/xlink">store</function> it
somewhere else without removing it from
the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">TOS</acronym>.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We can transfer the data between the
<acronym xmlns:xlink="http://www.w3.org/1999/xlink">TOS</acronym> and the computer memory either as
a 32&#8211;bit, 64&#8211;bit, or 80&#8211;bit <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">real</emphasis>,
a 16&#8211;bit, 32&#8211;bit, or 64&#8211;bit <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">integer</emphasis>,
or an 80&#8211;bit <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">packed decimal</emphasis>.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The 80&#8211;bit <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">packed decimal</emphasis> is
a special case of <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">binary coded
decimal</emphasis> which is very convenient when
converting between the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">ASCII</acronym>
representation of data and the internal
data of the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">FPU</acronym>. It allows us to use
18 significant digits.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
No matter how we represent data in the memory,
the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">FPU</acronym> always stores it in the 80&#8211;bit
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">real</emphasis> format in its registers.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Its internal precision is at least 19 decimal
digits, so even if we choose to display results
as <acronym xmlns:xlink="http://www.w3.org/1999/xlink">ASCII</acronym> in the full
18&#8211;digit precision, we are still showing
correct results.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We can perform mathematical operations on the
<acronym xmlns:xlink="http://www.w3.org/1999/xlink">TOS</acronym>: We can calculate its
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">sine</emphasis>, we can <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">scale</emphasis> it
(i.e., we can multiply or divide it by a power
of 2), we can calculate its base&#8211;2
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">logarithm</emphasis>, and many other things.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We can also <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">multiply</emphasis> or
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">divide</emphasis> it by, <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">add</emphasis>
it to, or <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">subtract</emphasis> it from,
any of the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">FPU</acronym> registers (including
itself).
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The official Intel op code for the
<acronym xmlns:xlink="http://www.w3.org/1999/xlink">TOS</acronym> is <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st</varname>, and
for the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">registers</emphasis>
<varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st(0)</varname>&#8211;<varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st(7)</varname>.
<varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st</varname> and <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st(0)</varname>, then,
refer to the same register.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
For whatever reasons, the original author of
<application xmlns:xlink="http://www.w3.org/1999/xlink">nasm</application> has decided to use
different op codes, namely
<varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st0</varname>&#8211;<varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st7</varname>.
In other words, there are no parentheses,
and the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">TOS</acronym> is always
<varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st0</varname>, never just <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">st</function>.
</para>

<sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-fpu-packed-decimal">
<title xmlns:xlink="http://www.w3.org/1999/xlink">The Packed Decimal Format</title>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
The <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">packed decimal</emphasis> format
uses 10 bytes (80 bits) of
memory to represent 18 digits. The
number represented there is always an
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">integer</emphasis>.
</para>

<tip xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
You can use it to get decimal places
by multiplying the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">TOS</acronym>
by a power of 10 first.
</para>
</tip>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The highest bit of the highest byte
(byte 9) is the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">sign bit</emphasis>:
If it is set, the number is <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">negative</emphasis>,
otherwise, it is <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">positive</emphasis>.
The rest of the bits of this byte are unused/ignored.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The remaining 9 bytes store the 18 digits
of the number: 2 digits per byte.</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">more significant digit</emphasis> is
stored in the high <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">nibble</emphasis>
(4 bits), the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">less significant
digit</emphasis> in the low <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">nibble</emphasis>.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
That said, you might think that <constant xmlns:xlink="http://www.w3.org/1999/xlink">-1234567</constant>
would be stored in the memory like this (using
hexadecimal notation):
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
80 00 00 00 00 00 01 23 45 67
</programlisting>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
Alas it is not! As with everything else of Intel make,
even the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">packed decimal</emphasis> is
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">little&#8211;endian</emphasis>.</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
That means our <constant xmlns:xlink="http://www.w3.org/1999/xlink">-1234567</constant>
is stored like this:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
67 45 23 01 00 00 00 00 00 80
</programlisting>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
Remember that, or you will be pulling your hair out
in desperation!
</para>

<note xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
The book to read&#8212;if you can find it&#8212;is Richard Startz'
<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.int80h.org/cgi-bin/isbn?isbn=013246604X">8087/80287/80387
for the IBM PC &amp; Compatibles</link>.
Though it does seem to take the fact about the
little&#8211;endian storage of the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">packed
decimal</emphasis> for granted. I kid you not about the
desperation of trying to figure out what was wrong
with the filter I show below <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">before</emphasis>
it occurred to me I should try the
little&#8211;endian order even for this type of data.
</para>
</note>

</sect3>

</sect2>

<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-pinhole-photography">
<title xmlns:xlink="http://www.w3.org/1999/xlink">Excursion to Pinhole Photography</title>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
To write meaningful software, we must not only
understand our programming tools, but also the
field we are creating software for.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Our next filter will help us whenever we want
to build a <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">pinhole camera</emphasis>,
so, we need some background in <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">pinhole
photography</emphasis> before we can continue.
</para>

<sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-camera">
<title xmlns:xlink="http://www.w3.org/1999/xlink">The Camera</title>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
The easiest way to describe any camera ever built
is as some empty space enclosed in some
lightproof material, with a small hole in the
enclosure.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The enclosure is usually sturdy (e.g., a box),
though sometimes it is flexible (the bellows).
It is quite dark inside the camera. However, the
hole lets light rays in through a single point
(though in some cases there may be several).
These light rays form an image, a representation
of whatever is outside the camera, in front of the
hole.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
If some light sensitive material (such as film)
is placed inside the camera, it can capture the
image.</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The hole often contains a <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">lens</emphasis>, or
a lens assembly, often called the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">objective</emphasis>.
</para>

</sect3>

<sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-the-pinhole">
<title xmlns:xlink="http://www.w3.org/1999/xlink">The Pinhole</title>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
But, strictly speaking, the lens is not necessary:
The original cameras did not use a lens but a
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">pinhole</emphasis>. Even today, <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">pinholes</emphasis>
are used, both as a tool to study how cameras
work, and to achieve a special kind of image.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The image produced by the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">pinhole</emphasis>
is all equally sharp. Or <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">blurred</emphasis>.
There is an ideal size for a pinhole: If it is
either larger or smaller, the image loses its
sharpness.</para>

</sect3>

<sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-focal-length">
<title xmlns:xlink="http://www.w3.org/1999/xlink">Focal Length</title>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
This ideal pinhole diameter is a function
of the square root of <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">focal
length</emphasis>, which is the distance of the
pinhole from the film.
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
	D = PC * sqrt(FL)
</programlisting>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
In here, <varname xmlns:xlink="http://www.w3.org/1999/xlink">D</varname> is the
ideal diameter of the pinhole,
<varname xmlns:xlink="http://www.w3.org/1999/xlink">FL</varname> is the focal length,
and <constant xmlns:xlink="http://www.w3.org/1999/xlink">PC</constant> is a pinhole
constant. According to Jay Bender,
its value is <constant xmlns:xlink="http://www.w3.org/1999/xlink">0.04</constant>, while
Kenneth Connors has determined it to
be <constant xmlns:xlink="http://www.w3.org/1999/xlink">0.037</constant>. Others have
proposed other values. Plus, this
value is for the daylight only: Other types
of light will require a different constant,
whose value can only be determined by
experimentation.
</para>

</sect3>

<sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-f-number">
<title xmlns:xlink="http://www.w3.org/1999/xlink">The F&#8211;Number</title>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
The f&#8211;number is a very useful measure of
how much light reaches the film. A light
meter can determine that, for example,
to expose a film of specific sensitivity
with f5.6 may require the exposure to last
1/1000 sec.</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
It does not matter whether it is a 35&#8211;mm
camera, or a 6x9cm camera, etc.
As long as we know the f&#8211;number, we can determine
the proper exposure.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The f&#8211;number is easy to calculate:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
	F = FL / D
</programlisting>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
In other words, the f&#8211;number equals the focal
length divided by the diameter of the pinhole.
It also means a higher f&#8211;number either implies
a smaller pinhole or a larger focal distance,
or both. That, in turn, implies, the higher
the f&#8211;number, the longer the exposure has to be.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Furthermore, while pinhole diameter and focal
distance are one&#8211;dimensional measurements,
both, the film and the pinhole, are two&#8211;dimensional.
That means that
if you have measured the exposure at f&#8211;number
<varname xmlns:xlink="http://www.w3.org/1999/xlink">A</varname> as <varname xmlns:xlink="http://www.w3.org/1999/xlink">t</varname>, then the exposure
at f&#8211;number <varname xmlns:xlink="http://www.w3.org/1999/xlink">B</varname> is:</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
	t * (B / A)²
</programlisting>
</sect3>

<sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-normalized-f-number">
<title xmlns:xlink="http://www.w3.org/1999/xlink">Normalized F&#8211;Number</title>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
While many modern cameras can change the diameter
of their pinhole, and thus their f&#8211;number, quite
smoothly and gradually, such was not always the case.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
To allow for different f&#8211;numbers, cameras typically
contained a metal plate with several holes of
different sizes drilled to them.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Their sizes were chosen according to the above
formula in such a way that the resultant f&#8211;number
was one of standard f&#8211;numbers used on all cameras
everywhere. For example, a very old Kodak Duaflex IV
camera in my possession has three such holes for
f&#8211;numbers 8, 11, and 16.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
A more recently made camera may offer f&#8211;numbers of
2.8, 4, 5.6, 8, 11,
16, 22, and 32 (as well as others).
These numbers were not chosen arbitrarily: They all are
powers of the square root of 2, though they may
be rounded somewhat.
</para>

</sect3>

<sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-f-stop">
<title xmlns:xlink="http://www.w3.org/1999/xlink">The F&#8211;Stop</title>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
A typical camera is designed in such a way that setting
any of the normalized f&#8211;numbers changes the feel of the
dial. It will naturally <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">stop</emphasis> in that
position. Because of that, these positions of the dial
are called f&#8211;stops.</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Since the f&#8211;numbers at each stop are powers of the
square root of 2, moving the dial by 1
stop will double the amount of light required for
proper exposure. Moving it by 2 stops will
quadruple the required exposure. Moving the dial by
3 stops will require the increase in exposure
8 times, etc.
</para>

</sect3>

</sect2>

<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-pinhole-software">
<title xmlns:xlink="http://www.w3.org/1999/xlink">Designing the Pinhole Software</title>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
We are now ready to decide what exactly we want our
pinhole software to do.
</para>

<sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="xpinhole-processing-input">
<title xmlns:xlink="http://www.w3.org/1999/xlink">Processing Program Input</title>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
Since its main purpose is to help us design a working
pinhole camera, we will use the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">focal
length</emphasis> as the input to the program. This is something
we can determine without software: Proper focal length
is determined by the size of the film and by the need
to shoot "regular" pictures, wide angle pictures, or
telephoto pictures.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Most of the programs we have written so far worked with
individual characters, or bytes, as their input: The
<application xmlns:xlink="http://www.w3.org/1999/xlink">hex</application> program converted individual bytes
into a hexadecimal number, the <application xmlns:xlink="http://www.w3.org/1999/xlink">csv</application>
program either let a character through, or deleted it,
or changed it to a different character, etc.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
One program, <application xmlns:xlink="http://www.w3.org/1999/xlink">ftuc</application> used the state machine
to consider at most two input bytes at a time.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
But our <application xmlns:xlink="http://www.w3.org/1999/xlink">pinhole</application> program cannot just
work with individual characters, it has to deal with
larger syntactic units.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
For example, if we want the program to calculate the
pinhole diameter (and other values we will discuss
later) at the focal lengths of <constant xmlns:xlink="http://www.w3.org/1999/xlink">100 mm</constant>,
<constant xmlns:xlink="http://www.w3.org/1999/xlink">150 mm</constant>, and <constant xmlns:xlink="http://www.w3.org/1999/xlink">210 mm</constant>, we may want
to enter something like this:</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink"><userinput xmlns:xlink="http://www.w3.org/1999/xlink">100, 150, 210</userinput></screen>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
Our program needs to consider more than a single byte of
input at a time. When it sees the first <constant xmlns:xlink="http://www.w3.org/1999/xlink">1</constant>,
it must understand it is seeing the first digit of a
decimal number. When it sees the <constant xmlns:xlink="http://www.w3.org/1999/xlink">0</constant> and
the other <constant xmlns:xlink="http://www.w3.org/1999/xlink">0</constant>, it must know it is seeing
more digits of the same number.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
When it encounters the first comma, it must know it is
no longer receiving the digits of the first number.
It must be able to convert the digits of the first number
into the value of <constant xmlns:xlink="http://www.w3.org/1999/xlink">100</constant>. And the digits of the
second number into the value of <constant xmlns:xlink="http://www.w3.org/1999/xlink">150</constant>. And,
of course, the digits of the third number into the
numeric value of <constant xmlns:xlink="http://www.w3.org/1999/xlink">210</constant>.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We need to decide what delimiters to accept: Do the
input numbers have to be separated by a comma? If so,
how do we treat two numbers separated by something else?
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Personally, I like to keep it simple. Something either
is a number, so I process it. Or it is not a number,
so I discard it. I do not like the computer complaining
about me typing in an extra character when it is
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">obvious</emphasis> that it is an extra character. Duh!
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Plus, it allows me to break up the monotony of computing
and type in a query instead of just a number:
</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink"><userinput xmlns:xlink="http://www.w3.org/1999/xlink">What is the best pinhole diameter for the focal length of 150?</userinput></screen>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
There is no reason for the computer to spit out
a number of complaints:
</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink">Syntax error: What
Syntax error: is
Syntax error: the
Syntax error: best</screen>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
Et cetera, et cetera, et cetera.</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Secondly, I like the <constant xmlns:xlink="http://www.w3.org/1999/xlink">#</constant> character to denote
the start of a comment which extends to the end of the
line. This does not take too much effort to code, and
lets me treat input files for my software as executable
scripts.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
In our case, we also need to decide what units the
input should come in: We choose <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">millimeters</emphasis>
because that is how most photographers measure
the focus length.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Finally, we need to decide whether to allow the use
of the decimal point (in which case we must also
consider the fact that much of the world uses a
decimal <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">comma</emphasis>).</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
In our case allowing for the decimal point/comma
would offer a false sense of precision: There is
little if any noticeable difference between the
focus lengths of <constant xmlns:xlink="http://www.w3.org/1999/xlink">50</constant> and <constant xmlns:xlink="http://www.w3.org/1999/xlink">51</constant>,
so allowing the user to input something like
<constant xmlns:xlink="http://www.w3.org/1999/xlink">50.5</constant> is not a good idea. This is
my opinion, mind you, but I am the one writing
this program. You can make other choices in yours,
of course.
</para>

</sect3>

<sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-pinhole-options">
<title xmlns:xlink="http://www.w3.org/1999/xlink">Offering Options</title>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
The most important thing we need to know when building
a pinhole camera is the diameter of the pinhole. Since
we want to shoot sharp images, we will use the above
formula to calculate the pinhole diameter from focal length.
As experts are offering several different values for the
<constant xmlns:xlink="http://www.w3.org/1999/xlink">PC</constant> constant, we will need to have the choice.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
It is traditional in <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> programming to have two main ways
of choosing program parameters, plus to have a default for
the time the user does not make a choice.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Why have two ways of choosing?</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
One is to allow a (relatively) <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">permanent</emphasis>
choice that applies automatically each time the
software is run without us having to tell it over and
over what we want it to do.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The permanent choices may be stored in a configuration
file, typically found in the user's home directory.
The file usually has the same name as the application
but is started with a dot. Often <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">"rc"</emphasis>
is added to the file name. So, ours could be
<filename xmlns:xlink="http://www.w3.org/1999/xlink">~/.pinhole</filename> or <filename xmlns:xlink="http://www.w3.org/1999/xlink">~/.pinholerc</filename>.
(The <filename xmlns:xlink="http://www.w3.org/1999/xlink">~/</filename> means current user's
home directory.)
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The configuration file is used mostly by programs
that have many configurable parameters. Those
that have only one (or a few) often use a different
method: They expect to find the parameter in an
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">environment variable</emphasis>. In our case,
we might look at an environment variable named
<varname xmlns:xlink="http://www.w3.org/1999/xlink">PINHOLE</varname>.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Usually, a program uses one or the other of the
above methods. Otherwise, if a configuration
file said one thing, but an environment variable
another, the program might get confused (or just
too complicated).
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Because we only need to choose <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">one</emphasis>
such parameter, we will go with the second method
and search the environment for a variable named
<varname xmlns:xlink="http://www.w3.org/1999/xlink">PINHOLE</varname>.</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The other way allows us to make <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">ad hoc</emphasis>
decisions: <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">"Though I usually want
you to use 0.039, this time I want 0.03872."</emphasis>
In other words, it allows us to <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">override</emphasis>
the permanent choice.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
This type of choice is usually done with command
line parameters.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Finally, a program <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">always</emphasis> needs a
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">default</emphasis>. The user may not make
any choices. Perhaps he does not know what
to choose. Perhaps he is "just browsing."
Preferably, the default will be the value
most users would choose anyway. That way
they do not need to choose. Or, rather, they
can choose the default without an additional
effort.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Given this system, the program may find conflicting
options, and handle them this way:
</para>

<procedure xmlns:xlink="http://www.w3.org/1999/xlink"><step xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">
If it finds an <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">ad hoc</emphasis> choice
(e.g., command line parameter), it should
accept that choice. It must ignore any permanent
choice and any default.
</para>
</step>
<step xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">Otherwise</emphasis>, if it finds
a permanent option (e.g., an environment
variable), it should accept it, and ignore
the default.</para>
</step>
<step xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">Otherwise</emphasis>, it should use
the default.
</para>
</step>
</procedure>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
We also need to decide what <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">format</emphasis>
our <constant xmlns:xlink="http://www.w3.org/1999/xlink">PC</constant> option should have.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
At first site, it seems obvious to use the
<varname xmlns:xlink="http://www.w3.org/1999/xlink">PINHOLE=0.04</varname> format for the
environment variable, and <parameter xmlns:xlink="http://www.w3.org/1999/xlink">-p0.04</parameter>
for the command line.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Allowing that is actually a security risk.
The <constant xmlns:xlink="http://www.w3.org/1999/xlink">PC</constant> constant is a very small
number. Naturally, we will test our software
using various small values of <constant xmlns:xlink="http://www.w3.org/1999/xlink">PC</constant>.
But what will happen if someone runs the program
choosing a huge value?
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
It may crash the program because we have not
designed it to handle huge numbers.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Or, we may spend more time on the program so
it can handle huge numbers. We might do that
if we were writing commercial software for
computer illiterate audience.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Or, we might say, <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">"Tough!
The user should know better.""</emphasis>
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Or, we just may make it impossible for the user
to enter a huge number. This is the approach we
will take: We will use an <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">implied 0.</emphasis>
prefix.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
In other words, if the user wants <constant xmlns:xlink="http://www.w3.org/1999/xlink">0.04</constant>,
we will expect him to type <parameter xmlns:xlink="http://www.w3.org/1999/xlink">-p04</parameter>,
or set <varname xmlns:xlink="http://www.w3.org/1999/xlink">PINHOLE=04</varname> in his environment.
So, if he says <parameter xmlns:xlink="http://www.w3.org/1999/xlink">-p9999999</parameter>, we will
interpret it as <constant xmlns:xlink="http://www.w3.org/1999/xlink">0.9999999</constant>&#8212;still
ridiculous but at least safer.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Secondly, many users will just want to go with either
Bender's constant or Connors' constant.
To make it easier on them, we will interpret
<parameter xmlns:xlink="http://www.w3.org/1999/xlink">-b</parameter> as identical to <parameter xmlns:xlink="http://www.w3.org/1999/xlink">-p04</parameter>,
and <parameter xmlns:xlink="http://www.w3.org/1999/xlink">-c</parameter> as identical to <parameter xmlns:xlink="http://www.w3.org/1999/xlink">-p037</parameter>.
</para>

</sect3>

<sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-pinhole-output">
<title xmlns:xlink="http://www.w3.org/1999/xlink">The Output</title>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
We need to decide what we want our software to
send to the output, and in what format.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Since our input allows for an unspecified number
of focal length entries, it makes sense to use
a traditional database&#8211;style output of showing
the result of the calculation for each
focal length on a separate line, while
separating all values on one line by a
<constant xmlns:xlink="http://www.w3.org/1999/xlink">tab</constant> character.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Optionally, we should also allow the user
to specify the use of the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">CSV</acronym>
format we have studied earlier. In this case,
we will print out a line of comma&#8211;separated
names describing each field of every line,
then show our results as before, but substituting
a <constant xmlns:xlink="http://www.w3.org/1999/xlink">comma</constant> for the <constant xmlns:xlink="http://www.w3.org/1999/xlink">tab</constant>.</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We need a command line option for the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">CSV</acronym>
format. We cannot use <parameter xmlns:xlink="http://www.w3.org/1999/xlink">-c</parameter> because
that already means <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">use Connors' constant</emphasis>.
For some strange reason, many web sites refer to
<acronym xmlns:xlink="http://www.w3.org/1999/xlink">CSV</acronym> files as <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">"Excel
spreadsheet"</emphasis> (though the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">CSV</acronym>
format predates Excel). We will, therefore, use
the <parameter xmlns:xlink="http://www.w3.org/1999/xlink">-e</parameter> switch to inform our software
we want the output in the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">CSV</acronym> format.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We will start each line of the output with the
focal length. This may sound repetitious at first,
especially in the interactive mode: The user
types in the focal length, and we are repeating it.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
But the user can type several focal lengths on one
line. The input can also come in from a file or
from the output of another program. In that case
the user does not see the input at all.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
By the same token, the output can go to a file
which we will want to examine later, or it could
go to the printer, or become the input of another
program.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
So, it makes perfect sense to start each line with
the focal length as entered by the user.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
No, wait! Not as entered by the user. What if the user
types in something like this:</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink"><userinput xmlns:xlink="http://www.w3.org/1999/xlink">00000000150</userinput></screen>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
Clearly, we need to strip those leading zeros.</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
So, we might consider reading the user input as is,
converting it to binary inside the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">FPU</acronym>,
and printing it out from there.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
But...</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
What if the user types something like this:
</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink"><userinput xmlns:xlink="http://www.w3.org/1999/xlink">17459765723452353453534535353530530534563507309676764423</userinput></screen>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
Ha! The packed decimal <acronym xmlns:xlink="http://www.w3.org/1999/xlink">FPU</acronym> format
lets us input 18&#8211;digit numbers. But the
user has entered more than 18 digits. How
do we handle that?
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Well, we <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">could</emphasis> modify our code to read
the first 18 digits, enter it to the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">FPU</acronym>,
then read more, multiply what we already have on the
<acronym xmlns:xlink="http://www.w3.org/1999/xlink">TOS</acronym> by 10 raised to the number
of additional digits, then <function xmlns:xlink="http://www.w3.org/1999/xlink">add</function> to it.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Yes, we could do that. But in <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">this</emphasis>
program it would be ridiculous (in a different one it may be just the thing to do): Even the circumference of the Earth expressed in
millimeters only takes 11 digits. Clearly,
we cannot build a camera that large (not yet,
anyway).
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
So, if the user enters such a huge number, he is
either bored, or testing us, or trying to break
into the system, or playing games&#8212;doing
anything but designing a pinhole camera.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
What will we do?</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We will slap him in the face, in a manner of speaking:</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink">17459765723452353453534535353530530534563507309676764423	???	???	???	???	???</screen>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
To achieve that, we will simply ignore any leading zeros.
Once we find a non&#8211;zero digit, we will initialize a
counter to <constant xmlns:xlink="http://www.w3.org/1999/xlink">0</constant> and start taking three steps:
</para>

<procedure xmlns:xlink="http://www.w3.org/1999/xlink">
<step xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">
Send the digit to the output.
</para>
</step>
<step xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">
Append the digit to a buffer we will use later to
produce the packed decimal we can send to the
<acronym xmlns:xlink="http://www.w3.org/1999/xlink">FPU</acronym>.
</para>
</step>
<step xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">
Increase the counter.
</para>
</step>
</procedure>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
Now, while we are taking these three steps,
we also need to watch out for one of two
conditions:</para>

<itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
If the counter grows above 18,
we stop appending to the buffer. We
continue reading the digits and sending
them to the output.
</para>
</listitem>

<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
If, or rather <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">when</emphasis>,
the next input character is not
a digit, we are done inputting
for now.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Incidentally, we can simply
discard the non&#8211;digit, unless it
is a <constant xmlns:xlink="http://www.w3.org/1999/xlink">#</constant>, which we must
return to the input stream. It
starts a comment, so we must see it
after we are done producing output
and start looking for more input.
</para>
</listitem>

</itemizedlist>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
That still leaves one possibility
uncovered: If all the user enters
is a zero (or several zeros), we
will never find a non&#8211;zero to
display.</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We can determine this has happened
whenever our counter stays at <constant xmlns:xlink="http://www.w3.org/1999/xlink">0</constant>.
In that case we need to send <constant xmlns:xlink="http://www.w3.org/1999/xlink">0</constant>
to the output, and perform another
"slap in the face":
</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink">0	???	???	???	???	???</screen>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
Once we have displayed the focal
length and determined it is valid
(greater than <constant xmlns:xlink="http://www.w3.org/1999/xlink">0</constant>
but not exceeding 18 digits),
we can calculate the pinhole diameter.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
It is not by coincidence that <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">pinhole</emphasis>
contains the word <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">pin</emphasis>. Indeed,
many a pinhole literally is a <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">pin
hole</emphasis>, a hole carefully punched with the
tip of a pin.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
That is because a typical pinhole is very
small. Our formula gets the result in
millimeters. We will multiply it by <constant xmlns:xlink="http://www.w3.org/1999/xlink">1000</constant>,
so we can output the result in <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">microns</emphasis>.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
At this point we have yet another trap to face:
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">Too much precision.</emphasis>
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Yes, the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">FPU</acronym> was designed
for high precision mathematics. But we
are not dealing with high precision
mathematics. We are dealing with physics
(optics, specifically).
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Suppose we want to convert a truck into
a pinhole camera (we would not be the
first ones to do that!). Suppose its box is
<constant xmlns:xlink="http://www.w3.org/1999/xlink">12</constant>
meters long, so we have the focal length
of <constant xmlns:xlink="http://www.w3.org/1999/xlink">12000</constant>. Well, using Bender's constant, it gives us square root of
<constant xmlns:xlink="http://www.w3.org/1999/xlink">12000</constant> multiplied by <constant xmlns:xlink="http://www.w3.org/1999/xlink">0.04</constant>,
which is <constant xmlns:xlink="http://www.w3.org/1999/xlink">4.381780460</constant> millimeters,
or <constant xmlns:xlink="http://www.w3.org/1999/xlink">4381.780460</constant> microns.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Put either way, the result is absurdly precise.
Our truck is not <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">exactly</emphasis> <constant xmlns:xlink="http://www.w3.org/1999/xlink">12000</constant>
millimeters long. We did not measure its length
with such a precision, so stating we need a pinhole
with the diameter of <constant xmlns:xlink="http://www.w3.org/1999/xlink">4.381780460</constant>
millimeters is, well, deceiving. <constant xmlns:xlink="http://www.w3.org/1999/xlink">4.4</constant>
millimeters would do just fine.
</para>

<note xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
I "only" used ten digits in the above example.
Imagine the absurdity of going for all 18!
</para>
</note>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We need to limit the number of significant
digits of our result. One way of doing it
is by using an integer representing microns.
So, our truck would need a pinhole with the diameter
of <constant xmlns:xlink="http://www.w3.org/1999/xlink">4382</constant> microns. Looking at that number, we still decide that <constant xmlns:xlink="http://www.w3.org/1999/xlink">4400</constant> microns,
or <constant xmlns:xlink="http://www.w3.org/1999/xlink">4.4</constant> millimeters is close enough.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Additionally, we can decide that no matter how
big a result we get, we only want to display four
significant digits (or any other number
of them, of course). Alas, the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">FPU</acronym>
does not offer rounding to a specific number
of digits (after all, it does not view the
numbers as decimal but as binary).
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We, therefore, must devise an algorithm to reduce
the number of significant digits.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Here is mine (I think it is awkward&#8212;if
you know a better one, <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">please</emphasis>, let me know):</para>

<procedure xmlns:xlink="http://www.w3.org/1999/xlink">
<step xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">
Initialize a counter to <constant xmlns:xlink="http://www.w3.org/1999/xlink">0</constant>.
</para>
</step>
<step xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">
While the number is greater than or equal to
<constant xmlns:xlink="http://www.w3.org/1999/xlink">10000</constant>, divide it by
<constant xmlns:xlink="http://www.w3.org/1999/xlink">10</constant> and increase the counter.
</para>
</step>
<step xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">
Output the result.</para>
</step>
<step xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">
While the counter is greater than <constant xmlns:xlink="http://www.w3.org/1999/xlink">0</constant>,
output <constant xmlns:xlink="http://www.w3.org/1999/xlink">0</constant> and decrease the counter.
</para>
</step>
</procedure>
<note xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
The <constant xmlns:xlink="http://www.w3.org/1999/xlink">10000</constant> is only good if you want
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">four</emphasis> significant digits. For any other
number of significant digits, replace
<constant xmlns:xlink="http://www.w3.org/1999/xlink">10000</constant> with <constant xmlns:xlink="http://www.w3.org/1999/xlink">10</constant>
raised to the number of significant digits.
</para>
</note>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We will, then, output the pinhole diameter
in microns, rounded off to four significant
digits.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
At this point, we know the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">focal
length</emphasis> and the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">pinhole
diameter</emphasis>. That means we have enough
information to also calculate the
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">f&#8211;number</emphasis>.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We will display the f&#8211;number, rounded to
four significant digits. Chances are the
f&#8211;number will tell us very little. To make
it more meaningful, we can find the nearest
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">normalized f&#8211;number</emphasis>, i.e.,
the nearest power of the square root
of 2.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We do that by multiplying the actual f&#8211;number
by itself, which, of course, will give us
its <function xmlns:xlink="http://www.w3.org/1999/xlink">square</function>. We will then calculate
its base&#8211;2 logarithm, which is much
easier to do than calculating the
base&#8211;square&#8211;root&#8211;of&#8211;2 logarithm!
We will round the result to the nearest integer.
Next, we will raise 2 to the result. Actually,
the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">FPU</acronym> gives us a good shortcut
to do that: We can use the <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">fscale</function>
op code to "scale" 1, which is
analogous to <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">shift</function>ing an
integer left. Finally, we calculate the square
root of it all, and we have the nearest
normalized f&#8211;number.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
If all that sounds overwhelming&#8212;or too much
work, perhaps&#8212;it may become much clearer
if you see the code. It takes 9 op
codes altogether:</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
	fmul	st0, st0
	fld1
	fld	st1
	fyl2x
	frndint
	fld1
	fscale
	fsqrt
	fstp	st1
</programlisting>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
The first line, <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">fmul st0, st0</function>, squares
the contents of the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">TOS</acronym>
(top of the stack, same as <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st</varname>,
called <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st0</varname> by <application xmlns:xlink="http://www.w3.org/1999/xlink">nasm</application>).
The <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">fld1</function> pushes <constant xmlns:xlink="http://www.w3.org/1999/xlink">1</constant>
on the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">TOS</acronym>.</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The next line, <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">fld st1</function>, pushes
the square back to the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">TOS</acronym>.
At this point the square is both in <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st</varname>
and <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st(2)</varname> (it will become
clear why we leave a second copy on the stack
in a moment). <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st(1)</varname> contains
<constant xmlns:xlink="http://www.w3.org/1999/xlink">1</constant>.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Next, <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">fyl2x</function> calculates base&#8211;2
logarithm of <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st</varname> multiplied by
<varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st(1)</varname>. That is why we placed <constant xmlns:xlink="http://www.w3.org/1999/xlink">1</constant> on <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st(1)</varname> before.</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
At this point, <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st</varname> contains
the logarithm we have just calculated,
<varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st(1)</varname> contains the square
of the actual f&#8211;number we saved for later.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
<function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">frndint</function> rounds the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">TOS</acronym>
to the nearest integer. <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">fld1</function> pushes
a <constant xmlns:xlink="http://www.w3.org/1999/xlink">1</constant>. <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">fscale</function> shifts the
<constant xmlns:xlink="http://www.w3.org/1999/xlink">1</constant> we have on the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">TOS</acronym>
by the value in <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st(1)</varname>,
effectively raising 2 to <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st(1)</varname>.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Finally, <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">fsqrt</function> calculates
the square root of the result, i.e.,
the nearest normalized f&#8211;number.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We now have the nearest normalized
f&#8211;number on the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">TOS</acronym>,
the base&#8211;2 logarithm rounded to the
nearest integer in <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st(1)</varname>,
and the square of the actual f&#8211;number
in <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st(2)</varname>. We are saving
the value in <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st(2)</varname> for later.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
But we do not need the contents of
<varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st(1)</varname> anymore. The last
line, <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">fstp st1</function>, places the
contents of <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st</varname> to
<varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st(1)</varname>, and pops. As a
result, what was <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st(1)</varname>
is now <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st</varname>, what was <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st(2)</varname>
is now <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st(1)</varname>, etc.
The new <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st</varname> contains the
normalized f&#8211;number. The new
<varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st(1)</varname> contains the square
of the actual f&#8211;number we have
stored there for posterity.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
At this point, we are ready to output
the normalized f&#8211;number. Because it is
normalized, we will not round it off to
four significant digits, but will
send it out in its full precision.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The normalized f-number is useful as long
as it is reasonably small and can be found
on our light meter. Otherwise we need a
different method of determining proper
exposure.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Earlier we have figured out the formula
of calculating proper exposure at an arbitrary
f&#8211;number from that measured at a different
f&#8211;number.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Every light meter I have ever seen can determine
proper exposure at f5.6. We will, therefore,
calculate an <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">"f5.6 multiplier,"</emphasis>
i.e., by how much we need to multiply the exposure measured
at f5.6 to determine the proper exposure
for our pinhole camera.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
From the above formula we know this factor can be
calculated by dividing our f&#8211;number (the
actual one, not the normalized one) by
<constant xmlns:xlink="http://www.w3.org/1999/xlink">5.6</constant>, and squaring the result.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Mathematically, dividing the square of our
f&#8211;number by the square of <constant xmlns:xlink="http://www.w3.org/1999/xlink">5.6</constant>
will give us the same result.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Computationally, we do not want to square
two numbers when we can only square one.
So, the first solution seems better at first.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
But...</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
<constant xmlns:xlink="http://www.w3.org/1999/xlink">5.6</constant> is a <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">constant</emphasis>.
We do not have to have our <acronym xmlns:xlink="http://www.w3.org/1999/xlink">FPU</acronym>
waste precious cycles. We can just tell it
to divide the square of the f&#8211;number by
whatever <constant xmlns:xlink="http://www.w3.org/1999/xlink">5.6²</constant> equals to.
Or we can divide the f&#8211;number by <constant xmlns:xlink="http://www.w3.org/1999/xlink">5.6</constant>,
and then square the result. The two ways
now seem equal.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
But, they are not!</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Having studied the principles of photography
above, we remember that the <constant xmlns:xlink="http://www.w3.org/1999/xlink">5.6</constant>
is actually square root of 2 raised to
the fifth power. An <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">irrational</emphasis>
number. The square of this number is
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">exactly</emphasis> <constant xmlns:xlink="http://www.w3.org/1999/xlink">32</constant>.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Not only is <constant xmlns:xlink="http://www.w3.org/1999/xlink">32</constant> an integer,
it is a power of 2. We do not need
to divide the square of the f&#8211;number by
<constant xmlns:xlink="http://www.w3.org/1999/xlink">32</constant>. We only need to use
<function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">fscale</function> to shift it right by
five positions. In the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">FPU</acronym>
lingo it means we will <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">fscale</function> it
with <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st(1)</varname> equal to
<constant xmlns:xlink="http://www.w3.org/1999/xlink">-5</constant>. That is <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">much
faster</emphasis> than a division.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
So, now it has become clear why we have
saved the square of the f&#8211;number on the
top of the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">FPU</acronym> stack.
The calculation of the f5.6 multiplier
is the easiest calculation of this
entire program! We will output it rounded
to four significant digits.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
There is one more useful number we can calculate:
The number of stops our f&#8211;number is from f5.6.
This may help us if our f&#8211;number is just outside
the range of our light meter, but we have
a shutter which lets us set various speeds,
and this shutter uses stops.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Say, our f&#8211;number is 5 stops from
f5.6, and the light meter says
we should use 1/1000 sec.
Then we can set our shutter speed to 1/1000
first, then move the dial by 5 stops.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
This calculation is quite easy as well. All
we have to do is to calculate the base-2
logarithm of the f5.6 multiplier
we had just calculated (though we need its
value from before we rounded it off). We then
output the result rounded to the nearest integer.
We do not need to worry about having more than
four significant digits in this one: The result
is most likely to have only one or two digits
anyway.</para>

</sect3>

</sect2>

<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-fpu-optimizations">
<title xmlns:xlink="http://www.w3.org/1999/xlink">FPU Optimizations</title>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
In assembly language we can optimize the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">FPU</acronym>
code in ways impossible in high languages,
including C.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Whenever a C function needs to calculate
a floating&#8211;point value, it loads all necessary
variables and constants into <acronym xmlns:xlink="http://www.w3.org/1999/xlink">FPU</acronym>
registers. It then does whatever calculation is
required to get the correct result. Good C
compilers can optimize that part of the code really
well.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
It "returns" the value by leaving
the result on the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">TOS</acronym>.
However, before it returns, it cleans up.
Any variables and constants it used in its
calculation are now gone from the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">FPU</acronym>.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
It cannot do what we just did above: We calculated
the square of the f&#8211;number and kept it on the
stack for later use by another function.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">knew</emphasis> we would need that value
later on. We also knew we had enough room on the
stack (which only has room for 8 numbers)
to store it there.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
A C compiler has no way of knowing
that a value it has on the stack will be
required again in the very near future.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Of course, the C programmer may know it.
But the only recourse he has is to store the
value in a memory variable.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
That means, for one, the value will be changed
from the 80-bit precision used internally
by the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">FPU</acronym> to a C <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">double</emphasis>
(64 bits) or even <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">single</emphasis> (32
bits).
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
That also means that the value must be moved
from the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">TOS</acronym> into the memory,
and then back again. Alas, of all <acronym xmlns:xlink="http://www.w3.org/1999/xlink">FPU</acronym>
operations, the ones that access the computer
memory are the slowest.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
So, whenever programming the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">FPU</acronym>
in assembly language, look for the ways of keeping
intermediate results on the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">FPU</acronym>
stack.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We can take that idea even further! In our
program we are using a <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">constant</emphasis>
(the one we named <constant xmlns:xlink="http://www.w3.org/1999/xlink">PC</constant>).
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
It does not matter how many pinhole diameters
we are calculating: 1, 10, 20,
1000, we are always using the same constant.
Therefore, we can optimize our program by keeping
the constant on the stack all the time.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Early on in our program, we are calculating the
value of the above constant. We need to divide
our input by <constant xmlns:xlink="http://www.w3.org/1999/xlink">10</constant> for every digit in the
constant.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
It is much faster to multiply than to divide.
So, at the start of our program, we divide <constant xmlns:xlink="http://www.w3.org/1999/xlink">10</constant>
into <constant xmlns:xlink="http://www.w3.org/1999/xlink">1</constant> to obtain <constant xmlns:xlink="http://www.w3.org/1999/xlink">0.1</constant>, which we
then keep on the stack: Instead of dividing the
input by <constant xmlns:xlink="http://www.w3.org/1999/xlink">10</constant> for every digit,
we multiply it by <constant xmlns:xlink="http://www.w3.org/1999/xlink">0.1</constant>.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
By the way, we do not input <constant xmlns:xlink="http://www.w3.org/1999/xlink">0.1</constant> directly,
even though we could. We have a reason for that:
While <constant xmlns:xlink="http://www.w3.org/1999/xlink">0.1</constant> can be expressed with just one
decimal place, we do not know how many <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">binary</emphasis>
places it takes. We, therefore, let the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">FPU</acronym>
calculate its binary value to its own high precision.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We are using other constants: We multiply the pinhole
diameter by <constant xmlns:xlink="http://www.w3.org/1999/xlink">1000</constant> to convert it from
millimeters to microns. We compare numbers to
<constant xmlns:xlink="http://www.w3.org/1999/xlink">10000</constant> when we are rounding them off to
four significant digits. So, we keep both, <constant xmlns:xlink="http://www.w3.org/1999/xlink">1000</constant>
and <constant xmlns:xlink="http://www.w3.org/1999/xlink">10000</constant>, on the stack. And, of course,
we reuse the <constant xmlns:xlink="http://www.w3.org/1999/xlink">0.1</constant> when rounding off numbers
to four digits.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Last but not least, we keep <constant xmlns:xlink="http://www.w3.org/1999/xlink">-5</constant> on the stack.
We need it to scale the square of the f&#8211;number,
instead of dividing it by <constant xmlns:xlink="http://www.w3.org/1999/xlink">32</constant>. It is not
by coincidence we load this constant last. That makes
it the top of the stack when only the constants
are on it. So, when the square of the f&#8211;number is
being scaled, the <constant xmlns:xlink="http://www.w3.org/1999/xlink">-5</constant> is at <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">st(1)</varname>,
precisely where <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">fscale</function> expects it to be.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
It is common to create certain constants from
scratch instead of loading them from the memory.
That is what we are doing with <constant xmlns:xlink="http://www.w3.org/1999/xlink">-5</constant>:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
	fld1			; TOS =  1
	fadd	st0, st0	; TOS =  2
	fadd	st0, st0	; TOS =  4
	fld1			; TOS =  1
	faddp	st1, st0	; TOS =  5
	fchs			; TOS = -5
</programlisting>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
We can generalize all these optimizations into one rule:
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">Keep repeat values on the stack!</emphasis>
</para>

<tip xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">PostScript</trademark></emphasis> is a stack&#8211;oriented
programming language. There are many more books
available about <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">PostScript</trademark> than about the
<acronym xmlns:xlink="http://www.w3.org/1999/xlink">FPU</acronym> assembly language: Mastering
<trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">PostScript</trademark> will help you master the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">FPU</acronym>.
</para>
</tip>

</sect2>

<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-pinhole-the-code">
<title xmlns:xlink="http://www.w3.org/1999/xlink"><application xmlns:xlink="http://www.w3.org/1999/xlink">pinhole</application>&#8212;The Code</title>
<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
;;;;;;; pinhole.asm ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Find various parameters of a pinhole camera construction and use
;
; Started:	 9-Jun-2001
; Updated:	10-Jun-2001
;
; Copyright (c) 2001 G. Adam Stanislav
; All rights reserved.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

%include	'system.inc'

%define	BUFSIZE	2048

section	.data
align 4
ten	dd	10
thousand	dd	1000
tthou	dd	10000
fd.in	dd	stdin
fd.out	dd	stdout
envar	db	'PINHOLE='	; Exactly 8 bytes, or 2 dwords long
pinhole	db	'04,', 		; Bender's constant (0.04)
connors	db	'037', 0Ah	; Connors' constant
usg	db	'Usage: pinhole [-b] [-c] [-e] [-p &lt;value&gt;] [-o &lt;outfile&gt;] [-i &lt;infile&gt;]', 0Ah
usglen	equ	$-usg
iemsg	db	"pinhole: Can't open input file", 0Ah
iemlen	equ	$-iemsg
oemsg	db	"pinhole: Can't create output file", 0Ah
oemlen	equ	$-oemsg
pinmsg	db	"pinhole: The PINHOLE constant must not be 0", 0Ah
pinlen	equ	$-pinmsg
toobig	db	"pinhole: The PINHOLE constant may not exceed 18 decimal places", 0Ah
biglen	equ	$-toobig
huhmsg	db	9, '???'
separ	db	9, '???'
sep2	db	9, '???'
sep3	db	9, '???'
sep4	db	9, '???', 0Ah
huhlen	equ	$-huhmsg
header	db	'focal length in millimeters,pinhole diameter in microns,'
	db	'F-number,normalized F-number,F-5.6 multiplier,stops '
	db	'from F-5.6', 0Ah
headlen	equ	$-header

section .bss
ibuffer	resb	BUFSIZE
obuffer	resb	BUFSIZE
dbuffer	resb	20		; decimal input buffer
bbuffer	resb	10		; BCD buffer

section	.text
align 4
huh:
	call	write
	push	dword huhlen
	push	dword huhmsg
	push	dword [fd.out]
	sys.write
	add	esp, byte 12
	ret

align 4
perr:
	push	dword pinlen
	push	dword pinmsg
	push	dword stderr
	sys.write
	push	dword 4		; return failure
	sys.exit

align 4
consttoobig:
	push	dword biglen
	push	dword toobig
	push	dword stderr
	sys.write
	push	dword 5		; return failure
	sys.exit

align 4
ierr:
	push	dword iemlen
	push	dword iemsg
	push	dword stderr
	sys.write
	push	dword 1		; return failure
	sys.exit

align 4
oerr:
	push	dword oemlen
	push	dword oemsg
	push	dword stderr
	sys.write
	push	dword 2
	sys.exit

align 4
usage:
	push	dword usglen
	push	dword usg
	push	dword stderr
	sys.write
	push	dword 3
	sys.exit

align 4
global	_start
_start:
	add	esp, byte 8	; discard argc and argv[0]
	sub	esi, esi

.arg:
	pop	ecx
	or	ecx, ecx
	je	near .getenv		; no more arguments

	; ECX contains the pointer to an argument
	cmp	byte [ecx], '-'
	jne	usage

	inc	ecx
	mov	ax, [ecx]
	inc	ecx

.o:
	cmp	al, 'o'
	jne	.i

	; Make sure we are not asked for the output file twice
	cmp	dword [fd.out], stdout
	jne	usage

	; Find the path to output file - it is either at [ECX+1],
	; i.e., -ofile --
	; or in the next argument,
	; i.e., -o file

	or	ah, ah
	jne	.openoutput
	pop	ecx
	jecxz	usage

.openoutput:
	push	dword 420	; file mode (644 octal)
	push	dword 0200h | 0400h | 01h
	; O_CREAT | O_TRUNC | O_WRONLY
	push	ecx
	sys.open
	jc	near oerr

	add	esp, byte 12
	mov	[fd.out], eax
	jmp	short .arg

.i:
	cmp	al, 'i'
	jne	.p

	; Make sure we are not asked twice
	cmp	dword [fd.in], stdin
	jne	near usage

	; Find the path to the input file
	or	ah, ah
	jne	.openinput
	pop	ecx
	or	ecx, ecx
	je near usage

.openinput:
	push	dword 0		; O_RDONLY
	push	ecx
	sys.open
	jc	near ierr		; open failed

	add	esp, byte 8
	mov	[fd.in], eax
	jmp	.arg

.p:
	cmp	al, 'p'
	jne	.c
	or	ah, ah
	jne	.pcheck

	pop	ecx
	or	ecx, ecx
	je	near usage

	mov	ah, [ecx]

.pcheck:
	cmp	ah, '0'
	jl	near usage
	cmp	ah, '9'
	ja	near usage
	mov	esi, ecx
	jmp	.arg

.c:
	cmp	al, 'c'
	jne	.b
	or	ah, ah
	jne	near usage
	mov	esi, connors
	jmp	.arg

.b:
	cmp	al, 'b'
	jne	.e
	or	ah, ah
	jne	near usage
	mov	esi, pinhole
	jmp	.arg

.e:
	cmp	al, 'e'
	jne	near usage
	or	ah, ah
	jne	near usage
	mov	al, ','
	mov	[huhmsg], al
	mov	[separ], al
	mov	[sep2], al
	mov	[sep3], al
	mov	[sep4], al
	jmp	.arg

align 4
.getenv:
	; If ESI = 0, we did not have a -p argument,
	; and need to check the environment for "PINHOLE="
	or	esi, esi
	jne	.init

	sub	ecx, ecx

.nextenv:
	pop	esi
	or	esi, esi
	je	.default	; no PINHOLE envar found

	; check if this envar starts with 'PINHOLE='
	mov	edi, envar
	mov	cl, 2		; 'PINHOLE=' is 2 dwords long
rep	cmpsd
	jne	.nextenv

	; Check if it is followed by a digit
	mov	al, [esi]
	cmp	al, '0'
	jl	.default
	cmp	al, '9'
	jbe	.init
	; fall through

align 4
.default:
	; We got here because we had no -p argument,
	; and did not find the PINHOLE envar.
	mov	esi, pinhole
	; fall through

align 4
.init:
	sub	eax, eax
	sub	ebx, ebx
	sub	ecx, ecx
	sub	edx, edx
	mov	edi, dbuffer+1
	mov	byte [dbuffer], '0'

	; Convert the pinhole constant to real
.constloop:
	lodsb
	cmp	al, '9'
	ja	.setconst
	cmp	al, '0'
	je	.processconst
	jb	.setconst

	inc	dl

.processconst:
	inc	cl
	cmp	cl, 18
	ja	near consttoobig
	stosb
	jmp	short .constloop

align 4
.setconst:
	or	dl, dl
	je	near perr

	finit
	fild	dword [tthou]

	fld1
	fild	dword [ten]
	fdivp	st1, st0

	fild	dword [thousand]
	mov	edi, obuffer

	mov	ebp, ecx
	call	bcdload

.constdiv:
	fmul	st0, st2
	loop	.constdiv

	fld1
	fadd	st0, st0
	fadd	st0, st0
	fld1
	faddp	st1, st0
	fchs

	; If we are creating a CSV file,
	; print header
	cmp	byte [separ], ','
	jne	.bigloop

	push	dword headlen
	push	dword header
	push	dword [fd.out]
	sys.write

.bigloop:
	call	getchar
	jc	near done

	; Skip to the end of the line if you got '#'
	cmp	al, '#'
	jne	.num
	call	skiptoeol
	jmp	short .bigloop

.num:
	; See if you got a number
	cmp	al, '0'
	jl	.bigloop
	cmp	al, '9'
	ja	.bigloop

	; Yes, we have a number
	sub	ebp, ebp
	sub	edx, edx

.number:
	cmp	al, '0'
	je	.number0
	mov	dl, 1

.number0:
	or	dl, dl		; Skip leading 0's
	je	.nextnumber
	push	eax
	call	putchar
	pop	eax
	inc	ebp
	cmp	ebp, 19
	jae	.nextnumber
	mov	[dbuffer+ebp], al

.nextnumber:
	call	getchar
	jc	.work
	cmp	al, '#'
	je	.ungetc
	cmp	al, '0'
	jl	.work
	cmp	al, '9'
	ja	.work
	jmp	short .number

.ungetc:
	dec	esi
	inc	ebx

.work:
	; Now, do all the work
	or	dl, dl
	je	near .work0

	cmp	ebp, 19
	jae	near .toobig

	call	bcdload

	; Calculate pinhole diameter

	fld	st0	; save it
	fsqrt
	fmul	st0, st3
	fld	st0
	fmul	st5
	sub	ebp, ebp

	; Round off to 4 significant digits
.diameter:
	fcom	st0, st7
	fstsw	ax
	sahf
	jb	.printdiameter
	fmul	st0, st6
	inc	ebp
	jmp	short .diameter

.printdiameter:
	call	printnumber	; pinhole diameter

	; Calculate F-number

	fdivp	st1, st0
	fld	st0

	sub	ebp, ebp

.fnumber:
	fcom	st0, st6
	fstsw	ax
	sahf
	jb	.printfnumber
	fmul	st0, st5
	inc	ebp
	jmp	short .fnumber

.printfnumber:
	call	printnumber	; F number

	; Calculate normalized F-number
	fmul	st0, st0
	fld1
	fld	st1
	fyl2x
	frndint
	fld1
	fscale
	fsqrt
	fstp	st1

	sub	ebp, ebp
	call	printnumber

	; Calculate time multiplier from F-5.6

	fscale
	fld	st0

	; Round off to 4 significant digits
.fmul:
	fcom	st0, st6
	fstsw	ax
	sahf

	jb	.printfmul
	inc	ebp
	fmul	st0, st5
	jmp	short .fmul

.printfmul:
	call	printnumber	; F multiplier

	; Calculate F-stops from 5.6

	fld1
	fxch	st1
	fyl2x

	sub	ebp, ebp
	call	printnumber

	mov	al, 0Ah
	call	putchar
	jmp	.bigloop

.work0:
	mov	al, '0'
	call	putchar

align 4
.toobig:
	call	huh
	jmp	.bigloop

align 4
done:
	call	write		; flush output buffer

	; close files
	push	dword [fd.in]
	sys.close

	push	dword [fd.out]
	sys.close

	finit

	; return success
	push	dword 0
	sys.exit

align 4
skiptoeol:
	; Keep reading until you come to cr, lf, or eof
	call	getchar
	jc	done
	cmp	al, 0Ah
	jne	.cr
	ret

.cr:
	cmp	al, 0Dh
	jne	skiptoeol
	ret

align 4
getchar:
	or	ebx, ebx
	jne	.fetch

	call	read

.fetch:
	lodsb
	dec	ebx
	clc
	ret

read:
	jecxz	.read
	call	write

.read:
	push	dword BUFSIZE
	mov	esi, ibuffer
	push	esi
	push	dword [fd.in]
	sys.read
	add	esp, byte 12
	mov	ebx, eax
	or	eax, eax
	je	.empty
	sub	eax, eax
	ret

align 4
.empty:
	add	esp, byte 4
	stc
	ret

align 4
putchar:
	stosb
	inc	ecx
	cmp	ecx, BUFSIZE
	je	write
	ret

align 4
write:
	jecxz	.ret	; nothing to write
	sub	edi, ecx	; start of buffer
	push	ecx
	push	edi
	push	dword [fd.out]
	sys.write
	add	esp, byte 12
	sub	eax, eax
	sub	ecx, ecx	; buffer is empty now
.ret:
	ret

align 4
bcdload:
	; EBP contains the number of chars in dbuffer
	push	ecx
	push	esi
	push	edi

	lea	ecx, [ebp+1]
	lea	esi, [dbuffer+ebp-1]
	shr	ecx, 1

	std

	mov	edi, bbuffer
	sub	eax, eax
	mov	[edi], eax
	mov	[edi+4], eax
	mov	[edi+2], ax

.loop:
	lodsw
	sub	ax, 3030h
	shl	al, 4
	or	al, ah
	mov	[edi], al
	inc	edi
	loop	.loop

	fbld	[bbuffer]

	cld
	pop	edi
	pop	esi
	pop	ecx
	sub	eax, eax
	ret

align 4
printnumber:
	push	ebp
	mov	al, [separ]
	call	putchar

	; Print the integer at the TOS
	mov	ebp, bbuffer+9
	fbstp	[bbuffer]

	; Check the sign
	mov	al, [ebp]
	dec	ebp
	or	al, al
	jns	.leading

	; We got a negative number (should never happen)
	mov	al, '-'
	call	putchar

.leading:
	; Skip leading zeros
	mov	al, [ebp]
	dec	ebp
	or	al, al
	jne	.first
	cmp	ebp, bbuffer
	jae	.leading

	; We are here because the result was 0.
	; Print '0' and return
	mov	al, '0'
	jmp	putchar

.first:
	; We have found the first non-zero.
	; But it is still packed
	test	al, 0F0h
	jz	.second
	push	eax
	shr	al, 4
	add	al, '0'
	call	putchar
	pop	eax
	and	al, 0Fh

.second:
	add	al, '0'
	call	putchar

.next:
	cmp	ebp, bbuffer
	jb	.done

	mov	al, [ebp]
	push	eax
	shr	al, 4
	add	al, '0'
	call	putchar
	pop	eax
	and	al, 0Fh
	add	al, '0'
	call	putchar

	dec	ebp
	jmp	short .next

.done:
	pop	ebp
	or	ebp, ebp
	je	.ret

.zeros:
	mov	al, '0'
	call	putchar
	dec	ebp
	jne	.zeros

.ret:
	ret
</programlisting>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
The code follows the same format as all the other
filters we have seen before, with one subtle
exception:
</para>

<blockquote xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
We are no longer assuming that the end of input
implies the end of things to do, something we
took for granted in the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">character&#8211;oriented</emphasis>
filters.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
This filter does not process characters. It
processes a <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">language</emphasis>
(albeit a very simple
one, consisting only of numbers).
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
When we have no more input, it can mean one
of two things:</para>

<itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink"><listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
We are done and can quit. This is the
same as before.
</para>
</listitem>

<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
The last character we have read was a digit.
We have stored it at the end of our
<acronym xmlns:xlink="http://www.w3.org/1999/xlink">ASCII</acronym>&#8211;to&#8211;float conversion
buffer. We now need to convert
the contents of that buffer into a
number and write the last line of our
output.
</para>
</listitem>

</itemizedlist>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
For that reason, we have modified our <function xmlns:xlink="http://www.w3.org/1999/xlink">getchar</function>
and our <function xmlns:xlink="http://www.w3.org/1999/xlink">read</function> routines to return with
the <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">carry flag</varname> <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">clear</emphasis> whenever we are
fetching another character from the input, or the
<varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">carry flag</varname> <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">set</emphasis> whenever there is no more
input.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Of course, we are still using assembly language magic
to do that! Take a good look at <function xmlns:xlink="http://www.w3.org/1999/xlink">getchar</function>.
It <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">always</emphasis> returns with the
<varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">carry flag</varname> <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">clear</emphasis>.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Yet, our main code relies on the <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">carry
flag</varname> to tell it when to quit&#8212;and it works.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The magic is in <function xmlns:xlink="http://www.w3.org/1999/xlink">read</function>. Whenever it
receives more input from the system, it just
returns to <function xmlns:xlink="http://www.w3.org/1999/xlink">getchar</function>, which
fetches a character from the input buffer,
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">clears</emphasis> the <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">carry flag</varname>
and returns.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
But when <function xmlns:xlink="http://www.w3.org/1999/xlink">read</function> receives no more
input from the system, it does <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">not</emphasis>
return to <function xmlns:xlink="http://www.w3.org/1999/xlink">getchar</function> at all.
Instead, the <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">add esp, byte 4</function>
op code adds <constant xmlns:xlink="http://www.w3.org/1999/xlink">4</constant> to <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">ESP</varname>,
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">sets</emphasis> the <varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">carry
flag</varname>, and returns.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
So, where does it return to? Whenever a
program uses the <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">call</function> op code,
the microprocessor <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">push</function>es the
return address, i.e., it stores it on
the top of the stack (not the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">FPU</acronym>
stack, the system stack, which is in the memory).
When a program uses the <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">ret</function>
op code, the microprocessor <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">pop</function>s
the return value from the stack, and jumps
to the address that was stored there.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
But since we added <constant xmlns:xlink="http://www.w3.org/1999/xlink">4</constant> to
<varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">ESP</varname> (which is the stack
pointer register), we have effectively
given the microprocessor a minor case
of <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">amnesia</emphasis>: It no longer
remembers it was <function xmlns:xlink="http://www.w3.org/1999/xlink">getchar</function>
that <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">call</function>ed <function xmlns:xlink="http://www.w3.org/1999/xlink">read</function>.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
And since <function xmlns:xlink="http://www.w3.org/1999/xlink">getchar</function> never
<function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">push</function>ed anything before
<function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">call</function>ing <function xmlns:xlink="http://www.w3.org/1999/xlink">read</function>,
the top of the stack now contains the
return address to whatever or whoever
<function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">call</function>ed <function xmlns:xlink="http://www.w3.org/1999/xlink">getchar</function>.
As far as that caller is concerned,
he <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">call</function>ed <function xmlns:xlink="http://www.w3.org/1999/xlink">getchar</function>,
which <function xmlns:xlink="http://www.w3.org/1999/xlink" role="opcode">ret</function>urned with the
<varname xmlns:xlink="http://www.w3.org/1999/xlink" role="register">carry flag</varname> set!
</para>

</blockquote>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
Other than that, the <function xmlns:xlink="http://www.w3.org/1999/xlink">bcdload</function>
routine is caught up in the middle of a
Lilliputian conflict between the Big&#8211;Endians
and the Little&#8211;Endians.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
It is converting the text representation
of a number into that number: The text
is stored in the big&#8211;endian order, but
the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">packed decimal</emphasis> is little&#8211;endian.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
To solve the conflict, we use the <function xmlns:xlink="http://www.w3.org/1999/xlink">std</function>
op code early on. We cancel it with <function xmlns:xlink="http://www.w3.org/1999/xlink">cld</function>
later on: It is quite important we do not
<function xmlns:xlink="http://www.w3.org/1999/xlink">call</function> anything that may depend on
the default setting of the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">direction
flag</emphasis> while <function xmlns:xlink="http://www.w3.org/1999/xlink">std</function> is active.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Everything else in this code should be quite
clear, providing you have read the entire chapter
that precedes it.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
It is a classical example of the adage that
programming requires a lot of thought and only
a little coding. Once we have thought through every
tiny detail, the code almost writes itself.
</para>

</sect2>

<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-pinhole-using">
<title xmlns:xlink="http://www.w3.org/1999/xlink">Using <application xmlns:xlink="http://www.w3.org/1999/xlink">pinhole</application></title>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
Because we have decided to make the program
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">ignore</emphasis> any input except for numbers
(and even those inside a comment), we can
actually perform <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">textual queries</emphasis>.
We do not <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">have to</emphasis>, but we <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">can</emphasis>.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
In my humble opinion, forming a textual query,
instead of having to follow a very strict
syntax, makes software much more user friendly.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Suppose we want to build a pinhole camera to use the
4x5 inch film. The standard focal
length for that film is about 150mm. We want
to <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">fine&#8211;tune</emphasis> our focal length so the
pinhole diameter is as round a number as possible.
Let us also suppose we are quite comfortable with
cameras but somewhat intimidated by computers.
Rather than just have to type in a bunch of numbers,
we want to <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">ask</emphasis> a couple of questions.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Our session might look like this:</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">pinhole

Computer,

What size pinhole do I need for the focal length of 150?</userinput>
150	490	306	362	2930	12
<userinput xmlns:xlink="http://www.w3.org/1999/xlink">Hmmm... How about 160?</userinput>
160	506	316	362	3125	12
<userinput xmlns:xlink="http://www.w3.org/1999/xlink">Let's make it 155, please.</userinput>
155	498	311	362	3027	12
<userinput xmlns:xlink="http://www.w3.org/1999/xlink">Ah, let's try 157...</userinput>
157	501	313	362	3066	12
<userinput xmlns:xlink="http://www.w3.org/1999/xlink">156?</userinput>
156	500	312	362	3047	12
<userinput xmlns:xlink="http://www.w3.org/1999/xlink">That's it! Perfect! Thank you very much!
^D</userinput></screen>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
We have found that while for the focal length
of 150, our pinhole diameter should be 490
microns, or 0.49 mm, if we go with the almost
identical focal length of 156 mm, we can
get away with a pinhole diameter of exactly
one half of a millimeter.
</para>

</sect2>

<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-pinhole-scripting">
<title xmlns:xlink="http://www.w3.org/1999/xlink">Scripting</title>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
Because we have chosen the <constant xmlns:xlink="http://www.w3.org/1999/xlink">#</constant>
character to denote the start of a comment,
we can treat our <application xmlns:xlink="http://www.w3.org/1999/xlink">pinhole</application>
software as a <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">scripting language</emphasis>.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
You have probably seen <application xmlns:xlink="http://www.w3.org/1999/xlink">shell</application>
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">scripts</emphasis> that start with:</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
#! /bin/sh
</programlisting>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
...or...</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
#!/bin/sh
</programlisting> <para xmlns:xlink="http://www.w3.org/1999/xlink">
...because the blank space after the <function xmlns:xlink="http://www.w3.org/1999/xlink">#!</function>
is optional.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Whenever <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> is asked to run an executable
file which starts with the <function xmlns:xlink="http://www.w3.org/1999/xlink">#!</function>,
it assumes the file is a script. It adds the
command to the rest of the first line of the
script, and tries to execute that.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Suppose now that we have installed <application xmlns:xlink="http://www.w3.org/1999/xlink">pinhole</application>
in <application xmlns:xlink="http://www.w3.org/1999/xlink">/usr/local/bin/</application>, we can now
write a script to calculate various pinhole
diameters suitable for various focal lengths
commonly used with the 120 film.</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The script might look something like this:</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
#! /usr/local/bin/pinhole -b -i
# Find the best pinhole diameter
# for the 120 film

### Standard
80

### Wide angle
30, 40, 50, 60, 70

### Telephoto
100, 120, 140
</programlisting>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
Because 120 is a medium size film,
we may name this file <application xmlns:xlink="http://www.w3.org/1999/xlink">medium</application>.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
We can set its permissions to execute,
and run it as if it were a program:
</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">chmod 755 medium</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">./medium</userinput></screen>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
<trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> will interpret that last command as:</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">/usr/local/bin/pinhole -b -i ./medium</userinput></screen>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
It will run that command and display:
</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink">80	358	224	256	1562	11
30	219	137	128	586	9
40	253	158	181	781	10
50	283	177	181	977	10
60	310	194	181	1172	10
70	335	209	181	1367	10
100	400	250	256	1953	11
120	438	274	256	2344	11
140	473	296	256	2734	11</screen>
<para xmlns:xlink="http://www.w3.org/1999/xlink">

Now, let us enter:</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">./medium -c</userinput></screen>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
<trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> will treat that as:</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">/usr/local/bin/pinhole -b -i ./medium -c</userinput></screen>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
That gives it two conflicting options:
<parameter xmlns:xlink="http://www.w3.org/1999/xlink">-b</parameter> and <parameter xmlns:xlink="http://www.w3.org/1999/xlink">-c</parameter>
(Use Bender's constant and use Connors'
constant). We have programmed it so
later options override early ones&#8212;our
program will calculate everything
using Connors' constant:
</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink">80	331	242	256	1826	11
30	203	148	128	685	9
40	234	171	181	913	10
50	262	191	181	1141	10
60	287	209	181	1370	10
70	310	226	256	1598	11
100	370	270	256	2283	11
120	405	296	256	2739	11
140	438	320	362	3196	12</screen>
<para xmlns:xlink="http://www.w3.org/1999/xlink">
We decide we want to go with Bender's
constant after all. We want to save its
values as a comma&#8211;separated file:
</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">./medium -b -e &gt; bender</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cat bender</userinput>
focal length in millimeters,pinhole diameter in microns,F-number,normalized F-number,F-5.6 multiplier,stops from F-5.6
80,358,224,256,1562,11
30,219,137,128,586,9
40,253,158,181,781,10
50,283,177,181,977,10
60,310,194,181,1172,10
70,335,209,181,1367,10
100,400,250,256,1953,11
120,438,274,256,2344,11
140,473,296,256,2734,11
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt></screen>
</sect2>

</sect1>

<sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-caveats">
<title xmlns:xlink="http://www.w3.org/1999/xlink">Caveats</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Assembly language programmers who "grew up" under
<acronym xmlns:xlink="http://www.w3.org/1999/xlink"><trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">MS-DOS</trademark></acronym> and <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">Windows</trademark> often tend to take shortcuts.
Reading the keyboard scan codes and writing directly to video
memory are two classical examples of practices which, under
<acronym xmlns:xlink="http://www.w3.org/1999/xlink"><trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">MS-DOS</trademark></acronym> are not frowned upon but considered the
right thing to do.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
The reason? Both the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">PC BIOS</acronym> and
<acronym xmlns:xlink="http://www.w3.org/1999/xlink"><trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">MS-DOS</trademark></acronym> are notoriously
slow when performing these operations.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
You may be tempted to continue similar practices in the
<trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> environment. For example, I have seen a web site which
explains how to access the keyboard scan codes on a popular <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> clone.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
That is generally a <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">very bad idea</emphasis>
in <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> environment! Let me explain why.
</para>

<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-protected">
<title xmlns:xlink="http://www.w3.org/1999/xlink"><trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> Is Protected</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
For one thing, it may simply not be possible. <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> runs in
protected mode. Only the kernel and device drivers are allowed
to access hardware directly. Perhaps a particular <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> clone
will let you read the keyboard scan codes, but chances are a real
<trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> operating system will not. And even if one version may let you
do it, the next one may not, so your carefully crafted software may
become a dinosaur overnight.
</para>

</sect2>

<sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-abstraction">
<title xmlns:xlink="http://www.w3.org/1999/xlink"><trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> Is an Abstraction</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
But there is a much more important reason not to try
accessing the hardware directly (unless, of course,
you are writing a device driver), even on the <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> like
systems that let you do it:
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
<emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> is an abstraction!
</emphasis></para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
There is a major difference in the philosophy of design
between <acronym xmlns:xlink="http://www.w3.org/1999/xlink"><trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">MS-DOS</trademark></acronym> and <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark>.
<acronym xmlns:xlink="http://www.w3.org/1999/xlink"><trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">MS-DOS</trademark></acronym> was designed as a single-user
system. It is run on a computer with a keyboard and a video
screen attached directly to that computer. User input is almost
guaranteed to come from that keyboard. Your program's output
virtually always ends up on that screen.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
This is NEVER guaranteed under <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark>. It is quite common
for a <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> user to pipe and redirect program input and output:
</para>

<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">program1 | program2 | program3 &gt; file1</userinput></screen>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
If you have written <application xmlns:xlink="http://www.w3.org/1999/xlink">program2</application>, your input
does not come from the keyboard but from the output of
<application xmlns:xlink="http://www.w3.org/1999/xlink">program1</application>. Similarly, your output does not
go to the screen but becomes the input for
<application xmlns:xlink="http://www.w3.org/1999/xlink">program3</application> whose output, in turn,
goes to <filename xmlns:xlink="http://www.w3.org/1999/xlink">file1</filename>.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
But there is more! Even if you made sure that your input comes
from, and your output goes to, the terminal, there is no guarantee
the terminal is a PC: It may not have its video memory
where you expect it, nor may its keyboard be producing
<acronym xmlns:xlink="http://www.w3.org/1999/xlink">PC</acronym>-style scan codes. It may be a <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">Macintosh</trademark>,
or any other computer.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Now you may be shaking your head: My software is in
<acronym xmlns:xlink="http://www.w3.org/1999/xlink">PC</acronym> assembly language, how can
it run on a <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">Macintosh</trademark>? But I did not say your software
would be running on a <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">Macintosh</trademark>, only that its terminal
may be a <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">Macintosh</trademark>.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Under <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark>, the terminal does not have to be directly
attached to the computer that runs your software, it can
even be on another continent, or, for that matter, on another
planet. It is perfectly possible that a <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">Macintosh</trademark> user in
Australia connects to a <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> system in North America (or
anywhere else) via <application xmlns:xlink="http://www.w3.org/1999/xlink">telnet</application>. The
software then runs on one computer, while the terminal is
on a different computer: If you try to read the scan codes,
you will get the wrong input!
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Same holds true about any other hardware: A file you are reading
may be on a disk you have no direct access to. A camera you are
reading images from may be on a space shuttle, connected to you
via satellites.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
That is why under <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> you must never make any assumptions about
where your data is coming from and going to. Always let the
system handle the physical access to the hardware.
</para>

<note xmlns:xlink="http://www.w3.org/1999/xlink">
<para xmlns:xlink="http://www.w3.org/1999/xlink">
These are caveats, not absolute rules. Exceptions are possible.
For example, if a text editor has determined it is running
on a local machine, it may want to read the scan codes
directly for improved control. I am not mentioning these caveats
to tell you what to do or what not to do, just to make you aware
of certain pitfalls that await you if you have just arrived to <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark>
form <acronym xmlns:xlink="http://www.w3.org/1999/xlink"><trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">MS-DOS</trademark></acronym>. Of course, creative people often break
rules, and it is OK as long as they know they are breaking
them and why.
</para>
</note>

</sect2>

</sect1>


<sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="x86-acknowledgements">
<title xmlns:xlink="http://www.w3.org/1999/xlink">Acknowledgements</title>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
This tutorial would never have been possible without the
help of many experienced FreeBSD programmers from the
<link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://lists.FreeBSD.org/mailman/listinfo/freebsd-hackers">FreeBSD technical discussions mailing list</link>, many of whom have patiently
answered my questions, and pointed me in the right direction
in my attempts to explore the inner workings of <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark>
system programming in general and FreeBSD in particular.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Thomas M. Sommers opened the door for me. His
<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.codebreakers-journal.com/content/view/262/27/">How
do I write "Hello, world" in FreeBSD assembler?</link>
web page was my first encounter with an example of
assembly language programming under FreeBSD.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Jake Burkholder has kept the door open by willingly
answering all of my questions and supplying me with
example assembly language source code.
</para>

<para xmlns:xlink="http://www.w3.org/1999/xlink">
Copyright © 2000-2001 G. Adam Stanislav. All rights reserved.
</para>

</sect1>


</chapter>


  </part>

  <part xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="appendices">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Appendices</title>

      <bibliography xmlns:xlink="http://www.w3.org/1999/xlink">

      <biblioentry xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="COD" xreflabel="1">
        <authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
          <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Dave</firstname><othername xmlns:xlink="http://www.w3.org/1999/xlink" role="MI">A</othername><surname xmlns:xlink="http://www.w3.org/1999/xlink">Patterson</surname></personname></author>
          <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">John</firstname><othername xmlns:xlink="http://www.w3.org/1999/xlink" role="MI">L</othername><surname xmlns:xlink="http://www.w3.org/1999/xlink">Hennessy</surname></personname></author>
        </authorgroup>
        <copyright xmlns:xlink="http://www.w3.org/1999/xlink"><year xmlns:xlink="http://www.w3.org/1999/xlink">1998</year><holder xmlns:xlink="http://www.w3.org/1999/xlink">Morgan Kaufmann Publishers,
        Inc.</holder></copyright>
        <biblioid xmlns:xlink="http://www.w3.org/1999/xlink" class="isbn">1-55860-428-6</biblioid>
        <publisher xmlns:xlink="http://www.w3.org/1999/xlink">
          <publishername xmlns:xlink="http://www.w3.org/1999/xlink">Morgan Kaufmann Publishers, Inc.</publishername>
        </publisher>
        <citetitle xmlns:xlink="http://www.w3.org/1999/xlink">Computer Organization and Design</citetitle>
        <subtitle xmlns:xlink="http://www.w3.org/1999/xlink">The Hardware / Software Interface</subtitle>
        <pagenums xmlns:xlink="http://www.w3.org/1999/xlink">1-2</pagenums>
      </biblioentry>

      <biblioentry xmlns:xlink="http://www.w3.org/1999/xlink" xreflabel="2">
        <authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
          <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">W.</firstname><othername xmlns:xlink="http://www.w3.org/1999/xlink" role="Middle">Richard</othername><surname xmlns:xlink="http://www.w3.org/1999/xlink">Stevens</surname></personname></author>
        </authorgroup>
        <copyright xmlns:xlink="http://www.w3.org/1999/xlink"><year xmlns:xlink="http://www.w3.org/1999/xlink">1993</year><holder xmlns:xlink="http://www.w3.org/1999/xlink">Addison Wesley Longman,
        Inc.</holder></copyright>
        <biblioid xmlns:xlink="http://www.w3.org/1999/xlink" class="isbn">0-201-56317-7</biblioid>
        <publisher xmlns:xlink="http://www.w3.org/1999/xlink">
          <publishername xmlns:xlink="http://www.w3.org/1999/xlink">Addison Wesley Longman, Inc.</publishername>
        </publisher>
        <citetitle xmlns:xlink="http://www.w3.org/1999/xlink">Advanced Programming in the Unix Environment</citetitle>
        <pagenums xmlns:xlink="http://www.w3.org/1999/xlink">1-2</pagenums>
      </biblioentry>

      <biblioentry xmlns:xlink="http://www.w3.org/1999/xlink" xreflabel="3">
        <authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
          <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Marshall</firstname><othername xmlns:xlink="http://www.w3.org/1999/xlink" role="Middle">Kirk</othername><surname xmlns:xlink="http://www.w3.org/1999/xlink">McKusick</surname></personname></author>
          <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">George</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Neville-Neil</surname></personname></author>
        </authorgroup>
        <copyright xmlns:xlink="http://www.w3.org/1999/xlink"><year xmlns:xlink="http://www.w3.org/1999/xlink">2004</year><holder xmlns:xlink="http://www.w3.org/1999/xlink">Addison-Wesley</holder></copyright>
        <biblioid xmlns:xlink="http://www.w3.org/1999/xlink" class="isbn">0-201-70245-2</biblioid>
        <publisher xmlns:xlink="http://www.w3.org/1999/xlink">
          <publishername xmlns:xlink="http://www.w3.org/1999/xlink">Addison-Wesley</publishername>
        </publisher>
        <citetitle xmlns:xlink="http://www.w3.org/1999/xlink">The Design and Implementation of the FreeBSD Operating System</citetitle>
        <pagenums xmlns:xlink="http://www.w3.org/1999/xlink">1-2</pagenums>
      </biblioentry>

      <biblioentry xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="Phrack" xreflabel="4">
        <authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
          <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Aleph</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">One</surname></personname></author>
        </authorgroup>
        <citetitle xmlns:xlink="http://www.w3.org/1999/xlink">Phrack 49; "Smashing the Stack for Fun and Profit"</citetitle>
      </biblioentry>

      <biblioentry xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="StackGuard" xreflabel="5">
        <authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
          <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Chrispin</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Cowan</surname></personname></author>
          <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Calton</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Pu</surname></personname></author>
          <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Dave</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Maier</surname></personname></author>
        </authorgroup>
        <citetitle xmlns:xlink="http://www.w3.org/1999/xlink">StackGuard; Automatic Adaptive Detection and Prevention of
        Buffer-Overflow Attacks</citetitle>
      </biblioentry>

      <biblioentry xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="OpenBSD" xreflabel="6">
        <authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
	  <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Todd</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Miller</surname></personname></author>
	  <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Theo</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">de Raadt</surname></personname></author>
	</authorgroup>
	<citetitle xmlns:xlink="http://www.w3.org/1999/xlink">strlcpy and strlcat -- consistent, safe string copy and
	concatenation.</citetitle>
      </biblioentry>

      </bibliography>

  </part>

  <index xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"/>

</book>
