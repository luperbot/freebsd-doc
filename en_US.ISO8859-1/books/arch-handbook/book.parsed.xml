<?xml version="1.0" encoding="iso-8859-1"?>
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
  <info><title xmlns:xlink="http://www.w3.org/1999/xlink">FreeBSD Architecture Handbook</title>
    

    <author xmlns:xlink="http://www.w3.org/1999/xlink"><orgname xmlns:xlink="http://www.w3.org/1999/xlink">The FreeBSD Documentation Project</orgname></author>

    <pubdate xmlns:xlink="http://www.w3.org/1999/xlink">$FreeBSD$</pubdate>

    <copyright xmlns:xlink="http://www.w3.org/1999/xlink">
      <year xmlns:xlink="http://www.w3.org/1999/xlink">2000</year>
      <year xmlns:xlink="http://www.w3.org/1999/xlink">2001</year>
      <year xmlns:xlink="http://www.w3.org/1999/xlink">2002</year>
      <year xmlns:xlink="http://www.w3.org/1999/xlink">2003</year>
      <year xmlns:xlink="http://www.w3.org/1999/xlink">2004</year>
      <year xmlns:xlink="http://www.w3.org/1999/xlink">2005</year>
      <year xmlns:xlink="http://www.w3.org/1999/xlink">2006</year>
      <year xmlns:xlink="http://www.w3.org/1999/xlink">2012</year>
      <year xmlns:xlink="http://www.w3.org/1999/xlink">2013</year>
      <holder xmlns:xlink="http://www.w3.org/1999/xlink">The FreeBSD Documentation Project</holder>
    </copyright>

    <legalnotice xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="trademarks" role="trademarks">
      <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">FreeBSD is a registered trademark of
  the FreeBSD Foundation.</para>
      <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">UNIX is a registered trademark of The
  Open Group in the United States and other countries.</para>
      <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Apple, AirPort, FireWire,
  iMac, iPhone, iPad,
  Mac, Macintosh, Mac OS,
  Quicktime, and TrueType are trademarks of Apple Inc.,
  registered in the U.S. and other countries.</para>
      <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Microsoft, IntelliMouse, MS-DOS,
  Outlook, Windows, Windows Media and Windows NT are either
  registered trademarks or trademarks of Microsoft Corporation in the
  United States and/or other countries.</para>
      <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Many of the designations used by
  manufacturers and sellers to distinguish their products are claimed
  as trademarks.  Where those designations appear in this document,
  and the FreeBSD Project was aware of the trademark claim, the
  designations have been followed by the <quote xmlns:xlink="http://www.w3.org/1999/xlink">&#8482;</quote> or the
  <quote xmlns:xlink="http://www.w3.org/1999/xlink">®</quote> symbol.</para>
    </legalnotice>

    
<legalnotice xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="legalnotice">
  <title xmlns:xlink="http://www.w3.org/1999/xlink">Copyright</title>

  <para xmlns:xlink="http://www.w3.org/1999/xlink">Redistribution and use in source (XML DocBook) and 'compiled'
    forms (XML, HTML, PDF, PostScript, RTF and so forth) with or without
    modification, are permitted provided that the following conditions are
    met:</para>

  <orderedlist xmlns:xlink="http://www.w3.org/1999/xlink">
    <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
      <para xmlns:xlink="http://www.w3.org/1999/xlink">Redistributions of source code (XML DocBook) must retain the
        above copyright notice, this list of conditions and the following
        disclaimer as the first lines of this file unmodified.</para>
    </listitem>

    <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
      <para xmlns:xlink="http://www.w3.org/1999/xlink">Redistributions in compiled form (transformed to other DTDs,
        converted to PDF, PostScript, RTF and other formats) must
        reproduce the above copyright notice, this list of conditions and
        the following disclaimer in the documentation and/or other
        materials provided with the distribution.</para>
    </listitem>
  </orderedlist>

  <important xmlns:xlink="http://www.w3.org/1999/xlink">
    <para xmlns:xlink="http://www.w3.org/1999/xlink">THIS DOCUMENTATION IS PROVIDED BY THE FREEBSD DOCUMENTATION
      PROJECT "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
      BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
      FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
      THE FREEBSD DOCUMENTATION PROJECT BE LIABLE FOR ANY DIRECT, INDIRECT,
      INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
      BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
      OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
      ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
      TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
      USE OF THIS DOCUMENTATION, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
      DAMAGE.</para>
  </important>
</legalnotice>


    <releaseinfo xmlns:xlink="http://www.w3.org/1999/xlink">$FreeBSD$</releaseinfo>

    <abstract xmlns:xlink="http://www.w3.org/1999/xlink">
      <para xmlns:xlink="http://www.w3.org/1999/xlink">Welcome to the FreeBSD Architecture Handbook.  This manual is
	a
	<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">work in progress</emphasis> and is the work of many
	individuals.  Many sections do not yet exist and some of those
	that do exist need to be updated.  If you are interested in
	helping with this project, send email to the <link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://lists.FreeBSD.org/mailman/listinfo/freebsd-doc">FreeBSD documentation project mailing list</link>.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The latest version of this document is always available
	from the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="../../../../index.html">FreeBSD World
	Wide Web server</link>.  It may also be downloaded in a
	variety of formats and compression options from the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="ftp://ftp.FreeBSD.org/pub/FreeBSD/doc/">FreeBSD FTP server</link>
	or one of the numerous <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="../../../../doc/en_US.ISO8859-1/books/handbook/mirrors-ftp.html">mirror sites</link>.</para>
    </abstract>
  </info>

  <part xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="kernel">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Kernel</title>

    
<!--
The FreeBSD Documentation Project

Copyright (c) 2002 Sergey Lyubka <devnull@uptsoft.com>
All rights reserved
Copyright (c) 2014 Sergio Andr?s G?mez del Real <Sergio.G.delReal@gmail.com>
All rights reserved
$FreeBSD$
-->

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="boot">

  <info>
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Bootstrapping and Kernel Initialization</title>

    <authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
      <author xmlns:xlink="http://www.w3.org/1999/xlink">
	<personname xmlns:xlink="http://www.w3.org/1999/xlink">
	  <firstname xmlns:xlink="http://www.w3.org/1999/xlink">Sergey</firstname>
	  <surname xmlns:xlink="http://www.w3.org/1999/xlink">Lyubka</surname>
	</personname>

	<contrib xmlns:xlink="http://www.w3.org/1999/xlink">Contributed by </contrib>
      </author>
      <!-- devnull@uptsoft.com  12 Jun 2002 -->
    </authorgroup>

    <authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
      <author xmlns:xlink="http://www.w3.org/1999/xlink">
	<personname xmlns:xlink="http://www.w3.org/1999/xlink">
	  <firstname xmlns:xlink="http://www.w3.org/1999/xlink">Sergio Andrés</firstname>
	  <surname xmlns:xlink="http://www.w3.org/1999/xlink"> Gómez del Real</surname>
	</personname>

	<contrib xmlns:xlink="http://www.w3.org/1999/xlink">Updated and enhanced by </contrib>
      </author>
      <!-- Sergio.G.DelReal@gmail.com  Jan 2014 -->
    </authorgroup>
  </info>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot-synopsis">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Synopsis</title>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</primary></indexterm>
    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">firmware</primary></indexterm>
    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">POST</primary></indexterm>
    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">IA-32</primary></indexterm>
    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">booting</primary></indexterm>
    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">system initialization</primary></indexterm>
    <para xmlns:xlink="http://www.w3.org/1999/xlink">This chapter is an overview of the boot and system
      initialization processes, starting from the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym> (firmware)
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">POST</acronym>, to the first user process creation.  Since the initial
      steps of system startup are very architecture dependent, the
      IA-32 architecture is used as an example.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The FreeBSD boot process can be surprisingly complex.  After
      control is passed from the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym>, a considerable amount of
      low-level configuration must be done before the kernel can be
      loaded and executed.  This setup must be done in a simple and
      flexible manner, allowing the user a great deal of customization
      possibilities.</para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot-overview">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Overview</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The boot process is an extremely machine-dependent
      activity.  Not only must code be written for every computer
      architecture, but there may also be multiple types of booting on
      the same architecture.  For example, a directory listing of
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/sys/boot</filename>
      reveals a great amount of architecture-dependent code.  There is
      a directory for each of the various supported architectures.  In
      the x86-specific <filename xmlns:xlink="http://www.w3.org/1999/xlink">i386</filename>
      directory, there are subdirectories for different boot standards
      like <filename xmlns:xlink="http://www.w3.org/1999/xlink">mbr</filename> (Master Boot Record),
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">gpt</filename> (<acronym xmlns:xlink="http://www.w3.org/1999/xlink">GUID</acronym> Partition
      Table), and <filename xmlns:xlink="http://www.w3.org/1999/xlink">efi</filename> (Extensible Firmware
      Interface).  Each boot standard has its own conventions and data
      structures.  The example that follows shows booting an x86
      computer from an <acronym xmlns:xlink="http://www.w3.org/1999/xlink">MBR</acronym> hard drive with the FreeBSD
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename> multi-boot loader stored in the very
      first sector.  That boot code starts the FreeBSD three-stage boot
      process.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The key to understanding this process is that it is a series
      of stages of increasing complexity.  These stages are
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename>, <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename>, and
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">loader</filename> (see <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">boot</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> for more detail).
      The boot system executes each stage in sequence.  The last
      stage, <filename xmlns:xlink="http://www.w3.org/1999/xlink">loader</filename>, is responsible for loading
      the FreeBSD kernel.  Each stage is examined in the following
      sections.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Here is an example of the output generated by the
      different boot stages.  Actual output
      may differ from machine to machine:</para>

    <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="0">
      <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="2">
	<tbody xmlns:xlink="http://www.w3.org/1999/xlink">
	  <row xmlns:xlink="http://www.w3.org/1999/xlink">
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink">FreeBSD Component</entry>
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink">Output (may vary)</entry>
	  </row>

	  <row xmlns:xlink="http://www.w3.org/1999/xlink">
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">boot0</literal></entry>
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink"><screen xmlns:xlink="http://www.w3.org/1999/xlink">F1    FreeBSD
F2    BSD
F5    Disk 2</screen></entry>
	  </row>

	  <row xmlns:xlink="http://www.w3.org/1999/xlink">
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">boot2</literal>
		<footnote xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">This prompt will appear if the user
		    presses a key just after selecting an OS to boot
		    at the <literal xmlns:xlink="http://www.w3.org/1999/xlink">boot0</literal>
		    stage.</para></footnote></entry>
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink"><screen xmlns:xlink="http://www.w3.org/1999/xlink">&gt;&gt;FreeBSD/i386 BOOT
Default: 1:ad(1,a)/boot/loader
boot:</screen></entry>
	  </row>

	  <row xmlns:xlink="http://www.w3.org/1999/xlink">
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">loader</filename></entry>
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink"><screen xmlns:xlink="http://www.w3.org/1999/xlink">BTX loader 1.00 BTX version is 1.02
Consoles: internal video/keyboard
BIOS drive C: is disk0
BIOS 639kB/2096064kB available memory

FreeBSD/x86 bootstrap loader, Revision 1.1
Console internal video/keyboard
(root@snap.freebsd.org, Thu Jan 16 22:18:05 UTC 2014)
Loading /boot/defaults/loader.conf
/boot/kernel/kernel text=0xed9008 data=0x117d28+0x176650 syms=[0x8+0x137988+0x8+0x1515f8]</screen></entry>
	  </row>

	  <row xmlns:xlink="http://www.w3.org/1999/xlink">
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink">kernel</entry>
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink"><screen xmlns:xlink="http://www.w3.org/1999/xlink">Copyright (c) 1992-2013 The FreeBSD Project.
Copyright (c) 1979, 1980, 1983, 1986, 1988, 1989, 1991, 1992, 1993, 1994
        The Regents of the University of California. All rights reserved.
FreeBSD is a registered trademark of The FreeBSD Foundation.
FreeBSD 10.0-RELEASE #0 r260789: Thu Jan 16 22:34:59 UTC 2014
    root@snap.freebsd.org:/usr/obj/usr/src/sys/GENERIC amd64
FreeBSD clang version 3.3 (tags/RELEASE_33/final 183502) 20130610</screen></entry>
	  </row>
	</tbody>
      </tgroup>
    </informaltable>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot-bios">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">The <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym></title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">When the computer powers on, the processor's registers are
      set to some predefined values.  One of the registers is the
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">instruction pointer</emphasis> register, and its value
      after a power on is well defined: it is a 32-bit value of
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0xfffffff0</literal>.  The instruction pointer register
      (also known as the Program Counter) points to code to be
      executed by the processor.  Another important register is the
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">cr0</literal> 32-bit control register, and its value
      just after a reboot is <literal xmlns:xlink="http://www.w3.org/1999/xlink">0</literal>.  One of
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">cr0</literal>'s bits, the PE (Protection Enabled) bit,
      indicates whether the processor is running in 32-bit protected
      mode or 16-bit real mode.  Since this bit is cleared at boot
      time, the processor boots in 16-bit real mode.  Real mode means,
      among other things, that linear and physical addresses are
      identical.  The reason for the processor not to start
      immediately in 32-bit protected mode is backwards compatibility.
      In particular, the boot process relies on the services provided
      by the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym>, and the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym>
      itself works in legacy, 16-bit code.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The value of <literal xmlns:xlink="http://www.w3.org/1999/xlink">0xfffffff0</literal> is slightly less
      than 4 GB, so unless the machine has 4 GB of physical
      memory, it cannot point to a valid memory address.  The
      computer's hardware translates this address so that it points to
      a <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym> memory block.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym> (Basic Input Output
      System) is a chip on the motherboard that has a relatively small
      amount of read-only memory (<acronym xmlns:xlink="http://www.w3.org/1999/xlink">ROM</acronym>).  This
      memory contains various low-level routines that are specific to
      the hardware supplied with the motherboard.  The processor will
      first jump to the address 0xfffffff0, which really resides in
      the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym>'s memory.  Usually this address
      contains a jump instruction to the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym>'s
      POST routines.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The <acronym xmlns:xlink="http://www.w3.org/1999/xlink">POST</acronym> (Power On Self Test)
      is a set of routines including the memory check, system bus
      check, and other low-level initialization so the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">CPU</acronym> can set up the computer properly.  The
      important step of this stage is determining the boot device.
      Modern <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym> implementations permit the
      selection of a boot device, allowing booting from a floppy,
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">CD-ROM</acronym>, hard disk, or other devices.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The very last thing in the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">POST</acronym> is the
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">INT 0x19</literal> instruction.  The
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">INT 0x19</literal> handler reads 512 bytes from the
      first sector of boot device into the memory at address
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x7c00</literal>.  The term
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">first sector</emphasis> originates from hard drive
      architecture, where the magnetic plate is divided into a number
      of cylindrical tracks.  Tracks are numbered, and every track is
      divided into a number (usually 64) of sectors.  Track numbers
      start at 0, but sector numbers start from 1. Track 0 is the
      outermost on the magnetic plate, and sector 1, the first sector,
      has a special purpose.  It is also called the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">MBR</acronym>, or Master Boot Record.  The remaining
      sectors on the first track are never used.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">This sector is our boot-sequence starting point.  As we will
      see, this sector contains a copy of our
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename> program.  A jump is made by the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym> to address <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x7c00</literal> so
      it starts executing.</para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot-boot0">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">The Master Boot Record (<literal xmlns:xlink="http://www.w3.org/1999/xlink">boot0</literal>)</title>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">MBR</primary></indexterm>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">After control is received from the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym>
      at memory address <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x7c00</literal>,
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename> starts executing.  It is the first
      piece of code under FreeBSD control.  The task of
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename> is quite simple: scan the partition
      table and let the user choose which partition to boot from.  The
      Partition Table is a special, standard data structure embedded
      in the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">MBR</acronym> (hence embedded in
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename>) describing the four standard PC
      <quote xmlns:xlink="http://www.w3.org/1999/xlink">partitions</quote>
      <footnote xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://en.wikipedia.org/wiki/Master_boot_record"/></para></footnote>.
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename> resides in the filesystem as
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/boot/boot0</filename>.  It is a small 512-byte file,
      and it is exactly what FreeBSD's installation procedure wrote to
      the hard disk's <acronym xmlns:xlink="http://www.w3.org/1999/xlink">MBR</acronym> if you chose the <quote xmlns:xlink="http://www.w3.org/1999/xlink">bootmanager</quote>
      option at installation time.  Indeed,
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename> <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">is</emphasis> the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">MBR</acronym>.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">As mentioned previously, the <literal xmlns:xlink="http://www.w3.org/1999/xlink">INT 0x19</literal>
      instruction causes the <literal xmlns:xlink="http://www.w3.org/1999/xlink">INT 0x19</literal> handler to
      load an <acronym xmlns:xlink="http://www.w3.org/1999/xlink">MBR</acronym> (<filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename>) into
      memory at address <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x7c00</literal>.  The source file
      for <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename> can be found in
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/boot0/boot0.S</filename> - which is an
      awesome piece of code written by Robert Nordier.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">A special structure starting from offset
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x1be</literal> in the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">MBR</acronym> is called
      the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">partition table</emphasis>.  It has four records
      of 16 bytes each, called <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">partition records</emphasis>,
      which represent how the hard disk is partitioned, or, in FreeBSD's
      terminology, sliced.  One byte of those 16 says whether a
      partition (slice) is bootable or not.  Exactly one record must
      have that flag set, otherwise <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename>'s code
      will refuse to proceed.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">A partition record has the following fields:</para>

    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">the 1-byte filesystem type</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">the 1-byte bootable flag</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">the 6 byte descriptor in CHS format</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">the 8 byte descriptor in LBA format</para>
      </listitem>
    </itemizedlist>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">A partition record descriptor contains information about
      where exactly the partition resides on the drive.  Both
      descriptors, <acronym xmlns:xlink="http://www.w3.org/1999/xlink">LBA</acronym> and <acronym xmlns:xlink="http://www.w3.org/1999/xlink">CHS</acronym>,
      describe the same information, but in different ways:
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">LBA</acronym> (Logical Block Addressing) has the
      starting sector for the partition and the partition's length,
      while <acronym xmlns:xlink="http://www.w3.org/1999/xlink">CHS</acronym> (Cylinder Head Sector) has
      coordinates for the first and last sectors of the partition.
      The partition table ends with the special signature
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0xaa55</literal>.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The <acronym xmlns:xlink="http://www.w3.org/1999/xlink">MBR</acronym> must fit into 512 bytes, a single
      disk sector.  This program uses low-level <quote xmlns:xlink="http://www.w3.org/1999/xlink">tricks</quote>
      like taking advantage of the side effects of certain
      instructions and reusing register values from previous
      operations to make the most out of the fewest possible
      instructions.  Care must also be taken when handling the
      partition table, which is embedded in the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">MBR</acronym>
      itself.  For these reasons, be very careful when modifying
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0.S</filename>.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Note that the <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0.S</filename> source file
      is assembled <quote xmlns:xlink="http://www.w3.org/1999/xlink">as is</quote>: instructions are translated
      one by one to binary, with no additional information (no
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">ELF</acronym> file format, for example).  This kind of
      low-level control is achieved at link time through special
      control flags passed to the linker.  For example, the text
      section of the program is set to be located at address
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x600</literal>.  In practice this means that
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename> must be loaded to memory address
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x600</literal> in order to function properly.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">It is worth looking at the <filename xmlns:xlink="http://www.w3.org/1999/xlink">Makefile</filename> for
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename>
      (<filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/boot0/Makefile</filename>), as it
      defines some of the run-time behavior of
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename>.  For instance, if a terminal
      connected to the serial port (COM1) is used for I/O, the macro
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">SIO</literal> must be defined
      (<literal xmlns:xlink="http://www.w3.org/1999/xlink">-DSIO</literal>).  <literal xmlns:xlink="http://www.w3.org/1999/xlink">-DPXE</literal> enables
      boot through <acronym xmlns:xlink="http://www.w3.org/1999/xlink">PXE</acronym> by pressing
      <keycap xmlns:xlink="http://www.w3.org/1999/xlink">F6</keycap>.  Additionally, the program defines a set of
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">flags</emphasis> that allow further modification of
      its behavior.  All of this is illustrated in the
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">Makefile</filename>.  For example, look at the
      linker directives which command the linker to start the text
      section at address <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x600</literal>, and to build the
      output file <quote xmlns:xlink="http://www.w3.org/1999/xlink">as is</quote> (strip out any file
      formatting):</para>

    <figure xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot-boot0-makefile-as-is">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/boot0/Makefile</filename></title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">      BOOT_BOOT0_ORG?=0x600
      LDFLAGS=-e start -Ttext ${BOOT_BOOT0_ORG} \
      -Wl,-N,-S,--oformat,binary</programlisting>
    </figure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Let us now start our study of the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">MBR</acronym>, or
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename>, starting where execution
      begins.</para>

    <note xmlns:xlink="http://www.w3.org/1999/xlink">
      <para xmlns:xlink="http://www.w3.org/1999/xlink">Some modifications have been made to some instructions in
	favor of better exposition.  For example, some macros are
	expanded, and some macro tests are omitted when the result of
	the test is known.  This applies to all of the code examples
	shown.</para>
    </note>

    <figure xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot-boot0-entrypoint">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/boot0/boot0.S</filename></title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">start:
      cld			# String ops inc
      xorw %ax,%ax		# Zero
      movw %ax,%es		# Address
      movw %ax,%ds		#  data
      movw %ax,%ss		# Set up
      movw 0x7c00,%sp		#  stack</programlisting>
    </figure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">This first block of code is the entry point of the program.
      It is where the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym> transfers control.
      First, it makes sure that the string operations autoincrement
      its pointer operands (the <literal xmlns:xlink="http://www.w3.org/1999/xlink">cld</literal> instruction)
      <footnote xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">When in doubt, we refer the reader to the official Intel
	  manuals, which describe the exact semantics for each
	  instruction: <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html"/>.</para></footnote>.
      Then, as it makes no assumption about the state of the segment
      registers, it initializes them.  Finally, it sets the stack
      pointer register (<literal xmlns:xlink="http://www.w3.org/1999/xlink">%sp</literal>) to address
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x7c00</literal>, so we have a working stack.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The next block is responsible for the relocation and
      subsequent jump to the relocated code.</para>

    <figure xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot-boot0-relocation">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/boot0/boot0.S</filename></title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">      movw $0x7c00,%si	# Source
      movw $0x600,%di		# Destination
      movw $512,%cx		# Word count
      rep			# Relocate
      movsb			#  code
      movw %di,%bp		# Address variables
      movb $16,%cl		# Words to clear
      rep			# Zero
      stosb			#  them
      incb -0xe(%di)		# Set the S field to 1
      jmp main-0x7c00+0x600	# Jump to relocated code</programlisting>
    </figure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Because <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename> is loaded by the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym> to address <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x7C00</literal>, it
      copies itself to address <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x600</literal> and then
      transfers control there (recall that it was linked to execute at
      address <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x600</literal>).  The source address,
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x7c00</literal>, is copied to register
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">%si</literal>.  The destination address,
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x600</literal>, to register <literal xmlns:xlink="http://www.w3.org/1999/xlink">%di</literal>.
      The number of bytes to copy, <literal xmlns:xlink="http://www.w3.org/1999/xlink">512</literal> (the
      program's size), is copied to register <literal xmlns:xlink="http://www.w3.org/1999/xlink">%cx</literal>.
      Next, the <literal xmlns:xlink="http://www.w3.org/1999/xlink">rep</literal> instruction repeats the
      instruction that follows, that is, <literal xmlns:xlink="http://www.w3.org/1999/xlink">movsb</literal>, the
      number of times dictated by the <literal xmlns:xlink="http://www.w3.org/1999/xlink">%cx</literal> register.
      The <literal xmlns:xlink="http://www.w3.org/1999/xlink">movsb</literal> instruction copies the byte pointed
      to by <literal xmlns:xlink="http://www.w3.org/1999/xlink">%si</literal> to the address pointed to by
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">%di</literal>.  This is repeated another 511 times.  On
      each repetition, both the source and destination registers,
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">%si</literal> and <literal xmlns:xlink="http://www.w3.org/1999/xlink">%di</literal>, are
      incremented by one.  Thus, upon completion of the 512-byte copy,
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">%di</literal> has the value
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x600</literal>+<literal xmlns:xlink="http://www.w3.org/1999/xlink">512</literal>=
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x800</literal>, and <literal xmlns:xlink="http://www.w3.org/1999/xlink">%si</literal> has the
      value <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x7c00</literal>+<literal xmlns:xlink="http://www.w3.org/1999/xlink">512</literal>=
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x7e00</literal>; we have thus completed the code
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">relocation</emphasis>.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Next, the destination register
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">%di</literal> is copied to <literal xmlns:xlink="http://www.w3.org/1999/xlink">%bp</literal>.
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">%bp</literal> gets the value <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x800</literal>.
      The value <literal xmlns:xlink="http://www.w3.org/1999/xlink">16</literal> is copied to
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">%cl</literal> in preparation for a new string operation
      (like our previous <literal xmlns:xlink="http://www.w3.org/1999/xlink">movsb</literal>).  Now,
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">stosb</literal> is executed 16 times.  This instruction
      copies a <literal xmlns:xlink="http://www.w3.org/1999/xlink">0</literal> value to the address pointed to by
      the destination register (<literal xmlns:xlink="http://www.w3.org/1999/xlink">%di</literal>, which is
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x800</literal>), and increments it.  This is repeated
      another 15 times, so <literal xmlns:xlink="http://www.w3.org/1999/xlink">%di</literal> ends up with value
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x810</literal>.  Effectively, this clears the address
      range <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x800</literal>-<literal xmlns:xlink="http://www.w3.org/1999/xlink">0x80f</literal>.  This
      range is used as a (fake) partition table for writing the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">MBR</acronym> back to disk.  Finally, the sector field
      for the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">CHS</acronym> addressing of this fake partition
      is given the value 1 and a jump is made to the main function
      from the relocated code.  Note that until this jump to the
      relocated code, any reference to an absolute address was
      avoided.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The following code block tests whether the drive number
      provided by the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym> should be used, or
      the one stored in <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename>.</para>

    <figure xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot-boot0-drivenumber">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/boot0/boot0.S</filename></title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">main:
      testb $SETDRV,-69(%bp)	# Set drive number?
      jnz disable_update	# Yes
      testb %dl,%dl		# Drive number valid?
      js save_curdrive		# Possibly (0x80 set)</programlisting>
    </figure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">This code tests the <literal xmlns:xlink="http://www.w3.org/1999/xlink">SETDRV</literal> bit
      (<literal xmlns:xlink="http://www.w3.org/1999/xlink">0x20</literal>) in the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">flags</emphasis>
      variable.  Recall that register <literal xmlns:xlink="http://www.w3.org/1999/xlink">%bp</literal> points to
      address location <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x800</literal>, so the test is done
      to the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">flags</emphasis> variable at address
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x800</literal>-<literal xmlns:xlink="http://www.w3.org/1999/xlink">69</literal>=
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x7bb</literal>.  This is an example of the type of
      modifications that can be done to <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename>.
      The <literal xmlns:xlink="http://www.w3.org/1999/xlink">SETDRV</literal> flag is not set by default, but it
      can be set in the <filename xmlns:xlink="http://www.w3.org/1999/xlink">Makefile</filename>.  When set, the
      drive number stored in the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">MBR</acronym> is used
      instead of the one provided by the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym>.  We
      assume the defaults, and that the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym>
      provided a valid drive number, so we jump to
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">save_curdrive</literal>.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The next block saves the drive number provided by the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym>, and calls <literal xmlns:xlink="http://www.w3.org/1999/xlink">putn</literal> to
      print a new line on the screen.</para>

    <figure xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot-boot0-savedrivenumber">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/boot0/boot0.S</filename></title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">save_curdrive:
      movb %dl, (%bp)		# Save drive number
      pushw %dx			# Also in the stack
#ifdef	TEST	/* test code, print internal bios drive */
      rolb $1, %dl
      movw $drive, %si
      call putkey
#endif
      callw putn		# Print a newline</programlisting>
    </figure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Note that we assume <varname xmlns:xlink="http://www.w3.org/1999/xlink">TEST</varname> is not defined,
      so the conditional code in it is not assembled and will not
      appear in our executable <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename>.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Our next block implements the actual scanning of the
      partition table.  It prints to the screen the partition type for
      each of the four entries in the partition table.  It compares
      each type with a list of well-known operating system file
      systems.  Examples of recognized partition types are
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">NTFS</acronym> (<trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">Windows</trademark>, ID 0x7),
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">ext2fs</literal> (<trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">Linux</trademark>, ID 0x83), and, of course,
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">ffs</literal>/<literal xmlns:xlink="http://www.w3.org/1999/xlink">ufs2</literal> (FreeBSD, ID 0xa5).
      The implementation is fairly simple.</para>

    <figure xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot-boot0-partition-scan">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/boot0/boot0.S</filename></title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">      movw $(partbl+0x4),%bx	# Partition table (+4)
      xorw %dx,%dx		# Item number

read_entry:
      movb %ch,-0x4(%bx)	# Zero active flag (ch == 0)
      btw %dx,_FLAGS(%bp)	# Entry enabled?
      jnc next_entry		# No
      movb (%bx),%al		# Load type
      test %al, %al		# skip empty partition
      jz next_entry
      movw $bootable_ids,%di	# Lookup tables
      movb $(TLEN+1),%cl	# Number of entries
      repne			# Locate
      scasb			#  type
      addw $(TLEN-1), %di	# Adjust
      movb (%di),%cl		# Partition
      addw %cx,%di		#  description
      callw putx		# Display it

next_entry:
      incw %dx			# Next item
      addb $0x10,%bl		# Next entry
      jnc read_entry		# Till done</programlisting>
    </figure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">It is important to note that the active flag for each entry
      is cleared, so after the scanning, <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">no</emphasis>
      partition entry is active in our memory copy of
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename>.  Later, the active flag will be set
      for the selected partition.  This ensures that only one active
      partition exists if the user chooses to write the changes back
      to disk.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The next block tests for other drives.  At startup,
      the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym> writes the number of drives present
      in the computer to address <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x475</literal>.  If there
      are any other drives present, <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename> prints
      the current drive to screen.  The user may command
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename> to scan partitions on another drive
      later.</para>

    <figure xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot-boot0-test-drives">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/boot0/boot0.S</filename></title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">      popw %ax			# Drive number
      subb $0x79,%al		# Does next
      cmpb 0x475,%al		#  drive exist? (from BIOS?)
      jb print_drive		# Yes
      decw %ax			# Already drive 0?
      jz print_prompt		# Yes</programlisting>
    </figure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">We make the assumption that a single drive is present, so
      the jump to <literal xmlns:xlink="http://www.w3.org/1999/xlink">print_drive</literal> is not performed.  We
      also assume nothing strange happened, so we jump to
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">print_prompt</literal>.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">This next block just prints out a prompt followed by the
      default option:</para>

    <figure xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot-boot0-prompt">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/boot0/boot0.S</filename></title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">print_prompt:
      movw $prompt,%si		# Display
      callw putstr		#  prompt
      movb _OPT(%bp),%dl	# Display
      decw %si			#  default
      callw putkey		#  key
      jmp start_input		# Skip beep</programlisting>
    </figure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Finally, a jump is performed to
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">start_input</literal>, where the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym> services are used to start a timer and
      for reading user input from the keyboard; if the timer expires,
      the default option will be selected:</para>

    <figure xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot-boot0-start-input">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/boot0/boot0.S</filename></title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">start_input:
      xorb %ah,%ah		# BIOS: Get
      int $0x1a			#  system time
      movw %dx,%di		# Ticks when
      addw _TICKS(%bp),%di	#  timeout
read_key:
      movb $0x1,%ah		# BIOS: Check
      int $0x16			#  for keypress
      jnz got_key		# Have input
      xorb %ah,%ah		# BIOS: int 0x1a, 00
      int $0x1a			#  get system time
      cmpw %di,%dx		# Timeout?
      jb read_key		# No</programlisting>
    </figure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">An interrupt is requested with number
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x1a</literal> and argument <literal xmlns:xlink="http://www.w3.org/1999/xlink">0</literal> in
      register <literal xmlns:xlink="http://www.w3.org/1999/xlink">%ah</literal>.  The <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym>
      has a predefined set of services, requested by applications as
      software-generated interrupts through the <literal xmlns:xlink="http://www.w3.org/1999/xlink">int</literal>
      instruction and receiving arguments in registers (in this case,
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">%ah</literal>).  Here, particularly, we are requesting
      the number of clock ticks since last midnight; this value is
      computed by the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym> through the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">RTC</acronym> (Real Time Clock).  This clock can be
      programmed to work at frequencies ranging from 2 Hz to
      8192 Hz.  The <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym> sets it to
      18.2 Hz at startup.  When the request is satisfied, a
      32-bit result is returned by the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym> in
      registers <literal xmlns:xlink="http://www.w3.org/1999/xlink">%cx</literal> and <literal xmlns:xlink="http://www.w3.org/1999/xlink">%dx</literal>
      (lower bytes in <literal xmlns:xlink="http://www.w3.org/1999/xlink">%dx</literal>).  This result (the
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">%dx</literal> part) is copied to register
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">%di</literal>, and the value of the
      <varname xmlns:xlink="http://www.w3.org/1999/xlink">TICKS</varname> variable is added to
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">%di</literal>.  This variable resides in
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename> at offset <literal xmlns:xlink="http://www.w3.org/1999/xlink">_TICKS</literal>
      (a negative value) from register <literal xmlns:xlink="http://www.w3.org/1999/xlink">%bp</literal> (which,
      recall, points to <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x800</literal>).  The default value
      of this variable is <literal xmlns:xlink="http://www.w3.org/1999/xlink">0xb6</literal> (182 in decimal).
      Now, the idea is that <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename> constantly
      requests the time from the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym>, and when the
      value returned in register <literal xmlns:xlink="http://www.w3.org/1999/xlink">%dx</literal> is greater
      than the value stored in <literal xmlns:xlink="http://www.w3.org/1999/xlink">%di</literal>, the time is up
      and the default selection will be made.  Since the RTC ticks
      18.2 times per second, this condition will be met after 10
      seconds (this default behaviour can be changed in the
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">Makefile</filename>).  Until this time has passed,
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename> continually asks the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym> for any user input; this is done through
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">int 0x16</literal>, argument <literal xmlns:xlink="http://www.w3.org/1999/xlink">1</literal> in
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">%ah</literal>.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Whether a key was pressed or the time expired, subsequent
      code validates the selection.  Based on the selection, the
      register <literal xmlns:xlink="http://www.w3.org/1999/xlink">%si</literal> is set to point to the
      appropriate partition entry in the partition table.  This new
      selection overrides the previous default one.  Indeed, it
      becomes the new default.  Finally, the ACTIVE flag of the
      selected partition is set.  If it was enabled at compile time,
      the in-memory version of <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename> with these
      modified values is written back to the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">MBR</acronym> on
      disk.  We leave the details of this implementation to the
      reader.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">We now end our study with the last code block from the
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename> program:</para>

    <figure xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot-boot0-check-bootable">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/boot0/boot0.S</filename></title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">      movw $0x7c00,%bx		# Address for read
      movb $0x2,%ah		# Read sector
      callw intx13		#  from disk
      jc beep			# If error
      cmpw $0xaa55,0x1fe(%bx)	# Bootable?
      jne beep			# No
      pushw %si			# Save ptr to selected part.
      callw putn		# Leave some space
      popw %si			# Restore, next stage uses it
      jmp *%bx			# Invoke bootstrap</programlisting>
    </figure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Recall that <literal xmlns:xlink="http://www.w3.org/1999/xlink">%si</literal> points to the selected
      partition entry.  This entry tells us where the partition begins
      on disk.  We assume, of course, that the partition selected is
      actually a FreeBSD slice.</para>

    <note xmlns:xlink="http://www.w3.org/1999/xlink">
      <para xmlns:xlink="http://www.w3.org/1999/xlink">From now on, we will favor the use of the technically
	more accurate term <quote xmlns:xlink="http://www.w3.org/1999/xlink">slice</quote> rather than
	<quote xmlns:xlink="http://www.w3.org/1999/xlink">partition</quote>.</para>
    </note>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The transfer buffer is set to <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x7c00</literal>
      (register <literal xmlns:xlink="http://www.w3.org/1999/xlink">%bx</literal>), and a read for the first
      sector of the FreeBSD slice is requested by calling
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">intx13</literal>.  We assume that everything went okay,
      so a jump to <literal xmlns:xlink="http://www.w3.org/1999/xlink">beep</literal> is not performed.  In
      particular, the new sector read must end with the magic sequence
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0xaa55</literal>.  Finally, the value at
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">%si</literal> (the pointer to the selected partition
      table) is preserved for use by the next stage, and a jump is
      performed to address <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x7c00</literal>, where execution
      of our next stage (the just-read block) is started.</para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot-boot1">
    <title xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">boot1</literal> Stage</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">So far we have gone through the following sequence:</para>

    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">The <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym> did some early hardware
	  initialization, including the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">POST</acronym>.  The
	  <acronym xmlns:xlink="http://www.w3.org/1999/xlink">MBR</acronym> (<filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename>) was
	  loaded from absolute disk sector one to address
	  <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x7c00</literal>.  Execution control was passed to
	  that location.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename> relocated itself to the
	  location it was linked to execute
	  (<literal xmlns:xlink="http://www.w3.org/1999/xlink">0x600</literal>), followed by a jump to continue
	  execution at the appropriate place.  Finally,
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename> loaded the first disk sector from
	  the FreeBSD slice to address <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x7c00</literal>.
	  Execution control was passed to that location.</para>
      </listitem>
    </itemizedlist>

    <para xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename> is the next step in the
      boot-loading sequence.  It is the first of three boot stages.
      Note that we have been dealing exclusively
      with disk sectors.  Indeed, the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym> loads
      the absolute first sector, while <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename>
      loads the first sector of the FreeBSD slice.  Both loads are to
      address <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x7c00</literal>.  We can conceptually think of
      these disk sectors as containing the files
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename> and <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename>,
      respectively, but in reality this is not entirely true for
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename>.  Strictly speaking, unlike
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename>, <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename> is not
      part of the boot blocks
      <footnote xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">There is a file <filename xmlns:xlink="http://www.w3.org/1999/xlink">/boot/boot1</filename>, but it
	  is not the written to the beginning of the FreeBSD slice.
	  Instead, it is concatenated with <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename>
	  to form <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot</filename>, which
	  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">is</emphasis> written to the beginning of the FreeBSD
	  slice and read at boot time.</para></footnote>.
      Instead, a single, full-blown file, <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot</filename>
      (<filename xmlns:xlink="http://www.w3.org/1999/xlink">/boot/boot</filename>), is what ultimately is
      written to disk.  This file is a combination of
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename>, <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename> and the
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">Boot Extender</literal> (or <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym>).
      This single file is greater in size than a single sector
      (greater than 512 bytes).  Fortunately,
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename> occupies <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">exactly</emphasis>
      the first 512 bytes of this single file, so when
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename> loads the first sector of the FreeBSD
      slice (512 bytes), it is actually loading
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename> and transferring control to
      it.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The main task of <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename> is to load the
      next boot stage.  This next stage is somewhat more complex.  It
      is composed of a server called the <quote xmlns:xlink="http://www.w3.org/1999/xlink">Boot Extender</quote>,
      or <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym>, and a client, called
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename>.  As we will see, the last boot
      stage, <filename xmlns:xlink="http://www.w3.org/1999/xlink">loader</filename>, is also a client of the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> server.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Let us now look in detail at what exactly is done by
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename>, starting like we did for
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename>, at its entry point:</para>

    <figure xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot-boot1-entry">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/boot2/boot1.S</filename></title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">start:
	jmp main</programlisting>
    </figure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The entry point at <literal xmlns:xlink="http://www.w3.org/1999/xlink">start</literal> simply jumps
      past a special data area to the label <literal xmlns:xlink="http://www.w3.org/1999/xlink">main</literal>,
      which in turn looks like this:</para>

    <figure xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot-boot1-main">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/boot2/boot1.S</filename></title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">main:
      cld			# String ops inc
      xor %cx,%cx		# Zero
      mov %cx,%es		# Address
      mov %cx,%ds		#  data
      mov %cx,%ss		# Set up
      mov $start,%sp		#  stack
      mov %sp,%si		# Source
      mov $0x700,%di		# Destination
      incb %ch			# Word count
      rep			# Copy
      movsw			#  code</programlisting>
    </figure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Just like <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename>, this
      code relocates <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename>,
      this time to memory address <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x700</literal>.  However,
      unlike <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename>, it does not jump there.
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename> is linked to execute at
      address <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x7c00</literal>, effectively where it was
      loaded in the first place.  The reason for this relocation will
      be discussed shortly.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Next comes a loop that looks for the FreeBSD slice.  Although
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename> loaded <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename>
      from the FreeBSD slice, no information was passed to it about this
      <footnote xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Actually we did pass a pointer to the slice entry in
	  register <literal xmlns:xlink="http://www.w3.org/1999/xlink">%si</literal>.  However,
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename> does not assume that it was
	  loaded by <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename> (perhaps some other
	  <acronym xmlns:xlink="http://www.w3.org/1999/xlink">MBR</acronym> loaded it, and did not pass this
	  information), so it assumes nothing.</para></footnote>,
      so <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename> must rescan the
      partition table to find where the FreeBSD slice starts.  Therefore
      it rereads the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">MBR</acronym>:</para>

    <figure xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot-boot1-find-freebsd">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/boot2/boot1.S</filename></title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">      mov $part4,%si		# Partition
      cmpb $0x80,%dl		# Hard drive?
      jb main.4			# No
      movb $0x1,%dh		# Block count
      callw nread		# Read MBR</programlisting>
    </figure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">In the code above, register <literal xmlns:xlink="http://www.w3.org/1999/xlink">%dl</literal>
      maintains information about the boot device.  This is passed on
      by the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym> and preserved by the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">MBR</acronym>.  Numbers <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x80</literal> and
      greater tells us that we are dealing with a hard drive, so a
      call is made to <literal xmlns:xlink="http://www.w3.org/1999/xlink">nread</literal>, where the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">MBR</acronym> is read.  Arguments to
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">nread</literal> are passed through
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">%si</literal> and <literal xmlns:xlink="http://www.w3.org/1999/xlink">%dh</literal>.  The memory
      address at label <literal xmlns:xlink="http://www.w3.org/1999/xlink">part4</literal> is copied to
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">%si</literal>.  This memory address holds a
      <quote xmlns:xlink="http://www.w3.org/1999/xlink">fake partition</quote> to be used by
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">nread</literal>.  The following is the data in the fake
      partition:</para>

    <figure xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot-boot2-make-fake-partition">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/boot2/Makefile</filename></title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">      part4:
	.byte 0x80, 0x00, 0x01, 0x00
	.byte 0xa5, 0xfe, 0xff, 0xff
	.byte 0x00, 0x00, 0x00, 0x00
	.byte 0x50, 0xc3, 0x00, 0x00</programlisting>
    </figure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">In particular, the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">LBA</acronym> for this fake
      partition is hardcoded to zero.  This is used as an argument to
      the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym> for reading absolute sector one from
      the hard drive.  Alternatively, CHS addressing could be used.
      In this case, the fake partition holds cylinder 0, head 0 and
      sector 1, which is equivalent to absolute sector one.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Let us now proceed to take a look at
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">nread</literal>:</para>

    <figure xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot-boot1-nread">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/boot2/boot1.S</filename></title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">nread:
      mov $0x8c00,%bx		# Transfer buffer
      mov 0x8(%si),%ax		# Get
      mov 0xa(%si),%cx		#  LBA
      push %cs			# Read from
      callw xread.1		#  disk
      jnc return		# If success, return</programlisting>
    </figure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Recall that <literal xmlns:xlink="http://www.w3.org/1999/xlink">%si</literal> points to the fake
      partition.  The word
      <footnote xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">In the context of 16-bit real mode, a word is 2
	  bytes.</para></footnote>
      at offset <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x8</literal> is copied to register
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">%ax</literal> and word at offset <literal xmlns:xlink="http://www.w3.org/1999/xlink">0xa</literal>
      to <literal xmlns:xlink="http://www.w3.org/1999/xlink">%cx</literal>.  They are interpreted by the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym> as the lower 4-byte value denoting the
      LBA to be read (the upper four bytes are assumed to be zero).
      Register <literal xmlns:xlink="http://www.w3.org/1999/xlink">%bx</literal> holds the memory address where
      the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">MBR</acronym> will be loaded.  The instruction
      pushing <literal xmlns:xlink="http://www.w3.org/1999/xlink">%cs</literal> onto the stack is very
      interesting.  In this context, it accomplishes nothing.  However, as
      we will see shortly, <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename>, in conjunction
      with the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> server, also uses
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">xread.1</literal>.  This mechanism will be discussed in
      the next section.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The code at <literal xmlns:xlink="http://www.w3.org/1999/xlink">xread.1</literal> further calls
      the <literal xmlns:xlink="http://www.w3.org/1999/xlink">read</literal> function, which actually calls the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym> asking for the disk sector:</para>

    <figure xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot-boot1-xread1">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/boot2/boot1.S</filename></title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">xread.1:
	pushl $0x0		#  absolute
	push %cx		#  block
	push %ax		#  number
	push %es		# Address of
	push %bx		#  transfer buffer
	xor %ax,%ax		# Number of
	movb %dh,%al		#  blocks to
	push %ax		#  transfer
	push $0x10		# Size of packet
	mov %sp,%bp		# Packet pointer
	callw read		# Read from disk
	lea 0x10(%bp),%sp	# Clear stack
	lret			# To far caller</programlisting>
    </figure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Note the long return instruction at the end of this block.
      This instruction pops out the <literal xmlns:xlink="http://www.w3.org/1999/xlink">%cs</literal> register
      pushed by <literal xmlns:xlink="http://www.w3.org/1999/xlink">nread</literal>, and returns.  Finally,
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">nread</literal> also returns.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">With the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">MBR</acronym> loaded to memory, the actual
      loop for searching the FreeBSD slice begins:</para>

    <figure xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot-boot1-find-part">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/boot2/boot1.S</filename></title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">	mov $0x1,%cx		 # Two passes
main.1:
	mov $0x8dbe,%si # Partition table
	movb $0x1,%dh		 # Partition
main.2:
	cmpb $0xa5,0x4(%si)	 # Our partition type?
	jne main.3		 # No
	jcxz main.5		 # If second pass
	testb $0x80,(%si)	 # Active?
	jnz main.5		 # Yes
main.3:
	add $0x10,%si		 # Next entry
	incb %dh		 # Partition
	cmpb $0x5,%dh		 # In table?
	jb main.2		 # Yes
	dec %cx			 # Do two
	jcxz main.1		 #  passes</programlisting>
    </figure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">If a FreeBSD slice is identified, execution continues at
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">main.5</literal>.  Note that when a FreeBSD slice is found
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">%si</literal> points to the appropriate entry in the
      partition table, and <literal xmlns:xlink="http://www.w3.org/1999/xlink">%dh</literal> holds the partition
      number.  We assume that a FreeBSD slice is found, so we continue
      execution at <literal xmlns:xlink="http://www.w3.org/1999/xlink">main.5</literal>:</para>

    <figure xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot-boot1-main5">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/boot2/boot1.S</filename></title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">main.5:
	mov %dx,0x900			   # Save args
	movb $0x10,%dh			   # Sector count
	callw nread			   # Read disk
	mov $0x9000,%bx			   # BTX
	mov 0xa(%bx),%si		   # Get BTX length and set
	add %bx,%si			   #  %si to start of boot2.bin
	mov $0xc000,%di			   # Client page 2
	mov $0xa200,%cx			   # Byte
	sub %si,%cx			   #  count
	rep				   # Relocate
	movsb				   #  client</programlisting>
    </figure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Recall that at this point, register <literal xmlns:xlink="http://www.w3.org/1999/xlink">%si</literal>
      points to the FreeBSD slice entry in the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">MBR</acronym>
      partition table, so a call to <literal xmlns:xlink="http://www.w3.org/1999/xlink">nread</literal> will
      effectively read sectors at the beginning of this partition.
      The argument passed on register <literal xmlns:xlink="http://www.w3.org/1999/xlink">%dh</literal> tells
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">nread</literal> to read 16 disk sectors.  Recall that
      the first 512 bytes, or the first sector of the FreeBSD slice,
      coincides with the <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename> program.  Also
      recall that the file written to the beginning of the FreeBSD
      slice is not <filename xmlns:xlink="http://www.w3.org/1999/xlink">/boot/boot1</filename>, but
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/boot/boot</filename>.  Let us look at the size of
      these files in the filesystem:</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot-boot1-filesize">-r--r--r--  1 root  wheel   512B Jan  8 00:15 /boot/boot0
-r--r--r--  1 root  wheel   512B Jan  8 00:15 /boot/boot1
-r--r--r--  1 root  wheel   7.5K Jan  8 00:15 /boot/boot2
-r--r--r--  1 root  wheel   8.0K Jan  8 00:15 /boot/boot</screen>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Both <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename> and
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename> are 512 bytes each, so they fit
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">exactly</emphasis> in one disk sector.
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename> is much bigger, holding both
      the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> server and the <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename> client.
      Finally, a file called simply <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot</filename> is 512
      bytes larger than <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename>.  This file is a
      concatenation of <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename> and
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename>.  As already noted,
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename> is the file written to the absolute
      first disk sector (the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">MBR</acronym>), and
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot</filename> is the file written to the first
      sector of the FreeBSD slice; <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename> and
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename> are <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">not</emphasis> written
      to disk.  The command used to concatenate
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename> and <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename> into a
      single <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot</filename> is merely
      <command xmlns:xlink="http://www.w3.org/1999/xlink">cat boot1 boot2 &gt; boot</command>.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">So <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename> occupies exactly the first 512
      bytes of <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot</filename> and, because
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot</filename> is written to the first sector of the
      FreeBSD slice, <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename> fits exactly in this
      first sector.  Because <literal xmlns:xlink="http://www.w3.org/1999/xlink">nread</literal> reads the first
      16 sectors of the FreeBSD slice, it effectively reads the entire
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot</filename> file
      <footnote xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">512*16=8192 bytes, exactly the size of
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot</filename></para></footnote>.
      We will see more details about how <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot</filename> is
      formed from <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename> and
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename> in the next section.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Recall that <literal xmlns:xlink="http://www.w3.org/1999/xlink">nread</literal> uses memory address
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x8c00</literal> as the transfer buffer to hold the
      sectors read.  This address is conveniently chosen.  Indeed,
      because <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename> belongs to the first 512
      bytes, it ends up in the address range
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x8c00</literal>-<literal xmlns:xlink="http://www.w3.org/1999/xlink">0x8dff</literal>.  The 512
      bytes that follows (range
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x8e00</literal>-<literal xmlns:xlink="http://www.w3.org/1999/xlink">0x8fff</literal>) is used to
      store the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">bsdlabel</emphasis>
      <footnote xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Historically known as <quote xmlns:xlink="http://www.w3.org/1999/xlink">disklabel</quote>.  If you
	  ever wondered where FreeBSD stored this information, it is in
	  this region.  See <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">bsdlabel</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry></para></footnote>.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Starting at address <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x9000</literal> is the
      beginning of the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> server, and immediately
      following is the <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename> client.  The
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> server acts as a kernel, and executes in
      protected mode in the most privileged level.  In contrast, the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> clients (<filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename>, for
      example), execute in user mode.  We will see how this is
      accomplished in the next section.  The code after the call to
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">nread</literal> locates the beginning of
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename> in the memory buffer, and copies it
      to memory address <literal xmlns:xlink="http://www.w3.org/1999/xlink">0xc000</literal>.  This is because
      the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> server arranges
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename> to execute in a segment starting at
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0xa000</literal>.  We explore this in detail in the
      following section.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The last code block of <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename> enables
      access to memory above 1MB
      <footnote xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">This is necessary for legacy reasons.  Interested
	  readers should see <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://en.wikipedia.org/wiki/A20_line"/>.</para></footnote>
      and concludes with a jump to the starting point of the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> server:</para>

    <figure xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot-boot1-seta20">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/boot2/boot1.S</filename></title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">seta20:
	cli			# Disable interrupts
seta20.1:
	dec %cx			# Timeout?
	jz seta20.3		# Yes

	inb $0x64,%al		# Get status
	testb $0x2,%al		# Busy?
	jnz seta20.1		# Yes
	movb $0xd1,%al		# Command: Write
	outb %al,$0x64		#  output port
seta20.2:
	inb $0x64,%al		# Get status
	testb $0x2,%al		# Busy?
	jnz seta20.2		# Yes
	movb $0xdf,%al		# Enable
	outb %al,$0x60		#  A20
seta20.3:
	sti			# Enable interrupts
	jmp 0x9010		# Start BTX</programlisting>
    </figure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Note that right before the jump, interrupts are
      enabled.</para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="btx-server">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">The <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> Server</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Next in our boot sequence is the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> Server.  Let us quickly remember how we
      got here:</para>

    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">The <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym> loads the absolute sector
	  one (the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">MBR</acronym>, or
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename>), to address
	  <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x7c00</literal> and jumps there.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">boot0</filename> relocates itself to
	  <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x600</literal>, the address it was linked to
	  execute, and jumps over there.  It then reads the first
	  sector of the FreeBSD slice (which consists of
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename>) into address
	  <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x7c00</literal> and jumps over there.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename> loads the first 16 sectors
	  of the FreeBSD slice into address <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x8c00</literal>.
	  This 16 sectors, or 8192 bytes, is the whole file
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot</filename>.  The file is a
	  concatenation of <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename> and
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename>.  <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename>, in
	  turn, contains the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> server and the
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename> client.  Finally, a jump is made
	  to address <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x9010</literal>, the entry point of the
	  <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> server.</para>
      </listitem>
    </itemizedlist>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Before studying the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> Server in detail,
      let us further review how the single, all-in-one
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot</filename> file is created.  The way
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot</filename> is built is defined in its
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">Makefile</filename>
      (<filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/sys/boot/i386/boot2/Makefile</filename>).
      Let us look at the rule that creates the
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot</filename> file:</para>

    <figure xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot-boot1-make-boot">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/boot2/Makefile</filename></title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">      boot: boot1 boot2
	cat boot1 boot2 &gt; boot</programlisting>
    </figure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">This tells us that <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename> and
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename> are needed, and the rule simply
      concatenates them to produce a single file called
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot</filename>.  The rules for creating
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename> are also quite simple:</para>

    <figure xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot-boot1-make-boot1">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/boot2/Makefile</filename></title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">      boot1: boot1.out
	objcopy -S -O binary boot1.out boot1

      boot1.out: boot1.o
	ld -e start -Ttext 0x7c00 -o boot1.out boot1.o</programlisting>
    </figure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">To apply the rule for creating
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename>, <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1.out</filename> must
      be resolved.  This, in turn, depends on the existence of
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1.o</filename>.  This last file is simply the
      result of assembling our familiar <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1.S</filename>,
      without linking.  Now, the rule for creating
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1.out</filename> is applied.  This tells us that
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1.o</filename> should be linked with
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">start</literal> as its entry point, and starting at
      address <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x7c00</literal>.  Finally,
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename> is created from
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1.out</filename> applying the appropriate rule.
      This rule is the <filename xmlns:xlink="http://www.w3.org/1999/xlink">objcopy</filename> command applied to
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1.out</filename>.  Note the flags passed to
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">objcopy</filename>: <literal xmlns:xlink="http://www.w3.org/1999/xlink">-S</literal> tells it to
      strip all relocation and symbolic information;
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">-O binary</literal> indicates the output format, that
      is, a simple, unformatted binary file.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Having <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename>, let us take a look at how
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename> is constructed:</para>

    <figure xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot-boot1-make-boot2">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/boot2/Makefile</filename></title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">      boot2: boot2.ld
	@set -- `ls -l boot2.ld`; x=$$((7680-$$5)); \
	    echo "$$x bytes available"; test $$x -ge 0
	dd if=boot2.ld of=boot2 obs=7680 conv=osync

      boot2.ld: boot2.ldr boot2.bin ../btx/btx/btx
	btxld -v -E 0x2000 -f bin -b ../btx/btx/btx -l boot2.ldr \
	    -o boot2.ld -P 1 boot2.bin

      boot2.ldr:
	dd if=/dev/zero of=boot2.ldr bs=512 count=1

      boot2.bin: boot2.out
	objcopy -S -O binary boot2.out boot2.bin

      boot2.out: ../btx/lib/crt0.o boot2.o sio.o
	ld -Ttext 0x2000 -o boot2.out

      boot2.o: boot2.s
	${CC} ${ACFLAGS} -c boot2.s

      boot2.s: boot2.c boot2.h ${.CURDIR}/../../common/ufsread.c
	${CC} ${CFLAGS} -S -o boot2.s.tmp ${.CURDIR}/boot2.c
	sed -e '/align/d' -e '/nop/d' "MISSING" boot2.s.tmp &gt; boot2.s
	rm -f boot2.s.tmp

      boot2.h: boot1.out
	${NM} -t d ${.ALLSRC} | awk '/([0-9])+ T xread/ \
	    { x = $$1 - ORG1; \
	    printf("#define XREADORG %#x\n", REL1 + x) }' \
	    ORG1=`printf "%d" ${ORG1}` \
	    REL1=`printf "%d" ${REL1}` &gt; ${.TARGET}</programlisting>
    </figure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The mechanism for building <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename> is
      far more elaborate.  Let us point out the most relevant facts.
      The dependency list is as follows:</para>

    <figure xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot-boot1-make-boot2-more">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/boot2/Makefile</filename></title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">      boot2: boot2.ld
      boot2.ld: boot2.ldr boot2.bin ${BTXDIR}/btx/btx
      boot2.bin: boot2.out
      boot2.out: ${BTXDIR}/lib/crt0.o boot2.o sio.o
      boot2.o: boot2.s
      boot2.s: boot2.c boot2.h ${.CURDIR}/../../common/ufsread.c
      boot2.h: boot1.out</programlisting>
    </figure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Note that initially there is no header file
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2.h</filename>, but its creation depends on
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1.out</filename>, which we already have.  The rule
      for its creation is a bit terse, but the important thing is that
      the output, <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2.h</filename>, is something like
      this:</para>

    <figure xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot-boot1-make-boot2h">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/boot2/boot2.h</filename></title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
      #define XREADORG 0x725</programlisting>
    </figure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Recall that <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename> was relocated (i.e.,
      copied from <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x7c00</literal> to
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x700</literal>).  This relocation will now make sense,
      because as we will see, the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> server
      reclaims some memory, including the space where
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename> was originally loaded.  However, the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> server needs access to
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename>'s <literal xmlns:xlink="http://www.w3.org/1999/xlink">xread</literal> function;
      this function, according to the output of
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2.h</filename>, is at location
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x725</literal>.  Indeed, the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> server uses the
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">xread</literal> function from
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename>'s relocated code.  This function is
      now accesible from within the <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename>
      client.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">We next build <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2.s</filename> from files
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2.h</filename>, <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2.c</filename> and
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/sys/boot/common/ufsread.c</filename>.  The
      rule for this is to compile the code in
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2.c</filename> (which includes
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2.h</filename> and <filename xmlns:xlink="http://www.w3.org/1999/xlink">ufsread.c</filename>)
      into assembly code.  Having <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2.s</filename>, the
      next rule assembles <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2.s</filename>, creating the
      object file <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2.o</filename>.  The
      next rule directs the linker to link various files
      (<filename xmlns:xlink="http://www.w3.org/1999/xlink">crt0.o</filename>,
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2.o</filename> and <filename xmlns:xlink="http://www.w3.org/1999/xlink">sio.o</filename>).
      Note that the output file, <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2.out</filename>, is
      linked to execute at address <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x2000</literal>.  Recall
      that <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename> will be executed in user mode,
      within a special user segment set up by the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> server.  This segment starts at
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0xa000</literal>.  Also, remember that the
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename> portion of <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot</filename>
      was copied to address <literal xmlns:xlink="http://www.w3.org/1999/xlink">0xc000</literal>, that is, offset
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x2000</literal> from the start of the user segment, so
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename> will work properly when we transfer
      control to it.  Next, <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2.bin</filename> is created
      from <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2.out</filename> by stripping its symbols and
      format information; boot2.bin is a <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">raw</emphasis>
      binary.  Now, note that a file <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2.ldr</filename> is
      created as a 512-byte file full of zeros.  This space is
      reserved for the bsdlabel.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Now that we have files <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename>,
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2.bin</filename> and
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2.ldr</filename>, only the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> server is missing before creating the
      all-in-one <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot</filename> file.  The
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> server is located in
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/sys/boot/i386/btx/btx</filename>; it has its
      own <filename xmlns:xlink="http://www.w3.org/1999/xlink">Makefile</filename> with its own set of rules for
      building.  The important thing to notice is that it is also
      compiled as a <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">raw</emphasis> binary, and that it is
      linked to execute at address <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x9000</literal>.  The
      details can be found in
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/sys/boot/i386/btx/btx/Makefile</filename>.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Having the files that comprise the <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot</filename>
      program, the final step is to <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">merge</emphasis> them.
      This is done by a special program called
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">btxld</filename> (source located in
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/usr.sbin/btxld</filename>).  Some arguments
      to this program include the name of the output file
      (<filename xmlns:xlink="http://www.w3.org/1999/xlink">boot</filename>), its entry point
      (<literal xmlns:xlink="http://www.w3.org/1999/xlink">0x2000</literal>) and its file format
      (raw binary).  The various files are
      finally merged by this utility into the file
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot</filename>, which consists of
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename>, <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename>, the
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">bsdlabel</literal> and the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> server.  This file, which takes
      exactly 16 sectors, or 8192 bytes, is what is
      actually written to the beginning of the FreeBSD slice
      during instalation.  Let us now proceed to study the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> server program.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> server prepares a simple
      environment and switches from 16-bit real mode to 32-bit
      protected mode, right before passing control to the client.
      This includes initializing and updating the following data
      structures:</para>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">virtual v86 mode</primary></indexterm>
    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Modifies the
	  <literal xmlns:xlink="http://www.w3.org/1999/xlink">Interrupt Vector Table (IVT)</literal>.  The
	  <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IVT</acronym> provides exception and interrupt
	  handlers for Real-Mode code.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">The <literal xmlns:xlink="http://www.w3.org/1999/xlink">Interrupt Descriptor Table (IDT)</literal>
	  is created.  Entries are provided for processor exceptions,
	  hardware interrupts, two system calls and V86 interface.
	  The IDT provides exception and interrupt handlers for
	  Protected-Mode code.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">A <literal xmlns:xlink="http://www.w3.org/1999/xlink">Task-State Segment (TSS)</literal> is
	  created.  This is necessary because the processor works in
	  the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">least</emphasis> privileged level when
	  executing the client (<filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename>), but in
	  the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">most</emphasis> privileged level when
	  executing the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> server.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">The <acronym xmlns:xlink="http://www.w3.org/1999/xlink">GDT</acronym> (Global Descriptor Table) is
	  set up.  Entries (descriptors) are provided for
	  supervisor code and data, user code and data, and real-mode
	  code and data.
	  <footnote xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Real-mode code and data are necessary when switching
	      back to real mode from protected mode, as suggested by
	      the Intel manuals.</para></footnote></para>
      </listitem>
    </itemizedlist>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Let us now start studying the actual implementation.  Recall
      that <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename> made a jump to address
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x9010</literal>, the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> server's
      entry point.  Before studying program execution there,
      note that the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> server has a special header
      at address range <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x9000-0x900f</literal>, right before
      its entry point.  This header is defined as follows:</para>

    <figure xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="btx-header">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/btx/btx/btx.S</filename></title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">start:						# Start of code
/*
 * BTX header.
 */
btx_hdr:	.byte 0xeb			# Machine ID
		.byte 0xe			# Header size
		.ascii "BTX"			# Magic
		.byte 0x1			# Major version
		.byte 0x2			# Minor version
		.byte BTX_FLAGS			# Flags
		.word PAG_CNT-MEM_ORG&gt;&gt;0xc	# Paging control
		.word break-start		# Text size
		.long 0x0			# Entry address</programlisting>
    </figure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Note the first two bytes are <literal xmlns:xlink="http://www.w3.org/1999/xlink">0xeb</literal> and
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0xe</literal>.  In the IA-32 architecture, these two
      bytes are interpreted as a relative jump past the header into
      the entry point, so in theory, <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename> could
      jump here (address <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x9000</literal>) instead of address
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x9010</literal>.  Note that the last field in the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> header is a pointer to the client's
      (<filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename>) entry point.  This field is patched
      at link time.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Immediately following the header is the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> server's entry point:</para>

    <figure xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="btx-init">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/btx/btx/btx.S</filename></title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">/*
 * Initialization routine.
 */
init:		cli				# Disable interrupts
		xor %ax,%ax			# Zero/segment
		mov %ax,%ss			# Set up
		mov $0x1800,%sp		#  stack
		mov %ax,%es			# Address
		mov %ax,%ds			#  data
		pushl $0x2			# Clear
		popfl				#  flags</programlisting>
    </figure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">This code disables interrupts, sets up a working stack
      (starting at address <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x1800</literal>) and clears the
      flags in the EFLAGS register.  Note that the
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">popfl</literal> instruction pops out a doubleword (4
      bytes) from the stack and places it in the EFLAGS register.
      Because the value actually popped is <literal xmlns:xlink="http://www.w3.org/1999/xlink">2</literal>, the
      EFLAGS register is effectively cleared (IA-32 requires that bit
      2 of the EFLAGS register always be 1).</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Our next code block clears (sets to <literal xmlns:xlink="http://www.w3.org/1999/xlink">0</literal>)
      the memory range <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x5e00-0x8fff</literal>.  This range
      is where the various data structures will be created:</para>

    <figure xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="btx-clear-mem">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/btx/btx/btx.S</filename></title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">/*
 * Initialize memory.
 */
		mov $0x5e00,%di		# Memory to initialize
		mov $(0x9000-0x5e00)/2,%cx	# Words to zero
		rep				# Zero-fill
		stosw				#  memory</programlisting>
    </figure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Recall that <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename> was originally loaded
      to address <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x7c00</literal>, so, with this memory
      initialization, that copy effectively dissapeared.  However,
      also recall that <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot1</filename> was relocated to
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x700</literal>, so <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">that</emphasis> copy is
      still in memory, and the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> server will make
      use of it.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Next, the real-mode <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IVT</acronym> (Interrupt Vector
      Table is updated. The <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IVT</acronym> is an array of
      segment/offset pairs for exception and interrupt handlers.  The
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym> normally maps hardware interrupts to
      interrupt vectors <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x8</literal> to
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0xf</literal> and <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x70</literal> to
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x77</literal> but, as will be seen, the 8259A
      Programmable Interrupt Controller, the chip controlling the
      actual mapping of hardware interrupts to interrupt vectors, is
      programmed to remap these interrupt vectors from
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x8-0xf</literal> to <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x20-0x27</literal> and
      from <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x70-0x77</literal> to
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x28-0x2f</literal>.  Thus, interrupt handlers are
      provided for interrupt vectors <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x20-0x2f</literal>.
      The reason the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym>-provided handlers are not
      used directly is because they work in 16-bit real mode, but not
      32-bit protected mode.  Processor mode will be switched to
      32-bit protected mode shortly.  However, the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> server sets up a mechanism to effectively
      use the handlers provided by the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym>:</para>

    <figure xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="btx-ivt">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/btx/btx/btx.S</filename></title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">/*
 * Update real mode IDT for reflecting hardware interrupts.
 */
		mov $intr20,%bx			# Address first handler
		mov $0x10,%cx			# Number of handlers
		mov $0x20*4,%di			# First real mode IDT entry
init.0:		mov %bx,(%di)			# Store IP
		inc %di				# Address next
		inc %di				#  entry
		stosw				# Store CS
		add $4,%bx			# Next handler
		loop init.0			# Next IRQ</programlisting>
    </figure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The next block creates the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IDT</acronym> (Interrupt
      Descriptor Table).  The <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IDT</acronym> is analogous, in
      protected mode, to the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IVT</acronym> in real mode.
      That is, the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IDT</acronym> describes the various
      exception and interrupt handlers used when the processor is
      executing in protected mode.  In essence, it also consists of an
      array of segment/offset pairs, although the structure is
      somewhat more complex, because segments in protected mode are
      different than in real mode, and various protection mechanisms
      apply:</para>

    <figure xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="btx-idt">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/btx/btx/btx.S</filename></title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">/*
 * Create IDT.
 */
		mov $0x5e00,%di			# IDT's address
		mov $idtctl,%si			# Control string
init.1:		lodsb				# Get entry
		cbw				#  count
		xchg %ax,%cx			#  as word
		jcxz init.4			# If done
		lodsb				# Get segment
		xchg %ax,%dx			#  P:DPL:type
		lodsw				# Get control
		xchg %ax,%bx			#  set
		lodsw				# Get handler offset
		mov $SEL_SCODE,%dh		# Segment selector
init.2:		shr %bx				# Handle this int?
		jnc init.3			# No
		mov %ax,(%di)			# Set handler offset
		mov %dh,0x2(%di)		#  and selector
		mov %dl,0x5(%di)		# Set P:DPL:type
		add $0x4,%ax			# Next handler
init.3:		lea 0x8(%di),%di		# Next entry
		loop init.2			# Till set done
		jmp init.1			# Continue</programlisting>
    </figure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Each entry in the <literal xmlns:xlink="http://www.w3.org/1999/xlink">IDT</literal> is 8 bytes long.
      Besides the segment/offset information, they also describe the
      segment type, privilege level, and whether the segment is
      present in memory or not.  The construction is such that
      interrupt vectors from <literal xmlns:xlink="http://www.w3.org/1999/xlink">0</literal> to
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0xf</literal> (exceptions) are handled by function
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">intx00</literal>; vector <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x10</literal> (also
      an exception) is handled by <literal xmlns:xlink="http://www.w3.org/1999/xlink">intx10</literal>; hardware
      interrupts, which are later configured to start at interrupt
      vector <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x20</literal> all the way to interrupt vector
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x2f</literal>, are handled by function
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">intx20</literal>.  Lastly, interrupt vector
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x30</literal>, which is used for system calls, is
      handled by <literal xmlns:xlink="http://www.w3.org/1999/xlink">intx30</literal>, and vectors
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x31</literal> and <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x32</literal> are handled
      by <literal xmlns:xlink="http://www.w3.org/1999/xlink">intx31</literal>.  It must be noted that only
      descriptors for interrupt vectors <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x30</literal>,
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x31</literal> and <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x32</literal> are given
      privilege level 3, the same privilege level as the
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename> client, which means the client can
      execute a software-generated interrupt to this vectors through
      the <literal xmlns:xlink="http://www.w3.org/1999/xlink">int</literal> instruction without failing (this is
      the way <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename> use the services provided by
      the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> server).  Also, note that
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">only</emphasis> software-generated interrupts are
      protected from code executing in lesser privilege levels.
      Hardware-generated interrupts and processor-generated exceptions
      are <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">always</emphasis> handled adequately, regardless
      of the actual privileges involved.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The next step is to initialize the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">TSS</acronym>
      (Task-State Segment).  The <acronym xmlns:xlink="http://www.w3.org/1999/xlink">TSS</acronym> is a hardware
      feature that helps the operating system or executive software
      implement multitasking functionality through process
      abstraction.  The IA-32 architecture demands the creation and
      use of <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">at least</emphasis> one <acronym xmlns:xlink="http://www.w3.org/1999/xlink">TSS</acronym>
      if multitasking facilities are used or different privilege
      levels are defined.  Because the <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename>
      client is executed in privilege level 3, but the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> server does in privilege level 0, a
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">TSS</acronym> must be defined:</para>

    <figure xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="btx-tss">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/btx/btx/btx.S</filename></title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">/*
 * Initialize TSS.
 */
init.4:		movb $_ESP0H,TSS_ESP0+1(%di)	# Set ESP0
		movb $SEL_SDATA,TSS_SS0(%di)	# Set SS0
		movb $_TSSIO,TSS_MAP(%di)	# Set I/O bit map base</programlisting>
    </figure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Note that a value is given for the Privilege Level 0 stack
      pointer and stack segment in the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">TSS</acronym>.  This is needed because,
      if an interrupt or exception is received while executing
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename> in Privilege Level 3, a change to
      Privilege Level 0 is automatically performed by the processor,
      so a new working stack is needed.  Finally, the I/O Map Base
      Address field of the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">TSS</acronym> is given a value, which is a 16-bit
      offset from the beginning of the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">TSS</acronym> to the I/O Permission
      Bitmap and the Interrupt Redirection Bitmap.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">After the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IDT</acronym> and <acronym xmlns:xlink="http://www.w3.org/1999/xlink">TSS</acronym> are created, the processor is ready to
      switch to protected mode.  This is done in the next
      block:</para>

    <figure xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="btx-prot">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/btx/btx/btx.S</filename></title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">/*
 * Bring up the system.
 */
		mov $0x2820,%bx			# Set protected mode
		callw setpic			#  IRQ offsets
		lidt idtdesc			# Set IDT
		lgdt gdtdesc			# Set GDT
		mov %cr0,%eax			# Switch to protected
		inc %ax				#  mode
		mov %eax,%cr0			#
		ljmp $SEL_SCODE,$init.8		# To 32-bit code
		.code32
init.8:		xorl %ecx,%ecx			# Zero
		movb $SEL_SDATA,%cl		# To 32-bit
		movw %cx,%ss			#  stack</programlisting>
    </figure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">First, a call is made to <literal xmlns:xlink="http://www.w3.org/1999/xlink">setpic</literal> to
      program the 8259A <acronym xmlns:xlink="http://www.w3.org/1999/xlink">PIC</acronym> (Programmable Interrupt Controller).
      This chip is connected to multiple hardware interrupt sources.
      Upon receiving an interrupt from a device, it
      signals the processor with the appropriate interrupt vector.
      This can be customized so that specific interrupts are
      associated with specific interrupt vectors, as explained before.
      Next, the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IDTR</acronym> (Interrupt Descriptor Table Register) and
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">GDTR</acronym> (Global Descriptor Table Register) are loaded with the
      instructions <literal xmlns:xlink="http://www.w3.org/1999/xlink">lidt</literal> and <literal xmlns:xlink="http://www.w3.org/1999/xlink">lgdt</literal>, respectively.  These registers are
      loaded with the base address and limit address for the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">IDT</acronym> and
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">GDT</acronym>.  The following three instructions set the Protection Enable
      (PE) bit of the <literal xmlns:xlink="http://www.w3.org/1999/xlink">%cr0</literal> register.  This
      effectively switches the processor to
      32-bit protected mode.  Next, a long jump is made to
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">init.8</literal> using segment selector SEL_SCODE,
      which selects the Supervisor Code Segment.  The processor is
      effectively executing in CPL 0, the most privileged level, after
      this jump.  Finally, the Supervisor Data Segment is selected for
      the stack by assigning the segment selector SEL_SDATA to the
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">%ss</literal> register.  This data segment also has a
      privilege level of <literal xmlns:xlink="http://www.w3.org/1999/xlink">0</literal>.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Our last code block is responsible for loading the
      <acronym xmlns:xlink="http://www.w3.org/1999/xlink">TR</acronym> (Task Register) with the segment selector for the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">TSS</acronym> we created
      earlier, and setting the User Mode environment before passing
      execution control to the <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename>
      client.</para>

    <figure xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="btx-end">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/btx/btx/btx.S</filename></title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">/*
 * Launch user task.
 */
		movb $SEL_TSS,%cl		# Set task
		ltr %cx				#  register
		movl $0xa000,%edx		# User base address
		movzwl %ss:BDA_MEM,%eax		# Get free memory
		shll $0xa,%eax			# To bytes
		subl $ARGSPACE,%eax		# Less arg space
		subl %edx,%eax			# Less base
		movb $SEL_UDATA,%cl		# User data selector
		pushl %ecx			# Set SS
		pushl %eax			# Set ESP
		push $0x202			# Set flags (IF set)
		push $SEL_UCODE			# Set CS
		pushl btx_hdr+0xc		# Set EIP
		pushl %ecx			# Set GS
		pushl %ecx			# Set FS
		pushl %ecx			# Set DS
		pushl %ecx			# Set ES
		pushl %edx			# Set EAX
		movb $0x7,%cl			# Set remaining
init.9:		push $0x0			#  general
		loop init.9			#  registers
		popa				#  and initialize
		popl %es			# Initialize
		popl %ds			#  user
		popl %fs			#  segment
		popl %gs			#  registers
		iret				# To user mode</programlisting>
    </figure>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Note that the client's environment include a stack segment
      selector and stack pointer (registers <literal xmlns:xlink="http://www.w3.org/1999/xlink">%ss</literal> and
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">%esp</literal>).  Indeed, once the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">TR</acronym> is loaded with
      the appropriate stack segment selector (instruction
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">ltr</literal>), the stack pointer is calculated and
      pushed onto the stack along with the stack's segment selector.
      Next, the value <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x202</literal> is pushed onto the
      stack; it is the value that the EFLAGS will get when control is
      passed to the client.  Also, the User Mode code segment selector
      and the client's entry point are pushed.  Recall that this entry
      point is patched in the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> header at link time.  Finally,
      segment selectors (stored in register <literal xmlns:xlink="http://www.w3.org/1999/xlink">%ecx</literal>)
      for the segment registers
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">%gs, %fs, %ds and %es</literal> are pushed onto the
      stack, along with the value at <literal xmlns:xlink="http://www.w3.org/1999/xlink">%edx</literal>
      (<literal xmlns:xlink="http://www.w3.org/1999/xlink">0xa000</literal>).  Keep in mind the various values
      that have been pushed onto the stack (they will be popped out
      shortly).  Next, values for the remaining general purpose
      registers are also pushed onto the stack (note the
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">loop</literal> that pushes the value
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0</literal> seven times).  Now, values will be started
      to be popped out of the stack.  First, the
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">popa</literal> instruction pops out of the stack the
      latest seven values pushed.  They are stored in the general
      purpose registers in order
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">%edi, %esi, %ebp, %ebx, %edx, %ecx, %eax</literal>.
      Then, the various segment selectors pushed are popped into the
      various segment registers.  Five values still remain on the
      stack.  They are popped when the <literal xmlns:xlink="http://www.w3.org/1999/xlink">iret</literal>
      instruction is executed.  This instruction first pops
      the value that was pushed from the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> header.  This value is a
      pointer to <filename xmlns:xlink="http://www.w3.org/1999/xlink">boot2</filename>'s entry point.  It is
      placed in the register <literal xmlns:xlink="http://www.w3.org/1999/xlink">%eip</literal>, the instruction
      pointer register.  Next, the segment selector for the User
      Code Segment is popped and copied to register
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">%cs</literal>.  Remember that
      this segment's privilege level is 3, the least privileged
      level.  This means that we must provide values for the stack of
      this privilege level.  This is why the processor, besides
      further popping the value for the EFLAGS register, does two more
      pops out of the stack.  These values go to the stack
      pointer (<literal xmlns:xlink="http://www.w3.org/1999/xlink">%esp</literal>) and the stack segment
      (<literal xmlns:xlink="http://www.w3.org/1999/xlink">%ss</literal>).  Now, execution continues at
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">boot0</literal>'s entry point.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">It is important to note how the User Code Segment is
      defined.  This segment's <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">base address</emphasis> is
      set to <literal xmlns:xlink="http://www.w3.org/1999/xlink">0xa000</literal>.  This means that code memory
      addresses are <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">relative</emphasis> to address 0xa000;
      if code being executed is fetched from address
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x2000</literal>, the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">actual</emphasis>
      memory addressed is
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0xa000+0x2000=0xc000</literal>.</para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot2">
    <title xmlns:xlink="http://www.w3.org/1999/xlink"><application xmlns:xlink="http://www.w3.org/1999/xlink">boot2</application> Stage</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">boot2</literal> defines an important structure,
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">struct bootinfo</literal>.  This structure is
      initialized by <literal xmlns:xlink="http://www.w3.org/1999/xlink">boot2</literal> and passed to the
      loader, and then further to the kernel.  Some nodes of this
      structures are set by <literal xmlns:xlink="http://www.w3.org/1999/xlink">boot2</literal>, the rest by the
      loader.  This structure, among other information, contains the
      kernel filename, <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym> harddisk geometry, <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</acronym> drive number for
      boot device, physical memory available, <literal xmlns:xlink="http://www.w3.org/1999/xlink">envp</literal>
      pointer etc.  The definition for it is:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/include/machine/bootinfo.h:</filename>
struct bootinfo {
	u_int32_t	bi_version;
	u_int32_t	bi_kernelname;		/* represents a char * */
	u_int32_t	bi_nfs_diskless;	/* struct nfs_diskless * */
				/* End of fields that are always present. */
#define	bi_endcommon	bi_n_bios_used
	u_int32_t	bi_n_bios_used;
	u_int32_t	bi_bios_geom[N_BIOS_GEOM];
	u_int32_t	bi_size;
	u_int8_t	bi_memsizes_valid;
	u_int8_t	bi_bios_dev;		/* bootdev BIOS unit number */
	u_int8_t	bi_pad[2];
	u_int32_t	bi_basemem;
	u_int32_t	bi_extmem;
	u_int32_t	bi_symtab;		/* struct symtab * */
	u_int32_t	bi_esymtab;		/* struct symtab * */
				/* Items below only from advanced bootloader */
	u_int32_t	bi_kernend;		/* end of kernel space */
	u_int32_t	bi_envp;		/* environment */
	u_int32_t	bi_modulep;		/* preloaded modules */
};</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">boot2</literal> enters into an infinite loop
      waiting for user input, then calls <function xmlns:xlink="http://www.w3.org/1999/xlink">load()</function>.
      If the user does not press anything, the loop breaks by a
      timeout, so <function xmlns:xlink="http://www.w3.org/1999/xlink">load()</function> will load the default
      file (<filename xmlns:xlink="http://www.w3.org/1999/xlink">/boot/loader</filename>).  Functions
      <function xmlns:xlink="http://www.w3.org/1999/xlink">ino_t lookup(char *filename)</function> and
      <function xmlns:xlink="http://www.w3.org/1999/xlink">int xfsread(ino_t inode, void *buf, size_t
      nbyte)</function> are used to read the content of a file into
      memory.  <filename xmlns:xlink="http://www.w3.org/1999/xlink">/boot/loader</filename> is an <acronym xmlns:xlink="http://www.w3.org/1999/xlink">ELF</acronym> binary, but
      where the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">ELF</acronym> header is prepended with <filename xmlns:xlink="http://www.w3.org/1999/xlink">a.out</filename>'s <literal xmlns:xlink="http://www.w3.org/1999/xlink">struct
      exec</literal> structure.  <function xmlns:xlink="http://www.w3.org/1999/xlink">load()</function> scans the
      loader's ELF header, loading the content of
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/boot/loader</filename> into memory, and passing the
      execution to the loader's entry:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/i386/boot2/boot2.c:</filename>
    __exec((caddr_t)addr, RB_BOOTINFO | (opts &amp; RBX_MASK),
	   MAKEBOOTDEV(dev_maj[dsk.type], 0, dsk.slice, dsk.unit, dsk.part),
	   0, 0, 0, VTOP(&amp;bootinfo));</programlisting>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot-loader">
    <title xmlns:xlink="http://www.w3.org/1999/xlink"><application xmlns:xlink="http://www.w3.org/1999/xlink">loader</application> Stage</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink"><application xmlns:xlink="http://www.w3.org/1999/xlink">loader</application> is a <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> client as well.
      I will not describe it here in detail, there is a comprehensive
      manpage written by Mike Smith, <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">loader</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry>.  The underlying
      mechanisms and <acronym xmlns:xlink="http://www.w3.org/1999/xlink">BTX</acronym> were discussed above.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The main task for the loader is to boot the kernel.  When
      the kernel is loaded into memory, it is being called by the
      loader:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/boot/common/boot.c:</filename>
    /* Call the exec handler from the loader matching the kernel */
    module_formats[km-&gt;m_loader]-&gt;l_exec(km);</programlisting>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="boot-kernel">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Kernel Initialization</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Let us take a look at the command that links the kernel.
      This will help identify the exact location where the loader
      passes execution to the kernel.  This location is the kernel's
      actual entry point.</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/conf/Makefile.i386:</filename>
ld -elf -Bdynamic -T /usr/src/sys/conf/ldscript.i386  -export-dynamic \
-dynamic-linker /red/herring -o kernel -X locore.o \
&lt;lots of kernel .o files&gt;</programlisting>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">ELF</primary></indexterm>
    <para xmlns:xlink="http://www.w3.org/1999/xlink">A few interesting things can be seen here.  First, the
      kernel is an ELF dynamically linked binary, but the dynamic
      linker for kernel is <filename xmlns:xlink="http://www.w3.org/1999/xlink">/red/herring</filename>, which is
      definitely a bogus file.  Second, taking a look at the file
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/conf/ldscript.i386</filename> gives an idea about
      what <application xmlns:xlink="http://www.w3.org/1999/xlink">ld</application> options are used when
      compiling a kernel.  Reading through the first few lines, the
      string</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/conf/ldscript.i386:</filename>
ENTRY(btext)</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">says that a kernel's entry point is the symbol `btext'.
      This symbol is defined in <filename xmlns:xlink="http://www.w3.org/1999/xlink">locore.s</filename>:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/i386/i386/locore.s:</filename>
	.text
/**********************************************************************
 *
 * This is where the bootblocks start us, set the ball rolling...
 *
 */
NON_GPROF_ENTRY(btext)</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">First, the register EFLAGS is set to a predefined value of
      0x00000002.  Then all the segment registers are
      initialized:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/i386/i386/locore.s:</filename>
/* Don't trust what the BIOS gives for eflags. */
	pushl	$PSL_KERNEL
	popfl

/*
 * Don't trust what the BIOS gives for %fs and %gs.  Trust the bootstrap
 * to set %cs, %ds, %es and %ss.
 */
	mov	%ds, %ax
	mov	%ax, %fs
	mov	%ax, %gs</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">btext calls the routines
      <function xmlns:xlink="http://www.w3.org/1999/xlink">recover_bootinfo()</function>,
      <function xmlns:xlink="http://www.w3.org/1999/xlink">identify_cpu()</function>,
      <function xmlns:xlink="http://www.w3.org/1999/xlink">create_pagetables()</function>, which are also defined
      in <filename xmlns:xlink="http://www.w3.org/1999/xlink">locore.s</filename>.  Here is a description of what
      they do:</para>

    <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
      <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="2" align="left">
	<tbody xmlns:xlink="http://www.w3.org/1999/xlink">
	  <row xmlns:xlink="http://www.w3.org/1999/xlink">
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">recover_bootinfo</function></entry>
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink">This routine parses the parameters to the kernel
	      passed from the bootstrap.  The kernel may have been
	      booted in 3 ways: by the loader, described above, by the
	      old disk boot blocks, or by the old diskless boot
	      procedure.  This function determines the booting method,
	      and stores the <literal xmlns:xlink="http://www.w3.org/1999/xlink">struct bootinfo</literal>
	      structure into the kernel memory.</entry>
	  </row>

	  <row xmlns:xlink="http://www.w3.org/1999/xlink">
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">identify_cpu</function></entry>
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink">This functions tries to find out what CPU it is
	      running on, storing the value found in a variable
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink">_cpu</varname>.</entry>
	  </row>

	  <row xmlns:xlink="http://www.w3.org/1999/xlink">
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">create_pagetables</function></entry>
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink">This function allocates and fills out a Page Table
	      Directory at the top of the kernel memory area.</entry>
	  </row>
	</tbody>
      </tgroup>
    </informaltable>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The next steps are enabling VME, if the CPU supports
      it:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">	testl	$CPUID_VME, R(_cpu_feature)
	jz	1f
	movl	%cr4, %eax
	orl	$CR4_VME, %eax
	movl	%eax, %cr4</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Then, enabling paging:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">/* Now enable paging */
	movl	R(_IdlePTD), %eax
	movl	%eax,%cr3			/* load ptd addr into mmu */
	movl	%cr0,%eax			/* get control word */
	orl	$CR0_PE|CR0_PG,%eax		/* enable paging */
	movl	%eax,%cr0			/* and let's page NOW! */</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The next three lines of code are because the paging was set,
      so the jump is needed to continue the execution in virtualized
      address space:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">	pushl	$begin				/* jump to high virtualized address */
	ret

/* now running relocated at KERNBASE where the system is linked to run */
begin:</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The function <function xmlns:xlink="http://www.w3.org/1999/xlink">init386()</function> is called with
      a pointer to the first free physical page, after that
      <function xmlns:xlink="http://www.w3.org/1999/xlink">mi_startup()</function>.  <function xmlns:xlink="http://www.w3.org/1999/xlink">init386</function>
      is an architecture dependent initialization function, and
      <function xmlns:xlink="http://www.w3.org/1999/xlink">mi_startup()</function> is an architecture independent
      one (the 'mi_' prefix stands for Machine Independent).  The
      kernel never returns from <function xmlns:xlink="http://www.w3.org/1999/xlink">mi_startup()</function>, and
      by calling it, the kernel finishes booting:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/i386/i386/locore.s:</filename>
	movl	physfree, %esi
	pushl	%esi				/* value of first for init386(first) */
	call	_init386			/* wire 386 chip for unix operation */
	call	_mi_startup			/* autoconfiguration, mountroot etc */
	hlt		/* never returns to here */</programlisting>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">init386()</function></title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">init386()</function> is defined in
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/i386/i386/machdep.c</filename> and performs
	low-level initialization specific to the i386 chip.  The
	switch to protected mode was performed by the loader.  The
	loader has created the very first task, in which the kernel
	continues to operate.  Before looking at the code, consider
	the tasks the processor must complete to initialize protected
	mode execution:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Initialize the kernel tunable parameters, passed from
	    the bootstrapping program.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Prepare the GDT.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Prepare the IDT.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Initialize the system console.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Initialize the DDB, if it is compiled into
	    kernel.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Initialize the TSS.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Prepare the LDT.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Set up proc0's pcb.</para>
	</listitem>
      </itemizedlist>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">parameters</primary></indexterm>
      <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">init386()</function> initializes the tunable
	parameters passed from bootstrap by setting the environment
	pointer (envp) and calling <function xmlns:xlink="http://www.w3.org/1999/xlink">init_param1()</function>.
	The envp pointer has been passed from loader in the
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">bootinfo</literal> structure:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/i386/i386/machdep.c:</filename>
		kern_envp = (caddr_t)bootinfo.bi_envp + KERNBASE;

	/* Init basic tunables, hz etc */
	init_param1();</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">init_param1()</function> is defined in
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/kern/subr_param.c</filename>.  That file has a
	number of sysctls, and two functions,
	<function xmlns:xlink="http://www.w3.org/1999/xlink">init_param1()</function> and
	<function xmlns:xlink="http://www.w3.org/1999/xlink">init_param2()</function>, that are called from
	<function xmlns:xlink="http://www.w3.org/1999/xlink">init386()</function>:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/kern/subr_param.c:</filename>
	hz = HZ;
	TUNABLE_INT_FETCH("kern.hz", &amp;hz);</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">TUNABLE_&lt;typename&gt;_FETCH is used to fetch the value
	from the environment:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/sys/sys/kernel.h:</filename>
#define	TUNABLE_INT_FETCH(path, var)	getenv_int((path), (var))</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Sysctl <literal xmlns:xlink="http://www.w3.org/1999/xlink">kern.hz</literal> is the system clock
	tick.  Additionally, these sysctls are set by
	<function xmlns:xlink="http://www.w3.org/1999/xlink">init_param1()</function>: <literal xmlns:xlink="http://www.w3.org/1999/xlink">kern.maxswzone,
	kern.maxbcache, kern.maxtsiz, kern.dfldsiz, kern.maxdsiz,
	  kern.dflssiz, kern.maxssiz, kern.sgrowsiz</literal>.</para>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink">
	<primary xmlns:xlink="http://www.w3.org/1999/xlink">Global Descriptors Table (GDT)</primary>
      </indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Then <function xmlns:xlink="http://www.w3.org/1999/xlink">init386()</function> prepares the Global
	Descriptors Table (GDT).  Every task on an x86 is running in
	its own virtual address space, and this space is addressed by
	a segment:offset pair.  Say, for instance, the current
	instruction to be executed by the processor lies at CS:EIP,
	then the linear virtual address for that instruction would be
	<quote xmlns:xlink="http://www.w3.org/1999/xlink">the virtual address of code segment CS</quote> + EIP.
	For convenience, segments begin at virtual address 0 and end
	at a 4Gb boundary.  Therefore, the instruction's linear
	virtual address for this example would just be the value of
	EIP. Segment registers such as CS, DS etc are the selectors,
	i.e., indexes, into GDT (to be more precise, an index is not a
	selector itself, but the INDEX field of a selector).
	FreeBSD's GDT holds descriptors for 15 selectors per
	CPU:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/i386/i386/machdep.c:</filename>
union descriptor gdt[NGDT * MAXCPU];	/* global descriptor table */

<filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/i386/include/segments.h:</filename>
/*
 * Entries in the Global Descriptor Table (GDT)
 */
#define	GNULL_SEL	0	/* Null Descriptor */
#define	GCODE_SEL	1	/* Kernel Code Descriptor */
#define	GDATA_SEL	2	/* Kernel Data Descriptor */
#define	GPRIV_SEL	3	/* SMP Per-Processor Private Data */
#define	GPROC0_SEL	4	/* Task state process slot zero and up */
#define	GLDT_SEL	5	/* LDT - eventually one per process */
#define	GUSERLDT_SEL	6	/* User LDT */
#define	GTGATE_SEL	7	/* Process task switch gate */
#define	GBIOSLOWMEM_SEL	8	/* BIOS low memory access (must be entry 8) */
#define	GPANIC_SEL	9	/* Task state to consider panic from */
#define GBIOSCODE32_SEL	10	/* BIOS interface (32bit Code) */
#define GBIOSCODE16_SEL	11	/* BIOS interface (16bit Code) */
#define GBIOSDATA_SEL	12	/* BIOS interface (Data) */
#define GBIOSUTIL_SEL	13	/* BIOS interface (Utility) */
#define GBIOSARGS_SEL	14	/* BIOS interface (Arguments) */</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Note that those #defines are not selectors themselves, but
	just a field INDEX of a selector, so they are exactly the
	indices of the GDT.  for example, an actual selector for the
	kernel code (GCODE_SEL) has the value 0x08.</para>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">Interrupt Descriptor Table
	  (IDT)</primary></indexterm>
      <para xmlns:xlink="http://www.w3.org/1999/xlink">The next step is to initialize the Interrupt Descriptor
	Table (IDT).  This table is referenced by the processor when a
	software or hardware interrupt occurs.  For example, to make a
	system call, user application issues the
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">INT 0x80</literal> instruction.  This is a software
	interrupt, so the processor's hardware looks up a record with
	index 0x80 in the IDT.  This record points to the routine that
	handles this interrupt, in this particular case, this will be
	the kernel's syscall gate.  The IDT may have a maximum of 256
	(0x100) records.  The kernel allocates NIDT records for the
	IDT, where NIDT is the maximum (256):</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/i386/i386/machdep.c:</filename>
static struct gate_descriptor idt0[NIDT];
struct gate_descriptor *idt = &amp;idt0[0];	/* interrupt descriptor table */</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">For each interrupt, an appropriate handler is set.  The
	syscall gate for <literal xmlns:xlink="http://www.w3.org/1999/xlink">INT 0x80</literal> is set as
	well:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/i386/i386/machdep.c:</filename>
	setidt(0x80, &amp;IDTVEC(int0x80_syscall),
			SDT_SYS386TGT, SEL_UPL, GSEL(GCODE_SEL, SEL_KPL));</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">So when a userland application issues the
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">INT 0x80</literal> instruction, control will transfer
	to the function <function xmlns:xlink="http://www.w3.org/1999/xlink">_Xint0x80_syscall</function>, which
	is in the kernel code segment and will be executed with
	supervisor privileges.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Console and DDB are then initialized:</para>
      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">DDB</primary></indexterm>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/i386/i386/machdep.c:</filename>
	cninit();
/* skipped */
#ifdef DDB
	kdb_init();
	if (boothowto &amp; RB_KDB)
		Debugger("Boot flags requested debugger");
#endif</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The Task State Segment is another x86 protected mode
	structure, the TSS is used by the hardware to store task
	information when a task switch occurs.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The Local Descriptors Table is used to reference userland
	code and data.  Several selectors are defined to point to the
	LDT, they are the system call gates and the user code and data
	selectors:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/include/machine/segments.h:</filename>
#define	LSYS5CALLS_SEL	0	/* forced by intel BCS */
#define	LSYS5SIGR_SEL	1
#define	L43BSDCALLS_SEL	2	/* notyet */
#define	LUCODE_SEL	3
#define	LSOL26CALLS_SEL	4	/* Solaris &gt;= 2.6 system call gate */
#define	LUDATA_SEL	5
/* separate stack, es,fs,gs sels ? */
/* #define	LPOSIXCALLS_SEL	5*/	/* notyet */
#define LBSDICALLS_SEL	16	/* BSDI system call gate */
#define NLDT		(LBSDICALLS_SEL + 1)</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Next, proc0's Process Control Block
	(<literal xmlns:xlink="http://www.w3.org/1999/xlink">struct pcb</literal>) structure is initialized.
	proc0 is a <literal xmlns:xlink="http://www.w3.org/1999/xlink">struct proc</literal> structure that
	describes a kernel process.  It is always present while the
	kernel is running, therefore it is declared as global:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/kern/kern_init.c:</filename>
    struct	proc proc0;</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The structure <literal xmlns:xlink="http://www.w3.org/1999/xlink">struct pcb</literal> is a part of a
	proc structure.  It is defined in
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/include/machine/pcb.h</filename> and has a
	process's information specific to the i386 architecture, such
	as registers values.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mi_startup()</function></title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">This function performs a bubble sort of all the system
	initialization objects and then calls the entry of each object
	one by one:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/kern/init_main.c:</filename>
	for (sipp = sysinit; *sipp; sipp++) {

		/* ... skipped ... */

		/* Call function */
		(*((*sipp)-&gt;func))((*sipp)-&gt;udata);
		/* ... skipped ... */
	}</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Although the sysinit framework is described in the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="../../../../doc/en_US.ISO8859-1/books/developers-handbook">Developers'
	  Handbook</link>, I will discuss the internals of it.</para>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">sysinit objects</primary></indexterm>
      <para xmlns:xlink="http://www.w3.org/1999/xlink">Every system initialization object (sysinit object) is
	created by calling a SYSINIT() macro.  Let us take as example
	an <literal xmlns:xlink="http://www.w3.org/1999/xlink">announce</literal> sysinit object.  This object
	prints the copyright message:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/kern/init_main.c:</filename>
static void
print_caddr_t(void *data __unused)
{
	printf("%s", (char *)data);
}
SYSINIT(announce, SI_SUB_COPYRIGHT, SI_ORDER_FIRST, print_caddr_t, copyright)</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The subsystem ID for this object is SI_SUB_COPYRIGHT
	(0x0800001), which comes right after the SI_SUB_CONSOLE
	(0x0800000).  So, the copyright message will be printed out
	first, just after the console initialization.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Let us take a look at what exactly the macro
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">SYSINIT()</literal> does.  It expands to a
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">C_SYSINIT()</literal> macro.  The
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">C_SYSINIT()</literal> macro then expands to a static
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">struct sysinit</literal> structure declaration with
	another <literal xmlns:xlink="http://www.w3.org/1999/xlink">DATA_SET</literal> macro call:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/include/sys/kernel.h:</filename>
      #define C_SYSINIT(uniquifier, subsystem, order, func, ident) \
      static struct sysinit uniquifier ## _sys_init = { \ subsystem, \
      order, \ func, \ ident \ }; \ DATA_SET(sysinit_set,uniquifier ##
      _sys_init);

#define	SYSINIT(uniquifier, subsystem, order, func, ident)	\
	C_SYSINIT(uniquifier, subsystem, order,			\
	(sysinit_cfunc_t)(sysinit_nfunc_t)func, (void *)ident)</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The <literal xmlns:xlink="http://www.w3.org/1999/xlink">DATA_SET()</literal> macro expands to a
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">MAKE_SET()</literal>, and that macro is the point
	where all the sysinit magic is hidden:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/include/linker_set.h:</filename>
#define MAKE_SET(set, sym)						\
	static void const * const __set_##set##_sym_##sym = &amp;sym;	\
	__asm(".section .set." #set ",\"aw\"");				\
	__asm(".long " #sym);						\
	__asm(".previous")
#endif
#define TEXT_SET(set, sym) MAKE_SET(set, sym)
#define DATA_SET(set, sym) MAKE_SET(set, sym)</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">In our case, the following declaration will occur:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">static struct sysinit announce_sys_init = {
	SI_SUB_COPYRIGHT,
	SI_ORDER_FIRST,
	(sysinit_cfunc_t)(sysinit_nfunc_t)  print_caddr_t,
	(void *) copyright
};

static void const *const __set_sysinit_set_sym_announce_sys_init =
    &amp;announce_sys_init;
__asm(".section .set.sysinit_set" ",\"aw\"");
__asm(".long " "announce_sys_init");
__asm(".previous");</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The first <literal xmlns:xlink="http://www.w3.org/1999/xlink">__asm</literal> instruction will create
	an ELF section within the kernel's executable.  This will
	happen at kernel link time.  The section will have the name
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">.set.sysinit_set</literal>.  The content of this
	section is one 32-bit value, the address of announce_sys_init
	structure, and that is what the second
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">__asm</literal> is.  The third
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">__asm</literal> instruction marks the end of a
	section.  If a directive with the same section name occurred
	before, the content, i.e., the 32-bit value, will be appended
	to the existing section, so forming an array of 32-bit
	pointers.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Running <application xmlns:xlink="http://www.w3.org/1999/xlink">objdump</application> on a kernel
	binary, you may notice the presence of such small
	sections:</para>

      <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">%</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">objdump -h /kernel</userinput>
  7 .set.cons_set 00000014  c03164c0  c03164c0  002154c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .set.kbddriver_set 00000010  c03164d4  c03164d4  002154d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .set.scrndr_set 00000024  c03164e4  c03164e4  002154e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .set.scterm_set 0000000c  c0316508  c0316508  00215508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .set.sysctl_set 0000097c  c0316514  c0316514  00215514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .set.sysinit_set 00000664  c0316e90  c0316e90  00215e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA</screen>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">This screen dump shows that the size of .set.sysinit_set
	section is 0x664 bytes, so <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x664/sizeof(void
	*)</literal> sysinit objects are compiled into the kernel.
	The other sections such as <literal xmlns:xlink="http://www.w3.org/1999/xlink">.set.sysctl_set</literal>
	represent other linker sets.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">By defining a variable of type <literal xmlns:xlink="http://www.w3.org/1999/xlink">struct
	  linker_set</literal> the content of
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">.set.sysinit_set</literal> section will be
	<quote xmlns:xlink="http://www.w3.org/1999/xlink">collected</quote> into that variable:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/kern/init_main.c:</filename>
      extern struct linker_set sysinit_set; /* XXX */</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The <literal xmlns:xlink="http://www.w3.org/1999/xlink">struct linker_set</literal> is defined as
	follows:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/include/linker_set.h:</filename>
  struct linker_set {
	int	ls_length;
	void	*ls_items[1];		/* really ls_length of them, trailing NULL */
};</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The first node will be equal to the number of a sysinit
	objects, and the second node will be a NULL-terminated array
	of pointers to them.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Returning to the <function xmlns:xlink="http://www.w3.org/1999/xlink">mi_startup()</function>
	discussion, it is must be clear now, how the sysinit objects
	are being organized.  The <function xmlns:xlink="http://www.w3.org/1999/xlink">mi_startup()</function>
	function sorts them and calls each.  The very last object is
	the system scheduler:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/include/sys/kernel.h:</filename>
enum sysinit_sub_id {
	SI_SUB_DUMMY		= 0x0000000,	/* not executed; for linker*/
	SI_SUB_DONE		= 0x0000001,	/* processed*/
	SI_SUB_CONSOLE		= 0x0800000,	/* console*/
	SI_SUB_COPYRIGHT	= 0x0800001,	/* first use of console*/
...
	SI_SUB_RUN_SCHEDULER	= 0xfffffff	/* scheduler: no return*/
};</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The system scheduler sysinit object is defined in the file
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/vm/vm_glue.c</filename>, and the entry point for
	that object is <function xmlns:xlink="http://www.w3.org/1999/xlink">scheduler()</function>.  That
	function is actually an infinite loop, and it represents a
	process with PID 0, the swapper process.  The proc0 structure,
	mentioned before, is used to describe it.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The first user process, called <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">init</emphasis>,
	is created by the sysinit object
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">init</literal>:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/kern/init_main.c:</filename>
static void
create_init(const void *udata __unused)
{
	int error;
	int s;

	s = splhigh();
	error = fork1(&amp;proc0, RFFDG | RFPROC, &amp;initproc);
	if (error)
		panic("cannot fork init: %d\n", error);
	initproc-&gt;p_flag |= P_INMEM | P_SYSTEM;
	cpu_set_fork_handler(initproc, start_init, NULL);
	remrunqueue(initproc);
	splx(s);
}
SYSINIT(init,SI_SUB_CREATE_INIT, SI_ORDER_FIRST, create_init, NULL)</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The <function xmlns:xlink="http://www.w3.org/1999/xlink">create_init()</function> allocates a new
	process by calling <function xmlns:xlink="http://www.w3.org/1999/xlink">fork1()</function>, but does not
	mark it runnable.  When this new process is scheduled for
	execution by the scheduler, the
	<function xmlns:xlink="http://www.w3.org/1999/xlink">start_init()</function> will be called.  That
	function is defined in <filename xmlns:xlink="http://www.w3.org/1999/xlink">init_main.c</filename>.  It
	tries to load and exec the <filename xmlns:xlink="http://www.w3.org/1999/xlink">init</filename> binary,
	probing <filename xmlns:xlink="http://www.w3.org/1999/xlink">/sbin/init</filename> first, then
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">/sbin/oinit</filename>,
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">/sbin/init.bak</filename>, and finally
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">/stand/sysinstall</filename>:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/kern/init_main.c:</filename>
static char init_path[MAXPATHLEN] =
#ifdef	INIT_PATH
    __XSTRING(INIT_PATH);
#else
    "/sbin/init:/sbin/oinit:/sbin/init.bak:/stand/sysinstall";
#endif</programlisting>
    </sect2>
  </sect1>
</chapter>

    
<!--
     The FreeBSD Documentation Project
     The FreeBSD SMP Next Generation Project

     $FreeBSD$
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="locking">
  <title xmlns:xlink="http://www.w3.org/1999/xlink">Locking Notes</title>

  <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">SMP Next Generation Project</primary></indexterm>
  <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">This chapter is maintained by the FreeBSD SMP Next
    Generation Project.</emphasis></para>

  <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">locking</primary></indexterm>
  <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">multi-processing</primary></indexterm>
  <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">mutexes</primary></indexterm>
  <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">lockmgr</primary></indexterm>
  <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">atomic operations</primary></indexterm>
  <para xmlns:xlink="http://www.w3.org/1999/xlink">This document outlines the locking used in the FreeBSD kernel
    to permit effective multi-processing within the kernel.  Locking
    can be achieved via several means.  Data structures can be
    protected by mutexes or <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">lockmgr</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry> locks.  A few variables
    are protected simply by always using atomic operations to access
    them.</para>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="locking-mutexes">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Mutexes</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">A mutex is simply a lock used to guarantee mutual exclusion.
      Specifically, a mutex may only be owned by one entity at a time.
      If another entity wishes to obtain a mutex that is already
      owned, it must wait until the mutex is released.  In the FreeBSD
      kernel, mutexes are owned by processes.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Mutexes may be recursively acquired, but they are intended
      to be held for a short period of time.  Specifically, one may
      not sleep while holding a mutex.  If you need to hold a lock
      across a sleep, use a <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">lockmgr</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry> lock.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Each mutex has several properties of interest:</para>

    <variablelist xmlns:xlink="http://www.w3.org/1999/xlink">
	<varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	<term xmlns:xlink="http://www.w3.org/1999/xlink">Variable Name</term>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">The name of the <type xmlns:xlink="http://www.w3.org/1999/xlink">struct mtx</type> variable in
	    the kernel source.</para>
	</listitem>
      </varlistentry>

      <varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	<term xmlns:xlink="http://www.w3.org/1999/xlink">Logical Name</term>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">The name of the mutex assigned to it by
	    <function xmlns:xlink="http://www.w3.org/1999/xlink">mtx_init</function>.  This name is displayed in
	    KTR trace messages and witness errors and warnings and is
	    used to distinguish mutexes in the witness code.</para>
	</listitem>
      </varlistentry>

      <varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	<term xmlns:xlink="http://www.w3.org/1999/xlink">Type</term>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">The type of the mutex in terms of the
	    <constant xmlns:xlink="http://www.w3.org/1999/xlink">MTX_*</constant> flags.  The meaning for each
	    flag is related to its meaning as documented in
	    <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">mutex</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry>.</para>

	  <variablelist xmlns:xlink="http://www.w3.org/1999/xlink">
	    <varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	      <term xmlns:xlink="http://www.w3.org/1999/xlink"><constant xmlns:xlink="http://www.w3.org/1999/xlink">MTX_DEF</constant></term>
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">A sleep mutex</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	      <term xmlns:xlink="http://www.w3.org/1999/xlink"><constant xmlns:xlink="http://www.w3.org/1999/xlink">MTX_SPIN</constant></term>
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">A spin mutex</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	      <term xmlns:xlink="http://www.w3.org/1999/xlink"><constant xmlns:xlink="http://www.w3.org/1999/xlink">MTX_RECURSE</constant></term>
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">This mutex is allowed to recurse.</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </varlistentry>

      <varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	<term xmlns:xlink="http://www.w3.org/1999/xlink">Protectees</term>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">A list of data structures or data structure members
	    that this entry protects.  For data structure members, the
	    name will be in the form of
	    <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">structure name</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">member name</varname>.</para>
	</listitem>
      </varlistentry>

      <varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	<term xmlns:xlink="http://www.w3.org/1999/xlink">Dependent Functions</term>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Functions that can only be called if this mutex is
	    held.</para>
	</listitem>
      </varlistentry>
    </variablelist>

    <table xmlns:xlink="http://www.w3.org/1999/xlink" frame="all" colsep="1" rowsep="1" pgwide="1">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Mutex List</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">locks</primary>
        <secondary xmlns:xlink="http://www.w3.org/1999/xlink">sched_lock</secondary></indexterm>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">locks</primary>
        <secondary xmlns:xlink="http://www.w3.org/1999/xlink">vm86pcb_lock</secondary></indexterm>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">locks</primary>
        <secondary xmlns:xlink="http://www.w3.org/1999/xlink">Giant</secondary></indexterm>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">locks</primary>
        <secondary xmlns:xlink="http://www.w3.org/1999/xlink">callout_lock</secondary></indexterm>

      <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="5">
	<thead xmlns:xlink="http://www.w3.org/1999/xlink">
	  <row xmlns:xlink="http://www.w3.org/1999/xlink">
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink">Variable Name</entry>
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink">Logical Name</entry>
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink">Type</entry>
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink">Protectees</entry>
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink">Dependent Functions</entry>
	  </row>
	</thead>

	<!-- The scheduler lock -->
	<tbody xmlns:xlink="http://www.w3.org/1999/xlink">
	  <row xmlns:xlink="http://www.w3.org/1999/xlink">
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink">sched_lock</entry>
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink"><quote xmlns:xlink="http://www.w3.org/1999/xlink">sched lock</quote></entry>
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink">
	      <constant xmlns:xlink="http://www.w3.org/1999/xlink">MTX_SPIN</constant> |
	      <constant xmlns:xlink="http://www.w3.org/1999/xlink">MTX_RECURSE</constant>
	    </entry>
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink">
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink">_gmonparam</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink">cnt.v_swtch</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink">cp_time</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink">curpriority</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">mtx</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">mtx_blocked</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">mtx</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">mtx_contested</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_procq</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_slpq</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_sflag</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_stat</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_estcpu</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_cpticks</varname>
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_pctcpu</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_wchan</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_wmesg</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_swtime</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_slptime</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_runtime</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_uu</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_su</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_iu</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_uticks</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_sticks</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_iticks</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_oncpu</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_lastcpu</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_rqindex</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_heldmtx</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_blocked</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_mtxname</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_contested</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_priority</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_usrpri</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_nativepri</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_nice</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_rtprio</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink">pscnt</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink">slpque</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink">itqueuebits</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink">itqueues</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink">rtqueuebits</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink">rtqueues</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink">queuebits</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink">queues</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink">idqueuebits</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink">idqueues</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink">switchtime</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink">switchticks</varname>
	    </entry>
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink">
	      <function xmlns:xlink="http://www.w3.org/1999/xlink">setrunqueue</function>,
	      <function xmlns:xlink="http://www.w3.org/1999/xlink">remrunqueue</function>,
	      <function xmlns:xlink="http://www.w3.org/1999/xlink">mi_switch</function>,
	      <function xmlns:xlink="http://www.w3.org/1999/xlink">chooseproc</function>,
	      <function xmlns:xlink="http://www.w3.org/1999/xlink">schedclock</function>,
	      <function xmlns:xlink="http://www.w3.org/1999/xlink">resetpriority</function>,
	      <function xmlns:xlink="http://www.w3.org/1999/xlink">updatepri</function>,
	      <function xmlns:xlink="http://www.w3.org/1999/xlink">maybe_resched</function>,
	      <function xmlns:xlink="http://www.w3.org/1999/xlink">cpu_switch</function>,
	      <function xmlns:xlink="http://www.w3.org/1999/xlink">cpu_throw</function>,
	      <function xmlns:xlink="http://www.w3.org/1999/xlink">need_resched</function>,
	      <function xmlns:xlink="http://www.w3.org/1999/xlink">resched_wanted</function>,
	      <function xmlns:xlink="http://www.w3.org/1999/xlink">clear_resched</function>,
	      <function xmlns:xlink="http://www.w3.org/1999/xlink">aston</function>,
	      <function xmlns:xlink="http://www.w3.org/1999/xlink">astoff</function>,
	      <function xmlns:xlink="http://www.w3.org/1999/xlink">astpending</function>,
	      <function xmlns:xlink="http://www.w3.org/1999/xlink">calcru</function>,
	      <function xmlns:xlink="http://www.w3.org/1999/xlink">proc_compare</function>
	    </entry>
	  </row>

	  <!-- The vm86 pcb lock -->
	  <row xmlns:xlink="http://www.w3.org/1999/xlink">
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink">vm86pcb_lock</entry>
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink"><quote xmlns:xlink="http://www.w3.org/1999/xlink">vm86pcb lock</quote></entry>
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink">
	      <constant xmlns:xlink="http://www.w3.org/1999/xlink">MTX_DEF</constant>
	    </entry>
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink">
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink">vm86pcb</varname>
	    </entry>
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink">
	      <function xmlns:xlink="http://www.w3.org/1999/xlink">vm86_bioscall</function>
	    </entry>
	  </row>

	  <!-- Giant -->
	  <row xmlns:xlink="http://www.w3.org/1999/xlink">
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink">Giant</entry>
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink"><quote xmlns:xlink="http://www.w3.org/1999/xlink">Giant</quote></entry>
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink">
	      <constant xmlns:xlink="http://www.w3.org/1999/xlink">MTX_DEF</constant> |
	      <constant xmlns:xlink="http://www.w3.org/1999/xlink">MTX_RECURSE</constant>
	    </entry>
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink">nearly everything</entry>
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink">lots</entry>
	  </row>

	  <!-- The callout lock -->
	  <row xmlns:xlink="http://www.w3.org/1999/xlink">
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink">callout_lock</entry>
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink"><quote xmlns:xlink="http://www.w3.org/1999/xlink">callout lock</quote></entry>
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink">
	      <constant xmlns:xlink="http://www.w3.org/1999/xlink">MTX_SPIN</constant> |
	      <constant xmlns:xlink="http://www.w3.org/1999/xlink">MTX_RECURSE</constant>
	    </entry>
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink">
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink">callfree</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink">callwheel</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink">nextsoftcheck</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_itcallout</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_slpcallout</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink">softticks</varname>,
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink">ticks</varname>
	    </entry>
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink">
	    </entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="locking-sx">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Shared Exclusive Locks</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">These locks provide basic reader-writer type functionality
      and may be held by a sleeping process.  Currently they are
      backed by <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">lockmgr</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry>.</para>
      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">locks</primary>
        <secondary xmlns:xlink="http://www.w3.org/1999/xlink">shared exclusive</secondary></indexterm>

    <table xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Shared Exclusive Lock List</title>
      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">locks</primary>
        <secondary xmlns:xlink="http://www.w3.org/1999/xlink">allproc_lock</secondary></indexterm>
      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">locks</primary>
        <secondary xmlns:xlink="http://www.w3.org/1999/xlink">proctree_lock</secondary></indexterm>

      <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="2">
	<thead xmlns:xlink="http://www.w3.org/1999/xlink">
	  <row xmlns:xlink="http://www.w3.org/1999/xlink">
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink">Variable Name</entry>
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink">Protectees</entry>
	  </row>
	</thead>
	<tbody xmlns:xlink="http://www.w3.org/1999/xlink">
	  <row xmlns:xlink="http://www.w3.org/1999/xlink">
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink"><varname xmlns:xlink="http://www.w3.org/1999/xlink">allproc_lock</varname></entry>
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink">
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink">allproc</varname>
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink">zombproc</varname>
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink">pidhashtbl</varname>
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_list</varname>
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_hash</varname>
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink">nextpid</varname>
	    </entry>
	  </row>
	  <row xmlns:xlink="http://www.w3.org/1999/xlink">
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink"><varname xmlns:xlink="http://www.w3.org/1999/xlink">proctree_lock</varname></entry>
	    <entry xmlns:xlink="http://www.w3.org/1999/xlink">
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_children</varname>
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">proc</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_sibling</varname>
	    </entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="locking-atomic">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Atomically Protected Variables</title>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">atomically protected variables</primary></indexterm>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">An atomically protected variable is a special variable that
      is not protected by an explicit lock.  Instead, all data
      accesses to the variables use special atomic operations as
      described in <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">atomic</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry>.  Very few variables are treated
      this way, although other synchronization primitives such as
      mutexes are implemented with atomically protected
      variables.</para>

    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">mtx</varname>.<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">mtx_lock</varname></para>
      </listitem>
    </itemizedlist>
  </sect1>
</chapter>

    
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="kernel-objects">
  <title xmlns:xlink="http://www.w3.org/1999/xlink">Kernel Objects</title>

  <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">Kernel Objects</primary></indexterm>
  <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">Object-Oriented</primary></indexterm>
  <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">binary compatibility</primary></indexterm>
  <para xmlns:xlink="http://www.w3.org/1999/xlink">Kernel Objects, or <firstterm xmlns:xlink="http://www.w3.org/1999/xlink">Kobj</firstterm> provides an
    object-oriented C programming system for the kernel. As such the
    data being operated on carries the description of how to operate
    on it. This allows operations to be added and removed from an
    interface at run time and without breaking binary
    compatibility.</para>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="kernel-objects-term">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Terminology</title>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">object</primary></indexterm>
    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">method</primary></indexterm>
    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">class</primary></indexterm>
    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">interface</primary></indexterm>

    <variablelist xmlns:xlink="http://www.w3.org/1999/xlink">
      <varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	<term xmlns:xlink="http://www.w3.org/1999/xlink">Object</term>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">A set of data - data structure - data
	allocation.</para>
	</listitem>
      </varlistentry>
      <varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	<term xmlns:xlink="http://www.w3.org/1999/xlink">Method</term>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">An operation - function.</para>
	</listitem>
      </varlistentry>
      <varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	<term xmlns:xlink="http://www.w3.org/1999/xlink">Class</term>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">One or more methods.</para>
	</listitem>
      </varlistentry>
      <varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	<term xmlns:xlink="http://www.w3.org/1999/xlink">Interface</term>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">A standard set of one or more methods.</para>
	</listitem>
      </varlistentry>
    </variablelist>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="kernel-objects-operation">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Kobj Operation</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Kobj works by generating descriptions of methods. Each
      description holds a unique id as well as a default function. The
      description's address is used to uniquely identify the method
      within a class' method table.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">A class is built by creating a method table associating one
      or more functions with method descriptions. Before use the class
      is compiled. The compilation allocates a cache and associates it
      with the class. A unique id is assigned to each method
      description within the method table of the class if not already
      done so by another referencing class compilation. For every
      method to be used a function is generated by script to qualify
      arguments and automatically reference the method description for
      a lookup. The generated function looks up the method by using
      the unique id associated with the method description as a hash
      into the cache associated with the object's class. If the method
      is not cached the generated function proceeds to use the class'
      table to find the method. If the method is found then the
      associated function within the class is used; otherwise, the
      default function associated with the method description is
      used.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">These indirections can be visualized as the
      following:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">object-&gt;cache&lt;-&gt;class</programlisting>

  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="kernel-objects-using">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Using Kobj</title>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Structures</title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">struct kobj_method</programlisting>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Functions</title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">void kobj_class_compile(kobj_class_t cls);
void kobj_class_compile_static(kobj_class_t cls, kobj_ops_t ops);
void kobj_class_free(kobj_class_t cls);
kobj_t kobj_create(kobj_class_t cls, struct malloc_type *mtype, int mflags);
void kobj_init(kobj_t obj, kobj_class_t cls);
void kobj_delete(kobj_t obj, struct malloc_type *mtype);</programlisting>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Macros</title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">KOBJ_CLASS_FIELDS
KOBJ_FIELDS
DEFINE_CLASS(name, methods, size)
KOBJMETHOD(NAME, FUNC)</programlisting>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Headers</title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">&lt;sys/param.h&gt;
&lt;sys/kobj.h&gt;</programlisting>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Creating an Interface Template</title>

  <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">Kernel Objects</primary>
	<secondary xmlns:xlink="http://www.w3.org/1999/xlink">interface</secondary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The first step in using Kobj is to create an
        Interface. Creating the interface involves creating a template
        that the script
        <filename xmlns:xlink="http://www.w3.org/1999/xlink">src/sys/kern/makeobjops.pl</filename> can use to
        generate the header and code for the method declarations and
        method lookup functions.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Within this template the following keywords are used:
        <literal xmlns:xlink="http://www.w3.org/1999/xlink">#include</literal>, <literal xmlns:xlink="http://www.w3.org/1999/xlink">INTERFACE</literal>,
        <literal xmlns:xlink="http://www.w3.org/1999/xlink">CODE</literal>, <literal xmlns:xlink="http://www.w3.org/1999/xlink">METHOD</literal>,
        <literal xmlns:xlink="http://www.w3.org/1999/xlink">STATICMETHOD</literal>, and
        <literal xmlns:xlink="http://www.w3.org/1999/xlink">DEFAULT</literal>.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The <literal xmlns:xlink="http://www.w3.org/1999/xlink">#include</literal> statement and what follows
        it is copied verbatim to the head of the generated code
        file.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">For example:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">#include &lt;sys/foo.h&gt;</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The <literal xmlns:xlink="http://www.w3.org/1999/xlink">INTERFACE</literal> keyword is used to define
        the interface name. This name is concatenated with each method
        name as [interface name]_[method name]. Its syntax is
        INTERFACE [interface name];.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">For example:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">INTERFACE foo;</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The <literal xmlns:xlink="http://www.w3.org/1999/xlink">CODE</literal> keyword copies its arguments
      verbatim into the code file. Its syntax is
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">CODE { [whatever] };</literal></para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">For example:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">CODE {
	struct foo * foo_alloc_null(struct bar *)
	{
		return NULL;
}
};</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The <literal xmlns:xlink="http://www.w3.org/1999/xlink">METHOD</literal> keyword describes a method. Its syntax is
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">METHOD [return type] [method name] { [object [,
      arguments]] };</literal></para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">For example:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">METHOD int bar {
	struct object *;
	struct foo *;
	struct bar;
};</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The <literal xmlns:xlink="http://www.w3.org/1999/xlink">DEFAULT</literal> keyword may follow the
        <literal xmlns:xlink="http://www.w3.org/1999/xlink">METHOD</literal> keyword. It extends the
        <literal xmlns:xlink="http://www.w3.org/1999/xlink">METHOD</literal> key word to include the default
        function for method. The extended syntax is
        <literal xmlns:xlink="http://www.w3.org/1999/xlink">METHOD [return type] [method name] {
        [object; [other arguments]] }DEFAULT [default
        function];</literal></para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">For example:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">METHOD int bar {
	struct object *;
	struct foo *;
	int bar;
} DEFAULT foo_hack;</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The <literal xmlns:xlink="http://www.w3.org/1999/xlink">STATICMETHOD</literal> keyword is used like
      the <literal xmlns:xlink="http://www.w3.org/1999/xlink">METHOD</literal> keyword except the kobj data is not
      at the head of the object structure so casting to kobj_t would
      be incorrect. Instead <literal xmlns:xlink="http://www.w3.org/1999/xlink">STATICMETHOD</literal> relies on the Kobj data being
      referenced as 'ops'. This is also useful for calling
      methods directly out of a class's method table.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Other complete examples:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">src/sys/kern/bus_if.m
src/sys/kern/device_if.m</programlisting>

    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Creating a Class</title>

  <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">Kernel Objects</primary>
	<secondary xmlns:xlink="http://www.w3.org/1999/xlink">class</secondary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The second step in using Kobj is to create a class. A
        class consists of a name, a table of methods, and the size of
        objects if Kobj's object handling facilities are used. To
        create the class use the macro
        <function xmlns:xlink="http://www.w3.org/1999/xlink">DEFINE_CLASS()</function>. To create the method
        table create an array of kobj_method_t terminated by a NULL
        entry. Each non-NULL entry may be created using the macro
        <function xmlns:xlink="http://www.w3.org/1999/xlink">KOBJMETHOD()</function>.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">For example:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">DEFINE_CLASS(fooclass, foomethods, sizeof(struct foodata));

kobj_method_t foomethods[] = {
	KOBJMETHOD(bar_doo, foo_doo),
	KOBJMETHOD(bar_foo, foo_foo),
	{ NULL, NULL}
};</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The class must be <quote xmlns:xlink="http://www.w3.org/1999/xlink">compiled</quote>.  Depending on
        the state of the system at the time that the class is to be
        initialized a statically allocated cache, <quote xmlns:xlink="http://www.w3.org/1999/xlink">ops
        table</quote> have to be used. This can be accomplished by
        declaring a <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">struct kobj_ops</varname> and using
        <function xmlns:xlink="http://www.w3.org/1999/xlink">kobj_class_compile_static();</function> otherwise,
        <function xmlns:xlink="http://www.w3.org/1999/xlink">kobj_class_compile()</function> should be used.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Creating an Object</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">Kernel Objects</primary>
	<secondary xmlns:xlink="http://www.w3.org/1999/xlink">object</secondary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The third step in using Kobj involves how to define the
        object. Kobj object creation routines assume that Kobj data is
        at the head of an object. If this in not appropriate you will
        have to allocate the object yourself and then use
        <function xmlns:xlink="http://www.w3.org/1999/xlink">kobj_init()</function> on the Kobj portion of it;
        otherwise, you may use <function xmlns:xlink="http://www.w3.org/1999/xlink">kobj_create()</function> to
        allocate and initialize the Kobj portion of the object
        automatically. <function xmlns:xlink="http://www.w3.org/1999/xlink">kobj_init()</function> may also be
        used to change the class that an object uses.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">To integrate Kobj into the object you should use the macro
       KOBJ_FIELDS.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">For example</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">struct foo_data {
	KOBJ_FIELDS;
	foo_foo;
	foo_bar;
};</programlisting>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Calling Methods</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The last step in using Kobj is to simply use the generated
	functions to use the desired method within the object's
	class. This is as simple as using the interface name and the
	method name with a few modifications. The interface name
	should be concatenated with the method name using a '_'
	between them, all in upper case.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">For example, if the interface name was foo and the method
      was bar then the call would be:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">[return value = ] FOO_BAR(object [, other parameters]);</programlisting>

    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Cleaning Up</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">When an object allocated through
        <function xmlns:xlink="http://www.w3.org/1999/xlink">kobj_create()</function> is no longer needed
        <function xmlns:xlink="http://www.w3.org/1999/xlink">kobj_delete()</function> may be called on it, and
        when a class is no longer being used
        <function xmlns:xlink="http://www.w3.org/1999/xlink">kobj_class_free()</function> may be called on it.</para>
    </sect2>
  </sect1>
</chapter>

    
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="jail">
  <info><title xmlns:xlink="http://www.w3.org/1999/xlink">The Jail Subsystem</title>
    <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Evan</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Sarmiento</surname></personname><affiliation xmlns:xlink="http://www.w3.org/1999/xlink">
	<address xmlns:xlink="http://www.w3.org/1999/xlink"><email xmlns:xlink="http://www.w3.org/1999/xlink">evms@cs.bu.edu</email></address>
      </affiliation></author>
    <copyright xmlns:xlink="http://www.w3.org/1999/xlink">
      <year xmlns:xlink="http://www.w3.org/1999/xlink">2001</year>
      <holder xmlns:xlink="http://www.w3.org/1999/xlink" role="mailto:evms@cs.bu.edu">Evan Sarmiento</holder>
    </copyright>
  </info>
  

  <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">security</primary></indexterm>
  <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">Jail</primary></indexterm>
  <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">root</primary></indexterm>

  <para xmlns:xlink="http://www.w3.org/1999/xlink">On most <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> systems, <literal xmlns:xlink="http://www.w3.org/1999/xlink">root</literal> has omnipotent power.
    This promotes insecurity. If an attacker gained <literal xmlns:xlink="http://www.w3.org/1999/xlink">root</literal>
    on a system, he would have every function at his fingertips. In FreeBSD
    there are sysctls which dilute the power of <literal xmlns:xlink="http://www.w3.org/1999/xlink">root</literal>, in
    order to minimize the damage caused by an attacker. Specifically, one of
    these functions is called <literal xmlns:xlink="http://www.w3.org/1999/xlink">secure levels</literal>. Similarly,
    another function which is present from FreeBSD 4.0 and onward, is a utility
    called <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">jail</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry>. <application xmlns:xlink="http://www.w3.org/1999/xlink">Jail</application> chroots an environment
    and sets certain restrictions on processes which are forked within
    the <application xmlns:xlink="http://www.w3.org/1999/xlink">jail</application>. For example, a jailed process
    cannot affect processes outside the <application xmlns:xlink="http://www.w3.org/1999/xlink">jail</application>,
    utilize certain system calls, or inflict any damage on the host
    environment.</para>

  <para xmlns:xlink="http://www.w3.org/1999/xlink"><application xmlns:xlink="http://www.w3.org/1999/xlink">Jail</application> is becoming the new security
    model. People are running potentially vulnerable servers such as
    <application xmlns:xlink="http://www.w3.org/1999/xlink">Apache</application>, <application xmlns:xlink="http://www.w3.org/1999/xlink">BIND</application>, and
    <application xmlns:xlink="http://www.w3.org/1999/xlink">sendmail</application> within jails, so that if an attacker
    gains <literal xmlns:xlink="http://www.w3.org/1999/xlink">root</literal> within the <application xmlns:xlink="http://www.w3.org/1999/xlink">jail</application>,
    it is only an annoyance, and not a devastation. This article mainly
    focuses on the internals (source code) of <application xmlns:xlink="http://www.w3.org/1999/xlink">jail</application>.
    For information on how to set up a jail see the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="../../../../doc/en_US.ISO8859-1/books/handbook/jails.html">handbook entry on jails</link>.</para>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="jail-arch">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Architecture</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">
      <application xmlns:xlink="http://www.w3.org/1999/xlink">Jail</application> consists of two realms: the
      userland program, <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">jail</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry>, and the code implemented within
      the kernel: the <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">jail</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> system call and associated
      restrictions. I will be discussing the userland program and
      then how <application xmlns:xlink="http://www.w3.org/1999/xlink">jail</application> is implemented within
      the kernel.</para>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Userland Code</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">Jail</primary>
	<secondary xmlns:xlink="http://www.w3.org/1999/xlink">Userland Program</secondary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The source for the userland <application xmlns:xlink="http://www.w3.org/1999/xlink">jail</application>
        is located in <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/usr.sbin/jail</filename>,
        consisting of one file, <filename xmlns:xlink="http://www.w3.org/1999/xlink">jail.c</filename>. The program
        takes these arguments: the path of the <application xmlns:xlink="http://www.w3.org/1999/xlink">jail</application>,
        hostname, IP address, and the command to be executed.</para>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
        <title xmlns:xlink="http://www.w3.org/1999/xlink">Data Structures</title>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">In <filename xmlns:xlink="http://www.w3.org/1999/xlink">jail.c</filename>, the first thing I would
          note is the declaration of an important structure
          <literal xmlns:xlink="http://www.w3.org/1999/xlink">struct jail j;</literal> which was included from
          <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/include/sys/jail.h</filename>.</para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">The definition of the <literal xmlns:xlink="http://www.w3.org/1999/xlink">jail</literal> structure is:
</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/include/sys/jail.h</filename>:

struct jail {
        u_int32_t       version;
        char            *path;
        char            *hostname;
        u_int32_t       ip_number;
};</programlisting>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">As you can see, there is an entry for each of the
          arguments passed to the <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">jail</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> program, and indeed,
          they are set during its execution.</para>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/usr.sbin/jail/jail.c</filename>
char path[PATH_MAX];
...
if (realpath(argv[0], path) == NULL)
    err(1, "realpath: %s", argv[0]);
if (chdir(path) != 0)
    err(1, "chdir: %s", path);
memset(&amp;j, 0, sizeof(j));
j.version = 0;
j.path = path;
j.hostname = argv[1];</programlisting>

      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
        <title xmlns:xlink="http://www.w3.org/1999/xlink">Networking</title>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">One of the arguments passed to the <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">jail</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> program is
          an IP address with which the <application xmlns:xlink="http://www.w3.org/1999/xlink">jail</application>
          can be accessed over the network. <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">jail</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> translates the
          IP address given into host byte order and then stores it in
          <literal xmlns:xlink="http://www.w3.org/1999/xlink">j</literal> (the <literal xmlns:xlink="http://www.w3.org/1999/xlink">jail</literal> structure).</para>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/usr.sbin/jail/jail.c</filename>:
struct in_addr in;
...
if (inet_aton(argv[2], &amp;in) == 0)
    errx(1, "Could not make sense of ip-number: %s", argv[2]);
j.ip_number = ntohl(in.s_addr);</programlisting>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">The <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">inet_aton</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry> function "interprets the specified
          character string as an Internet address, placing the address
          into the structure provided." The <literal xmlns:xlink="http://www.w3.org/1999/xlink">ip_number</literal>
          member in the <literal xmlns:xlink="http://www.w3.org/1999/xlink">jail</literal> structure is set only
          when the IP address placed onto the <literal xmlns:xlink="http://www.w3.org/1999/xlink">in</literal>
          structure by <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">inet_aton</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry> is translated into host byte
          order by <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">ntohl</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry>.</para>

      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
        <title xmlns:xlink="http://www.w3.org/1999/xlink">Jailing the Process</title>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Finally, the userland program jails the process.
          <application xmlns:xlink="http://www.w3.org/1999/xlink">Jail</application> now becomes an imprisoned
          process itself and then executes the command given using
          <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">execv</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry>.</para>
        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/usr.sbin/jail/jail.c</filename>
i = jail(&amp;j);
...
if (execv(argv[3], argv + 3) != 0)
    err(1, "execv: %s", argv[3]);</programlisting>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">As you can see, the <literal xmlns:xlink="http://www.w3.org/1999/xlink">jail()</literal> function is
          called, and its argument is the <literal xmlns:xlink="http://www.w3.org/1999/xlink">jail</literal> structure
          which has been filled with the arguments given to the program.
          Finally, the program you specify is executed. I will now discuss
          how <application xmlns:xlink="http://www.w3.org/1999/xlink">jail</application> is implemented within the
          kernel.</para>
      </sect3>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Kernel Space</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">Jail</primary>
	<secondary xmlns:xlink="http://www.w3.org/1999/xlink">Kernel Architecture</secondary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">We will now be looking at the file
        <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/sys/kern/kern_jail.c</filename>.  This is
        the file where the <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">jail</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> system call, appropriate sysctls,
        and networking functions are defined.</para>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
        <title xmlns:xlink="http://www.w3.org/1999/xlink">sysctls</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">sysctl</primary></indexterm>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">In <filename xmlns:xlink="http://www.w3.org/1999/xlink">kern_jail.c</filename>, the following
          sysctls are defined:</para>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/sys/kern/kern_jail.c:</filename>

int     jail_set_hostname_allowed = 1;
SYSCTL_INT(_security_jail, OID_AUTO, set_hostname_allowed, CTLFLAG_RW,
    &amp;jail_set_hostname_allowed, 0,
    "Processes in jail can set their hostnames");

int     jail_socket_unixiproute_only = 1;
SYSCTL_INT(_security_jail, OID_AUTO, socket_unixiproute_only, CTLFLAG_RW,
    &amp;jail_socket_unixiproute_only, 0,
    "Processes in jail are limited to creating UNIX/IPv4/route sockets only");

int     jail_sysvipc_allowed = 0;
SYSCTL_INT(_security_jail, OID_AUTO, sysvipc_allowed, CTLFLAG_RW,
    &amp;jail_sysvipc_allowed, 0,
    "Processes in jail can use System V IPC primitives");

static int jail_enforce_statfs = 2;
SYSCTL_INT(_security_jail, OID_AUTO, enforce_statfs, CTLFLAG_RW,
    &amp;jail_enforce_statfs, 0,
    "Processes in jail cannot see all mounted file systems");

int    jail_allow_raw_sockets = 0;
SYSCTL_INT(_security_jail, OID_AUTO, allow_raw_sockets, CTLFLAG_RW,
    &amp;jail_allow_raw_sockets, 0,
    "Prison root can create raw sockets");

int    jail_chflags_allowed = 0;
SYSCTL_INT(_security_jail, OID_AUTO, chflags_allowed, CTLFLAG_RW,
    &amp;jail_chflags_allowed, 0,
    "Processes in jail can alter system file flags");

int     jail_mount_allowed = 0;
SYSCTL_INT(_security_jail, OID_AUTO, mount_allowed, CTLFLAG_RW,
    &amp;jail_mount_allowed, 0,
    "Processes in jail can mount/unmount jail-friendly file systems");</programlisting>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Each of these sysctls can be accessed by the user
          through the <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">sysctl</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> program. Throughout the kernel, these
          specific sysctls are recognized by their name. For example,
          the name of the first sysctl is
          <literal xmlns:xlink="http://www.w3.org/1999/xlink">security.jail.set_hostname_allowed</literal>.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">jail</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> System Call</title>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Like all system calls, the <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">jail</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> system call takes
          two arguments, <literal xmlns:xlink="http://www.w3.org/1999/xlink">struct thread *td</literal> and
          <literal xmlns:xlink="http://www.w3.org/1999/xlink">struct jail_args *uap</literal>.
          <literal xmlns:xlink="http://www.w3.org/1999/xlink">td</literal> is a pointer to the <literal xmlns:xlink="http://www.w3.org/1999/xlink">thread</literal>
          structure which describes the calling thread. In this
          context, <literal xmlns:xlink="http://www.w3.org/1999/xlink">uap</literal> is a pointer to the structure
          in which a pointer to the <literal xmlns:xlink="http://www.w3.org/1999/xlink">jail</literal> structure
          passed by the userland <filename xmlns:xlink="http://www.w3.org/1999/xlink">jail.c</filename> is contained.
          When I described the userland program before, you saw that the
          <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">jail</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> system call was given a <literal xmlns:xlink="http://www.w3.org/1999/xlink">jail</literal>
          structure as its own argument.</para>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/sys/kern/kern_jail.c:</filename>
/*
 * struct jail_args {
 *  struct jail *jail;
 * };
 */
int
jail(struct thread *td, struct jail_args *uap)</programlisting>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Therefore, <literal xmlns:xlink="http://www.w3.org/1999/xlink">uap-&gt;jail</literal> can be used to
          access the <literal xmlns:xlink="http://www.w3.org/1999/xlink">jail</literal> structure which was passed
          to the system call. Next, the system call copies the
          <literal xmlns:xlink="http://www.w3.org/1999/xlink">jail</literal> structure into kernel space using
          the <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">copyin</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry> function. <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">copyin</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry> takes three arguments:
          the address of the data which is to be copied into kernel space,
          <literal xmlns:xlink="http://www.w3.org/1999/xlink">uap-&gt;jail</literal>, where to store it,
          <literal xmlns:xlink="http://www.w3.org/1999/xlink">j</literal> and the size of the storage. The
          <literal xmlns:xlink="http://www.w3.org/1999/xlink">jail</literal> structure pointed by
          <literal xmlns:xlink="http://www.w3.org/1999/xlink">uap-&gt;jail</literal> is copied into kernel space and
          is stored in another <literal xmlns:xlink="http://www.w3.org/1999/xlink">jail</literal> structure,
          <literal xmlns:xlink="http://www.w3.org/1999/xlink">j</literal>.</para>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/sys/kern/kern_jail.c: </filename>
error = copyin(uap-&gt;jail, &amp;j, sizeof(j));</programlisting>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">There is another important structure defined in
          <filename xmlns:xlink="http://www.w3.org/1999/xlink">jail.h</filename>. It is the <literal xmlns:xlink="http://www.w3.org/1999/xlink">prison</literal>
          structure. The <literal xmlns:xlink="http://www.w3.org/1999/xlink">prison</literal> structure is used
          exclusively within kernel space. Here is the definition of the
          <literal xmlns:xlink="http://www.w3.org/1999/xlink">prison</literal> structure.</para>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/include/sys/jail.h</filename>:
struct prison {
        LIST_ENTRY(prison) pr_list;                     /* (a) all prisons */
        int              pr_id;                         /* (c) prison id */
        int              pr_ref;                        /* (p) refcount */
        char             pr_path[MAXPATHLEN];           /* (c) chroot path */
        struct vnode    *pr_root;                       /* (c) vnode to rdir */
        char             pr_host[MAXHOSTNAMELEN];       /* (p) jail hostname */
        u_int32_t        pr_ip;                         /* (c) ip addr host */
        void            *pr_linux;                      /* (p) linux abi */
        int              pr_securelevel;                /* (p) securelevel */
        struct task      pr_task;                       /* (d) destroy task */
        struct mtx       pr_mtx;
      void            **pr_slots;                     /* (p) additional data */
};</programlisting>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">The <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">jail</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> system call then allocates memory for
        a <literal xmlns:xlink="http://www.w3.org/1999/xlink">prison</literal> structure and copies data between
        the <literal xmlns:xlink="http://www.w3.org/1999/xlink">jail</literal> and <literal xmlns:xlink="http://www.w3.org/1999/xlink">prison</literal>
        structure.</para>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/sys/kern/kern_jail.c</filename>:
MALLOC(pr, struct prison *, sizeof(*pr), M_PRISON, M_WAITOK | M_ZERO);
...
error = copyinstr(j.path, &amp;pr-&gt;pr_path, sizeof(pr-&gt;pr_path), 0);
if (error)
    goto e_killmtx;
...
error = copyinstr(j.hostname, &amp;pr-&gt;pr_host, sizeof(pr-&gt;pr_host), 0);
if (error)
     goto e_dropvnref;
pr-&gt;pr_ip = j.ip_number;</programlisting>
        <para xmlns:xlink="http://www.w3.org/1999/xlink">Next, we will discuss another important system call
          <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">jail_attach</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry>, which implements the function to put
          a process into the <application xmlns:xlink="http://www.w3.org/1999/xlink">jail</application>.</para>
        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/sys/kern/kern_jail.c</filename>:
/*
 * struct jail_attach_args {
 *      int jid;
 * };
 */
int
jail_attach(struct thread *td, struct jail_attach_args *uap)</programlisting>
        <para xmlns:xlink="http://www.w3.org/1999/xlink">This system call makes the changes that can distinguish
          a jailed process from those unjailed ones.
          To understand what <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">jail_attach</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> does for us, certain
          background information is needed.</para>
        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          On FreeBSD, each kernel visible thread is identified by its
          <literal xmlns:xlink="http://www.w3.org/1999/xlink">thread</literal> structure, while the processes are
          described by their <literal xmlns:xlink="http://www.w3.org/1999/xlink">proc</literal> structures. You can
          find the definitions of the <literal xmlns:xlink="http://www.w3.org/1999/xlink">thread</literal> and
          <literal xmlns:xlink="http://www.w3.org/1999/xlink">proc</literal> structure in
          <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/include/sys/proc.h</filename>.
          For example, the <literal xmlns:xlink="http://www.w3.org/1999/xlink">td</literal> argument in any system
          call is actually a pointer to the calling thread's
          <literal xmlns:xlink="http://www.w3.org/1999/xlink">thread</literal> structure, as stated before.
          The <literal xmlns:xlink="http://www.w3.org/1999/xlink">td_proc</literal> member in the
          <literal xmlns:xlink="http://www.w3.org/1999/xlink">thread</literal> structure pointed by <literal xmlns:xlink="http://www.w3.org/1999/xlink">td</literal>
          is a pointer to the <literal xmlns:xlink="http://www.w3.org/1999/xlink">proc</literal> structure which
          represents the process that contains the thread represented by
          <literal xmlns:xlink="http://www.w3.org/1999/xlink">td</literal>. The <literal xmlns:xlink="http://www.w3.org/1999/xlink">proc</literal> structure
          contains members which can describe the owner's
          identity(<literal xmlns:xlink="http://www.w3.org/1999/xlink">p_ucred</literal>), the process resource
          limits(<literal xmlns:xlink="http://www.w3.org/1999/xlink">p_limit</literal>), and so on. In the
          <literal xmlns:xlink="http://www.w3.org/1999/xlink">ucred</literal> structure pointed by
          <literal xmlns:xlink="http://www.w3.org/1999/xlink">p_ucred</literal> member in the <literal xmlns:xlink="http://www.w3.org/1999/xlink">proc</literal>
          structure, there is a pointer to the <literal xmlns:xlink="http://www.w3.org/1999/xlink">prison</literal>
          structure(<literal xmlns:xlink="http://www.w3.org/1999/xlink">cr_prison</literal>).</para>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/include/sys/proc.h: </filename>
struct thread {
    ...
    struct proc *td_proc;
    ...
};
struct proc {
    ...
    struct ucred *p_ucred;
    ...
};
<filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/include/sys/ucred.h</filename>
struct ucred {
    ...
    struct prison *cr_prison;
    ...
};</programlisting>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">In <filename xmlns:xlink="http://www.w3.org/1999/xlink">kern_jail.c</filename>, the function
          <literal xmlns:xlink="http://www.w3.org/1999/xlink">jail()</literal> then calls function
          <literal xmlns:xlink="http://www.w3.org/1999/xlink">jail_attach()</literal> with a given <literal xmlns:xlink="http://www.w3.org/1999/xlink">jid</literal>.
          And <literal xmlns:xlink="http://www.w3.org/1999/xlink">jail_attach()</literal> calls function
          <literal xmlns:xlink="http://www.w3.org/1999/xlink">change_root()</literal> to change the root directory of the
          calling process. The <literal xmlns:xlink="http://www.w3.org/1999/xlink">jail_attach()</literal> then creates
          a new <literal xmlns:xlink="http://www.w3.org/1999/xlink">ucred</literal> structure, and attaches the newly
          created <literal xmlns:xlink="http://www.w3.org/1999/xlink">ucred</literal> structure to the calling process
          after it has successfully attached the <literal xmlns:xlink="http://www.w3.org/1999/xlink">prison</literal>
          structure to the <literal xmlns:xlink="http://www.w3.org/1999/xlink">ucred</literal> structure. From then on,
          the calling process is recognized as jailed. When the kernel routine
          <literal xmlns:xlink="http://www.w3.org/1999/xlink">jailed()</literal> is called in the kernel with the newly
          created <literal xmlns:xlink="http://www.w3.org/1999/xlink">ucred</literal> structure as its argument, it
          returns 1 to tell that the credential is connected
          with a <application xmlns:xlink="http://www.w3.org/1999/xlink">jail</application>. The public ancestor process
          of all the process forked within the <application xmlns:xlink="http://www.w3.org/1999/xlink">jail</application>,
          is the process which runs <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">jail</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry>, as it calls the
          <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">jail</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> system call. When a program is executed through
          <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">execve</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry>, it inherits the jailed property of its parent's
          <literal xmlns:xlink="http://www.w3.org/1999/xlink">ucred</literal> structure, therefore it has a jailed
          <literal xmlns:xlink="http://www.w3.org/1999/xlink">ucred</literal> structure.</para>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/sys/kern/kern_jail.c</filename>
int
jail(struct thread *td, struct jail_args *uap)
{
...
    struct jail_attach_args jaa;
...
    error = jail_attach(td, &amp;jaa);
    if (error)
        goto e_dropprref;
...
}

int
jail_attach(struct thread *td, struct jail_attach_args *uap)
{
    struct proc *p;
    struct ucred *newcred, *oldcred;
    struct prison *pr;
...
    p = td-&gt;td_proc;
...
    pr = prison_find(uap-&gt;jid);
...
    change_root(pr-&gt;pr_root, td);
...
    newcred-&gt;cr_prison = pr;
    p-&gt;p_ucred = newcred;
...
}</programlisting>
        <para xmlns:xlink="http://www.w3.org/1999/xlink">When a process is forked from its parent process, the
          <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">fork</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> system call uses <literal xmlns:xlink="http://www.w3.org/1999/xlink">crhold()</literal> to
          maintain the credential for the newly forked process. It inherently
          keep the newly forked child's credential consistent with its parent,
          so the child process is also jailed.</para>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/sys/kern/kern_fork.c</filename>:
p2-&gt;p_ucred = crhold(td-&gt;td_ucred);
...
td2-&gt;td_ucred = crhold(p2-&gt;p_ucred);</programlisting>

      </sect3>
    </sect2>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="jail-restrictions">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Restrictions</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Throughout the kernel there are access restrictions relating
      to jailed processes. Usually, these restrictions only check whether
      the process is jailed, and if so, returns an error. For
      example:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
if (jailed(td-&gt;td_ucred))
    return (EPERM);</programlisting>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">SysV IPC</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">System V IPC</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">System V IPC is based on messages. Processes can send each
        other these messages which tell them how to act. The functions
        which deal with messages are:
        <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">msgctl</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry>, <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">msgget</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry>, <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">msgsnd</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry> and <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">msgrcv</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry>.
        Earlier, I mentioned that there were certain sysctls you could
        turn on or off in order to affect the behavior of
        <application xmlns:xlink="http://www.w3.org/1999/xlink">jail</application>. One of these sysctls was
        <literal xmlns:xlink="http://www.w3.org/1999/xlink">security.jail.sysvipc_allowed</literal>.  By default,
        this sysctl is set to 0. If it were set to 1, it would defeat the
        whole purpose of having a <application xmlns:xlink="http://www.w3.org/1999/xlink">jail</application>; privileged
        users from the <application xmlns:xlink="http://www.w3.org/1999/xlink">jail</application> would be able to
        affect processes outside the jailed environment. The difference
        between a message and a signal is that the message only consists
        of the signal number.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/sys/kern/sysv_msg.c</filename>:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
        <listitem xmlns:xlink="http://www.w3.org/1999/xlink"> <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">msgget(key, msgflg)</literal>:
        <literal xmlns:xlink="http://www.w3.org/1999/xlink">msgget</literal> returns (and possibly creates) a message
        descriptor that designates a message queue for use in other
        functions.</para></listitem>

        <listitem xmlns:xlink="http://www.w3.org/1999/xlink"> <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">msgctl(msgid, cmd, buf)</literal>:
        Using this function, a process can query the status of a message
        descriptor.</para></listitem>

        <listitem xmlns:xlink="http://www.w3.org/1999/xlink"> <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">msgsnd(msgid, msgp, msgsz, msgflg)</literal>:
        <literal xmlns:xlink="http://www.w3.org/1999/xlink">msgsnd</literal> sends a message to a
        process.</para></listitem>

        <listitem xmlns:xlink="http://www.w3.org/1999/xlink"> <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">msgrcv(msgid, msgp, msgsz, msgtyp,
        msgflg)</literal>: a process receives messages using
        this function</para></listitem>

      </itemizedlist>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">In each of the system calls corresponding to these functions,
        there is this conditional:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/sys/kern/sysv_msg.c</filename>:
if (!jail_sysvipc_allowed &amp;&amp; jailed(td-&gt;td_ucred))
    return (ENOSYS);</programlisting>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">semaphores</primary></indexterm>
      <para xmlns:xlink="http://www.w3.org/1999/xlink">Semaphore system calls allow processes to synchronize
        execution by doing a set of operations atomically on a set of
        semaphores. Basically semaphores provide another way for
        processes lock resources. However, process waiting on a
        semaphore, that is being used, will sleep until the resources
        are relinquished. The following semaphore system calls are
        blocked inside a <application xmlns:xlink="http://www.w3.org/1999/xlink">jail</application>: <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">semget</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry>,
        <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">semctl</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> and <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">semop</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry>.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/sys/kern/sysv_sem.c</filename>:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">semctl(semid, semnum, cmd, ...)</literal>:
            <literal xmlns:xlink="http://www.w3.org/1999/xlink">semctl</literal> does the specified <literal xmlns:xlink="http://www.w3.org/1999/xlink">cmd</literal>
            on the semaphore queue indicated by
            <literal xmlns:xlink="http://www.w3.org/1999/xlink">semid</literal>.</para></listitem>

        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
           <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">semget(key, nsems, flag)</literal>:
            <literal xmlns:xlink="http://www.w3.org/1999/xlink">semget</literal> creates an array of semaphores,
            corresponding to <literal xmlns:xlink="http://www.w3.org/1999/xlink">key</literal>.</para>

          <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">key and flag take on the same meaning as they
          do in msgget.</literal></para></listitem>

        <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">semop(semid, array, nops)</literal>:
          <literal xmlns:xlink="http://www.w3.org/1999/xlink">semop</literal> performs a group of operations indicated
          by <literal xmlns:xlink="http://www.w3.org/1999/xlink">array</literal>, to the set of semaphores identified by
          <literal xmlns:xlink="http://www.w3.org/1999/xlink">semid</literal>.</para></listitem>
      </itemizedlist>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">shared memory</primary></indexterm>
      <para xmlns:xlink="http://www.w3.org/1999/xlink">System V IPC allows for processes to share
        memory. Processes can communicate directly with each other by
        sharing parts of their virtual address space and then reading
        and writing data stored in the shared memory. These system
        calls are blocked within a jailed environment: <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">shmdt</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry>,
        <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">shmat</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry>, <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">shmctl</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> and <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">shmget</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry>.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/sys/kern/sysv_shm.c</filename>:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
        <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">shmctl(shmid, cmd, buf)</literal>:
        <literal xmlns:xlink="http://www.w3.org/1999/xlink">shmctl</literal> does various control operations on the
        shared memory region identified by
        <literal xmlns:xlink="http://www.w3.org/1999/xlink">shmid</literal>.</para></listitem>

        <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">shmget(key, size, flag)</literal>:
        <literal xmlns:xlink="http://www.w3.org/1999/xlink">shmget</literal> accesses or creates a shared memory
        region of <literal xmlns:xlink="http://www.w3.org/1999/xlink">size</literal> bytes.</para></listitem>

        <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">shmat(shmid, addr, flag)</literal>:
        <literal xmlns:xlink="http://www.w3.org/1999/xlink">shmat</literal> attaches a shared memory region identified
        by <literal xmlns:xlink="http://www.w3.org/1999/xlink">shmid</literal> to the address space of a
        process.</para></listitem>

        <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">shmdt(addr)</literal>:
        <literal xmlns:xlink="http://www.w3.org/1999/xlink">shmdt</literal> detaches the shared memory region
        previously attached at <literal xmlns:xlink="http://www.w3.org/1999/xlink">addr</literal>.</para></listitem>

      </itemizedlist>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Sockets</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">sockets</primary></indexterm>
      <para xmlns:xlink="http://www.w3.org/1999/xlink"><application xmlns:xlink="http://www.w3.org/1999/xlink">Jail</application> treats the <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">socket</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> system
        call and related lower-level socket functions in a special manner.
        In order to determine whether a certain socket is allowed to be
        created, it first checks to see if the sysctl
        <literal xmlns:xlink="http://www.w3.org/1999/xlink">security.jail.socket_unixiproute_only</literal> is set. If
        set, sockets are only allowed to be created if the family
        specified is either <literal xmlns:xlink="http://www.w3.org/1999/xlink">PF_LOCAL</literal>,
        <literal xmlns:xlink="http://www.w3.org/1999/xlink">PF_INET</literal> or
        <literal xmlns:xlink="http://www.w3.org/1999/xlink">PF_ROUTE</literal>. Otherwise, it returns an
        error.</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/sys/kern/uipc_socket.c</filename>:
int
socreate(int dom, struct socket **aso, int type, int proto,
    struct ucred *cred, struct thread *td)
{
    struct protosw *prp;
...
    if (jailed(cred) &amp;&amp; jail_socket_unixiproute_only &amp;&amp;
        prp-&gt;pr_domain-&gt;dom_family != PF_LOCAL &amp;&amp;
        prp-&gt;pr_domain-&gt;dom_family != PF_INET &amp;&amp;
        prp-&gt;pr_domain-&gt;dom_family != PF_ROUTE) {
        return (EPROTONOSUPPORT);
    }
...
}</programlisting>

    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Berkeley Packet Filter</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">Berkeley Packet Filter</primary></indexterm>
      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">data link layer</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The <application xmlns:xlink="http://www.w3.org/1999/xlink">Berkeley Packet Filter</application> provides
        a raw interface to data link layers in a protocol independent
        fashion. <application xmlns:xlink="http://www.w3.org/1999/xlink">BPF</application> is now controlled by the
        <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">devfs</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> whether it can be used in a jailed environment.</para>

    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Protocols</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">protocols</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">There are certain protocols which are very common, such as
        TCP, UDP, IP and ICMP. IP and ICMP are on the same level: the
        network layer 2. There are certain precautions which are
        taken in order to prevent a jailed process from binding a
        protocol to a certain address only if the <literal xmlns:xlink="http://www.w3.org/1999/xlink">nam</literal>
        parameter is set. <literal xmlns:xlink="http://www.w3.org/1999/xlink">nam</literal> is a pointer to a
        <literal xmlns:xlink="http://www.w3.org/1999/xlink">sockaddr</literal> structure,
        which describes the address on which to bind the service. A
        more exact definition is that <literal xmlns:xlink="http://www.w3.org/1999/xlink">sockaddr</literal> "may be
        used as a template for referring to the identifying tag and length of
        each address". In the function
        <literal xmlns:xlink="http://www.w3.org/1999/xlink">in_pcbbind_setup()</literal>, <literal xmlns:xlink="http://www.w3.org/1999/xlink">sin</literal> is a
        pointer to a <literal xmlns:xlink="http://www.w3.org/1999/xlink">sockaddr_in</literal> structure, which
        contains the port, address, length and domain family of the socket
        which is to be bound. Basically, this disallows any processes from
        <application xmlns:xlink="http://www.w3.org/1999/xlink">jail</application> to be able to specify the address
        that does not belong to the <application xmlns:xlink="http://www.w3.org/1999/xlink">jail</application> in which
        the calling process exists.</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/sys/netinet/in_pcb.c</filename>:
int
in_pcbbind_setup(struct inpcb *inp, struct sockaddr *nam, in_addr_t *laddrp,
    u_short *lportp, struct ucred *cred)
{
    ...
    struct sockaddr_in *sin;
    ...
    if (nam) {
        sin = (struct sockaddr_in *)nam;
        ...
        if (sin-&gt;sin_addr.s_addr != INADDR_ANY)
            if (prison_ip(cred, 0, &amp;sin-&gt;sin_addr.s_addr))
                return(EINVAL);
        ...
        if (lport) {
            ...
            if (prison &amp;&amp; prison_ip(cred, 0, &amp;sin-&gt;sin_addr.s_addr))
                return (EADDRNOTAVAIL);
            ...
        }
    }
    if (lport == 0) {
        ...
        if (laddr.s_addr != INADDR_ANY)
            if (prison_ip(cred, 0, &amp;laddr.s_addr))
                return (EINVAL);
        ...
    }
...
    if (prison_ip(cred, 0, &amp;laddr.s_addr))
        return (EINVAL);
...
}</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">You might be wondering what function
        <literal xmlns:xlink="http://www.w3.org/1999/xlink">prison_ip()</literal> does. <literal xmlns:xlink="http://www.w3.org/1999/xlink">prison_ip()</literal>
        is given three arguments, a pointer to the credential(represented by
        <literal xmlns:xlink="http://www.w3.org/1999/xlink">cred</literal>), any flags, and an IP address. It
        returns 1 if the IP address does NOT belong to the
        <application xmlns:xlink="http://www.w3.org/1999/xlink">jail</application> or 0 otherwise.  As you can see
        from the code, if it is indeed an IP address not belonging to the
        <application xmlns:xlink="http://www.w3.org/1999/xlink">jail</application>, the protocol is not allowed to bind
        to that address.</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/sys/kern/kern_jail.c:</filename>
int
prison_ip(struct ucred *cred, int flag, u_int32_t *ip)
{
    u_int32_t tmp;

    if (!jailed(cred))
        return (0);
    if (flag)
        tmp = *ip;
    else
        tmp = ntohl(*ip);
    if (tmp == INADDR_ANY) {
        if (flag)
            *ip = cred-&gt;cr_prison-&gt;pr_ip;
        else
            *ip = htonl(cred-&gt;cr_prison-&gt;pr_ip);
        return (0);
    }
    if (tmp == INADDR_LOOPBACK) {
        if (flag)
            *ip = cred-&gt;cr_prison-&gt;pr_ip;
        else
            *ip = htonl(cred-&gt;cr_prison-&gt;pr_ip);
        return (0);
    }
    if (cred-&gt;cr_prison-&gt;pr_ip != tmp)
        return (1);
    return (0);
}</programlisting>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Filesystem</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">filesystem</primary></indexterm>
      <para xmlns:xlink="http://www.w3.org/1999/xlink">Even <literal xmlns:xlink="http://www.w3.org/1999/xlink">root</literal> users within the
        <application xmlns:xlink="http://www.w3.org/1999/xlink">jail</application> are not allowed to unset or modify
        any file flags, such as immutable, append-only, and undeleteable
        flags, if the securelevel is greater than 0.</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/sys/ufs/ufs/ufs_vnops.c:</filename>
static int
ufs_setattr(ap)
    ...
{
    ...
        if (!priv_check_cred(cred, PRIV_VFS_SYSFLAGS, 0)) {
            if (ip-&gt;i_flags
                &amp; (SF_NOUNLINK | SF_IMMUTABLE | SF_APPEND)) {
                    error = securelevel_gt(cred, 0);
                    if (error)
                        return (error);
            }
            ...
        }
}
<filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/sys/kern/kern_priv.c</filename>
int
priv_check_cred(struct ucred *cred, int priv, int flags)
{
    ...
    error = prison_priv_check(cred, priv);
    if (error)
        return (error);
    ...
}
<filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/sys/kern/kern_jail.c</filename>
int
prison_priv_check(struct ucred *cred, int priv)
{
    ...
    switch (priv) {
    ...
    case PRIV_VFS_SYSFLAGS:
        if (jail_chflags_allowed)
            return (0);
        else
            return (EPERM);
    ...
    }
    ...
}</programlisting>
    </sect2>

  </sect1>

</chapter>

    
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="sysinit">
  <title xmlns:xlink="http://www.w3.org/1999/xlink">The SYSINIT Framework</title>

  <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">SYSINIT</primary></indexterm>
  <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">dynamic initialization</primary></indexterm>
  <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">kernel initialization</primary>
    <secondary xmlns:xlink="http://www.w3.org/1999/xlink">dynamic</secondary></indexterm>
  <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">kernel modules</primary></indexterm>
  <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">kernel linker</primary></indexterm>

  <para xmlns:xlink="http://www.w3.org/1999/xlink">SYSINIT is the framework for a generic call sort and dispatch
    mechanism. FreeBSD currently uses it for the dynamic
    initialization of the kernel. SYSINIT allows FreeBSD's kernel
    subsystems to be reordered, and added, removed, and replaced at
    kernel link time when the kernel or one of its modules is loaded
    without having to edit a statically ordered initialization routing
    and recompile the kernel. This system also allows kernel modules,
    currently called <firstterm xmlns:xlink="http://www.w3.org/1999/xlink">KLD's</firstterm>, to be separately
    compiled, linked, and initialized at boot time and loaded even
    later while the system is already running. This is accomplished
    using the <quote xmlns:xlink="http://www.w3.org/1999/xlink">kernel linker</quote> and <quote xmlns:xlink="http://www.w3.org/1999/xlink">linker
    sets</quote>.</para>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sysinit-term">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Terminology</title>

    <variablelist xmlns:xlink="http://www.w3.org/1999/xlink">
      <varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
        <term xmlns:xlink="http://www.w3.org/1999/xlink">Linker Set</term>
        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink">A linker technique in which the linker gathers
            statically declared data throughout a program's source files
            into a single contiguously addressable unit of
            data.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sysinit-operation">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">SYSINIT Operation</title>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">linker sets</primary></indexterm>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">SYSINIT relies on the ability of the linker to take static
      data declared at multiple locations throughout a program's
      source and group it together as a single contiguous chunk of
      data. This linker technique is called a <quote xmlns:xlink="http://www.w3.org/1999/xlink">linker
      set</quote>. SYSINIT uses two linker sets to maintain two data
      sets containing each consumer's call order, function, and a
      pointer to the data to pass to that function.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">SYSINIT uses two priorities when ordering the functions for
      execution.  The first priority is a subsystem ID giving an
      overall order for SYSINIT's dispatch of functions. Current predeclared
      ID's are in <filename xmlns:xlink="http://www.w3.org/1999/xlink">&lt;sys/kernel.h&gt;</filename> in the enum
      list <literal xmlns:xlink="http://www.w3.org/1999/xlink">sysinit_sub_id</literal>. The second priority used
      is an element order within the subsystem. Current predeclared
      subsystem element orders are in
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">&lt;sys/kernel.h&gt;</filename> in the enum list
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">sysinit_elem_order</literal>.</para>

  <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">pseudo-devices</primary></indexterm>

  <para xmlns:xlink="http://www.w3.org/1999/xlink">There are currently two uses for SYSINIT. Function dispatch
      at system startup and kernel module loads, and function dispatch
      at system shutdown and kernel module unload.  Kernel subsystems
      often use system startup SYSINIT's to initialize data
      structures, for example the process scheduling subsystem
      uses a SYSINIT to initialize the run queue data structure.
      Device drivers should avoid using <literal xmlns:xlink="http://www.w3.org/1999/xlink">SYSINIT()</literal>
      directly.  Instead drivers for real devices that are part of a
      bus structure should use <literal xmlns:xlink="http://www.w3.org/1999/xlink">DRIVER_MODULE()</literal> to
      provide a function that detects the device and, if it is present,
      initializes the device.  It will do a few things specific to
      devices and then call <literal xmlns:xlink="http://www.w3.org/1999/xlink">SYSINIT()</literal> itself.
      For pseudo-devices, which are not part of a bus structure,
      use <literal xmlns:xlink="http://www.w3.org/1999/xlink">DEV_MODULE()</literal>.</para>
  </sect1>


  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sysinit-using">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Using SYSINIT</title>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Interface</title>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
        <title xmlns:xlink="http://www.w3.org/1999/xlink">Headers</title>

          <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">&lt;sys/kernel.h&gt;</programlisting>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
        <title xmlns:xlink="http://www.w3.org/1999/xlink">Macros</title>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">SYSINIT(uniquifier, subsystem, order, func, ident)
SYSUNINIT(uniquifier, subsystem, order, func, ident)</programlisting>
      </sect3>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Startup</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The <literal xmlns:xlink="http://www.w3.org/1999/xlink">SYSINIT()</literal> macro creates the
        necessary SYSINIT data in SYSINIT's startup data set for
        SYSINIT to sort and dispatch a function at system startup and
        module load.  <literal xmlns:xlink="http://www.w3.org/1999/xlink">SYSINIT()</literal> takes a uniquifier
        that SYSINIT uses to identify the particular function dispatch
        data, the subsystem order, the subsystem element order, the
        function to call, and the data to pass the function. All
        functions must take a constant pointer argument.
        </para>

      <example xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Example of a <literal xmlns:xlink="http://www.w3.org/1999/xlink">SYSINIT()</literal></title>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">#include &lt;sys/kernel.h&gt;

void foo_null(void *unused)
{
        foo_doo();
}
SYSINIT(foo, SI_SUB_FOO, SI_ORDER_FOO, foo_null, NULL);

struct foo foo_voodoo = {
        FOO_VOODOO;
}

void foo_arg(void *vdata)
{
        struct foo *foo = (struct foo *)vdata;
        foo_data(foo);
}
SYSINIT(bar, SI_SUB_FOO, SI_ORDER_FOO, foo_arg, &amp;foo_voodoo);
	</programlisting>
      </example>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Note that <literal xmlns:xlink="http://www.w3.org/1999/xlink">SI_SUB_FOO</literal> and
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">SI_ORDER_FOO</literal> need to be in the
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">sysinit_sub_id</literal> and
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">sysinit_elem_order</literal> enum's as mentioned
	above.  Either use existing ones or add your own to the
	enum's.  You can also use math for fine-tuning the order
	a SYSINIT will run in.  This example shows a SYSINIT that
	needs to be run just barely before the SYSINIT's that
	handle tuning kernel parameters.</para>

      <example xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Example of Adjusting <literal xmlns:xlink="http://www.w3.org/1999/xlink">SYSINIT()</literal> Order</title>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">static void
mptable_register(void *dummy __unused)
{

	apic_register_enumerator(&amp;mptable_enumerator);
}

SYSINIT(mptable_register, SI_SUB_TUNABLES - 1, SI_ORDER_FIRST,
    mptable_register, NULL);</programlisting>
      </example>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Shutdown</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The <literal xmlns:xlink="http://www.w3.org/1999/xlink">SYSUNINIT()</literal> macro behaves similarly
        to the <literal xmlns:xlink="http://www.w3.org/1999/xlink">SYSINIT()</literal> macro except that it adds
        the SYSINIT data to SYSINIT's shutdown data set.</para>

      <example xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Example of a <literal xmlns:xlink="http://www.w3.org/1999/xlink">SYSUNINIT()</literal></title>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">#include &lt;sys/kernel.h&gt;

void foo_cleanup(void *unused)
{
        foo_kill();
}
SYSUNINIT(foobar, SI_SUB_FOO, SI_ORDER_FOO, foo_cleanup, NULL);

struct foo_stack foo_stack = {
        FOO_STACK_VOODOO;
}

void foo_flush(void *vdata)
{
}
SYSUNINIT(barfoo, SI_SUB_FOO, SI_ORDER_FOO, foo_flush, &amp;foo_stack);
	</programlisting>
      </example>
    </sect2>
  </sect1>
</chapter>

    
<!--
    Copyright (c) 2002-2005 Networks Associates Technology, Inc.
    All rights reserved.

    This software was developed for the FreeBSD Project by
    Chris Costello at Safeport Network Services and Network Associates Labs,
    the Security Research Division of Network Associates, Inc. under
    DARPA/SPAWAR contract N66001-01-C-8035 ("CBOSS"), as part of the
    DARPA CHATS research program.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:
    1. Redistributions of source code must retain the above copyright
       notice, this list of conditions and the following disclaimer.
    2. Redistributions in binary form must reproduce the above copyright
       notice, this list of conditions and the following disclaimer in the
       documentation and/or other materials provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND
    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE
    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
    OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
    HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
    OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.

    $FreeBSD$
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="mac">
  <info><title xmlns:xlink="http://www.w3.org/1999/xlink">The TrustedBSD MAC Framework</title>
    <authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
      <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Chris</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Costello</surname></personname><affiliation xmlns:xlink="http://www.w3.org/1999/xlink">
          <orgname xmlns:xlink="http://www.w3.org/1999/xlink">TrustedBSD Project</orgname>
          <address xmlns:xlink="http://www.w3.org/1999/xlink"><email xmlns:xlink="http://www.w3.org/1999/xlink">chris@FreeBSD.org</email></address>
        </affiliation></author>

      <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Robert</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Watson</surname></personname><affiliation xmlns:xlink="http://www.w3.org/1999/xlink">
          <orgname xmlns:xlink="http://www.w3.org/1999/xlink">TrustedBSD Project</orgname>
          <address xmlns:xlink="http://www.w3.org/1999/xlink"><email xmlns:xlink="http://www.w3.org/1999/xlink">rwatson@FreeBSD.org</email></address>
        </affiliation></author>
    </authorgroup>
  </info>

  

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-copyright">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">MAC Documentation Copyright</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">This documentation was developed for the FreeBSD Project by
      Chris Costello at Safeport Network Services and Network
      Associates Laboratories, the Security Research Division of
      Network Associates, Inc.  under DARPA/SPAWAR contract
      N66001-01-C-8035 (<quote xmlns:xlink="http://www.w3.org/1999/xlink">CBOSS</quote>), as part of the DARPA
      CHATS research program.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Redistribution and use in source (SGML DocBook) and
      'compiled' forms (SGML, HTML, PDF, PostScript, RTF and so forth)
      with or without modification, are permitted provided that the
      following conditions are met:</para>

    <orderedlist xmlns:xlink="http://www.w3.org/1999/xlink">
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
        <para xmlns:xlink="http://www.w3.org/1999/xlink">Redistributions of source code (SGML DocBook) must
          retain the above copyright notice, this list of conditions
          and the following disclaimer as the first lines of this file
          unmodified.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
        <para xmlns:xlink="http://www.w3.org/1999/xlink">Redistributions in compiled form (transformed to other
          DTDs, converted to PDF, PostScript, RTF and other formats)
          must reproduce the above copyright notice, this list of
          conditions and the following disclaimer in the documentation
          and/or other materials provided with the
          distribution.</para>
      </listitem>
    </orderedlist>

    <important xmlns:xlink="http://www.w3.org/1999/xlink">
      <para xmlns:xlink="http://www.w3.org/1999/xlink">THIS DOCUMENTATION IS PROVIDED BY THE NETWORKS ASSOCIATES
        TECHNOLOGY, INC "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
        INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
        MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        DISCLAIMED. IN NO EVENT SHALL NETWORKS ASSOCIATES TECHNOLOGY,
        INC BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
        EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
        OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
        CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
        STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
        ARISING IN ANY WAY OUT OF THE USE OF THIS DOCUMENTATION, EVEN
        IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</para>
    </important>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-synopsis">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Synopsis</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">FreeBSD includes experimental support for several
      mandatory access control policies, as well as a framework
      for kernel security extensibility, the TrustedBSD MAC
      Framework.  The MAC Framework is a pluggable access
      control framework, permitting new security policies to
      be easily linked into the kernel, loaded at boot, or loaded
      dynamically at run-time.  The framework provides a variety
      of features to make it easier to implement new security policies,
      including the ability to easily tag security labels (such as
      confidentiality information) onto system objects.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">This chapter introduces the MAC policy framework and
      provides documentation for a sample MAC policy module.</para>
  </sect1>


  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-introduction">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Introduction</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The TrustedBSD MAC framework provides a mechanism to allow
      the compile-time or run-time extension of the kernel access
      control model.  New system policies may be implemented as
      kernel modules and linked to the kernel; if multiple policy
      modules are present, their results will be composed.  The
      MAC Framework provides a variety of access control infrastructure
      services to assist policy writers, including support for
      transient and persistent policy-agnostic object security
      labels.  This support is currently considered experimental.</para>

   <para xmlns:xlink="http://www.w3.org/1999/xlink">This chapter provides information appropriate for developers
      of policy modules, as well as potential consumers of MAC-enabled
      environments, to learn about how the MAC Framework supports
      access control extension of the kernel.</para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-background">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Policy Background</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Mandatory Access Control (MAC), refers to a set of
      access control policies that are mandatorily enforced on
      users by the operating system.  MAC policies may be contrasted
      with Discretionary Access Control (DAC) protections, by which
      non-administrative users may (at their discretion) protect
      objects.  In traditional UNIX systems, DAC protections include
      file permissions and access control lists; MAC protections include
      process controls preventing inter-user debugging and firewalls.
      A variety of MAC policies have been formulated by operating system
      designers and security researches, including the Multi-Level
      Security (MLS) confidentiality policy, the Biba integrity policy,
      Role-Based Access Control (RBAC), Domain and Type Enforcement (DTE),
      and Type Enforcement (TE).  Each
      model bases decisions on a variety of factors, including user
      identity, role, and security clearance, as well as security labels
      on objects representing concepts such as data sensitivity and
      integrity.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The TrustedBSD MAC Framework is capable of supporting policy
      modules that implement all of these policies, as well as a broad
      class of system hardening policies, which may use existing security
      attributes, such as user and group IDs, as well as extended
      attributes on files, and other system properties.  In addition,
      despite the
      name, the MAC Framework can also be used to implement purely
      discretionary policies, as policy modules are given substantial
      flexibility in how they authorize protections.</para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-framework-kernel-arch">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">MAC Framework Kernel Architecture</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The TrustedBSD MAC Framework permits kernel modules to
      extend the operating system security policy, as well as
      providing infrastructure functionality required by many
      access control modules.  If multiple policies are
      simultaneously loaded, the MAC Framework will usefully (for
      some definition of useful) compose the results of the
      policies.</para>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-framework-kernel-arch-elements">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Kernel Elements</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The MAC Framework contains a number of kernel elements:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Framework management interfaces</para></listitem>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Concurrency and synchronization
	  primitives.</para></listitem>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Policy registration</para></listitem>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Extensible security label for kernel
	  objects</para></listitem>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Policy entry point composition
	  operators</para></listitem>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Label management primitives</para></listitem>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Entry point API invoked by kernel
	  services</para></listitem>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Entry point API to policy modules</para></listitem>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Entry points implementations (policy life cycle,
	  object life cycle/label management, access control
	  checks).</para></listitem>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Policy-agnostic label-management system
	  calls</para></listitem>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mac_syscall()</function> multiplex
	  system call</para></listitem>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Various security policies implemented as MAC
	  policy modules</para></listitem>
      </itemizedlist>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-framework-kernel-arch-management">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Framework Management Interfaces</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The TrustedBSD MAC Framework may be directly managed using
	sysctl's, loader tunables, and system calls.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">In most cases, sysctl's and loader tunables of the same name
	modify the same
	parameters, and control behavior such as enforcement of
	protections relating to various kernel subsystems.  In addition,
	if MAC debugging support is compiled into the kernel, several
	counters will be maintained tracking label allocation.
	It is generally advisable that per-subsystem enforcement
	controls not be used to control policy behavior in production
	environments, as they broadly impact the operation of all
	active policies.  Instead, per-policy controls should be
	preferred, as they provide greater granularity and greater
	operational consistency for policy modules.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Loading and unloading of policy modules is performed
	using the system module management system calls and other
	system interfaces, including boot loader variables; policy modules
	will have the opportunity to influence load and unload
	events, including preventing undesired unloading of the policy.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-framework-kernel-arch-synchronization">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Policy List Concurrency and Synchronization</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">As the set of active policies may change at run-time,
	and the invocation of entry points is non-atomic,
	synchronization is required to prevent loading or
	unloading of policies while an entry point invocation
	is in progress, freezing the set of active policies for the
	duration.  This is accomplished by means of a framework
	busy count: whenever an entry point is entered, the
	busy count is incremented; whenever it is exited, the
	busy count is decremented.  While the busy count is
	elevated, policy list changes are not permitted, and
	threads attempting to modify the policy list will sleep
	until the list is not busy.  The busy count is protected
	by a mutex, and a condition variable is used to wake up
	sleepers waiting on policy list modifications.  One
	side effect of this synchronization model is that
	recursion into the MAC Framework from within a policy
	module is permitted, although not generally used.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Various optimizations are used to reduce the overhead
	of the busy count, including avoiding the full cost of
	incrementing and decrementing if the list is empty or
	contains only static entries (policies that are loaded
	before the system starts, and cannot be unloaded).  A
	compile-time option is also provided which prevents any
	change in the set of loaded policies at run-time, which
	eliminates the mutex locking costs associated with
	supporting dynamically loaded and unloaded policies as
	synchronization is no longer required.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">As the MAC Framework is not permitted to block in some
	entry points, a normal sleep lock cannot be used; as a
	result, it is possible for the load or unload attempt to
	block for a substantial period of time waiting for the
	framework to become idle.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-framework-kernel-arch-label-synchronization">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Label Synchronization</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">As kernel objects of interest may generally be accessed from
	more than one thread at a time, and simultaneous entry of more
	than one thread into
	the MAC Framework is permitted, security attribute storage
	maintained by the MAC Framework is carefully synchronized.
	In general, existing kernel synchronization on kernel
	object data is used to protect MAC Framework security labels
	on the object: for example, MAC labels on sockets are
	protected using the existing socket mutex.  Likewise,
	semantics for concurrent access are generally identical to
	those of the container objects: for credentials, copy-on-write
	semantics are maintained for label contents as with the
	remainder of the credential structure.  The MAC Framework
	asserts necessary locks on objects when invoked with an
	object reference.  Policy authors must be aware of these
	synchronization semantics, as they will sometimes limit the
	types of accesses permitted on labels: for example, when
	a read-only reference to a credential is passed to a policy
	via an entry point, only read operations are permitted on
	the label state attached to the credential.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-framework-kernel-arch-policy-synchronization">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Policy Synchronization and Concurrency</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Policy modules must be written to assume that many
	kernel threads may simultaneously enter one more
	policy entry points due to the parallel and preemptive
	nature of the FreeBSD kernel.  If the policy module makes
	use of mutable state, this may require the use of
	synchronization primitives within the policy to prevent
	inconsistent views on that state resulting in incorrect
	operation of the policy.  Policies will generally be
	able to make use of existing FreeBSD synchronization
	primitives for this purpose, including mutexes, sleep
	locks, condition variables, and counting semaphores.
	However, policies should be written to employ these
	primitives carefully, respecting existing kernel lock
	orders, and recognizing that some entry points are not
	permitted to sleep, limiting the use of primitives in
	those entry points to mutexes and wakeup operations.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">When policy modules call out to other kernel subsystems,
	they will generally need to release any in-policy locks in
	order to avoid violating the kernel lock order or risking
	lock recursion.  This will maintain policy locks as leaf
	locks in the global lock order, helping to avoid deadlock.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-framework-kernel-arch-registration">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Policy Registration</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The MAC Framework maintains two lists of active
	policies: a static list, and a dynamic list.  The lists
	differ only with regards to their locking semantics: an
	elevated reference count is not required to make use of
	the static list.  When kernel modules containing MAC
	Framework policies are loaded, the policy module will
	use <literal xmlns:xlink="http://www.w3.org/1999/xlink">SYSINIT</literal> to invoke a registration
	function; when a policy module is unloaded,
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">SYSINIT</literal> will likewise invoke a
	de-registration function.  Registration may fail if a
	policy module is loaded more than once, if insufficient
	resources are available for the registration (for
	example, the policy might require labeling and
	insufficient labeling state might be available), or
	other policy prerequisites might not be met (some
	policies may only be loaded prior to boot).  Likewise,
	de-registration may fail if a policy is flagged as
	not unloadable.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-framework-kernel-arch-entrypoints">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Entry Points</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Kernel services interact with the MAC Framework in two ways:
	they invoke a series of APIs to notify the framework of relevant
	events, and they provide a policy-agnostic label structure
	pointer in
	security-relevant objects.  The label pointer is maintained by
	the MAC Framework via label management entry points, and permits
	the Framework to offer a labeling service to policy modules
	through relatively non-invasive changes to the kernel subsystem
	maintaining the object.  For example, label pointers have been
	added to processes, process credentials, sockets, pipes, vnodes,
	Mbufs, network interfaces, IP reassembly queues, and a variety
	of other security-relevant structures.  Kernel services also
	invoke the MAC Framework when they perform important security
	decisions, permitting policy modules to augment those decisions
	based on their own criteria (possibly including data stored in
	security labels).  Most of these security critical decisions
	will be explicit access control checks; however, some affect
	more general decision functions such as packet matching for
	sockets and label transition at program execution.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-framework-kernel-arch-composition">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Policy Composition</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">When more than one policy module is loaded into the kernel
	at a time, the results of the policy modules will be composed
	by the framework using a composition operator.  This operator
	is currently hard-coded, and requires that all active policies
	must approve a request for it to return success.  As policies may
	return a variety of error conditions (success, access denied,
	object does not exist, ...), a precedence operator selects the
	resulting error from the set of errors returned by policies.
	In general, errors indicating that an object does not exist will
	be preferred to errors indicating that access to an object is
	denied.
	While it is not guaranteed that the resulting composition will
	be useful or secure, we have found that it is for many useful
	selections of policies.  For example, traditional trusted systems
	often ship with two or more policies using a similar
	composition.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-framework-kernel-arch-labels">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Labeling Support</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">As many interesting access control extensions rely on
	security labels on objects, the MAC Framework provides a set
	of policy-agnostic label management system calls covering
	a variety of user-exposed objects.  Common label types
	include partition identifiers, sensitivity labels, integrity
	labels, compartments, domains, roles, and types.  By policy
	agnostic, we mean that policy modules are able to completely
	define the semantics of meta-data associated with an object.
	Policy
	modules participate in the internalization and externalization
	of string-based labels provides by user applications, and can
	expose multiple label elements to applications if desired.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">In-memory labels are stored in slab-allocated <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">struct
	label</varname>, which consists of a fixed-length array
	of unions, each holding a <literal xmlns:xlink="http://www.w3.org/1999/xlink">void *</literal> pointer
	and a <literal xmlns:xlink="http://www.w3.org/1999/xlink">long</literal>.  Policies registering for
	label storage will be assigned a "slot" identifier, which
	may be used to dereference the label storage.  The semantics
	of the storage are left entirely up to the policy module:
	modules are provided with a variety of entry points
	associated with the kernel object life cycle, including
	initialization, association/creation, and destruction.  Using
	these interfaces, it is possible to implement reference
	counting and other storage models.  Direct access to
	the object structure is generally not required by policy
	modules to retrieve a label, as the MAC Framework generally
	passes both a pointer to the object and a direct pointer
	to the object's label into entry points.  The primary
	exception to this rule is the process credential, which must
	be manually dereferenced to access the credential label.  This
	may change in future revisions of the MAC Framework.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Initialization entry points frequently include a sleeping
	disposition flag indicating whether or not an initialization
	is permitted to sleep; if sleeping is not permitted, a failure
	may be returned to cancel allocation of the label (and hence
	object).  This may
	occur, for example, in the network stack during interrupt
	handling, where sleeping is not permitted, or while the caller
	holds a mutex.  Due to the
	performance cost of maintaining labels on in-flight network
	packets (Mbufs), policies must specifically declare a
	requirement that Mbuf labels be allocated.  Dynamically
	loaded policies making use of labels must be able to handle
	the case where their init function has not been called on
	an object, as objects may already exist when the policy is
	loaded.  The MAC Framework guarantees that uninitialized label
	slots will hold a 0 or NULL value, which policies may use to
	detect uninitialized values.  However, as allocation of Mbuf
	labels is conditional, policies must also be able to handle a
	NULL label pointer for Mbufs if they have been loaded
	dynamically.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">In the case of file system labels, special support is
	provided for the persistent storage of security labels in
	extended attributes.  Where available, extended attribute transactions
	are used to permit consistent compound updates of
	security labels on vnodes--currently this support is present only
	in the UFS2 file system.  Policy authors may choose to
	implement multilabel file system object labels using one
	(or more) extended attributes.  For efficiency reasons, the
	vnode label (<literal xmlns:xlink="http://www.w3.org/1999/xlink">v_label</literal>) is a cache of any
	on-disk label; policies are able to load values into the
	cache when the vnode is instantiated, and update the cache
	as needed.  As a result, the extended attribute need not be directly
	accessed with every access control check.</para>

      <note xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Currently, if a labeled policy permits dynamic
	unloading, its state slot cannot be reclaimed, which places
	a strict (and relatively low) bound on the number of
	unload-reload operations for labeled policies.</para></note>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-framework-kernel-arch-syscalls">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">System Calls</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The MAC Framework implements a number of system calls:
	most of these calls support the policy-agnostic label
	retrieval and manipulation APIs exposed to user
	applications.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The label management calls accept a label description
	structure, <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">struct mac</varname>, which
	contains a series of MAC label elements.  Each element
	contains a character string name, and character string
	value.  Each policy will be given the chance to claim a
	particular element name, permitting policies to expose
	multiple independent elements if desired.  Policy modules
	perform the internalization and externalization between
	kernel labels and user-provided labels via entry points,
	permitting a variety of semantics.  Label management system
	calls are generally wrapped by user library functions to
	perform memory allocation and error handling, simplifying
	user applications that must manage labels.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The following MAC-related system calls are present in the
	FreeBSD kernel:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mac_get_proc()</function> may be used to
	    retrieve the label of the current process.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mac_set_proc()</function> may be used to request
	    a change in the label of the current process.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mac_get_fd()</function> may be used to retrieve
	    the label of an object (file, socket, pipe, ...) referenced by a
	    file descriptor.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mac_get_file()</function> may be used to retrieve
	    the label of an object referenced by a file system path.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mac_set_fd()</function> may be used to request
	     a change in the label of an object (file, socket, pipe, ...)
	     referenced by a file descriptor.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mac_set_file()</function> may be used to request
	    a change in the label of an object referenced by a file system
	    path.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mac_syscall()</function> permits policy modules to
	    create new system calls without modifying the system call table;
	    it accepts a target policy name, operation number, and opaque
	    argument for use by the policy.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mac_get_pid()</function> may be used to request
	    the label of another process by process id.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mac_get_link()</function> is identical to
	    <function xmlns:xlink="http://www.w3.org/1999/xlink">mac_get_file()</function>, only it will not follow
	    a symbolic link if it is the final entry in the path, so may be
	    used to retrieve the label on a symlink.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mac_set_link()</function> is identical to
	    <function xmlns:xlink="http://www.w3.org/1999/xlink">mac_set_file()</function>, only it will not follow a
	    symbolic link if it is the final entry in a path, so may be used
	    to manipulate the label on a symlink.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mac_execve()</function> is identical to the
	    <function xmlns:xlink="http://www.w3.org/1999/xlink">execve()</function> system call, only it also accepts
	    a requested label to set the process label to when beginning
	    execution of a new program.  This change in label on execution
	    is referred to as a "transition".</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mac_get_peer()</function>, actually implemented
	    via a socket option, retrieves the label of a remote peer on a
	    socket, if available.</para>
	</listitem>
      </itemizedlist>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">In addition to these system calls, the
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">SIOCSIGMAC</literal> and <literal xmlns:xlink="http://www.w3.org/1999/xlink">SIOCSIFMAC</literal>
	network interface ioctls permit the labels on network interfaces to
	be retrieved and set.</para>
    </sect2>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-policy-architecture">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">MAC Policy Architecture</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Security policies are either linked directly into the kernel,
      or compiled into loadable kernel modules that may be loaded at
      boot, or dynamically using the module loading system calls at
      runtime.  Policy modules interact with the system through a
      set of declared entry points, providing access to a stream of
      system events and permitting the policy to influence access
      control decisions.  Each policy contains a number of elements:</para>

    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Optional configuration parameters for
	policy.</para></listitem>
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Centralized implementation of the policy
	logic and parameters.</para></listitem>
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Optional implementation of policy life cycle
	events, such as initialization and destruction.</para></listitem>
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Optional support for initializing, maintaining, and
	destroying labels on selected kernel objects.</para></listitem>
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Optional support for user process inspection and
	modification of labels on selected objects.</para></listitem>
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Implementation of selected access control
	entry points that are of interest to the policy.</para></listitem>
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Declaration of policy identity, module entry
	points, and policy properties.</para></listitem>
    </itemizedlist>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-policy-declaration">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Policy Declaration</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Modules may be declared using the
	<function xmlns:xlink="http://www.w3.org/1999/xlink">MAC_POLICY_SET()</function> macro, which names the
	policy, provides a reference to the MAC entry point vector,
	provides load-time flags determining how the policy framework
	should handle the policy, and optionally requests the
	allocation of label state by the framework.</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">static struct mac_policy_ops mac_<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">policy</replaceable>_ops =
{
        .mpo_destroy = mac_<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">policy</replaceable>_destroy,
        .mpo_init = mac_<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">policy</replaceable>_init,
        .mpo_init_bpfdesc_label = mac_<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">policy</replaceable>_init_bpfdesc_label,
        .mpo_init_cred_label = mac_<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">policy</replaceable>_init_label,
/* ... */
        .mpo_check_vnode_setutimes = mac_<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">policy</replaceable>_check_vnode_setutimes,
        .mpo_check_vnode_stat = mac_<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">policy</replaceable>_check_vnode_stat,
        .mpo_check_vnode_write = mac_<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">policy</replaceable>_check_vnode_write,
};</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The MAC policy entry point vector,
	<varname xmlns:xlink="http://www.w3.org/1999/xlink">mac_<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">policy</replaceable>_ops</varname> in this example, associates
	functions defined in the module with specific entry points. A
	complete listing of available entry points and their
	prototypes may be found in the MAC entry point reference
	section.  Of specific interest during module registration are
	the <symbol xmlns:xlink="http://www.w3.org/1999/xlink">.mpo_destroy</symbol> and <symbol xmlns:xlink="http://www.w3.org/1999/xlink">.mpo_init</symbol>
	entry points. <symbol xmlns:xlink="http://www.w3.org/1999/xlink">.mpo_init</symbol> will be invoked once a
	policy is successfully registered with the module framework
	but prior to any other entry points becoming active. This
	permits the policy to perform any policy-specific allocation
	and initialization, such as initialization of any data or
	locks.  <symbol xmlns:xlink="http://www.w3.org/1999/xlink">.mpo_destroy</symbol> will be invoked when a
	policy module is unloaded to permit releasing of any allocated
	memory and destruction of locks.  Currently, these two entry
	points are invoked with the MAC policy list mutex held to
	prevent any other entry points from being invoked: this will
	be changed, but in the mean time, policies should be careful
	about what kernel primitives they invoke so as to avoid lock
	ordering or sleeping problems.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The policy declaration's module name field exists so that
	the module may be uniquely identified for the purposes of
	module dependencies. An appropriate string should be selected.
	The full string name of the policy is displayed to the user
	via the kernel log during load and unload events, and also
	exported when providing status information to userland
	processes.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-policy-flags">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Policy Flags</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The policy declaration flags field permits the module to
	provide the framework with information about its capabilities at
	the time the module is loaded.  Currently, three flags are
	defined:</para>

      <variablelist xmlns:xlink="http://www.w3.org/1999/xlink">
	<varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	  <term xmlns:xlink="http://www.w3.org/1999/xlink">MPC_LOADTIME_FLAG_UNLOADOK</term>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">This flag indicates that the policy module may be
	      unloaded.  If this flag is not provided, then the policy
	      framework will reject requests to unload the module.
	      This flag might be used by modules that allocate label
	      state and are unable to free that state at
	      runtime.</para>
	  </listitem>
	</varlistentry>

	<varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	  <term xmlns:xlink="http://www.w3.org/1999/xlink">MPC_LOADTIME_FLAG_NOTLATE</term>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">This flag indicates that the policy module
	      must be loaded and initialized early in the boot
	      process.  If the flag is specified, attempts to register
	      the module following boot will be rejected.  The flag
	      may be used by policies that require pervasive labeling
	      of all system objects, and cannot handle objects that
	      have not been properly initialized by the policy.</para>
	  </listitem>
	</varlistentry>

	<varlistentry xmlns:xlink="http://www.w3.org/1999/xlink">
	  <term xmlns:xlink="http://www.w3.org/1999/xlink">MPC_LOADTIME_FLAG_LABELMBUFS</term>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">This flag indicates that the policy module requires
	      labeling of Mbufs, and that memory should always be
	      allocated for the storage of Mbuf labels.  By default,
	      the MAC Framework will not allocate label storage for
	      Mbufs unless at least one loaded policy has this flag
	      set.  This measurably improves network performance when
	      policies do not require Mbuf labeling.  A kernel option,
	      <literal xmlns:xlink="http://www.w3.org/1999/xlink">MAC_ALWAYS_LABEL_MBUF</literal>, exists to
	      force the MAC Framework to allocate Mbuf label storage
	      regardless of the setting of this flag, and may be
	      useful in some environments.</para>
	  </listitem>
	</varlistentry>
      </variablelist>

      <note xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Policies using the
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">MPC_LOADTIME_FLAG_LABELMBUFS</literal> without the
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">MPC_LOADTIME_FLAG_NOTLATE</literal> flag set
	must be able to correctly handle <literal xmlns:xlink="http://www.w3.org/1999/xlink">NULL</literal>
	Mbuf label pointers passed into entry points.  This is necessary
	as in-flight Mbufs without label storage may persist after a
	policy enabling Mbuf labeling has been loaded.  If a policy
	is loaded before the network subsystem is active (i.e., the
	policy is not being loaded late), then all Mbufs are guaranteed
	to have label storage.</para></note>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-policy-entry-points">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Policy Entry Points</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Four classes of entry points are offered to policies
	registered with the framework: entry points associated with
	the registration and management of policies, entry points
	denoting initialization, creation, destruction, and other life
	cycle events for kernel objects, events associated with access
	control decisions that the policy module may influence, and
	calls associated with the management of labels on objects. In
	addition, a <function xmlns:xlink="http://www.w3.org/1999/xlink">mac_syscall()</function> entry point is
	provided so that policies may extend the kernel interface
	without registering new system calls.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Policy module writers should be aware of the kernel
	locking strategy, as well as what object locks are available
	during which entry points. Writers should attempt to avoid
	deadlock scenarios by avoiding grabbing non-leaf locks inside
	of entry points, and also follow the locking protocol for
	object access and modification.  In particular, writers should
	be aware that while necessary locks to access objects and
	their labels are generally held, sufficient locks to modify an
	object or its label may not be present for all entry points.
	Locking information for arguments is documented in the MAC
	framework entry point document.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Policy entry points will pass a reference to the object
	label along with the object itself.  This permits labeled
	policies to be unaware of the internals of the object yet
	still make decisions based on the label. The exception to this
	is the process credential, which is assumed to be understood
	by policies as a first class security object in the kernel.</para>
    </sect2>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-entry-point-reference">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">MAC Policy Entry Point Reference</title>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-general">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">General-Purpose Module Entry Points</title>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-init">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_init</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_init</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct mac_policy_conf
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">conf</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">conf</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">MAC policy definition</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Policy load event.  The policy list mutex is held, so
	  sleep operations cannot be performed, and calls out to other
	  kernel subsystems must be made with caution.  If potentially
	  sleeping memory allocations are required during policy
	  initialization, they should be made using a separate module
	  SYSINIT().</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mpo-destroy">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_destroy</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_destroy</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct mac_policy_conf
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">conf</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">conf</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">MAC policy definition</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Policy load event.  The policy list mutex is held, so
          caution should be applied.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-syscall">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_syscall</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_syscall</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct thread
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">td</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">int <parameter xmlns:xlink="http://www.w3.org/1999/xlink">call</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">void *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">arg</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">td</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Calling thread</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">call</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy-specific syscall number</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">arg</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Pointer to syscall arguments</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">This entry point provides a policy-multiplexed system
          call so that policies may provide additional services to
          user processes without registering specific system calls.
          The policy name provided during registration is used to
          demux calls from userland, and the arguments will be
          forwarded to this entry point.  When implementing new
          services, security modules should be sure to invoke
          appropriate access control checks from the MAC framework as
          needed.  For example, if a policy implements an augmented
          signal functionality, it should call the necessary signal
          access control checks to invoke the MAC framework and other
          registered policies.</para>

        <note xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Modules must currently perform the
            <function xmlns:xlink="http://www.w3.org/1999/xlink">copyin()</function> of the syscall data on their
            own.</para></note>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-thread-userret">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_thread_userret</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_thread_userret</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct thread
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">td</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">td</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Returning thread</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <!-- XXX: Maybe rewrite this section. -->
        <para xmlns:xlink="http://www.w3.org/1999/xlink">This entry point permits policy modules to perform
          MAC-related events when a thread returns to user space, via
	  a system call return, trap return, or otherwise.
          This is required for policies that have floating process
          labels, as it is not always possible to acquire the process
          lock at arbitrary points in the stack during system call
          processing; process labels might represent traditional
          authentication data, process history information, or other
          data.  To employ this mechanism, intended changes to the
	  process credential label may be stored in the
	  <literal xmlns:xlink="http://www.w3.org/1999/xlink">p_label</literal> protected by a per-policy spin
	  lock, and then set the per-thread
	  <literal xmlns:xlink="http://www.w3.org/1999/xlink">TDF_ASTPENDING</literal> flag and per-process
	  <literal xmlns:xlink="http://www.w3.org/1999/xlink">PS_MACPENDM</literal> flag to schedule a call
	  to the userret entry point.  From this entry point, the
	  policy may create a replacement credential with less
	  concern about the locking context.  Policy writers are
	  cautioned that event ordering relating to scheduling an
	  AST and the AST being performed may be complex and
	  interlaced in multithreaded applications.</para>
      </sect3>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-label-ops">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Label Operations</title>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-init-bpfdesc">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_init_bpfdesc_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_init_bpfdesc_label</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">New label to apply</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Initialize the label on a newly instantiated bpfdesc (BPF
          descriptor).  Sleeping is permitted.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-init-cred-label">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_init_cred_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_init_cred_label</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">New label to initialize</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Initialize the label for a newly instantiated
          user credential.  Sleeping is permitted.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-init-devfsdirent">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_init_devfsdirent_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_init_devfsdirent_label</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">New label to apply</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Initialize the label on a newly instantiated devfs
          entry.  Sleeping is permitted.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-init-ifnet">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_init_ifnet_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_init_ifnet_label</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">New label to apply</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Initialize the label on a newly instantiated network
          interface.  Sleeping is permitted.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-init-ipq">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_init_ipq_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_init_ipq_label</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">int <parameter xmlns:xlink="http://www.w3.org/1999/xlink">flag</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">New label to apply</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">flag</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Sleeping/non-sleeping <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">malloc</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry>; see
		  below</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Initialize the label on a newly instantiated IP fragment
          reassembly queue.  The <parameter xmlns:xlink="http://www.w3.org/1999/xlink">flag</parameter> field may
	  be one of <symbol xmlns:xlink="http://www.w3.org/1999/xlink">M_WAITOK</symbol> and <symbol xmlns:xlink="http://www.w3.org/1999/xlink">M_NOWAIT</symbol>,
	  and should be employed to avoid performing a sleeping
          <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">malloc</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry> during this initialization call.  IP fragment
	  reassembly queue allocation frequently occurs in performance
	  sensitive environments, and the implementation should be careful
	  to avoid sleeping or long-lived operations.  This entry point
          is permitted to fail resulting in the failure to allocate
          the IP fragment reassembly queue.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-init-mbuf">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_init_mbuf_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_init_mbuf_label</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">int <parameter xmlns:xlink="http://www.w3.org/1999/xlink">flag</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">flag</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Sleeping/non-sleeping <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">malloc</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry>; see
                  below</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label to initialize</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Initialize the label on a newly instantiated mbuf packet
          header (<parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuf</parameter>).  The
          <parameter xmlns:xlink="http://www.w3.org/1999/xlink">flag</parameter> field may be one of
          <symbol xmlns:xlink="http://www.w3.org/1999/xlink">M_WAITOK</symbol> and <symbol xmlns:xlink="http://www.w3.org/1999/xlink">M_NOWAIT</symbol>, and
          should be employed to avoid performing a sleeping
          <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">malloc</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry> during this initialization call.  Mbuf
          allocation frequently occurs in performance sensitive
          environments, and the implementation should be careful to
          avoid sleeping or long-lived operations.  This entry point
          is permitted to fail resulting in the failure to allocate
          the mbuf header.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-init-mount">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_init_mount_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_init_mount_label</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">mntlabel</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">fslabel</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <!-- XXX: Wording on label descriptions. -->
        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">mntlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label to be initialized for the mount
                  itself</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">fslabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label to be initialized for the file
                  system</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Initialize the labels on a newly instantiated mount
          point.  Sleeping is permitted.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-init-mount-fs-label">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_init_mount_fs_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_init_mount_fs_label</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label to be initialized</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Initialize the label on a newly mounted file
          system.  Sleeping is permitted</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-init-pipe-label">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_init_pipe_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_init_pipe_label</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct
              label*<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label to be filled in</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Initialize a label for a newly instantiated pipe. Sleeping
	  is permitted.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-init-socket">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_init_socket_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_init_socket_label</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">int <parameter xmlns:xlink="http://www.w3.org/1999/xlink">flag</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">New label to initialize</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">flag</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">malloc</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry> flags</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Initialize a label for a newly instantiated
          socket.  The <parameter xmlns:xlink="http://www.w3.org/1999/xlink">flag</parameter> field may be one of
	  <symbol xmlns:xlink="http://www.w3.org/1999/xlink">M_WAITOK</symbol> and <symbol xmlns:xlink="http://www.w3.org/1999/xlink">M_NOWAIT</symbol>, and
	  should be employed to avoid performing a sleeping <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">malloc</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry>
	  during this initialization call.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-init-socket-peer-label">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_init_socket_peer_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_init_socket_peer_label</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">int <parameter xmlns:xlink="http://www.w3.org/1999/xlink">flag</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">New label to initialize</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">flag</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">malloc</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry> flags</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Initialize the peer label for a newly instantiated
          socket.  The <parameter xmlns:xlink="http://www.w3.org/1999/xlink">flag</parameter> field may be one of
	  <symbol xmlns:xlink="http://www.w3.org/1999/xlink">M_WAITOK</symbol> and <symbol xmlns:xlink="http://www.w3.org/1999/xlink">M_NOWAIT</symbol>, and
	  should be employed to avoid performing a sleeping <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">malloc</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry>
	  during this initialization call.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-init-proc-label">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_init_proc_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_init_proc_label</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">New label to initialize</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Initialize the label for a newly instantiated
          process.  Sleeping is permitted.</para>
      </sect3>


      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-init-vnode">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_init_vnode_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_init_vnode_label</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">New label to initialize</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Initialize the label on a newly instantiated vnode.  Sleeping
	  is permitted.</para>
      </sect3>
      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-destroy-bpfdesc">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_destroy_bpfdesc_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_destroy_bpfdesc_label</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">bpfdesc label</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Destroy the label on a BPF descriptor.  In this entry
          point a policy should free any internal storage associated
          with <parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter> so that it may be
          destroyed.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-destroy-cred">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_destroy_cred_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_destroy_cred_label</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label being destroyed</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Destroy the label on a credential.  In this entry point,
          a policy module should free any internal storage associated
          with <parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter> so that it may be
          destroyed.</para>
      </sect3>


      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-destroy-devfsdirent">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_destroy_devfsdirent_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_destroy_devfsdirent_label</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label being destroyed</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Destroy the label on a devfs entry.  In this entry
          point, a policy module should free any internal storage
          associated with <parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter> so that it may
          be destroyed.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-destroy-ifnet-label">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_destroy_ifnet_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_destroy_ifnet_label</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label being destroyed</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Destroy the label on a removed interface.  In this entry
          point, a policy module should free any internal storage
          associated with <parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter> so that it may
          be destroyed.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-destroy-ipq-label">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_destroy_ipq_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_destroy_ipq_label</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label being destroyed</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Destroy the label on an IP fragment queue.  In this
          entry point, a policy module should free any internal
          storage associated with <parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter> so that
          it may be destroyed.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-destroy-mbuf-label">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_destroy_mbuf_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_destroy_mbuf_label</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label being destroyed</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Destroy the label on an mbuf header.  In this entry
          point, a policy module should free any internal storage
          associated with <parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter> so that it may
          be destroyed.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-destroy-mount-label">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_destroy_mount_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_destroy_mount_label</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Mount point label being destroyed</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Destroy the labels on a mount point.  In this entry
          point, a policy module should free the internal storage
          associated with <parameter xmlns:xlink="http://www.w3.org/1999/xlink">mntlabel</parameter> so that they
          may be destroyed.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-destroy-mount">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_destroy_mount_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_destroy_mount_label</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">mntlabel</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">fslabel</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">mntlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Mount point label being destroyed</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">fslabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">File system label being destroyed&gt;</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Destroy the labels on a mount point.  In this entry
          point, a policy module should free the internal storage
          associated with <parameter xmlns:xlink="http://www.w3.org/1999/xlink">mntlabel</parameter> and
          <parameter xmlns:xlink="http://www.w3.org/1999/xlink">fslabel</parameter> so that they may be
          destroyed.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-destroy-socket">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_destroy_socket_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_destroy_socket_label</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>

          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Socket label being destroyed</entry>
              </row>

            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Destroy the label on a socket.  In this entry point, a
          policy module should free any internal storage associated
          with <parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter> so that it may be
          destroyed.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-destroy-socket-peer-label">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_destroy_socket_peer_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_destroy_socket_peer_label</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">peerlabel</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">peerlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Socket peer label being destroyed</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Destroy the peer label on a socket.  In this entry
          point, a policy module should free any internal storage
          associated with <parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter> so that it may
          be destroyed.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-destroy-pipe-label">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_destroy_pipe_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_destroy_pipe_label</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Pipe label</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Destroy the label on a pipe.  In this entry point, a
          policy module should free any internal storage associated
          with <parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter> so that it may be
          destroyed.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-destroy-proc-label">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_destroy_proc_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_destroy_proc_label</function></funcdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Process label</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Destroy the label on a process.  In this entry point, a
          policy module should free any internal storage associated
          with <parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter> so that it may be
          destroyed.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-destroy-vnode-label">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_destroy_vnode_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_destroy_vnode_label</function></funcdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Process label</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Destroy the label on a vnode.  In this entry point, a
          policy module should free any internal storage associated
          with <parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter> so that it may be
          destroyed.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-copy-mbuf-label">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_copy_mbuf_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_copy_mbuf_label</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">src</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">dest</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">src</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Source label</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">dest</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Destination label</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Copy the label information in
          <parameter xmlns:xlink="http://www.w3.org/1999/xlink">src</parameter> into
          <parameter xmlns:xlink="http://www.w3.org/1999/xlink">dest</parameter>.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-copy-pipe-label">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_copy_pipe_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_copy_pipe_label</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">src</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">dest</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">src</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Source label</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">dest</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Destination label</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Copy the label information in
          <parameter xmlns:xlink="http://www.w3.org/1999/xlink">src</parameter> into
          <parameter xmlns:xlink="http://www.w3.org/1999/xlink">dest</parameter>.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-copy-vnode-label">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_copy_vnode_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_copy_vnode_label</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">src</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">dest</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">src</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Source label</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">dest</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Destination label</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Copy the label information in
          <parameter xmlns:xlink="http://www.w3.org/1999/xlink">src</parameter> into
          <parameter xmlns:xlink="http://www.w3.org/1999/xlink">dest</parameter>.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-externalize-cred-label">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_externalize_cred_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_externalize_cred_label</function></funcdef>

            
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">struct label *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">char *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">struct sbuf *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">sb</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">int <parameter xmlns:xlink="http://www.w3.org/1999/xlink">*claimed</parameter></paramdef>

          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            
  <tbody xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label to be externalized</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Name of the policy whose label should be externalized</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">sb</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">String buffer to be filled with a text representation of
	label</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">claimed</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Should be incremented when <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_data</parameter>
	can be filled in.</entry>
    </row>
  </tbody>

          </tgroup>
        </informaltable>

        
  <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Produce an externalized label based on the label structure passed.
    An externalized label consists of a text representation of the label
    contents that can be used with userland applications and read by the
    user.  Currently, all policies' <function xmlns:xlink="http://www.w3.org/1999/xlink">externalize</function> entry
    points will be called, so the implementation should check the contents
    of <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter> before attempting to fill in
    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">sb</parameter>.  If
    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter> does not match the name of your
    policy, simply return <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue>.  Only return nonzero
    if an error occurs while externalizing the label data.  Once the policy
    fills in <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_data</parameter>, <varname xmlns:xlink="http://www.w3.org/1999/xlink">*claimed</varname>
    should be incremented.</para>

      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-externalize-ifnet-label">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_externalize_ifnet_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_externalize_ifnet_label</function></funcdef>

            
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">struct label *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">char *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">struct sbuf *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">sb</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">int <parameter xmlns:xlink="http://www.w3.org/1999/xlink">*claimed</parameter></paramdef>

          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            
  <tbody xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label to be externalized</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Name of the policy whose label should be externalized</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">sb</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">String buffer to be filled with a text representation of
	label</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">claimed</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Should be incremented when <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_data</parameter>
	can be filled in.</entry>
    </row>
  </tbody>

          </tgroup>
        </informaltable>

        
  <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Produce an externalized label based on the label structure passed.
    An externalized label consists of a text representation of the label
    contents that can be used with userland applications and read by the
    user.  Currently, all policies' <function xmlns:xlink="http://www.w3.org/1999/xlink">externalize</function> entry
    points will be called, so the implementation should check the contents
    of <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter> before attempting to fill in
    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">sb</parameter>.  If
    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter> does not match the name of your
    policy, simply return <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue>.  Only return nonzero
    if an error occurs while externalizing the label data.  Once the policy
    fills in <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_data</parameter>, <varname xmlns:xlink="http://www.w3.org/1999/xlink">*claimed</varname>
    should be incremented.</para>

      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-externalize-pipe-label">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_externalize_pipe_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_externalize_pipe_label</function></funcdef>

            
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">struct label *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">char *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">struct sbuf *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">sb</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">int <parameter xmlns:xlink="http://www.w3.org/1999/xlink">*claimed</parameter></paramdef>

          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            
  <tbody xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label to be externalized</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Name of the policy whose label should be externalized</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">sb</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">String buffer to be filled with a text representation of
	label</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">claimed</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Should be incremented when <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_data</parameter>
	can be filled in.</entry>
    </row>
  </tbody>

          </tgroup>
        </informaltable>

        
  <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Produce an externalized label based on the label structure passed.
    An externalized label consists of a text representation of the label
    contents that can be used with userland applications and read by the
    user.  Currently, all policies' <function xmlns:xlink="http://www.w3.org/1999/xlink">externalize</function> entry
    points will be called, so the implementation should check the contents
    of <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter> before attempting to fill in
    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">sb</parameter>.  If
    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter> does not match the name of your
    policy, simply return <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue>.  Only return nonzero
    if an error occurs while externalizing the label data.  Once the policy
    fills in <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_data</parameter>, <varname xmlns:xlink="http://www.w3.org/1999/xlink">*claimed</varname>
    should be incremented.</para>

      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-externalize-socket-label">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_externalize_socket_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_externalize_socket_label</function></funcdef>

            
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">struct label *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">char *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">struct sbuf *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">sb</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">int <parameter xmlns:xlink="http://www.w3.org/1999/xlink">*claimed</parameter></paramdef>

          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            
  <tbody xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label to be externalized</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Name of the policy whose label should be externalized</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">sb</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">String buffer to be filled with a text representation of
	label</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">claimed</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Should be incremented when <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_data</parameter>
	can be filled in.</entry>
    </row>
  </tbody>

          </tgroup>
        </informaltable>

        
  <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Produce an externalized label based on the label structure passed.
    An externalized label consists of a text representation of the label
    contents that can be used with userland applications and read by the
    user.  Currently, all policies' <function xmlns:xlink="http://www.w3.org/1999/xlink">externalize</function> entry
    points will be called, so the implementation should check the contents
    of <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter> before attempting to fill in
    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">sb</parameter>.  If
    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter> does not match the name of your
    policy, simply return <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue>.  Only return nonzero
    if an error occurs while externalizing the label data.  Once the policy
    fills in <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_data</parameter>, <varname xmlns:xlink="http://www.w3.org/1999/xlink">*claimed</varname>
    should be incremented.</para>

      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-externalize-socket-peer-label">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_externalize_socket_peer_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_externalize_socket_peer_label</function></funcdef>

            
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">struct label *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">char *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">struct sbuf *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">sb</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">int <parameter xmlns:xlink="http://www.w3.org/1999/xlink">*claimed</parameter></paramdef>

          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            
  <tbody xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label to be externalized</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Name of the policy whose label should be externalized</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">sb</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">String buffer to be filled with a text representation of
	label</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">claimed</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Should be incremented when <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_data</parameter>
	can be filled in.</entry>
    </row>
  </tbody>

          </tgroup>
        </informaltable>

        
  <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Produce an externalized label based on the label structure passed.
    An externalized label consists of a text representation of the label
    contents that can be used with userland applications and read by the
    user.  Currently, all policies' <function xmlns:xlink="http://www.w3.org/1999/xlink">externalize</function> entry
    points will be called, so the implementation should check the contents
    of <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter> before attempting to fill in
    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">sb</parameter>.  If
    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter> does not match the name of your
    policy, simply return <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue>.  Only return nonzero
    if an error occurs while externalizing the label data.  Once the policy
    fills in <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_data</parameter>, <varname xmlns:xlink="http://www.w3.org/1999/xlink">*claimed</varname>
    should be incremented.</para>

      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-externalize-vnode-label">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_externalize_vnode_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_externalize_vnode_label</function></funcdef>

            
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">struct label *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">char *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">struct sbuf *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">sb</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">int <parameter xmlns:xlink="http://www.w3.org/1999/xlink">*claimed</parameter></paramdef>

          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            
  <tbody xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label to be externalized</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Name of the policy whose label should be externalized</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">sb</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">String buffer to be filled with a text representation of
	label</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">claimed</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Should be incremented when <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_data</parameter>
	can be filled in.</entry>
    </row>
  </tbody>

          </tgroup>
        </informaltable>

        
  <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Produce an externalized label based on the label structure passed.
    An externalized label consists of a text representation of the label
    contents that can be used with userland applications and read by the
    user.  Currently, all policies' <function xmlns:xlink="http://www.w3.org/1999/xlink">externalize</function> entry
    points will be called, so the implementation should check the contents
    of <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter> before attempting to fill in
    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">sb</parameter>.  If
    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter> does not match the name of your
    policy, simply return <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue>.  Only return nonzero
    if an error occurs while externalizing the label data.  Once the policy
    fills in <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_data</parameter>, <varname xmlns:xlink="http://www.w3.org/1999/xlink">*claimed</varname>
    should be incremented.</para>

      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-internalize-cred-label">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_internalize_cred_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_internalize_cred_label</function></funcdef>

            
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">struct label *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">char *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">char *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_data</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">int *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">claimed</parameter></paramdef>

          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            
  <tbody xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label to be filled in</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Name of the policy whose label should be internalized</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_data</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Text data to be internalized</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">claimed</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Should be incremented when data can be successfully
	internalized.</entry>
    </row>
  </tbody>

          </tgroup>
        </informaltable>

        
  <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Produce an internal label structure based on externalized label data
    in text format.  Currently, all policies' <function xmlns:xlink="http://www.w3.org/1999/xlink">internalize</function>
    entry points are called when internalization is requested, so the
    implementation should compare the contents of
    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter> to its own name in order to be sure
    it should be internalizing the data in <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_data</parameter>.
    Just as in the <function xmlns:xlink="http://www.w3.org/1999/xlink">externalize</function> entry points, the entry
    point should return <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> if
    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter> does not match its own name, or when
    data can successfully be internalized, in which case
    <varname xmlns:xlink="http://www.w3.org/1999/xlink">*claimed</varname> should be incremented.</para>

      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-internalize-ifnet-label">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_internalize_ifnet_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_internalize_ifnet_label</function></funcdef>

            
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">struct label *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">char *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">char *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_data</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">int *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">claimed</parameter></paramdef>

          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            
  <tbody xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label to be filled in</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Name of the policy whose label should be internalized</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_data</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Text data to be internalized</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">claimed</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Should be incremented when data can be successfully
	internalized.</entry>
    </row>
  </tbody>

          </tgroup>
        </informaltable>

        
  <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Produce an internal label structure based on externalized label data
    in text format.  Currently, all policies' <function xmlns:xlink="http://www.w3.org/1999/xlink">internalize</function>
    entry points are called when internalization is requested, so the
    implementation should compare the contents of
    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter> to its own name in order to be sure
    it should be internalizing the data in <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_data</parameter>.
    Just as in the <function xmlns:xlink="http://www.w3.org/1999/xlink">externalize</function> entry points, the entry
    point should return <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> if
    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter> does not match its own name, or when
    data can successfully be internalized, in which case
    <varname xmlns:xlink="http://www.w3.org/1999/xlink">*claimed</varname> should be incremented.</para>

      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-internalize-pipe-label">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_internalize_pipe_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_internalize_pipe_label</function></funcdef>

            
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">struct label *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">char *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">char *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_data</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">int *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">claimed</parameter></paramdef>

          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            
  <tbody xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label to be filled in</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Name of the policy whose label should be internalized</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_data</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Text data to be internalized</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">claimed</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Should be incremented when data can be successfully
	internalized.</entry>
    </row>
  </tbody>

          </tgroup>
        </informaltable>

        
  <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Produce an internal label structure based on externalized label data
    in text format.  Currently, all policies' <function xmlns:xlink="http://www.w3.org/1999/xlink">internalize</function>
    entry points are called when internalization is requested, so the
    implementation should compare the contents of
    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter> to its own name in order to be sure
    it should be internalizing the data in <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_data</parameter>.
    Just as in the <function xmlns:xlink="http://www.w3.org/1999/xlink">externalize</function> entry points, the entry
    point should return <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> if
    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter> does not match its own name, or when
    data can successfully be internalized, in which case
    <varname xmlns:xlink="http://www.w3.org/1999/xlink">*claimed</varname> should be incremented.</para>

      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-internalize-socket-label">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_internalize_socket_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_internalize_socket_label</function></funcdef>

            
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">struct label *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">char *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">char *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_data</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">int *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">claimed</parameter></paramdef>

          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            
  <tbody xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label to be filled in</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Name of the policy whose label should be internalized</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_data</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Text data to be internalized</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">claimed</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Should be incremented when data can be successfully
	internalized.</entry>
    </row>
  </tbody>

          </tgroup>
        </informaltable>

        
  <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Produce an internal label structure based on externalized label data
    in text format.  Currently, all policies' <function xmlns:xlink="http://www.w3.org/1999/xlink">internalize</function>
    entry points are called when internalization is requested, so the
    implementation should compare the contents of
    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter> to its own name in order to be sure
    it should be internalizing the data in <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_data</parameter>.
    Just as in the <function xmlns:xlink="http://www.w3.org/1999/xlink">externalize</function> entry points, the entry
    point should return <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> if
    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter> does not match its own name, or when
    data can successfully be internalized, in which case
    <varname xmlns:xlink="http://www.w3.org/1999/xlink">*claimed</varname> should be incremented.</para>

      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-internalize-vnode-label">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_internalize_vnode_label</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_internalize_vnode_label</function></funcdef>

            
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">struct label *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">char *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">char *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_data</parameter></paramdef>
  <paramdef xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">int *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">claimed</parameter></paramdef>

          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            
  <tbody xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label to be filled in</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Name of the policy whose label should be internalized</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_data</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Text data to be internalized</entry>
    </row>

    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">claimed</parameter></entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Should be incremented when data can be successfully
	internalized.</entry>
    </row>
  </tbody>

          </tgroup>
        </informaltable>

        
  <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Produce an internal label structure based on externalized label data
    in text format.  Currently, all policies' <function xmlns:xlink="http://www.w3.org/1999/xlink">internalize</function>
    entry points are called when internalization is requested, so the
    implementation should compare the contents of
    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter> to its own name in order to be sure
    it should be internalizing the data in <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_data</parameter>.
    Just as in the <function xmlns:xlink="http://www.w3.org/1999/xlink">externalize</function> entry points, the entry
    point should return <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> if
    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">element_name</parameter> does not match its own name, or when
    data can successfully be internalized, in which case
    <varname xmlns:xlink="http://www.w3.org/1999/xlink">*claimed</varname> should be incremented.</para>

      </sect3>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-label-events">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Label Events</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">This class of entry points is used by the MAC framework to
        permit policies to maintain label information on kernel
        objects.  For each labeled kernel object of interest to a MAC
        policy, entry points may be registered for relevant life cycle
        events.  All objects implement initialization, creation, and
        destruction hooks.  Some objects will also implement
        relabeling, allowing user processes to change the labels on
        objects.  Some objects will also implement object-specific
        events, such as label events associated with IP reassembly.  A
        typical labeled object will have the following life cycle of
        entry points:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">Label initialization          o
(object-specific wait)         \
Label creation                  o
                                 \
Relabel events,                   o--&lt;--.
Various object-specific,          |     |
Access control events             ~--&gt;--o
                                         \
Label destruction                         o</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Label initialization permits policies to allocate memory
        and set initial values for labels without context for the use
        of the object.  The label slot allocated to a policy will be
        zeroed by default, so some policies may not need to perform
        initialization.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Label creation occurs when the kernel structure is
        associated with an actual kernel object.  For example, Mbufs
        may be allocated and remain unused in a pool until they are
        required.  mbuf allocation causes label initialization on the
        mbuf to take place, but mbuf creation occurs when the mbuf is
        associated with a datagram.  Typically, context will be
        provided for a creation event, including the circumstances of
        the creation, and labels of other relevant objects in the
        creation process. For example, when an mbuf is created from a
        socket, the socket and its label will be presented to
        registered policies in addition to the new mbuf and its label.
        Memory allocation in creation events is discouraged, as it may
        occur in performance sensitive ports of the kernel; in
        addition, creation calls are not permitted to fail so a
        failure to allocate memory cannot be reported.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Object specific events do not generally fall into the
        other broad classes of label events, but will generally
        provide an opportunity to modify or update the label on an
        object based on additional context.  For example, the label on
        an IP fragment reassembly queue may be updated during the
        <symbol xmlns:xlink="http://www.w3.org/1999/xlink">MAC_UPDATE_IPQ</symbol> entry point as a result of the
        acceptance of an additional mbuf to that queue.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Access control events are discussed in detail in the
        following section.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Label destruction permits policies to release storage or
        state associated with a label during its association with an
        object so that the kernel data structures supporting the
        object may be reused or released.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">In addition to labels associated with specific kernel
        objects, an additional class of labels exists: temporary
        labels.  These labels are used to store update information
        submitted by user processes. These labels are initialized and
        destroyed as with other label types, but the creation event is
        <symbol xmlns:xlink="http://www.w3.org/1999/xlink">MAC_INTERNALIZE</symbol>, which accepts a user label
        to be converted to an in-kernel representation.</para>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-fs-label-event-ops">
        <title xmlns:xlink="http://www.w3.org/1999/xlink">File System Object Labeling Event Operations</title>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-associate-vnode-devfs">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_associate_vnode_devfs</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_associate_vnode_devfs</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct mount
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">mp</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">fslabel</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct devfs_dirent
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">de</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">delabel</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vlabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">mp</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Devfs mount point</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">fslabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Devfs file system label
                    (<varname xmlns:xlink="http://www.w3.org/1999/xlink">mp-&gt;mnt_fslabel</varname>)</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">de</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Devfs directory entry</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">delabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label associated with
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">de</parameter></entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">vnode associated with
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">de</parameter></entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label associated with
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Fill in the label (<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vlabel</parameter>) for
            a newly created devfs vnode based on the devfs directory
            entry passed in <parameter xmlns:xlink="http://www.w3.org/1999/xlink">de</parameter> and its
            label.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-associate-vnode-extattr">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_associate_vnode_extattr</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_associate_vnode_extattr</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct mount
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">mp</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">fslabel</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vlabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">mp</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">File system mount point</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">fslabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">File system label</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Vnode to label</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label associated with
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Attempt to retrieve the label for
            <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter> from the file system extended
            attributes.  Upon success, the value <literal xmlns:xlink="http://www.w3.org/1999/xlink">0</literal>
            is returned.  Should extended attribute retrieval not be
            supported, an accepted fallback is to copy
            <parameter xmlns:xlink="http://www.w3.org/1999/xlink">fslabel</parameter> into
            <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vlabel</parameter>.  In the event of an error,
            an appropriate value for <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> should
            be returned.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-associate-vnode-singlelabel">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_associate_vnode_singlelabel</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_associate_vnode_singlelabel</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct mount
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">mp</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">fslabel</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vlabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">mp</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">File system mount point</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">fslabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">File system label</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Vnode to label</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label associated with
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">On non-multilabel file systems, this entry point is
            called to set the policy label for
            <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter> based on the file system label,
            <parameter xmlns:xlink="http://www.w3.org/1999/xlink">fslabel</parameter>.</para>
        </sect4>


        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-create-devfs-device">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_devfs_device</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_devfs_device</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">dev_t <parameter xmlns:xlink="http://www.w3.org/1999/xlink">dev</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct devfs_dirent
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">devfs_dirent</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">dev</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Device corresponding with
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">devfs_dirent</parameter></entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">devfs_dirent</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Devfs directory entry to be labeled.</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label for <parameter xmlns:xlink="http://www.w3.org/1999/xlink">devfs_dirent</parameter>
                    to be filled in.</entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Fill out the label on a devfs_dirent being created for
            the passed device. This call will be made when the device
            file system is mounted, regenerated, or a new device is made
            available.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-create-devfs-directory">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_devfs_directory</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_devfs_directory</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">char *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">dirname</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">int <parameter xmlns:xlink="http://www.w3.org/1999/xlink">dirnamelen</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct devfs_dirent
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">devfs_dirent</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">dirname</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Name of directory being created</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">namelen</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Length of string
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">dirname</parameter></entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">devfs_dirent</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Devfs directory entry for directory being
                    created.</entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Fill out the label on a devfs_dirent being created for
            the passed directory. This call will be made when the device
            file system is mounted, regenerated, or a new device
            requiring a specific directory hierarchy is made
            available.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-create-devfs-symlink">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_devfs_symlink</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_devfs_symlink</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct mount
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">mp</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct devfs_dirent
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">dd</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">ddlabel</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct devfs_dirent
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">de</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">delabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">mp</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Devfs mount point</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">dd</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Link destination</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">ddlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label associated with
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">dd</parameter></entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">de</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Symlink entry</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">delabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label associated with
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">de</parameter></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Fill in the label (<parameter xmlns:xlink="http://www.w3.org/1999/xlink">delabel</parameter>) for
            a newly created <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" vendor="current"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">devfs</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">5</manvolnum></citerefentry> symbolic link entry.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-create-vnode-extattr">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_vnode_extattr</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_vnode_extattr</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct mount
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">mp</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">fslabel</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">dvp</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">dlabel</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vlabel</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct componentname
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cnp</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">mount</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">File system mount point</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">File system label</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">dvp</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parent directory vnode</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">dlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label associated with
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">dvp</parameter></entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Newly created vnode</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label associated with
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cnp</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Component name for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Write out the label for <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter> to
            the appropriate extended attribute.  If the write
            succeeds, fill in <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vlabel</parameter> with the
            label, and return <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue>. Otherwise,
            return an appropriate error.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-create-mount">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_mount</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_mount</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct mount
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">mp</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">mnt</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">fslabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">mp</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; file system being mounted</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">mntlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label to be filled in for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">mp</parameter></entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">fslabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for the file system
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">mp</parameter> mounts.</entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Fill out the labels on the mount point being created by
            the passed subject credential.  This call will be made when
            a new file system is mounted.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-create-root-mount">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_root_mount</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_root_mount</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct mount
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">mp</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">mntlabel</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">fslabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink" namest="first" nameend="last">See <xref xmlns:xlink="http://www.w3.org/1999/xlink" linkend="mac-mpo-create-mount"/>.</entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Fill out the labels on the mount point being created by
            the passed subject credential.  This call will be made when
            the root file system is mounted, after
            mpo_create_mount;.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-relabel-vnode">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_relabel_vnode</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_relabel_vnode</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vnodelabel</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">newlabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">vnode to relabel</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vnodelabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Existing policy label for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">newlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">New, possibly partial label to replace
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vnodelabel</parameter></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Update the label on the passed vnode given the passed
            update vnode label and the passed subject credential.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-setlabel-vnode-extattr">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_setlabel_vnode_extattr</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_setlabel_vnode_extattr</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vlabel</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">intlabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Vnode for which the label is being
                    written</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label associated with
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">intlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label to write out</entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Write out the policy from
            <parameter xmlns:xlink="http://www.w3.org/1999/xlink">intlabel</parameter> to an extended
            attribute.  This is called from
            <function xmlns:xlink="http://www.w3.org/1999/xlink">vop_stdcreatevnode_ea</function>.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-update-devfsdirent">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_update_devfsdirent</function></title>
          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_update_devfsdirent</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct devfs_dirent
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">devfs_dirent</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">direntlabel</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vnodelabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">devfs_dirent</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; devfs directory entry</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">direntlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">devfs_dirent</parameter> to be
                    updated.</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parent vnode</entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locked</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vnodelabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Update the <parameter xmlns:xlink="http://www.w3.org/1999/xlink">devfs_dirent</parameter> label
            from the passed devfs vnode label.  This call will be made
            when a devfs vnode has been successfully relabeled to commit
            the label change such that it lasts even if the vnode is
            recycled.  It will also be made when a symlink is
            created in devfs, following a call to
            <function xmlns:xlink="http://www.w3.org/1999/xlink">mac_vnode_create_from_vnode</function> to
            initialize the vnode label.</para>
        </sect4>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-ipc-label-ops">
        <title xmlns:xlink="http://www.w3.org/1999/xlink">IPC Object Labeling Event Operations</title>


        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-create-mbuf-from-socket">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_mbuf_from_socket</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_mbuf_from_socket</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct socket
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">so</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">socketlabel</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct mbuf *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">m</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuflabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">socket</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Socket</entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Socket locking WIP</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">socketlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">socket</parameter></entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">m</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; mbuf</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuflabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label to fill in for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">m</parameter></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Set the label on a newly created mbuf header from the
            passed socket label.  This call is made when a new datagram
            or message is generated by the socket and stored in the
            passed mbuf.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-create-pipe">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_pipe</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_pipe</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct pipe
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipe</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipelabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipe</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Pipe</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipelabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label associated with
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipe</parameter></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Set the label on a newly created pipe from the passed
            subject credential.  This call is made when a new pipe is
            created.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-create-socket">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_socket</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_socket</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct socket
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">so</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">socketlabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Immutable</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">so</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; socket to label</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">socketlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label to fill in for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">so</parameter></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Set the label on a newly created socket from the passed
            subject credential. This call is made when a socket is
            created.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-create-socket-from-socket">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_socket_from_socket</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_socket_from_socket</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct socket
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldsocket</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldsocketlabel</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct socket
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">newsocket</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">newsocketlabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldsocket</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Listening socket</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldsocketlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label associated with
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldsocket</parameter></entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">newsocket</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">New socket</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">newsocketlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label associated with
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">newsocketlabel</parameter></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Label a socket, <parameter xmlns:xlink="http://www.w3.org/1999/xlink">newsocket</parameter>,
            newly <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">accept</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry>ed, based on the <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">listen</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry>
            socket, <parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldsocket</parameter>.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-relabel-pipe">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_relabel_pipe</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_relabel_pipe</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct pipe
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipe</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldlabel</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">newlabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipe</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Pipe</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Current policy label associated with
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipe</parameter></entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">newlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label update to apply to
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipe</parameter></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Apply a new label, <parameter xmlns:xlink="http://www.w3.org/1999/xlink">newlabel</parameter>, to
            <parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipe</parameter>.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-relabel-socket">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_relabel_socket</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_relabel_socket</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct socket
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">so</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldlabel</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">newlabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Immutable</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">so</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; socket</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Current label for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">so</parameter></entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">newlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label update for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">so</parameter></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Update the label on a socket from the passed socket
            label update.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mpo-set-socket-peer-from-mbuf">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_set_socket_peer_from_mbuf</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_set_socket_peer_from_mbuf</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct mbuf
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuf</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuflabel</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldlabel</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">newlabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuf</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">First datagram received over socket</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuflabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label for <parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuf</parameter></entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Current label for the socket</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">newlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label to be filled out for the
                    socket</entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Set the peer label on a stream socket from the passed
            mbuf label.  This call will be made when the first datagram
            is received by the stream socket, with the exception of Unix
            domain sockets.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-set-socket-peer-from-socket">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_set_socket_peer_from_socket</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_set_socket_peer_from_socket</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct socket
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldsocket</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldsocketlabel</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct socket
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">newsocket</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">newsocketpeerlabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldsocket</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Local socket</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldsocketlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldsocket</parameter></entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">newsocket</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Peer socket</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">newsocketpeerlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label to fill in for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">newsocket</parameter></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <!-- XXX Passed _remote_ socket endpoint ? -->
          <para xmlns:xlink="http://www.w3.org/1999/xlink">Set the peer label on a stream UNIX domain socket from
            the passed remote socket endpoint.  This call will be made
            when the socket pair is connected, and will be made for both
            endpoints.</para>
        </sect4>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-net-labeling-event-ops">
        <title xmlns:xlink="http://www.w3.org/1999/xlink">Network Object Labeling Event Operations</title>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-create-bpfdesc">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_bpfdesc</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_bpfdesc</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct bpf_d
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">bpf_d</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">bpflabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Immutable</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">bpf_d</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; bpf descriptor</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">bpf</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label to be filled in for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">bpf_d</parameter></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Set the label on a newly created BPF descriptor from the
            passed subject credential.  This call will be made when a
            BPF device node is opened by a process with the passed
            subject credential.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-create-ifnet">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_ifnet</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_ifnet</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ifnet
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnet</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnetlabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnet</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Network interface</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnetlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label to fill in for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnet</parameter></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Set the label on a newly created interface.  This call
            may be made when a new physical interface becomes available
            to the system, or when a pseudo-interface is instantiated
            during the boot or as a result of a user action.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-create-ipq">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_ipq</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_ipq</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct mbuf
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">fragment</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">fragmentlabel</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ipq
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">ipq</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">ipqlabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">fragment</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">First received IP fragment</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">fragmentlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">fragment</parameter></entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">ipq</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">IP reassembly queue to be labeled</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">ipqlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label to be filled in for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">ipq</parameter></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Set the label on a newly created IP fragment reassembly
            queue from the mbuf header of the first received
            fragment.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-create-datagram-from-ipq">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_datagram_from_ipq</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_create_datagram_from_ipq</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ipq
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">ipq</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">ipqlabel</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct mbuf
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">datagram</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">datagramlabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">ipq</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">IP reassembly queue</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">ipqlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">ipq</parameter></entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">datagram</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Datagram to be labeled</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">datagramlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label to be filled in for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">datagramlabel</parameter></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Set the label on a newly reassembled IP datagram from
            the IP fragment reassembly queue from which it was
            generated.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-create-fragment">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_fragment</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_fragment</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct mbuf
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">datagram</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">datagramlabel</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct mbuf
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">fragment</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">fragmentlabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">datagram</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Datagram</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">datagramlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">datagram</parameter></entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">fragment</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Fragment to be labeled</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">fragmentlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label to be filled in for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">datagram</parameter></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Set the label on the mbuf header of a newly created IP
            fragment from the label on the mbuf header of the datagram
            it was generate from.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-create-mbuf-from-mbuf">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_mbuf_from_mbuf</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_mbuf_from_mbuf</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct mbuf
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldmbuf</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldmbuflabel</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct mbuf
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">newmbuf</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">newmbuflabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldmbuf</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Existing (source) mbuf</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldmbuflabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldmbuf</parameter></entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">newmbuf</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">New mbuf to be labeled</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">newmbuflabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label to be filled in for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">newmbuf</parameter></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Set the label on the mbuf header of a newly created
            datagram from the mbuf header of an existing datagram.  This
            call may be made in a number of situations, including when
            an mbuf is re-allocated for alignment purposes.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-create-mbuf-linklayer">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_mbuf_linklayer</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_mbuf_linklayer</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ifnet
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnet</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnetlabel</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct mbuf
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuf</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuflabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnet</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Network interface</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnetlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnet</parameter></entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuf</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">mbuf header for new datagram</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuflabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label to be filled in for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuf</parameter></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Set the label on the mbuf header of a newly created
            datagram generated for the purposes of a link layer response
            for the passed interface.  This call may be made in a number
            of situations, including for ARP or ND6 responses in the
            IPv4 and IPv6 stacks.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-create-mbuf-from-bpfdesc">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_mbuf_from_bpfdesc</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_mbuf_from_bpfdesc</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct bpf_d
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">bpf_d</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">bpflabel</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct mbuf
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuf</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuflabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">bpf_d</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">BPF descriptor</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">bpflabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">bpflabel</parameter></entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuf</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">New mbuf to be labeled</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuflabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label to fill in for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuf</parameter></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Set the label on the mbuf header of a newly created
            datagram generated using the passed BPF descriptor.  This
            call is made when a write is performed to the BPF device
            associated with the passed BPF descriptor.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-create-mbuf-from-ifnet">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_mbuf_from_ifnet</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_mbuf_from_ifnet</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ifnet
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnet</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnetlabel</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct mbuf
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuf</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuflabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnet</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Network interface</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                 <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnetlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnetlabel</parameter></entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuf</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">mbuf header for new datagram</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuflabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label to be filled in for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuf</parameter></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Set the label on the mbuf header of a newly created
            datagram generated from the passed network interface.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-create-mbuf-multicast-encap">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_mbuf_multicast_encap</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_mbuf_multicast_encap</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct mbuf
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldmbuf</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldmbuflabel</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ifnet
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnet</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnetlabel</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct mbuf
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">newmbuf</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">newmbuflabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldmbuf</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">mbuf header for existing datagram</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldmbuflabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldmbuf</parameter></entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnet</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Network interface</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnetlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnet</parameter></entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">newmbuf</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">mbuf header to be labeled for new
                    datagram</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">newmbuflabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label to be filled in for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">newmbuf</parameter></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Set the label on the mbuf header of a newly created
            datagram generated from the existing passed datagram when it
            is processed by the passed multicast encapsulation
            interface.  This call is made when an mbuf is to be
            delivered using the virtual interface.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-create-mbuf-netlayer">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_mbuf_netlayer</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_mbuf_netlayer</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct mbuf
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldmbuf</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldmbuflabel</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct mbuf
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">newmbuf</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">newmbuflabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldmbuf</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Received datagram</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldmbuflabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldmbuf</parameter></entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">newmbuf</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Newly created datagram</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">newmbuflabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">newmbuf</parameter></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Set the label on the mbuf header of a newly created
            datagram generated by the IP stack in response to an
            existing received datagram (<parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldmbuf</parameter>).
            This call may be made in a number of situations, including
            when responding to ICMP request datagrams.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-fragment-match">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_fragment_match</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_fragment_match</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct mbuf
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">fragment</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">fragmentlabel</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ipq
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">ipq</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">ipqlabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">fragment</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">IP datagram fragment</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">fragmentlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">fragment</parameter></entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">ipq</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">IP fragment reassembly queue</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">ipqlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">ipq</parameter></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether an mbuf header containing an IP
            datagram (<parameter xmlns:xlink="http://www.w3.org/1999/xlink">fragment</parameter>) fragment matches
            the label of the passed IP fragment reassembly queue
            (<parameter xmlns:xlink="http://www.w3.org/1999/xlink">ipq</parameter>).  Return
            (<returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">1</returnvalue>) for a successful match, or
            (<returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue>) for no match.  This call is
            made when the IP stack attempts to find an existing fragment
            reassembly queue for a newly received fragment; if this
            fails, a new fragment reassembly queue may be instantiated
            for the fragment. Policies may use this entry point to
            prevent the reassembly of otherwise matching IP fragments if
            policy does not permit them to be reassembled based on the
            label or other information.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-ifnet-relabel">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_relabel_ifnet</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_relabel_ifnet</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ifnet
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnet</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnetlabel</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">newlabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnet</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; Network interface</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnetlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnet</parameter></entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">newlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label update to apply to
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnet</parameter></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Update the label of network interface,
            <parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnet</parameter>, based on the passed update
            label, <parameter xmlns:xlink="http://www.w3.org/1999/xlink">newlabel</parameter>, and the passed
            subject credential, <parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter>.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-update-ipq">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_update_ipq</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_update_ipq</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct mbuf
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">fragment</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">fragmentlabel</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ipq
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">ipq</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">ipqlabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuf</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">IP fragment</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuflabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuf</parameter></entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">ipq</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">IP fragment reassembly queue</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">ipqlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label to be updated for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">ipq</parameter></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Update the label on an IP fragment reassembly queue
            (<parameter xmlns:xlink="http://www.w3.org/1999/xlink">ipq</parameter>) based on the acceptance of the
            passed IP fragment mbuf header
            (<parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuf</parameter>).</para>
        </sect4>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-proc-labeling-event-ops">
        <title xmlns:xlink="http://www.w3.org/1999/xlink">Process Labeling Event Operations</title>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-create-cred">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_cred</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_cred</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">parent_cred</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">child_cred</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">parent_cred</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parent subject credential</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">child_cred</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Child subject credential</entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Set the label of a newly created subject credential from
            the passed subject credential.  This call will be made when
            <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">crcopy</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry> is invoked on a newly created <type xmlns:xlink="http://www.w3.org/1999/xlink">struct
              ucred</type>.  This call should not be confused with a
            process forking or creation event.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-execve-transition">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_execve_transition</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_execve_transition</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">old</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">new</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vnodelabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">old</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Existing subject credential</entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Immutable</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">new</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">New subject credential to be labeled</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">File to execute</entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locked</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vnodelabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Update the label of a newly created subject credential
            (<parameter xmlns:xlink="http://www.w3.org/1999/xlink">new</parameter>) from the passed existing
            subject credential (<parameter xmlns:xlink="http://www.w3.org/1999/xlink">old</parameter>) based on a
            label transition caused by executing the passed vnode
            (<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter>).  This call occurs when a
            process executes the passed vnode and one of the policies
            returns a success from the
            <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_execve_will_transition</function> entry point.
            Policies may choose to implement this call simply by
            invoking <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_cred</function> and passing
            the two subject credentials so as not to implement a
            transitioning event.  Policies should not leave this entry
            point unimplemented if they implement
            <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_cred</function>, even if they do not
            implement
            <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_execve_will_transition</function>.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-execve-will-transition">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_execve_will_transition</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_execve_will_transition</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">old</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vnodelabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">old</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential prior to
                      <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">execve</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Immutable</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">File to execute</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vnodelabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the policy will want to perform a
            transition event as a result of the execution of the passed
            vnode by the passed subject credential.  Return
            <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">1</returnvalue> if a transition is required,
            <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> if not.  Even if a policy
            returns <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue>, it should behave
            correctly in the presence of an unexpected invocation of
            <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_execve_transition</function>, as that call may
            happen as a result of another policy requesting a
            transition.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-create-proc0">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_proc0</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_proc0</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential to be filled in</entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Create the subject credential of process 0, the parent
            of all kernel processes.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-create-proc1">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_proc1</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_create_proc1</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential to be filled in</entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Create the subject credential of process 1, the parent
            of all user processes.</para>
        </sect4>

        <sect4 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-relabel-cred">
          <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_relabel_cred</function></title>

          <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
              <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
                <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_relabel_cred</function></funcdef>

              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
              <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
                *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">newlabel</parameter></paramdef>
            </funcprototype>
          </funcsynopsis>

          <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
            <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
              
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


              <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
                </row>

                <row xmlns:xlink="http://www.w3.org/1999/xlink">
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">newlabel</parameter></entry>
                  <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label update to apply to
                    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Update the label on a subject credential from the passed
            update label.</para>
        </sect4>

      </sect3>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-access-control-checks">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Access Control Checks</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Access control entry points permit policy modules to
        influence access control decisions made by the kernel.
        Generally, although not always, arguments to an access control
        entry point will include one or more authorizing credentials,
        information (possibly including a label) for any other objects
        involved in the operation.  An access control entry point may
        return 0 to permit the operation, or an <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">errno</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> error
        value.  The results of invoking the entry point across various
        registered policy modules will be composed as follows: if all
        modules permit the operation to succeed, success will be
        returned.  If one or modules returns a failure, a failure will
        be returned.  If more than one module returns a failure, the
        errno value to return to the user will be selected using the
        following precedence, implemented by the
        <function xmlns:xlink="http://www.w3.org/1999/xlink">error_select()</function> function in
        <filename xmlns:xlink="http://www.w3.org/1999/xlink">kern_mac.c</filename>:</para>

      <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
        <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="2">
          <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
            <row xmlns:xlink="http://www.w3.org/1999/xlink">
              <entry xmlns:xlink="http://www.w3.org/1999/xlink">Most precedence</entry>
              <entry xmlns:xlink="http://www.w3.org/1999/xlink"><errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EDEADLK</errorcode></entry></row>

            <row xmlns:xlink="http://www.w3.org/1999/xlink">
              <entry xmlns:xlink="http://www.w3.org/1999/xlink"/>
              <entry xmlns:xlink="http://www.w3.org/1999/xlink"><errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EINVAL</errorcode></entry>
            </row>
            <row xmlns:xlink="http://www.w3.org/1999/xlink">
              <entry xmlns:xlink="http://www.w3.org/1999/xlink"/>
              <entry xmlns:xlink="http://www.w3.org/1999/xlink"><errorcode xmlns:xlink="http://www.w3.org/1999/xlink">ESRCH</errorcode></entry>
            </row>
            <row xmlns:xlink="http://www.w3.org/1999/xlink">
              <entry xmlns:xlink="http://www.w3.org/1999/xlink"/>
              <entry xmlns:xlink="http://www.w3.org/1999/xlink">EACCES</entry>
            </row>
            <row xmlns:xlink="http://www.w3.org/1999/xlink">
              <entry xmlns:xlink="http://www.w3.org/1999/xlink">Least precedence</entry>
              <entry xmlns:xlink="http://www.w3.org/1999/xlink">EPERM</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">If none of the error values returned by all modules are
        listed in the precedence chart then an arbitrarily selected
        value from the set will be returned.  In general, the rules
        provide precedence to errors in the following order: kernel
        failures, invalid arguments, object not present, access not
        permitted, other.</para>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-bpfdesc-check-receive-from-ifnet">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_bpfdesc_receive</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_bpfdesc_receive</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct bpf_d
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">bpf_d</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">bpflabel</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ifnet
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnet</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnetlabel</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">bpf_d</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject; BPF descriptor</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">bpflabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">bpf_d</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnet</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; network interface</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnetlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnet</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the MAC framework should permit
          datagrams from the passed interface to be delivered to the
          buffers of the passed BPF descriptor.  Return
          (<returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue>) for success, or an
          <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> value for failure Suggested
          failure: <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EACCES</errorcode> for label mismatches,
          <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EPERM</errorcode> for lack of privilege.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-check-kenv-dump">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_kenv_dump</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_kenv_dump</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject should be allowed to
          retrieve the kernel environment (see <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">kenv</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry>).</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-check-kenv-get">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_kenv_get</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_kenv_get</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">char *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">name</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">name</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Kernel environment variable name</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject should be allowed to
          retrieve the value of the specified kernel environment
          variable.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-check-kenv-set">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_kenv_set</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_kenv_set</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">char *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">name</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">name</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Kernel environment variable name</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject should be allowed to set
          the specified kernel environment variable.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-check-kenv-unset">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_kenv_unset</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_kenv_unset</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">char *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">name</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">name</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Kernel environment variable name</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject should be allowed to unset
          the specified kernel environment variable.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-check-kld-load">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_kld_load</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_kld_load</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vlabel</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Kernel module vnode</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label associated with
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject should be allowed to load
          the specified module file.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-check-kld-stat">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_kld_stat</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_kld_stat</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject should be allowed to
          retrieve a list of loaded kernel module files and associated
          statistics.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-check-kld-unload">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_kld_unload</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
           <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_kld_unload</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject should be allowed to
          unload a kernel module.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-check-pipe-ioctl">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_pipe_ioctl</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_pipe_ioctl</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct pipe
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipe</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipelabel</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">unsigned long
              <parameter xmlns:xlink="http://www.w3.org/1999/xlink">cmd</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">void *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">data</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipe</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Pipe</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipelabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label associated with
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipe</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cmd</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">ioctl</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> command</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">data</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">ioctl</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> data</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject should be allowed to make
          the specified <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">ioctl</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> call.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-check-pipe-poll">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_pipe_poll</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_pipe_poll</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct pipe
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipe</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipelabel</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipe</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Pipe</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipelabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label associated with
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipe</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject should be allowed to poll
          <parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipe</parameter>.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-check-pipe-read">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_pipe_read</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_pipe_read</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct pipe
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipe</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipelabel</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipe</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Pipe</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipelabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label associated with
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipe</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject should be allowed read
          access to <parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipe</parameter>.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-check-pipe-relabel">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_pipe_relabel</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_pipe_relabel</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct pipe
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipe</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipelabel</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">newlabel</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipe</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Pipe</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipelabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Current policy label associated with
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipe</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">newlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label update to
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipelabel</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject should be allowed to
          relabel <parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipe</parameter>.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-check-pipe-stat">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_pipe_stat</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_pipe_stat</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct pipe
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipe</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipelabel</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipe</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Pipe</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipelabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label associated with
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipe</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject should be allowed to
          retrieve statistics related to
          <parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipe</parameter>.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-check-pipe-write">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_pipe_write</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_pipe_write</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct pipe
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipe</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipelabel</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipe</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Pipe</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipelabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label associated with
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipe</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject should be allowed to write
          to <parameter xmlns:xlink="http://www.w3.org/1999/xlink">pipe</parameter>.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-cred-check-socket-bind">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_socket_bind</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_socket_bind</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct socket
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">socket</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">socketlabel</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct sockaddr
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">sockaddr</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">socket</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Socket to be bound</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">socketlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">socket</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">sockaddr</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Address of
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">socket</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

      </sect3>


      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-cred-check-socket-connect">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_socket_connect</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_socket_connect</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct socket
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">socket</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">socketlabel</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct sockaddr
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">sockaddr</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">socket</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Socket to be connected</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">socketlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">socket</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">sockaddr</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Address of
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">socket</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject credential
          (<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter>) can connect the passed socket
          (<parameter xmlns:xlink="http://www.w3.org/1999/xlink">socket</parameter>) to the passed socket address
          (<parameter xmlns:xlink="http://www.w3.org/1999/xlink">sockaddr</parameter>).  Return
          <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> for success, or an
          <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> value for failure.  Suggested
          failure: <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EACCES</errorcode> for label mismatches,
          <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EPERM</errorcode> for lack of privilege.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-check-socket-receive">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_socket_receive</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_socket_receive</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct socket
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">so</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">socketlabel</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">so</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Socket</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">socketlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label associated with
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">so</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject should be allowed to
          receive information from the socket
          <parameter xmlns:xlink="http://www.w3.org/1999/xlink">so</parameter>.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-check-socket-send">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_socket_send</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_socket_send</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct socket
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">so</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">socketlabel</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">so</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Socket</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">socketlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label associated with
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">so</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject should be allowed to send
          information across the socket
          <parameter xmlns:xlink="http://www.w3.org/1999/xlink">so</parameter>.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-check-cred-visible">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_cred_visible</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_cred_visible</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">u1</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">u2</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">u1</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">u2</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object credential</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject credential
          <parameter xmlns:xlink="http://www.w3.org/1999/xlink">u1</parameter> can <quote xmlns:xlink="http://www.w3.org/1999/xlink">see</quote> other
          subjects with the passed subject credential
          <parameter xmlns:xlink="http://www.w3.org/1999/xlink">u2</parameter>.  Return
          <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> for success, or an
          <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> value for failure.  Suggested
          failure: <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EACCES</errorcode> for label mismatches,
          <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EPERM</errorcode> for lack of privilege, or
          <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">ESRCH</errorcode> to hide visibility.  This call
          may be made in a number of situations, including
          inter-process status sysctl's used by <command xmlns:xlink="http://www.w3.org/1999/xlink">ps</command>,
          and in procfs lookups.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-cred-check-socket-visible">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_socket_visible</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_socket_visible</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct socket
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">socket</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">socketlabel</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">socket</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; socket</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">socketlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">socket</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-cred-check-ifnet-relabel">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_ifnet_relabel</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_ifnet_relabel</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ifnet
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnet</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnetlabel</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">newlabel</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnet</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; network interface</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnetlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Existing policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnet</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">newlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label update to later be applied to
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnet</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject credential can relabel the
          passed network interface to the passed label update.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-cred-check-socket-relabel">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_socket_relabel</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_socket_relabel</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct socket
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">socket</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">socketlabel</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">newlabel</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">socket</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; socket</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">socketlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Existing policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">socket</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">newlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label update to later be applied to
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">socketlabel</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject credential can relabel the
          passed socket to the passed label update.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-cred-check-cred-relabel">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_cred_relabel</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_cred_relabel</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">newlabel</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">newlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label update to later be applied to
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject credential can relabel
          itself to the passed label update.</para>
      </sect3>


      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-cred-check-vnode-relabel">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_relabel</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_relabel</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vnodelabel</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">newlabel</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Immutable</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; vnode</entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locked</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vnodelabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Existing policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">newlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label update to later be applied to
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject credential can relabel the
          passed vnode to the passed label update.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mpo-cred-check-mount-stat">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_mount_stat</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_mount_stat</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct mount
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">mp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">mountlabel</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">mp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; file system mount</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">mountlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">mp</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

	<!-- XXX Update ? -->
        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject credential can see the
          results of a statfs performed on the file system.  Return
          <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> for success, or an
          <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> value for failure.  Suggested
          failure: <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EACCES</errorcode> for label mismatches
          or <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EPERM</errorcode> for lack of privilege.  This
          call may be made in a number of situations, including during
          invocations of <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">statfs</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> and related calls, as well as to
          determine what file systems to exclude from listings of file
          systems, such as when <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">getfsstat</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> is invoked. </para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-cred-check-proc-debug">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_proc_debug</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_proc_debug</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct proc
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">proc</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Immutable</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">proc</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; process</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject credential can debug the
          passed process.  Return <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> for
          success, or an <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> value for failure.
          Suggested failure: <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EACCES</errorcode> for label
          mismatch, <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EPERM</errorcode> for lack of
          privilege, or <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">ESRCH</errorcode> to hide
          visibility of the target.  This call may be made in a number
          of situations, including use of the <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">ptrace</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> and
            <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">ktrace</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> APIs, as well as for some types of procfs
          operations.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-cred-check-vnode-access">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_access</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_access</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">int <parameter xmlns:xlink="http://www.w3.org/1999/xlink">flags</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; vnode</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">flags</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">access</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> flags</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine how invocations of <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">access</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> and related
          calls by the subject credential should return when performed
          on the passed vnode using the passed access flags.  This
          should generally be implemented using the same semantics
          used in <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_open</function>.
          Return <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> for success, or an
          <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> value for failure.  Suggested
          failure: <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EACCES</errorcode> for label mismatches
          or <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EPERM</errorcode> for lack of
          privilege.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-cred-check-vnode-chdir">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_chdir</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_chdir</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">dvp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">dlabel</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">dvp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; vnode to <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">chdir</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> into</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">dlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">dvp</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject credential can change the
          process working directory to the passed vnode.  Return
          <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> for success, or an
          <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> value for failure.  Suggested
          failure: <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EACCES</errorcode> for label mismatch,
          or <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EPERM</errorcode> for lack of
          privilege.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-check-vnode-chroot">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_chroot</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_chroot</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">dvp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">dlabel</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">dvp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Directory vnode</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">dlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label associated with
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">dvp</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject should be allowed to
            <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">chroot</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> into the specified directory
          (<parameter xmlns:xlink="http://www.w3.org/1999/xlink">dvp</parameter>).</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-cred-check-vnode-create">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_create</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_create</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">dvp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">dlabel</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct componentname
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cnp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vattr
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vap</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">dvp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; vnode</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">dlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">dvp</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cnp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Component name for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">dvp</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vap</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">vnode attributes for <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vap</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject credential can create a
          vnode with the passed parent directory, passed name
          information, and passed attribute information.  Return
          <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> for success, or an
          <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> value for failure.  Suggested
          failure: <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EACCES</errorcode> for label mismatch,
          or <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EPERM</errorcode> for lack of privilege.
          This call may be made in a number of situations, including
          as a result of calls to <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">open</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> with
          <symbol xmlns:xlink="http://www.w3.org/1999/xlink">O_CREAT</symbol>, <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">mkfifo</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry>, and
          others.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-cred-check-vnode-delete">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_delete</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_delete</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">dvp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">dlabel</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">void *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct componentname
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cnp</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">dvp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parent directory vnode</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">dlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">dvp</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; vnode to delete</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cnp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Component name for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject credential can delete a
          vnode from the passed parent directory and passed name
          information.  Return <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> for
          success, or an <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> value for failure.
          Suggested failure: <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EACCES</errorcode> for label
          mismatch, or <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EPERM</errorcode> for lack of
          privilege.  This call may be made in a number of situations,
          including as a result of calls to <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">unlink</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> and
            <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">rmdir</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry>.  Policies implementing this entry point
          should also implement
          <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_rename_to</function> to authorize
          deletion of objects as a result of being the target of a
          rename.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-cred-check-vnode-deleteacl">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_deleteacl</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_deleteacl</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">acl_type_t <parameter xmlns:xlink="http://www.w3.org/1999/xlink">type</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Immutable</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; vnode</entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locked</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">type</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">ACL type</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject credential can delete the
          ACL of passed type from the passed vnode.  Return
          <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> for success, or an
          <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> value for failure.  Suggested
          failure: <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EACCES</errorcode> for label mismatch,
          or <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EPERM</errorcode> for lack of
          privilege.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-cred-check-vnode-exec">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_exec</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_exec</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; vnode to execute</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject credential can execute the
          passed vnode.  Determination of execute privilege is made
          separately from decisions about any transitioning event.
          Return <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> for success, or an
          <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> value for failure.  Suggested
          failure: <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EACCES</errorcode> for label mismatch,
          or <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EPERM</errorcode> for lack of
          privilege.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mpo-cred-check-vnode-getacl">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_getacl</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_getacl</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">acl_type_t
              <parameter xmlns:xlink="http://www.w3.org/1999/xlink">type</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; vnode</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">type</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">ACL type</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject credential can retrieve
          the ACL of passed type from the passed vnode.  Return
          <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> for success, or an
          <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> value for failure.  Suggested
          failure: <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EACCES</errorcode> for label mismatch,
          or <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EPERM</errorcode> for lack of
          privilege.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-cred-check-vnode-getextattr">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_getextattr</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_getextattr</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <parameter xmlns:xlink="http://www.w3.org/1999/xlink">attrnamespace</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">const char
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">name</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct uio
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">uio</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; vnode</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">attrnamespace</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Extended attribute namespace</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">name</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Extended attribute name</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">uio</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">I/O structure pointer; see <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">uio</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject credential can retrieve
          the extended attribute with the passed namespace and name
          from the passed vnode. Policies implementing labeling using
          extended attributes may be interested in special handling of
          operations on those extended attributes.  Return
          <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> for success, or an
          <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> value for failure. Suggested
          failure: <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EACCES</errorcode> for label mismatch,
          or <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EPERM</errorcode> for lack of
          privilege.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-check-vnode-link">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_link</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_link</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">dvp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">dlabel</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct componentname
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cnp</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">dvp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Directory vnode</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">dlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label associated with
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">dvp</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Link destination vnode</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label associated with
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cnp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Component name for the link being created</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject should be allowed to
          create a link to the vnode <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter> with
          the name specified by <parameter xmlns:xlink="http://www.w3.org/1999/xlink">cnp</parameter>.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-check-vnode-mmap">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_mmap</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_mmap</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">int <parameter xmlns:xlink="http://www.w3.org/1999/xlink">prot</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Vnode to map</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label associated with
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">prot</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Mmap protections (see <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">mmap</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry>)</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject should be allowed to map
          the vnode <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter> with the protections
          specified in <parameter xmlns:xlink="http://www.w3.org/1999/xlink">prot</parameter>.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-check-vnode-mmap-downgrade">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_mmap_downgrade</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">void
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_mmap_downgrade</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">int *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">prot</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink" morerows="2">See
                  <xref xmlns:xlink="http://www.w3.org/1999/xlink" linkend="mac-mpo-check-vnode-mmap"/>.</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">prot</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Mmap protections to be downgraded</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Downgrade the mmap protections based on the subject and
          object labels.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-check-vnode-mprotect">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_mprotect</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_mprotect</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">int <parameter xmlns:xlink="http://www.w3.org/1999/xlink">prot</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Mapped vnode</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">prot</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Memory protections</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject should be allowed to
          set the specified memory protections on memory mapped from
          the vnode <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter>.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-check-vnode-poll">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_poll</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_poll</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">active_cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">file_cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">active_cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">file_cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Credential associated with the <type xmlns:xlink="http://www.w3.org/1999/xlink">struct
                    file</type></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Polled vnode</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label associated with
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject should be allowed to poll
          the vnode <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter>.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-check-vnode-rename-from">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_rename_from</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_vnode_rename_from</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">dvp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">dlabel</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct componentname
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cnp</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">dvp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Directory vnode</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">dlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label associated with
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">dvp</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Vnode to be renamed</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label associated with
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cnp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Component name for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject should be allowed to
          rename the vnode <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter> to something
          else.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-check-vnode-rename-to">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_rename_to</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_rename_to</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">dvp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">dlabel</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">int <parameter xmlns:xlink="http://www.w3.org/1999/xlink">samedir</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct componentname
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cnp</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">dvp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Directory vnode</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">dlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label associated with
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">dvp</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Overwritten vnode</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label associated with
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">samedir</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Boolean; <literal xmlns:xlink="http://www.w3.org/1999/xlink">1</literal> if the source and
                  destination directories are the same</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cnp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Destination component name</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject should be allowed to
          rename to the vnode <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter>, into the
          directory <parameter xmlns:xlink="http://www.w3.org/1999/xlink">dvp</parameter>, or to the name
          represented by <parameter xmlns:xlink="http://www.w3.org/1999/xlink">cnp</parameter>.  If there is no
          existing file to overwrite, <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter> and
          <parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter> will be NULL.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-cred-check-socket-listen">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_socket_listen</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_socket_listen</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct socket
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">socket</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">socketlabel</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">socket</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; socket</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">socketlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">socket</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject credential can listen on
          the passed socket.  Return <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> for
          success, or an <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> value for failure.
          Suggested failure: <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EACCES</errorcode> for label
          mismatch, or <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EPERM</errorcode> for lack of
          privilege.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-cred-check-vnode-lookup">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_lookup</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_lookup</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink"/>cred</paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink"/>dvp</paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink"/>dlabel</paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct componentname
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cnp</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">dvp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; vnode</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">dlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">dvp</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cnp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Component name being looked up</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject credential can perform a
          lookup in the passed directory vnode for the passed name.
          Return <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> for success, or an
          <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> value for failure.  Suggested
          failure: <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EACCES</errorcode> for label mismatch,
          or <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EPERM</errorcode> for lack of
          privilege.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-cred-check-vnode-open">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_open</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_open</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <parameter xmlns:xlink="http://www.w3.org/1999/xlink">acc_mode</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; vnode</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">acc_mode</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">open</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> access mode</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject credential can perform an
          open operation on the passed vnode with the passed access
          mode.  Return <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> for success, or
          an errno value for failure.  Suggested failure:
          <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EACCES</errorcode> for label mismatch, or
          <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EPERM</errorcode> for lack of privilege.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-cred-check-vnode-readdir">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_readdir</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_readdir</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink"/>cred</paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink"/>dvp</paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink"/>dlabel</paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">dvp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; directory vnode</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">dlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">dvp</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject credential can perform a
          <function xmlns:xlink="http://www.w3.org/1999/xlink">readdir</function> operation on the passed
          directory vnode.  Return <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> for
          success, or an <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> value for failure.
          Suggested failure: <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EACCES</errorcode> for label
          mismatch, or <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EPERM</errorcode> for lack of
          privilege.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-cred-check-vnode-readlink">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_readlink</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_readlink</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; vnode</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject credential can perform a
          <function xmlns:xlink="http://www.w3.org/1999/xlink">readlink</function> operation on the passed
          symlink vnode.  Return <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> for
          success, or an <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> value for failure.
          Suggested failure: <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EACCES</errorcode> for label
          mismatch, or <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EPERM</errorcode> for lack of
          privilege.  This call may be made in a number of situations,
          including an explicit <function xmlns:xlink="http://www.w3.org/1999/xlink">readlink</function> call by
          the user process, or as a result of an implicit
          <function xmlns:xlink="http://www.w3.org/1999/xlink">readlink</function> during a name lookup by the
          process.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-cred-check-vnode-revoke">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_revoke</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_revoke</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; vnode</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject credential can revoke
          access to the passed vnode.  Return
          <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> for success, or an
          <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> value for failure. Suggested
          failure: <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EACCES</errorcode> for label mismatch,
          or <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EPERM</errorcode> for lack of
          privilege.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-cred-check-vnode-setacl">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_setacl</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_setacl</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">acl_type_t
              <parameter xmlns:xlink="http://www.w3.org/1999/xlink">type</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct acl
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">acl</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; vnode</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">type</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">ACL type</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">acl</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">ACL</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject credential can set the
          passed ACL of passed type on the passed vnode.  Return
          <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> for success, or an
          <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> value for failure.  Suggested
          failure: <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EACCES</errorcode> for label mismatch,
          or <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EPERM</errorcode> for lack of
          privilege.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-cred-check-vnode-setextattr">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_setextattr</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_setextattr</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <parameter xmlns:xlink="http://www.w3.org/1999/xlink">attrnamespace</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">const char
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">name</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct uio
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">uio</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; vnode</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">attrnamespace</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Extended attribute namespace</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">name</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Extended attribute name</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">uio</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">I/O structure pointer; see <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">uio</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject credential can set the
          extended attribute of passed name and passed namespace on
          the passed vnode.  Policies implementing security labels
          backed into extended attributes may want to provide
          additional protections for those attributes.  Additionally,
          policies should avoid making decisions based on the data
          referenced from <parameter xmlns:xlink="http://www.w3.org/1999/xlink">uio</parameter>, as there is a
          potential race condition between this check and the actual
          operation.  The <parameter xmlns:xlink="http://www.w3.org/1999/xlink">uio</parameter> may also be
          <literal xmlns:xlink="http://www.w3.org/1999/xlink">NULL</literal> if a delete operation is being
          performed.  Return <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> for success,
          or an <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> value for failure.  Suggested
          failure: <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EACCES</errorcode> for label mismatch,
          or <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EPERM</errorcode> for lack of
          privilege.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-cred-check-vnode-setflags">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_setflags</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_setflags</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">u_long <parameter xmlns:xlink="http://www.w3.org/1999/xlink">flags</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; vnode</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">flags</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">File flags; see <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">chflags</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject credential can set the
          passed flags on the passed vnode.  Return
          <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> for success, or an
          <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> value for failure.  Suggested
          failure: <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EACCES</errorcode> for label mismatch,
          or <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EPERM</errorcode> for lack of
          privilege.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-cred-check-vnode-setmode">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_setmode</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_setmode</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">mode_t <parameter xmlns:xlink="http://www.w3.org/1999/xlink">mode</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; vnode</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">mode</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">File mode; see <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">chmod</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject credential can set the
          passed mode on the passed vnode.  Return
          <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> for success, or an
          <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> value for failure.  Suggested
          failure: <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EACCES</errorcode> for label mismatch,
          or <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EPERM</errorcode> for lack of
          privilege.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-cred-check-vnode-setowner">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_setowner</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_setowner</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">uid_t <parameter xmlns:xlink="http://www.w3.org/1999/xlink">uid</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">gid_t <parameter xmlns:xlink="http://www.w3.org/1999/xlink">gid</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; vnode</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">uid</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">User ID</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">gid</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Group ID</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject credential can set the
          passed uid and passed gid as file uid and file gid on the
          passed vnode.  The IDs may be set to (<literal xmlns:xlink="http://www.w3.org/1999/xlink">-1</literal>)
          to request no update.  Return <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue>
          for success, or an <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> value for
          failure.  Suggested failure: <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EACCES</errorcode>
          for label mismatch, or <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EPERM</errorcode> for lack
          of privilege.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-cred-check-vnode-setutimes">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_setutimes</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_setutimes</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink"/>cred</paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink"/>vp</paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink"/>label</paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct timespec
              <parameter xmlns:xlink="http://www.w3.org/1999/xlink"/>atime</paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct timespec
              <parameter xmlns:xlink="http://www.w3.org/1999/xlink"/>mtime</paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; vp</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">atime</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Access time; see <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">utimes</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">mtime</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Modification time; see <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">utimes</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject credential can set the
          passed access timestamps on the passed vnode.  Return
          <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> for success, or an
          <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> value for failure.  Suggested
          failure: <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EACCES</errorcode> for label mismatch,
          or <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EPERM</errorcode> for lack of
          privilege.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-cred-check-proc-sched">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_proc_sched</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_proc_sched</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">ucred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct proc
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">proc</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">proc</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; process</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject credential can change the
          scheduling parameters of the passed process.  Return
          <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> for success, or an
          <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> value for failure.  Suggested
          failure: <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EACCES</errorcode> for label mismatch,
          <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EPERM</errorcode> for lack of privilege, or
          <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">ESRCH</errorcode> to limit visibility.</para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">See <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">setpriority</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> for more information.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-cred-check-proc-signal">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_proc_signal</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_proc_signal</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct proc
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">proc</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">int <parameter xmlns:xlink="http://www.w3.org/1999/xlink">signal</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">proc</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; process</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">signal</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Signal; see <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">kill</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject credential can deliver the
          passed signal to the passed process.  Return
          <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> for success, or an
          <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> value for failure.  Suggested
          failure: <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EACCES</errorcode> for label mismatch,
          <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EPERM</errorcode> for lack of privilege, or
          <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">ESRCH</errorcode> to limit visibility.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-cred-check-vnode-stat">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_stat</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_vnode_stat</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; vnode</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">label</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject credential can
          <function xmlns:xlink="http://www.w3.org/1999/xlink">stat</function> the passed vnode.  Return
          <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> for success, or an
          <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> value for failure.  Suggested
          failure: <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EACCES</errorcode> for label mismatch,
          or <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EPERM</errorcode> for lack of
          privilege.</para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">See <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">stat</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> for more information.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-cred-check-ifnet-transmit">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_ifnet_transmit</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_ifnet_transmit</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ifnet
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnet</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnetlabel</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct mbuf
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuf</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuflabel</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnet</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Network interface</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnetlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnet</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuf</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; mbuf to be sent</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuflabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuf</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the network interface can transmit the
          passed mbuf.  Return <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> for
          success, or an <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> value for failure.
          Suggested failure: <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EACCES</errorcode> for label
          mismatch, or <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EPERM</errorcode> for lack of
          privilege.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-cred-check-socket-deliver">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_socket_deliver</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_socket_deliver</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ifnet
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnet</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnetlabel</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct mbuf
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuf</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuflabel</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnet</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Network interface</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnetlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">ifnet</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuf</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; mbuf to be delivered</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuflabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">mbuf</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the socket may receive the datagram
          stored in the passed mbuf header.  Return
          <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> for success, or an
          <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> value for failure.  Suggested
          failures: <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EACCES</errorcode> for label mismatch,
          or <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EPERM</errorcode> for lack of
          privilege.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-check-socket-visible">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_socket_visible</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_socket_visible</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct socket
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">so</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">socketlabel</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Immutable</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">so</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Object; socket</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">socketlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Policy label for
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">so</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject credential cred can "see"
          the passed socket (<parameter xmlns:xlink="http://www.w3.org/1999/xlink">socket</parameter>) using
          system monitoring functions, such as those employed by
            <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">netstat</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> and <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">sockstat</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">1</manvolnum></citerefentry>.  Return
          <returnvalue xmlns:xlink="http://www.w3.org/1999/xlink">0</returnvalue> for success, or an
          <varname xmlns:xlink="http://www.w3.org/1999/xlink">errno</varname> value for failure.  Suggested
          failure: <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EACCES</errorcode> for label mismatches,
          <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">EPERM</errorcode> for lack of privilege, or
          <errorcode xmlns:xlink="http://www.w3.org/1999/xlink">ESRCH</errorcode> to hide visibility.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-check-system-acct">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_system_acct</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_system_acct</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">ucred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vlabel</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">ucred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Accounting file; <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">acct</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">5</manvolnum></citerefentry></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label associated with
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject should be allowed to
          enable accounting, based on its label and the label of the
          accounting log file.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-check-system-nfsd">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_system_nfsd</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_system_nfsd</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject should be allowed to call
            <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">nfssvc</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry>.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-check-system-reboot">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_system_reboot</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_system_reboot</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">int <parameter xmlns:xlink="http://www.w3.org/1999/xlink">howto</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">howto</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">howto</parameter> parameter from
                    <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">reboot</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject should be allowed to
          reboot the system in the specified manner.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-check-system-settime">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_system_settime</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_system_settime</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the user should be allowed to set the
          system clock.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-check-system-swapon">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_system_swapon</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_system_swapon</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct vnode
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct label
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">vlabel</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Swap device</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">vlabel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Label associated with
                  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject should be allowed to add
          <parameter xmlns:xlink="http://www.w3.org/1999/xlink">vp</parameter> as a swap device.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-mpo-check-system-sysctl">
        <title xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_system_sysctl</function></title>

        <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
          <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
            <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">int
              <function xmlns:xlink="http://www.w3.org/1999/xlink">mpo_check_system_sysctl</function></funcdef>

            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">struct ucred
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">int *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">name</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">u_int *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">namelen</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">void *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">old</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">size_t
              *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldlenp</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">int <parameter xmlns:xlink="http://www.w3.org/1999/xlink">inkernel</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">void *<parameter xmlns:xlink="http://www.w3.org/1999/xlink">new</parameter></paramdef>
            <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">size_t <parameter xmlns:xlink="http://www.w3.org/1999/xlink">newlen</parameter></paramdef>
          </funcprototype>
        </funcsynopsis>

        <informaltable xmlns:xlink="http://www.w3.org/1999/xlink" frame="none" pgwide="1">
          <tgroup xmlns:xlink="http://www.w3.org/1999/xlink" cols="3">
            
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="first" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colwidth="0"/>
  <colspec xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" colname="last" colwidth="0"/>

  <thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <row xmlns:xlink="http://www.w3.org/1999/xlink">
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Parameter</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Description</entry>
      <entry xmlns:xlink="http://www.w3.org/1999/xlink">Locking</entry>
    </row>
  </thead>


            <tbody xmlns:xlink="http://www.w3.org/1999/xlink">
              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">cred</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Subject credential</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">name</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink" morerows="3">See <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">sysctl</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">namelen</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">old</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">oldlenp</parameter></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">inkernel</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink">Boolean; <literal xmlns:xlink="http://www.w3.org/1999/xlink">1</literal> if called from
                  kernel</entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">new</parameter></entry>
                <entry xmlns:xlink="http://www.w3.org/1999/xlink" morerows="1">See <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">sysctl</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry></entry>
              </row>

              <row xmlns:xlink="http://www.w3.org/1999/xlink">
                <entry xmlns:xlink="http://www.w3.org/1999/xlink"><parameter xmlns:xlink="http://www.w3.org/1999/xlink">newlen</parameter></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Determine whether the subject should be allowed to make
          the specified <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">sysctl</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry> transaction.</para>
      </sect3>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-label-management">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Label Management Calls</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Relabel events occur when a user process has requested
        that the label on an object be modified.  A two-phase update
        occurs: first, an access control check will be performed to
        determine if the update is both valid and permitted, and then
        the update itself is performed via a separate entry point.
        Relabel entry points typically accept the object, object label
        reference, and an update label submitted by the process.
        Memory allocation during relabel is discouraged, as relabel
        calls are not permitted to fail (failure should be reported
        earlier in the relabel check).</para>

    </sect2>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-userland-arch">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Userland Architecture</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The TrustedBSD MAC Framework includes a number of
      policy-agnostic elements, including MAC library interfaces
      for abstractly managing labels, modifications to the system
      credential management and login libraries to support the
      assignment of MAC labels to users, and a set of tools to
      monitor and modify labels on processes, files, and network
      interfaces.  More details on the user architecture will
      be added to this section in the near future.</para>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-userland-labels">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">APIs for Policy-Agnostic Label Management</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The TrustedBSD MAC Framework provides a number of
	library and system calls permitting applications to
	manage MAC labels on objects using a policy-agnostic
	interface.  This permits applications to manipulate
	labels for a variety of policies without being
	written to support specific policies.  These interfaces
	are used by general-purpose tools such as <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">ifconfig</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry>,
	<citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">ls</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">1</manvolnum></citerefentry> and <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">ps</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">1</manvolnum></citerefentry> to view labels on network
	interfaces, files, and processes.  The APIs also support
	MAC management tools including <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">getfmac</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry>,
	<citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">getpmac</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry>, <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">setfmac</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry>, <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">setfsmac</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry>,
	and <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">setpmac</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry>.  The MAC APIs are documented in
	<citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">mac</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry>.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Applications handle MAC labels in two forms: an
	internalized form used to return and set labels on
	processes and objects (<literal xmlns:xlink="http://www.w3.org/1999/xlink">mac_t</literal>),
	and externalized form based on C strings appropriate for
	storage in configuration files, display to the user, or
	input from the user.  Each MAC label contains a number of
	elements, each consisting of a name and value pair.
	Policy modules in the kernel bind to specific names
	and interpret the values in policy-specific ways.  In
	the externalized string form, labels are represented
	by a comma-delimited list of name and value pairs separated
	by the <literal xmlns:xlink="http://www.w3.org/1999/xlink">/</literal> character.  Labels may be
	directly converted to and from text using provided APIs;
	when retrieving labels from the kernel, internalized
	label storage must first be prepared for the desired
	label element set.  Typically, this is done in one of
	two ways: using <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">mac_prepare</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry> and an arbitrary
	list of desired label elements, or one of the variants
	of the call that loads a default element set from the
	<citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">mac.conf</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">5</manvolnum></citerefentry> configuration file.  Per-object
	defaults permit application writers to usefully display
	labels associated with objects without being aware of
	the policies present in the system.</para>

      <note xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Currently, direct manipulation of label elements
	other than by conversion to a text string, string editing,
	and conversion back to an internalized label is not supported
	by the MAC library.  Such interfaces may be added in the
	future if they prove necessary for application
	writers.</para></note>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-userland-credentials">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Binding of Labels to Users</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The standard user context management interface,
	<citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">setusercontext</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry>, has been modified to retrieve
	MAC labels associated with a user's class from
	<citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">login.conf</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">5</manvolnum></citerefentry>.  These labels are then set along
	with other user context when either
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">LOGIN_SETALL</literal> is specified, or when
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">LOGIN_SETMAC</literal> is explicitly
	specified.</para>

      <note xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">It is expected that, in a future version of FreeBSD,
	the MAC label database will be separated from the
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">login.conf</filename> user class abstraction,
	and be maintained in a separate database.  However, the
	<citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">setusercontext</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry> API should remain the same
	following such a change.</para></note>
    </sect2>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="mac-conclusion">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Conclusion</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The TrustedBSD MAC framework permits kernel modules to
      augment the system security policy in a highly integrated
      manner.  They may do this based on existing object properties,
      or based on label data that is maintained with the assistance of
      the MAC framework.  The framework is sufficiently flexible to
      implement a variety of policy types, including information flow
      security policies such as MLS and Biba, as well as policies
      based on existing BSD credentials or file protections.  Policy
      authors may wish to consult this documentation as well as
      existing security modules when implementing a new security
      service.</para>
  </sect1>
</chapter>

    
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="vm">

  <info>
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Virtual Memory System</title>

    <authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
      <author xmlns:xlink="http://www.w3.org/1999/xlink">
	<personname xmlns:xlink="http://www.w3.org/1999/xlink">
	  <firstname xmlns:xlink="http://www.w3.org/1999/xlink">Matthew</firstname>
	  <surname xmlns:xlink="http://www.w3.org/1999/xlink">Dillon</surname>
	</personname>
	<contrib xmlns:xlink="http://www.w3.org/1999/xlink">Contributed by </contrib>
      </author>
    </authorgroup>
  </info>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="vm-physmem">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Management of Physical
      Memory&#8212;<literal xmlns:xlink="http://www.w3.org/1999/xlink">vm_page_t</literal></title>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">virtual memory</primary></indexterm>
    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">physical memory</primary></indexterm>
    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink">
      <primary xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">vm_page_t</literal> structure</primary>
    </indexterm>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Physical memory is managed on a page-by-page basis through
      the <literal xmlns:xlink="http://www.w3.org/1999/xlink">vm_page_t</literal> structure.  Pages of physical
      memory are categorized through the placement of their respective
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">vm_page_t</literal> structures on one of several paging
      queues.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">A page can be in a wired, active, inactive, cache, or free
      state.  Except for the wired state, the page is typically placed
      in a doubly link list queue representing the state that it is
      in.  Wired pages are not placed on any queue.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">FreeBSD implements a more involved paging queue for cached
      and free pages in order to implement page coloring.  Each of
      these states involves multiple queues arranged according to the
      size of the processor's L1 and L2 caches.  When a new page needs
      to be allocated, FreeBSD attempts to obtain one that is
      reasonably well aligned from the point of view of the L1 and L2
      caches relative to the VM object the page is being allocated
      for.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Additionally, a page may be held with a reference count or
      locked with a busy count.  The VM system also implements an
      <quote xmlns:xlink="http://www.w3.org/1999/xlink">ultimate locked</quote> state for a page using the
      PG_BUSY bit in the page's flags.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">In general terms, each of the paging queues operates in a
      LRU fashion.  A page is typically placed in a wired or active
      state initially.  When wired, the page is usually associated
      with a page table somewhere.  The VM system ages the page by
      scanning pages in a more active paging queue (LRU) in order to
      move them to a less-active paging queue.  Pages that get moved
      into the cache are still associated with a VM object but are
      candidates for immediate reuse.  Pages in the free queue are
      truly free.  FreeBSD attempts to minimize the number of pages in
      the free queue, but a certain minimum number of truly free pages
      must be maintained in order to accommodate page allocation at
      interrupt time.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">If a process attempts to access a page that does not exist
      in its page table but does exist in one of the paging queues
      (such as the inactive or cache queues), a relatively inexpensive
      page reactivation fault occurs which causes the page to be
      reactivated.  If the page does not exist in system memory at
      all, the process must block while the page is brought in from
      disk.</para>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">paging queues</primary></indexterm>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">FreeBSD dynamically tunes its paging queues and attempts to
      maintain reasonable ratios of pages in the various queues as
      well as attempts to maintain a reasonable breakdown of clean
      versus dirty pages.  The amount of rebalancing that occurs
      depends on the system's memory load.  This rebalancing is
      implemented by the pageout daemon and involves laundering dirty
      pages (syncing them with their backing store), noticing when
      pages are activity referenced (resetting their position in the
      LRU queues or moving them between queues), migrating pages
      between queues when the queues are out of balance, and so forth.
      FreeBSD's VM system is willing to take a reasonable number of
      reactivation page faults to determine how active or how idle a
      page actually is.  This leads to better decisions being made as
      to when to launder or swap-out a page.</para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="vm-cache">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">The Unified Buffer
      Cache&#8212;<literal xmlns:xlink="http://www.w3.org/1999/xlink">vm_object_t</literal></title>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">unified buffer cache</primary></indexterm>
    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink">
      <primary xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">vm_object_t</literal> structure</primary>
    </indexterm>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">FreeBSD implements the idea of a generic
      <quote xmlns:xlink="http://www.w3.org/1999/xlink">VM object</quote>.  VM objects can be associated with
      backing store of various types&#8212;unbacked, swap-backed,
      physical device-backed, or file-backed storage.  Since the
      filesystem uses the same VM objects to manage in-core data
      relating to files, the result is a unified buffer cache.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">VM objects can be <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">shadowed</emphasis>.  That is,
      they can be stacked on top of each other.  For example, you
      might have a swap-backed VM object stacked on top of a
      file-backed VM object in order to implement a MAP_PRIVATE
      mmap()ing.  This stacking is also used to implement various
      sharing properties, including copy-on-write, for forked address
      spaces.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">It should be noted that a <literal xmlns:xlink="http://www.w3.org/1999/xlink">vm_page_t</literal> can
      only be associated with one VM object at a time.  The VM object
      shadowing implements the perceived sharing of the same page
      across multiple instances.</para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="vm-fileio">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Filesystem I/O&#8212;<literal xmlns:xlink="http://www.w3.org/1999/xlink">struct buf</literal></title>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">vnode</primary></indexterm>
    <para xmlns:xlink="http://www.w3.org/1999/xlink">vnode-backed VM objects, such as file-backed objects,
      generally need to maintain their own clean/dirty info
      independent from the VM system's idea of clean/dirty.  For
      example, when the VM system decides to synchronize a physical
      page to its backing store, the VM system needs to mark the page
      clean before the page is actually written to its backing store.
      Additionally, filesystems need to be able to map portions of a
      file or file metadata into KVM in order to operate on it.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The entities used to manage this are known as filesystem
      buffers, <literal xmlns:xlink="http://www.w3.org/1999/xlink">struct buf</literal>'s, or
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">bp</literal>'s.  When a filesystem needs to operate on
      a portion of a VM object, it typically maps part of the object
      into a struct buf and the maps the pages in the struct buf into
      KVM.  In the same manner, disk I/O is typically issued by
      mapping portions of objects into buffer structures and then
      issuing the I/O on the buffer structures.  The underlying
      vm_page_t's are typically busied for the duration of the I/O.
      Filesystem buffers also have their own notion of being busy,
      which is useful to filesystem driver code which would rather
      operate on filesystem buffers instead of hard VM pages.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">FreeBSD reserves a limited amount of KVM to hold mappings
      from struct bufs, but it should be made clear that this KVM is
      used solely to hold mappings and does not limit the ability to
      cache data.  Physical data caching is strictly a function of
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">vm_page_t</literal>'s, not filesystem buffers.
      However, since filesystem buffers are used to placehold I/O,
      they do inherently limit the amount of concurrent I/O possible.
      However, as there are usually a few thousand filesystem buffers
      available, this is not usually a problem.</para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="vm-pagetables">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Mapping Page Tables&#8212;<literal xmlns:xlink="http://www.w3.org/1999/xlink">vm_map_t,
	vm_entry_t</literal></title>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">page tables</primary></indexterm>
    <para xmlns:xlink="http://www.w3.org/1999/xlink">FreeBSD separates the physical page table topology from the
      VM system.  All hard per-process page tables can be
      reconstructed on the fly and are usually considered throwaway.
      Special page tables such as those managing KVM are typically
      permanently preallocated.  These page tables are not
      throwaway.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">FreeBSD associates portions of vm_objects with address
      ranges in virtual memory through <literal xmlns:xlink="http://www.w3.org/1999/xlink">vm_map_t</literal> and
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">vm_entry_t</literal> structures.  Page tables are
      directly synthesized from the
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">vm_map_t</literal>/<literal xmlns:xlink="http://www.w3.org/1999/xlink">vm_entry_t</literal>/
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">vm_object_t</literal> hierarchy.  Recall that I
      mentioned that physical pages are only directly associated with
      a <literal xmlns:xlink="http://www.w3.org/1999/xlink">vm_object</literal>; that is not quite true.
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">vm_page_t</literal>'s are also linked into page tables
      that they are actively associated with.  One
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">vm_page_t</literal> can be linked into several
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">pmaps</emphasis>, as page tables are called.  However,
      the hierarchical association holds, so all references to the
      same page in the same object reference the same
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">vm_page_t</literal> and thus give us buffer cache
      unification across the board.</para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="vm-kvm">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">KVM Memory Mapping</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">FreeBSD uses KVM to hold various kernel structures.  The
      single largest entity held in KVM is the filesystem buffer
      cache.  That is, mappings relating to
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">struct buf</literal> entities.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Unlike Linux, FreeBSD does <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">not</emphasis> map all
      of physical memory into KVM.  This means that FreeBSD can handle
      memory configurations up to 4G on 32 bit platforms.  In fact, if
      the mmu were capable of it, FreeBSD could theoretically handle
      memory configurations up to 8TB on a 32 bit platform.  However,
      since most 32 bit platforms are only capable of mapping 4GB of
      ram, this is a moot point.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">KVM is managed through several mechanisms.  The main
      mechanism used to manage KVM is the
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">zone allocator</emphasis>.  The zone allocator takes a
      chunk of KVM and splits it up into constant-sized blocks of
      memory in order to allocate a specific type of structure.  You
      can use <command xmlns:xlink="http://www.w3.org/1999/xlink">vmstat -m</command> to get an overview of
      current KVM utilization broken down by zone.</para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="vm-tuning">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Tuning the FreeBSD VM System</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">A concerted effort has been made to make the FreeBSD kernel
      dynamically tune itself.  Typically you do not need to mess with
      anything beyond the <option xmlns:xlink="http://www.w3.org/1999/xlink">maxusers</option> and
      <option xmlns:xlink="http://www.w3.org/1999/xlink">NMBCLUSTERS</option> kernel config options.  That is,
      kernel compilation options specified in (typically)
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/sys/i386/conf/<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">CONFIG_FILE</replaceable></filename>.
      A description of all available kernel configuration options can
      be found in
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/sys/i386/conf/LINT</filename>.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">In a large system configuration you may wish to increase
      <option xmlns:xlink="http://www.w3.org/1999/xlink">maxusers</option>.  Values typically range from 10 to
      128. Note that raising <option xmlns:xlink="http://www.w3.org/1999/xlink">maxusers</option> too high can
      cause the system to overflow available KVM resulting in
      unpredictable operation.  It is better to leave
      <option xmlns:xlink="http://www.w3.org/1999/xlink">maxusers</option> at some reasonable number and add
      other options, such as <option xmlns:xlink="http://www.w3.org/1999/xlink">NMBCLUSTERS</option>, to increase
      specific resources.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">If your system is going to use the network heavily, you may
      want to increase <option xmlns:xlink="http://www.w3.org/1999/xlink">NMBCLUSTERS</option>.  Typical values
      range from 1024 to 4096.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The <literal xmlns:xlink="http://www.w3.org/1999/xlink">NBUF</literal> parameter is also traditionally
      used to scale the system.  This parameter determines the amount
      of KVA the system can use to map filesystem buffers for I/O.
      Note that this parameter has nothing whatsoever to do with the
      unified buffer cache! This parameter is dynamically tuned in
      3.0-CURRENT and later kernels and should generally not be
      adjusted manually.  We recommend that you
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">not</emphasis> try to specify an
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">NBUF</literal> parameter.  Let the system pick it.  Too
      small a value can result in extremely inefficient filesystem
      operation while too large a value can starve the page queues by
      causing too many pages to become wired down.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">By default, FreeBSD kernels are not optimized.  You can set
      debugging and optimization flags with the
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">makeoptions</literal> directive in the kernel
      configuration.  Note that you should not use <option xmlns:xlink="http://www.w3.org/1999/xlink">-g</option>
      unless you can accommodate the large (typically 7 MB+) kernels
      that result.</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">makeoptions      DEBUG="-g"
makeoptions      COPTFLAGS="-O -pipe"</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Sysctl provides a way to tune kernel parameters at run-time.
      You typically do not need to mess with any of the sysctl
      variables, especially the VM related ones.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Run time VM and system tuning is relatively straightforward.
      First, use Soft Updates on your UFS/FFS filesystems whenever
      possible.
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/sys/ufs/ffs/README.softupdates</filename>
      contains instructions (and restrictions) on how to configure
      it.</para>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">swap partition</primary></indexterm>
    <para xmlns:xlink="http://www.w3.org/1999/xlink">Second, configure  sufficient swap.  You should have a swap
      partition configured on each physical disk, up to four, even on
      your <quote xmlns:xlink="http://www.w3.org/1999/xlink">work</quote> disks.  You should have at least 2x the
      swap space as you have main memory, and possibly even more if
      you do not have a lot of memory.  You should also size your swap
      partition based on the maximum memory configuration you ever
      intend to put on the machine so you do not have to repartition
      your disks later on.  If you want to be able to accommodate a
      crash dump, your first swap partition must be at least as large
      as main memory and <filename xmlns:xlink="http://www.w3.org/1999/xlink">/var/crash</filename> must have
      sufficient free space to hold the dump.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">NFS-based swap is perfectly acceptable on 4.X or later
      systems, but you must be aware that the NFS server will take the
      brunt of the paging load.</para>
  </sect1>
</chapter>

    
<!--
     The FreeBSD Documentation Project
     The FreeBSD SMP Next Generation Project

     $FreeBSD$
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="smp">
  <info><title xmlns:xlink="http://www.w3.org/1999/xlink">SMPng Design Document</title>
    <authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
      <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">John</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Baldwin</surname></personname><contrib xmlns:xlink="http://www.w3.org/1999/xlink">Written by </contrib></author>
      <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Robert</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Watson</surname></personname></author>
    </authorgroup>

    <copyright xmlns:xlink="http://www.w3.org/1999/xlink">
      <year xmlns:xlink="http://www.w3.org/1999/xlink">2002</year>
      <year xmlns:xlink="http://www.w3.org/1999/xlink">2004</year>
      <year xmlns:xlink="http://www.w3.org/1999/xlink">2005</year>
      <holder xmlns:xlink="http://www.w3.org/1999/xlink">John Baldwin</holder>
      <holder xmlns:xlink="http://www.w3.org/1999/xlink">Robert Watson</holder>
    </copyright>
  </info>

  

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="smp-intro">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Introduction</title>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">SMP Next Generation</primary></indexterm>
    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">kernel synchronization</primary></indexterm>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">This document presents the current design and implementation
      of the SMPng Architecture.  First, the basic primitives and
      tools are introduced.  Next, a general architecture for the
      FreeBSD kernel's synchronization and execution model is laid
      out.  Then, locking strategies for specific subsystems are
      discussed, documenting the approaches taken to introduce
      fine-grained synchronization and parallelism for each subsystem.
      Finally, detailed implementation notes are provided to motivate
      design choices, and make the reader aware of important
      implications involving the use of specific primitives. </para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">This document is a work-in-progress, and will be updated to
      reflect on-going design and implementation activities associated
      with the SMPng Project.  Many sections currently exist only in
      outline form, but will be fleshed out as work proceeds.  Updates or
      suggestions regarding the document may be directed to the document
      editors.</para>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">concurrency</primary></indexterm>
    <para xmlns:xlink="http://www.w3.org/1999/xlink">The goal of SMPng is to allow concurrency in the kernel.
      The kernel is basically one rather large and complex program. To
      make the kernel multi-threaded we use some of the same tools used
      to make other programs multi-threaded.  These include mutexes,
      shared/exclusive locks, semaphores, and condition variables.  For
      the definitions of these and other SMP-related terms, please see
      the <xref xmlns:xlink="http://www.w3.org/1999/xlink" linkend="smp-glossary"/> section of this article.</para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="smp-lock-fundamentals">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Basic Tools and Locking Fundamentals</title>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Atomic Instructions and Memory Barriers</title>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">atomic instructions</primary></indexterm>
    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">memory barriers</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">There are several existing treatments of memory barriers
	and atomic instructions, so this section will not include a
	lot of detail.  To put it simply, one can not go around reading
	variables without a lock if a lock is used to protect writes
	to that variable.  This becomes obvious when you consider that
	memory barriers simply determine relative order of memory
	operations; they do not make any guarantee about timing of
	memory operations.  That is, a memory barrier does not force
	the contents of a CPU's local cache or store buffer to flush.
	Instead, the memory barrier at lock release simply ensures
	that all writes to the protected data will be visible to other
	CPU's or devices if the write to release the lock is visible.
	The CPU is free to keep that data in its cache or store buffer
	as long as it wants. However, if another CPU performs an
	atomic instruction on the same datum, the first CPU must
	guarantee that the updated value is made visible to the second
	CPU along with any other operations that memory barriers may
	require.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">For example, assuming a simple model where data is
	considered visible when it is in main memory (or a global
	cache), when an atomic instruction is triggered on one CPU,
	other CPU's store buffers and caches must flush any writes to
	that same cache line along with any pending operations behind
	a memory barrier.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">This requires one to take special care when using an item
	protected by atomic instructions.  For example, in the sleep
	mutex implementation, we have to use an
	<function xmlns:xlink="http://www.w3.org/1999/xlink">atomic_cmpset</function> rather than an
	<function xmlns:xlink="http://www.w3.org/1999/xlink">atomic_set</function> to turn on the
	<constant xmlns:xlink="http://www.w3.org/1999/xlink">MTX_CONTESTED</constant> bit.  The reason is that we
	read the value of <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">mtx_lock</varname> into a
	variable and then make a decision based on that read.
	However, the value we read may be stale, or it may change
	while we are making our decision.  Thus, when the
	<function xmlns:xlink="http://www.w3.org/1999/xlink">atomic_set</function> executed, it may end up
	setting the bit on another value than the one we made the
	decision on. Thus, we have to use an
	<function xmlns:xlink="http://www.w3.org/1999/xlink">atomic_cmpset</function> to set the value only if
	the value we made the decision on is up-to-date and
	valid.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Finally, atomic instructions only allow one item to be
	updated or read.  If one needs to atomically update several
	items, then a lock must be used instead.  For example, if two
	counters must be read and have values that are consistent
	relative to each other, then those counters must be protected
	by a lock rather than by separate atomic instructions.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Read Locks Versus Write Locks</title>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">read locks</primary></indexterm>
    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">write locks</primary></indexterm>
      <para xmlns:xlink="http://www.w3.org/1999/xlink">Read locks do not need to be as strong as write locks.
	Both types of locks need to ensure that the data they are
	accessing is not stale.  However, only write access requires
	exclusive access.  Multiple threads can safely read a value.
	Using different types of locks for reads and writes can be
	implemented in a number of ways.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">First, sx locks can be used in this manner by using an
	exclusive lock when writing and a shared lock when reading.
	This method is quite straightforward.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">A second method is a bit more obscure.  You can protect a
	datum with multiple locks.  Then for reading that data you
	simply need to have a read lock of one of the locks.  However,
	to write to the data, you need to have a write lock of all of
	the locks.  This can make writing rather expensive but can be
	useful when data is accessed in various ways.  For example,
	the parent process pointer is protected by both the
	<varname xmlns:xlink="http://www.w3.org/1999/xlink">proctree_lock</varname> sx lock and the per-process
	mutex.  Sometimes the proc lock is easier as we are just
	checking to see who a parent of a process is that we already
	have locked.  However, other places such as
	<function xmlns:xlink="http://www.w3.org/1999/xlink">inferior</function> need to walk the tree of
	processes via parent pointers and locking each process would
	be prohibitive as well as a pain to guarantee that the
	condition you are checking remains valid for both the check
	and the actions taken as a result of the check.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Locking Conditions and Results</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">If you need a lock to check the state of a variable so
	that you can take an action based on the state you read, you
	can not just hold the lock while reading the variable and then
	drop the lock before you act on the value you read.  Once you
	drop the lock, the variable can change rendering your decision
	invalid. Thus, you must hold the lock both while reading the
	variable and while performing the action as a result of the
	test.</para>
    </sect2>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="smp-design">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">General Architecture and Design</title>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Interrupt Handling</title>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">interrupt handling</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Following the pattern of several other multi-threaded <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark>
	kernels, FreeBSD deals with interrupt handlers by giving them
	their own thread context.  Providing a context for interrupt
	handlers allows them to block on locks.  To help avoid
	latency, however, interrupt threads run at real-time kernel
	priority. Thus, interrupt handlers should not execute for very
	long to avoid starving other kernel threads.  In addition,
	since multiple handlers may share an interrupt thread,
	interrupt handlers should not sleep or use a sleepable lock to
	avoid starving another interrupt handler.</para>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">interrupt threads</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The interrupt threads currently in FreeBSD are referred to
	as heavyweight interrupt threads.  They are called this
	because switching to an interrupt thread involves a full
	context switch. In the initial implementation, the kernel was
	not preemptive and thus interrupts that interrupted a kernel
	thread would have to wait until the kernel thread blocked or
	returned to userland before they would have an opportunity to
	run.</para>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">latency</primary></indexterm>
    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">preemption</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">To deal with the latency problems, the kernel in FreeBSD
	has been made preemptive.  Currently, we only preempt a kernel
	thread when we release a sleep mutex or when an interrupt
	comes in.  However, the plan is to make the FreeBSD kernel
	fully preemptive as described below.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Not all interrupt handlers execute in a thread context.
	Instead, some handlers execute directly in primary interrupt
	context.  These interrupt handlers are currently misnamed
	<quote xmlns:xlink="http://www.w3.org/1999/xlink">fast</quote> interrupt handlers since the
	<constant xmlns:xlink="http://www.w3.org/1999/xlink">INTR_FAST</constant> flag used in earlier versions
	of the kernel is used to mark these handlers.  The only
	interrupts which currently use these types of interrupt
	handlers are clock interrupts and serial I/O device
	interrupts.  Since these handlers do not have their own
	context, they may not acquire blocking locks and thus may only
	use spin mutexes.</para>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">context switches</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Finally, there is one optional optimization that can be
	added in MD code called lightweight context switches.  Since
	an interrupt thread executes in a kernel context, it can
	borrow the vmspace of any process.  Thus, in a lightweight
	context switch, the switch to the interrupt thread does not
	switch vmspaces but borrows the vmspace of the interrupted
	thread.  In order to ensure that the vmspace of the
	interrupted thread does not disappear out from under us, the
	interrupted thread is not allowed to execute until the
	interrupt thread is no longer borrowing its vmspace.  This can
	happen when the interrupt thread either blocks or finishes.
	If an interrupt thread blocks, then it will use its own
	context when it is made runnable again.  Thus, it can release
	the interrupted thread.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The cons of this optimization are that they are very
	machine specific and complex and thus only worth the effort if
	their is a large performance improvement.  At this point it is
	probably too early to tell, and in fact, will probably hurt
	performance as almost all interrupt handlers will immediately
	block on Giant and require a thread fix-up when they block.
	Also, an alternative method of interrupt handling has been
	proposed by Mike Smith that works like so:</para>

      <orderedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Each interrupt handler has two parts: a predicate
	    which runs in primary interrupt context and a handler
	    which runs in its own thread context.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">If an interrupt handler has a predicate, then when an
	    interrupt is triggered, the predicate is run.  If the
	    predicate returns true then the interrupt is assumed to be
	    fully handled and the kernel returns from the interrupt.
	    If the predicate returns false or there is no predicate,
	    then the threaded handler is scheduled to run.</para>
	</listitem>
      </orderedlist>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Fitting light weight context switches into this scheme
	might prove rather complicated.  Since we may want to change
	to this scheme at some point in the future, it is probably
	best to defer work on light weight context switches until we
	have settled on the final interrupt handling architecture and
	determined how light weight context switches might or might
	not fit into it.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Kernel Preemption and Critical Sections</title>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Kernel Preemption in a Nutshell</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Kernel preemption is fairly simple.  The basic idea is
	  that a CPU should always be doing the highest priority work
	  available.  Well, that is the ideal at least.  There are a
	  couple of cases where the expense of achieving the ideal is
	  not worth being perfect.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Implementing full kernel preemption is very
	  straightforward: when you schedule a thread to be executed
	  by putting it on a run queue, you check to see if its
	  priority is higher than the currently executing thread.  If
	  so, you initiate a context switch to that thread.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">While locks can protect most data in the case of a
	  preemption, not all of the kernel is preemption safe.  For
	  example, if a thread holding a spin mutex preempted and the
	  new thread attempts to grab the same spin mutex, the new
	  thread may spin forever as the interrupted thread may never
	  get a chance to execute.  Also, some code such as the code
	  to assign an address space number for a process during
	  <function xmlns:xlink="http://www.w3.org/1999/xlink">exec</function> on the Alpha needs to not be
	  preempted as it supports the actual context switch code.
	  Preemption is disabled for these code sections by using a
	  critical section.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Critical Sections</title>

        <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">critical sections</primary></indexterm>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The responsibility of the critical section API is to
	  prevent context switches inside of a critical section.  With
	  a fully preemptive kernel, every
	  <function xmlns:xlink="http://www.w3.org/1999/xlink">setrunqueue</function> of a thread other than the
	  current thread is a preemption point.  One implementation is
	  for <function xmlns:xlink="http://www.w3.org/1999/xlink">critical_enter</function> to set a per-thread
	  flag that is cleared by its counterpart.  If
	  <function xmlns:xlink="http://www.w3.org/1999/xlink">setrunqueue</function> is called with this flag
	  set, it does not preempt regardless of the priority of the new
	  thread relative to the current thread.  However, since
	  critical sections are used in spin mutexes to prevent
	  context switches and multiple spin mutexes can be acquired,
	  the critical section API must support nesting.  For this
	  reason the current implementation uses a nesting count
	  instead of a single per-thread flag.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">In order to minimize latency, preemptions inside of a
	  critical section are deferred rather than dropped.  If a
	  thread that would normally be preempted to is made
	  runnable while the current thread is in a critical section,
	  then a per-thread flag is set
	  to indicate that there is a pending preemption.  When the
	  outermost critical section is exited, the flag is checked.
	  If the flag is set, then the current thread is preempted to
	  allow the higher priority thread to run.</para>

        <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">spin mutexes</primary></indexterm>
        <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">mutexes</primary><secondary xmlns:xlink="http://www.w3.org/1999/xlink">spin</secondary></indexterm>
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Interrupts pose a problem with regards to spin mutexes.
	  If a low-level interrupt handler needs a lock, it needs to
	  not interrupt any code needing that lock to avoid possible
	  data structure corruption.  Currently, providing this
	  mechanism is piggybacked onto critical section API by means
	  of the <function xmlns:xlink="http://www.w3.org/1999/xlink">cpu_critical_enter</function> and
	  <function xmlns:xlink="http://www.w3.org/1999/xlink">cpu_critical_exit</function> functions.  Currently
	  this API disables and re-enables interrupts on all of
	  FreeBSD's current platforms.  This approach may not be
	  purely optimal, but it is simple to understand and simple to
	  get right.  Theoretically, this second API need only be used
	  for spin mutexes that are used in primary interrupt context.
	  However, to make the code simpler, it is used for all spin
	  mutexes and even all critical sections.  It may be desirable
	  to split out the MD API from the MI API and only use it in
	  conjunction with the MI API in the spin mutex
	  implementation.  If this approach is taken, then the MD API
	  likely would need a rename to show that it is a separate
	  API.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Design Tradeoffs</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">As mentioned earlier, a couple of trade-offs have been
	  made to sacrifice cases where perfect preemption may not
	  always provide the best performance.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The first trade-off is that the preemption code does not
	  take other CPUs into account.  Suppose we have a two CPU's A
	  and B with the priority of A's thread as 4 and the priority
	  of B's thread as 2.  If CPU B makes a thread with priority 1
	  runnable, then in theory, we want CPU A to switch to the new
	  thread so that we will be running the two highest priority
	  runnable threads.  However, the cost of determining which
	  CPU to enforce a preemption on as well as actually signaling
	  that CPU via an IPI along with the synchronization that
	  would be required would be enormous.  Thus, the current code
	  would instead force CPU B to switch to the higher priority
	  thread. Note that this still puts the system in a better
	  position as CPU B is executing a thread of priority 1 rather
	  than a thread of priority 2.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The second trade-off limits immediate kernel preemption
	  to real-time priority kernel threads.  In the simple case of
	  preemption defined above, a thread is always preempted
	  immediately (or as soon as a critical section is exited) if
	  a higher priority thread is made runnable.  However, many
	  threads executing in the kernel only execute in a kernel
	  context for a short time before either blocking or returning
	  to userland.  Thus, if the kernel preempts these threads to
	  run another non-realtime kernel thread, the kernel may
	  switch out the executing thread just before it is about to
	  sleep or execute.  The cache on the CPU must then adjust to
	  the new thread.  When the kernel returns to the preempted
	  thread, it must refill all the cache information that was lost.
	  In addition, two extra context switches are performed that
	  could be avoided if the kernel deferred the preemption until
	  the first thread blocked or returned to userland.  Thus, by
	  default, the preemption code will only preempt immediately
	  if the higher priority thread is a real-time priority
	  thread.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Turning on full kernel preemption for all kernel threads
	  has value as a debugging aid since it exposes more race
	  conditions.  It is especially useful on UP systems were many
	  races are hard to simulate otherwise.  Thus, there is a
	  kernel option <literal xmlns:xlink="http://www.w3.org/1999/xlink">FULL_PREEMPTION</literal> to enable
	  preemption for all kernel threads that can be used for
	  debugging purposes.</para>
      </sect3>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Thread Migration</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">thread migration</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Simply put, a thread migrates when it moves from one CPU
	to another.  In a non-preemptive kernel this can only happen
	at well-defined points such as when calling
	<function xmlns:xlink="http://www.w3.org/1999/xlink">msleep</function> or returning to userland.
	However, in the preemptive kernel, an interrupt can force a
	preemption and possible migration at any time.  This can have
	negative affects on per-CPU data since with the exception of
	<varname xmlns:xlink="http://www.w3.org/1999/xlink">curthread</varname> and <varname xmlns:xlink="http://www.w3.org/1999/xlink">curpcb</varname> the
	data can change whenever you migrate.  Since you can
	potentially migrate at any time this renders unprotected
	per-CPU data access rather useless. Thus it is desirable to be
	able to disable migration for sections of code that need
	per-CPU data to be stable.</para>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">critical sections</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Critical sections currently prevent migration since they
	do not allow context switches.  However, this may be too
	strong of a requirement to enforce in some cases since a
	critical section also effectively blocks interrupt threads on
	the current processor.  As a result, another API has been
	provided to allow the current thread to indicate that if it
	preempted it should not migrate to another CPU.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">This API is known as thread pinning and is provided by the
	scheduler.  The API consists of two functions:
	<function xmlns:xlink="http://www.w3.org/1999/xlink">sched_pin</function> and
	<function xmlns:xlink="http://www.w3.org/1999/xlink">sched_unpin</function>.  These functions manage a
	per-thread nesting count <varname xmlns:xlink="http://www.w3.org/1999/xlink">td_pinned</varname>.  A
	thread is pinned when its nesting count is greater than zero
	and a thread starts off unpinned with a nesting count of zero.
	Each scheduler implementation is required to ensure that
	pinned threads are only executed on the CPU that they were
	executing on when the <function xmlns:xlink="http://www.w3.org/1999/xlink">sched_pin</function> was first
	called.  Since the nesting count is only written to by the
	thread itself and is only read by other threads when the
	pinned thread is not executing but while
	<varname xmlns:xlink="http://www.w3.org/1999/xlink">sched_lock</varname> is held, then
	<varname xmlns:xlink="http://www.w3.org/1999/xlink">td_pinned</varname> does not need any locking.  The
	<function xmlns:xlink="http://www.w3.org/1999/xlink">sched_pin</function> function increments the nesting
	count and <function xmlns:xlink="http://www.w3.org/1999/xlink">sched_unpin</function> decrements the
	nesting count.  Note that these functions only operate on the
	current thread and bind the current thread to the CPU it is
	executing on at the time.  To bind an arbitrary thread to a
	specific CPU, the <function xmlns:xlink="http://www.w3.org/1999/xlink">sched_bind</function> and
	<function xmlns:xlink="http://www.w3.org/1999/xlink">sched_unbind</function> functions should be used
	instead.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Callouts</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The <function xmlns:xlink="http://www.w3.org/1999/xlink">timeout</function> kernel facility permits
	kernel services to register functions for execution as part
	of the <function xmlns:xlink="http://www.w3.org/1999/xlink">softclock</function> software interrupt.
	Events are scheduled based on a desired number of clock
	ticks, and callbacks to the consumer-provided function
	will occur at approximately the right time.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The global list of pending timeout events is protected
	by a global spin mutex, <varname xmlns:xlink="http://www.w3.org/1999/xlink">callout_lock</varname>;
	all access to the timeout list must be performed with this
	mutex held.  When <function xmlns:xlink="http://www.w3.org/1999/xlink">softclock</function> is
	woken up, it scans the list of pending timeouts for those
	that should fire.  In order to avoid lock order reversal,
	the <function xmlns:xlink="http://www.w3.org/1999/xlink">softclock</function> thread will release the
	<varname xmlns:xlink="http://www.w3.org/1999/xlink">callout_lock</varname> mutex when invoking the
	provided <function xmlns:xlink="http://www.w3.org/1999/xlink">timeout</function> callback function.
	If the <constant xmlns:xlink="http://www.w3.org/1999/xlink">CALLOUT_MPSAFE</constant> flag was not set
	during registration, then Giant will be grabbed before
	invoking the callout, and then released afterwards.  The
	<varname xmlns:xlink="http://www.w3.org/1999/xlink">callout_lock</varname> mutex will be re-grabbed
	before proceeding.  The <function xmlns:xlink="http://www.w3.org/1999/xlink">softclock</function>
	code is careful to leave the list in a consistent state
	while releasing the mutex.  If <constant xmlns:xlink="http://www.w3.org/1999/xlink">DIAGNOSTIC</constant>
	is enabled, then the time taken to execute each function is
	measured, and a warning is generated if it exceeds a
	threshold.</para>
    </sect2>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="smp-lock-strategies">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Specific Locking Strategies</title>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Credentials</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">credentials</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink"><varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">struct ucred</varname> is the kernel's
	internal credential structure, and is generally used as the
	basis for process-driven access control within the kernel.
	BSD-derived systems use a <quote xmlns:xlink="http://www.w3.org/1999/xlink">copy-on-write</quote> model
	for credential data: multiple references may exist for a
	credential structure, and when a change needs to be made, the
	structure is duplicated, modified, and then the reference
	replaced.  Due to wide-spread caching of the credential to
	implement access control on open, this results in substantial
	memory savings.  With a move to fine-grained SMP, this model
	also saves substantially on locking operations by requiring
	that modification only occur on an unshared credential,
	avoiding the need for explicit synchronization when consuming
	a known-shared credential.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Credential structures with a single reference are
	considered mutable; shared credential structures must not be
	modified or a race condition is risked.  A mutex,
	<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">cr_mtxp</varname> protects the reference
	count of <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">struct ucred</varname> so as to
	maintain consistency.  Any use of the structure requires a
	valid reference for the duration of the use, or the structure
	may be released out from under the illegitimate
	consumer.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">struct ucred</varname> mutex is a leaf
	mutex and is implemented via a mutex pool for performance
	reasons.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Usually, credentials are used in a read-only manner for access
	control decisions, and in this case
	<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">td_ucred</varname> is generally preferred
	because it requires no locking.  When a process' credential is
	updated the <literal xmlns:xlink="http://www.w3.org/1999/xlink">proc</literal> lock must be held across
	the check and update operations thus avoid races.  The process
	credential <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_ucred</varname> must be used for
	check and update operations to prevent time-of-check,
	time-of-use races.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">If system call invocations will perform access control after
	an update to the process credential, the value of
	<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">td_ucred</varname> must also be refreshed to
	the current process value.  This will prevent use of a stale
	credential following a change.  The kernel automatically
	refreshes the <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">td_ucred</varname> pointer in
	the thread structure from the process
	<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_ucred</varname> whenever a process enters
	the kernel, permitting use of a fresh credential for kernel
	access control.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">File Descriptors and File Descriptor Tables</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Details to follow.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Jail Structures</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">Jail</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink"><varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">struct prison</varname> stores
	administrative details pertinent to the maintenance of jails
	created using the <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">jail</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> API.  This includes the
	per-jail hostname, IP address, and related settings.  This
	structure is reference-counted since pointers to instances of
	the structure are shared by many credential structures.  A
	single mutex, <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">pr_mtx</varname> protects read
	and write access to the reference count and all mutable
	variables inside the struct jail.  Some variables are set only
	when the jail is created, and a valid reference to the
	<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">struct prison</varname> is sufficient to read
	these values.  The precise locking of each entry is documented
	via comments in <filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/jail.h</filename>.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">MAC Framework</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">MAC</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The TrustedBSD MAC Framework maintains data in a variety
	of kernel objects, in the form of <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">struct
	label</varname>.  In general, labels in kernel objects
	are protected by the same lock as the remainder of the kernel
	object.  For example, the <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">v_label</varname>
	label in <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">struct vnode</varname> is protected
	by the vnode lock on the vnode.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">In addition to labels maintained in standard kernel objects,
	the MAC Framework also maintains a list of registered and
	active policies.  The policy list is protected by a global
	mutex (<varname xmlns:xlink="http://www.w3.org/1999/xlink">mac_policy_list_lock</varname>) and a busy
	count (also protected by the mutex).  Since many access
	control checks may occur in parallel, entry to the framework
	for a read-only access to the policy list requires holding the
	mutex while incrementing (and later decrementing) the busy
	count.  The mutex need not be held for the duration of the
	MAC entry operation--some operations, such as label operations
	on file system objects--are long-lived.  To modify the policy
	list, such as during policy registration and de-registration,
	the mutex must be held and the reference count must be zero,
	to prevent modification of the list while it is in use.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">A condition variable,
	<varname xmlns:xlink="http://www.w3.org/1999/xlink">mac_policy_list_not_busy</varname>, is available to
	threads that need to wait for the list to become unbusy, but
	this condition variable must only be waited on if the caller is
	holding no other locks, or a lock order violation may be
	possible.  The busy count, in effect, acts as a form of
	shared/exclusive lock over access to the framework: the difference
	is that, unlike with an sx lock, consumers waiting for the list
	to become unbusy may be starved, rather than permitting lock
	order problems with regards to the busy count and other locks
	that may be held on entry to (or inside) the MAC Framework.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Modules</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">kernel modules</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">For the module subsystem there exists a single lock that is
	used to protect the shared data.  This lock is a shared/exclusive
	(SX) lock and has a good chance of needing to be acquired (shared
	or exclusively), therefore there are a few macros that have been
	added to make access to the lock more easy.  These macros can be
	located in <filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/module.h</filename> and are quite basic
	in terms of usage.  The main structures protected under this lock
	are the <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">module_t</varname> structures (when shared)
	and the global <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">modulelist_t</varname> structure,
	modules.  One should review the related source code in
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">kern/kern_module.c</filename> to further understand the
	locking strategy.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Newbus Device Tree</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">Newbus</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The newbus system will have one sx lock.  Readers will
	hold a shared (read) lock (<citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">sx_slock</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry>) and writers will hold
	an exclusive (write) lock (<citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">sx_xlock</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry>).  Internal functions
	will not do locking at all.  Externally visible ones will lock as
	needed.
	Those items that do not matter if the race is won or lost will
	not be locked, since they tend to be read all over the place
	(e.g., <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">device_get_softc</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry>).  There will be relatively few
	changes to the newbus data structures, so a single lock should
	be sufficient and not impose a performance penalty.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Pipes</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">...</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Processes and Threads</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">- process hierarchy</para>
      <para xmlns:xlink="http://www.w3.org/1999/xlink">- proc locks, references</para>
      <para xmlns:xlink="http://www.w3.org/1999/xlink">- thread-specific copies of proc entries to freeze during system
	calls, including td_ucred</para>
      <para xmlns:xlink="http://www.w3.org/1999/xlink">- inter-process operations</para>
      <para xmlns:xlink="http://www.w3.org/1999/xlink">- process groups and sessions</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Scheduler</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">scheduler</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Lots of references to <varname xmlns:xlink="http://www.w3.org/1999/xlink">sched_lock</varname> and notes
	pointing at specific primitives and related magic elsewhere in the
	document.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Select and Poll</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The <function xmlns:xlink="http://www.w3.org/1999/xlink">select</function> and
	<function xmlns:xlink="http://www.w3.org/1999/xlink">poll</function> functions permit threads to block
	waiting on events on file descriptors--most frequently,
	whether or not the file descriptors are readable or
	writable.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">...</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">SIGIO</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The SIGIO service permits processes to request the delivery
	of a SIGIO signal to its process group when the read/write
	status of specified file descriptors changes.  At most one
	process or process group is permitted to register for SIGIO
	from any given kernel object, and that process or group is
	referred to as the owner.  Each object supporting SIGIO
	registration contains pointer field that is
	<constant xmlns:xlink="http://www.w3.org/1999/xlink">NULL</constant> if the object is not registered, or
	points to a <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">struct sigio</varname> describing
	the registration.  This field is protected by a global mutex,
	<varname xmlns:xlink="http://www.w3.org/1999/xlink">sigio_lock</varname>.  Callers to SIGIO maintenance
	functions must pass in this field <quote xmlns:xlink="http://www.w3.org/1999/xlink">by reference</quote>
	so that local register copies of the field are not made when
	unprotected by the lock.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">One <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">struct sigio</varname> is allocated for
	each registered object associated with any process or process
	group, and contains back-pointers to the object, owner, signal
	information, a credential, and the general disposition of the
	registration.  Each process or progress group contains a list of
	registered <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">struct sigio</varname> structures,
	<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">p_sigiolst</varname> for processes, and
	<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">pg_sigiolst</varname> for process groups.
	These lists are protected by the process or process group
	locks respectively.  Most fields in each <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">struct
	sigio</varname> are constant for the duration of the
	registration, with the exception of the
	<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">sio_pgsigio</varname> field which links the
	<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">struct sigio</varname> into the process or
	process group list.  Developers implementing new kernel
	objects supporting SIGIO will, in general, want to avoid
	holding structure locks while invoking SIGIO supporting
	functions, such as <function xmlns:xlink="http://www.w3.org/1999/xlink">fsetown</function>
	or <function xmlns:xlink="http://www.w3.org/1999/xlink">funsetown</function> to avoid
	defining a lock order between structure locks and the global
	SIGIO lock.  This is generally possible through use of an
	elevated reference count on the structure, such as reliance
	on a file descriptor reference to a pipe during a pipe
	operation.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Sysctl</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The <function xmlns:xlink="http://www.w3.org/1999/xlink">sysctl</function> MIB service is invoked
	from both within the kernel and from userland applications
	using a system call.  At least two issues are raised in
	locking: first, the protection of the structures maintaining
	the namespace, and second, interactions with kernel variables
	and functions that are accessed by the sysctl interface.
	Since sysctl permits the direct export (and modification) of
	kernel statistics and configuration parameters, the sysctl
	mechanism must become aware of appropriate locking semantics
	for those variables.  Currently, sysctl makes use of a single
	global sx lock to serialize use of
	<function xmlns:xlink="http://www.w3.org/1999/xlink">sysctl</function>; however, it is assumed to operate
	under Giant and other protections are not provided.  The
	remainder of this section speculates on locking and semantic
	changes to sysctl.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">- Need to change the order of operations for sysctl's that
	update values from read old, copyin and copyout, write new to
	copyin, lock, read old and write new, unlock, copyout.  Normal
	sysctl's that just copyout the old value and set a new value
	that they copyin may still be able to follow the old model.
	However, it may be cleaner to use the second model for all of
	the sysctl handlers to avoid lock operations.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">- To allow for the common case, a sysctl could embed a
	pointer to a mutex in the SYSCTL_FOO macros and in the struct.
	This would work for most sysctl's.  For values protected by sx
	locks, spin mutexes, or other locking strategies besides a
	single sleep mutex, SYSCTL_PROC nodes could be used to get the
	locking right.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Taskqueue</title>

       <para xmlns:xlink="http://www.w3.org/1999/xlink"> The taskqueue's interface has two basic locks associated
	with it in order to protect the related shared data.  The
	<varname xmlns:xlink="http://www.w3.org/1999/xlink">taskqueue_queues_mutex</varname> is meant to serve as a
	lock to protect the <varname xmlns:xlink="http://www.w3.org/1999/xlink">taskqueue_queues</varname> TAILQ.
	The other mutex lock associated with this system is the one in the
	<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">struct taskqueue</varname> data structure.  The
	use of the synchronization primitive here is to protect the
	integrity of the data in the <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">struct
	taskqueue</varname>.  It should be noted that there are no
	separate macros to assist the user in locking down his/her own work
	since these locks are most likely not going to be used outside of
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">kern/subr_taskqueue.c</filename>.</para>
    </sect2>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="smp-implementation-notes">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Implementation Notes</title>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Sleep Queues</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">A sleep queue is a structure that holds the list of
	threads asleep on a wait channel.  Each thread that is not
	asleep on a wait channel carries a sleep queue structure
	around with it.  When a thread blocks on a wait channel, it
	donates its sleep queue structure to that wait channel.  Sleep
	queues associated with a wait channel are stored in a hash
	table.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The sleep queue hash table holds sleep queues for wait
	channels that have at least one blocked thread.  Each entry in
	the hash table is called a sleepqueue chain.  The chain
	contains a linked list of sleep queues and a spin mutex.  The
	spin mutex protects the list of sleep queues as well as the
	contents of the sleep queue structures on the list.  Only one
	sleep queue is associated with a given wait channel.  If
	multiple threads block on a wait channel than the sleep queues
	associated with all but the first thread are stored on a list
	of free sleep queues in the master sleep queue.  When a thread
	is removed from the sleep queue it is given one of the sleep
	queue structures from the master queue's free list if it is
	not the only thread asleep on the queue.  The last thread is
	given the master sleep queue when it is resumed.  Since
	threads may be removed from the sleep queue in a different
	order than they are added, a thread may depart from a sleep
	queue with a different sleep queue structure than the one it
	arrived with.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The <function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_lock</function> function locks the
	spin mutex of the sleep queue chain that maps to a specific
	wait channel.  The <function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_lookup</function> function
	looks in the hash table for the master sleep queue associated
	with a given wait channel.  If no master sleep queue is found,
	it returns <constant xmlns:xlink="http://www.w3.org/1999/xlink">NULL</constant>.  The
	<function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_release</function> function unlocks the spin
	mutex associated with a given wait channel.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">A thread is added to a sleep queue via the
	<function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_add</function>.  This function accepts the
	wait channel, a pointer to the mutex that protects the wait
	channel, a wait message description string, and a mask of
	flags.  The sleep queue chain should be locked via
	<function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_lock</function> before this function is
	called.  If no mutex protects the wait channel (or it is
	protected by Giant), then the mutex pointer argument should be
	<constant xmlns:xlink="http://www.w3.org/1999/xlink">NULL</constant>.  The flags argument contains a type
	field that indicates the kind of sleep queue that the thread
	is being added to and a flag to indicate if the sleep is
	interruptible (<constant xmlns:xlink="http://www.w3.org/1999/xlink">SLEEPQ_INTERRUPTIBLE</constant>).
	Currently there are only two types of sleep queues:
	traditional sleep queues managed via the
	<function xmlns:xlink="http://www.w3.org/1999/xlink">msleep</function> and <function xmlns:xlink="http://www.w3.org/1999/xlink">wakeup</function>
	functions (<constant xmlns:xlink="http://www.w3.org/1999/xlink">SLEEPQ_MSLEEP</constant>) and condition
	variable sleep queues (<constant xmlns:xlink="http://www.w3.org/1999/xlink">SLEEPQ_CONDVAR</constant>).
	The sleep queue type and lock pointer argument are used solely
	for internal assertion checking.  Code that calls
	<function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_add</function> should explicitly unlock any
	interlock protecting the wait channel after the associated
	sleepqueue chain has been locked via
	<function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_lock</function> and before blocking on the
	sleep queue via one of the waiting functions.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">A timeout for a sleep is set by invoking
	<function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_set_timeout</function>.  The function accepts
	the wait channel and the timeout time as a relative tick count
	as its arguments.  If a sleep should be interrupted by
	arriving signals, the
	<function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_catch_signals</function> function should be
	called as well.  This function accepts the wait channel as its
	only parameter.  If there is already a signal pending for this
	thread, then <function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_catch_signals</function> will
	return a signal number; otherwise, it will return 0.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Once a thread has been added to a sleep queue, it blocks
	using one of the <function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_wait</function> functions.
	There are four wait functions depending on whether or not the
	caller wishes to use a timeout or have the sleep aborted by
	caught signals or an interrupt from the userland thread
	scheduler.  The <function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_wait</function> function
	simply waits until the current thread is explicitly resumed by
	one of the wakeup functions.  The
	<function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_timedwait</function> function waits until
	either the thread is explicitly resumed or the timeout set by
	an earlier call to <function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_set_timeout</function>
	expires.  The <function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_wait_sig</function> function
	waits until either the thread is explicitly resumed or its
	sleep is aborted.  The
	<function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_timedwait_sig</function> function waits until
	either the thread is explicitly resumed, the timeout set by an
	earlier call to <function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_set_timeout</function>
	expires, or the thread's sleep is aborted.  All of the wait
	functions accept the wait channel as their first parameter.
	In addition, the <function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_timedwait_sig</function>
	function accepts a second boolean parameter to indicate if the
	earlier call to <function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_catch_signals</function>
	found a pending signal.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">If the thread is explicitly resumed or is aborted by a
	signal, then a value of zero is returned by the wait function
	to indicate a successful sleep.  If the thread is resumed by
	either a timeout or an interrupt from the userland thread
	scheduler then an appropriate errno value is returned instead.
	Note that since <function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_wait</function> can only
	return 0 it does not return anything and the caller should
	assume a successful sleep.  Also, if a thread's sleep times
	out and is aborted simultaneously then
	<function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_timedwait_sig</function> will return an error
	indicating that a timeout occurred.  If an error value of
	0 is returned and either <function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_wait_sig</function>
	or <function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_timedwait_sig</function> was used to
	block, then the function
	<function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_calc_signal_retval</function> should be
	called to check for any pending signals and calculate an
	appropriate return value if any are found.  The signal number
	returned by the earlier call to
	<function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_catch_signals</function> should be passed as
	the sole argument to
	<function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_calc_signal_retval</function>.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Threads asleep on a wait channel are explicitly resumed by
	the <function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_broadcast</function> and
	<function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_signal</function> functions.  Both functions
	accept the wait channel from which to resume threads, a
	priority to raise resumed threads to, and a flags argument to
	indicate which type of sleep queue is being resumed.  The
	priority argument is treated as a minimum priority.  If a
	thread being resumed already has a higher priority
	(numerically lower) than the priority argument then its
	priority is not adjusted.  The flags argument is used for
	internal assertions to ensure that sleep queues are not being
	treated as the wrong type.  For example, the condition
	variable functions should not resume threads on a traditional
	sleep queue.  The <function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_broadcast</function>
	function resumes all threads that are blocked on the specified
	wait channel while <function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_signal</function> only
	resumes the highest priority thread blocked on the wait
	channel.  The sleep queue chain should first be locked via the
	<function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_lock</function> function before calling these
	functions.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">A sleeping thread may have its sleep interrupted by
	calling the <function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_abort</function> function.  This
	function must be called with <varname xmlns:xlink="http://www.w3.org/1999/xlink">sched_lock</varname>
	held and the thread must be queued on a sleep queue.  A thread
	may also be removed from a specific sleep queue via the
	<function xmlns:xlink="http://www.w3.org/1999/xlink">sleepq_remove</function> function.  This function
	accepts both a thread and a wait channel as an argument and
	only awakens the thread if it is on the sleep queue for the
	specified wait channel.  If the thread is not on a sleep queue
	or it is on a sleep queue for a different wait channel, then
	this function does nothing.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Turnstiles</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">turnstiles</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">- Compare/contrast with sleep queues.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">- Lookup/wait/release.
        - Describe TDF_TSNOBLOCK race.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">- Priority propagation.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Details of the Mutex Implementation</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">- Should we require mutexes to be owned for mtx_destroy()
	since we can not safely assert that they are unowned by anyone
	else otherwise?</para>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Spin Mutexes</title>

        <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">mutex</primary><secondary xmlns:xlink="http://www.w3.org/1999/xlink">spin</secondary></indexterm>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">- Use a critical section...</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Sleep Mutexes</title>

        <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">mutex</primary><secondary xmlns:xlink="http://www.w3.org/1999/xlink">sleep</secondary></indexterm>
	<para xmlns:xlink="http://www.w3.org/1999/xlink">- Describe the races with contested mutexes</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">- Why it is safe to read mtx_lock of a contested mutex
	  when holding the turnstile chain lock.</para>
      </sect3>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Witness</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">witness</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">- What does it do</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">- How does it work</para>
    </sect2>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="smp-misc">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Miscellaneous Topics</title>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Interrupt Source and ICU Abstractions</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">- struct isrc</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">- pic drivers</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Other Random Questions/Topics</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">- Should we pass an interlock into
	<function xmlns:xlink="http://www.w3.org/1999/xlink">sema_wait</function>?</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">- Should we have non-sleepable sx locks?</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">- Add some info about proper use of reference counts.</para>
    </sect2>
  </sect1>

  <glossary xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="smp-glossary">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Glossary</title>

    <glossentry xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="smp-glossary-atomic">
      <glossterm xmlns:xlink="http://www.w3.org/1999/xlink">atomic</glossterm>
      <glossdef xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">An operation is atomic if all of its effects are visible
	  to other CPUs together when the proper access protocol is
	  followed.  In the degenerate case are atomic instructions
	  provided directly by machine architectures.  At a higher
	  level, if several members of a structure are protected by a
	  lock, then a set of operations are atomic if they are all
	  performed while holding the lock without releasing the lock
	  in between any of the operations.</para>

	<glossseealso xmlns:xlink="http://www.w3.org/1999/xlink">operation</glossseealso>
      </glossdef>
    </glossentry>

    <glossentry xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="smp-glossary-block">
      <glossterm xmlns:xlink="http://www.w3.org/1999/xlink">block</glossterm>
      <glossdef xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">A thread is blocked when it is waiting on a lock,
	  resource, or condition.  Unfortunately this term is a bit
	  overloaded as a result.</para>

	<glossseealso xmlns:xlink="http://www.w3.org/1999/xlink">sleep</glossseealso>
      </glossdef>
    </glossentry>

    <glossentry xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="smp-glossary-critical-section">
      <glossterm xmlns:xlink="http://www.w3.org/1999/xlink">critical section</glossterm>
      <glossdef xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">A section of code that is not allowed to be preempted.
	  A critical section is entered and exited using the
	  <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">critical_enter</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry> API.</para>
      </glossdef>
    </glossentry>

    <glossentry xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="smp-glossary-MD">
      <glossterm xmlns:xlink="http://www.w3.org/1999/xlink">MD</glossterm>
      <glossdef xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Machine dependent.</para>

	<glossseealso xmlns:xlink="http://www.w3.org/1999/xlink">MI</glossseealso>
      </glossdef>
    </glossentry>

    <glossentry xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="smp-glossary-memory-operation">
      <glossterm xmlns:xlink="http://www.w3.org/1999/xlink">memory operation</glossterm>
      <glossdef xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">A memory operation reads and/or writes to a memory
	  location.</para>
      </glossdef>
    </glossentry>

    <glossentry xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="smp-glossary-MI">
      <glossterm xmlns:xlink="http://www.w3.org/1999/xlink">MI</glossterm>
      <glossdef xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Machine independent.</para>

	<glossseealso xmlns:xlink="http://www.w3.org/1999/xlink">MD</glossseealso>
      </glossdef>
    </glossentry>

    <glossentry xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="smp-glossary-operation">
      <glossterm xmlns:xlink="http://www.w3.org/1999/xlink">operation</glossterm>
      <glosssee xmlns:xlink="http://www.w3.org/1999/xlink">memory operation</glosssee>
    </glossentry>

    <glossentry xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="smp-glossary-primary-interrupt-context">
      <glossterm xmlns:xlink="http://www.w3.org/1999/xlink">primary interrupt context</glossterm>
      <glossdef xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Primary interrupt context refers to the code that runs
	  when an interrupt occurs.  This code can either run an
	  interrupt handler directly or schedule an asynchronous
	  interrupt thread to execute the interrupt handlers for a
	  given interrupt source.</para>
      </glossdef>
    </glossentry>

    <glossentry xmlns:xlink="http://www.w3.org/1999/xlink">
      <glossterm xmlns:xlink="http://www.w3.org/1999/xlink">realtime kernel thread</glossterm>
      <glossdef xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">A high priority kernel thread.  Currently, the only
	  realtime priority kernel threads are interrupt threads.</para>

	<glossseealso xmlns:xlink="http://www.w3.org/1999/xlink">thread</glossseealso>
      </glossdef>
    </glossentry>

    <glossentry xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="smp-glossary-sleep">
      <glossterm xmlns:xlink="http://www.w3.org/1999/xlink">sleep</glossterm>
      <glossdef xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">A thread is asleep when it is blocked on a condition
	  variable or a sleep queue via <function xmlns:xlink="http://www.w3.org/1999/xlink">msleep</function> or
	  <function xmlns:xlink="http://www.w3.org/1999/xlink">tsleep</function>.</para>

	<glossseealso xmlns:xlink="http://www.w3.org/1999/xlink">block</glossseealso>
      </glossdef>
    </glossentry>

    <glossentry xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="smp-glossary-sleepable-lock">
      <glossterm xmlns:xlink="http://www.w3.org/1999/xlink">sleepable lock</glossterm>
      <glossdef xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">A sleepable lock is a lock that can be held by a thread
	  which is asleep.  Lockmgr locks and sx locks are currently
	  the only sleepable locks in FreeBSD.  Eventually, some sx
	  locks such as the allproc and proctree locks may become
	  non-sleepable locks.</para>

	<glossseealso xmlns:xlink="http://www.w3.org/1999/xlink">sleep</glossseealso>
      </glossdef>
    </glossentry>

    <glossentry xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="smp-glossary-thread">
      <glossterm xmlns:xlink="http://www.w3.org/1999/xlink">thread</glossterm>
      <glossdef xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">A kernel thread represented by a struct thread.  Threads own
	  locks and hold a single execution context.</para>
      </glossdef>
    </glossentry>

    <glossentry xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="smp-glossary-wait-channel">
      <glossterm xmlns:xlink="http://www.w3.org/1999/xlink">wait channel</glossterm>
      <glossdef xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">A kernel virtual address that threads may sleep on.</para>
      </glossdef>
    </glossentry>
  </glossary>
</chapter>


  </part>

  <part xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="devicedrivers">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Device Drivers</title>

    
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="driverbasics">

  <info>
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Writing FreeBSD Device Drivers</title>

    <authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
      <author xmlns:xlink="http://www.w3.org/1999/xlink">
	<personname xmlns:xlink="http://www.w3.org/1999/xlink">
	  <firstname xmlns:xlink="http://www.w3.org/1999/xlink">Murray</firstname>
	  <surname xmlns:xlink="http://www.w3.org/1999/xlink">Stokely</surname>
	</personname>

	<contrib xmlns:xlink="http://www.w3.org/1999/xlink">Written by </contrib>
      </author>
    </authorgroup>

    <authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
      <author xmlns:xlink="http://www.w3.org/1999/xlink">
	<personname xmlns:xlink="http://www.w3.org/1999/xlink">
	  <firstname xmlns:xlink="http://www.w3.org/1999/xlink">Jörg</firstname>
	  <surname xmlns:xlink="http://www.w3.org/1999/xlink">Wunsch</surname>
	</personname>

	<contrib xmlns:xlink="http://www.w3.org/1999/xlink">Based on intro(4) manual page by </contrib>
      </author>
    </authorgroup>
  </info>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="driverbasics-intro">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Introduction</title>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">device driver</primary></indexterm>
    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">pseudo-device</primary></indexterm>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">This chapter provides a brief introduction to writing device
      drivers for FreeBSD.  A device in this context is a term used
      mostly for hardware-related stuff that belongs to the system,
      like disks, printers, or a graphics display with its keyboard.
      A device driver is the software component of the operating
      system that controls a specific device.  There are also
      so-called pseudo-devices where a device driver emulates the
      behavior of a device in software without any particular
      underlying hardware.  Device drivers can be compiled into the
      system statically or loaded on demand through the dynamic kernel
      linker facility `kld'.</para>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">device nodes</primary></indexterm>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Most devices in a <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark>-like operating system are accessed
      through device-nodes, sometimes also called special files.
      These files are usually located under the directory
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/dev</filename> in the filesystem hierarchy.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Device drivers can roughly be broken down into two
      categories; character and network device drivers.</para>

  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="driverbasics-kld">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Dynamic Kernel Linker Facility - KLD</title>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink">
      <primary xmlns:xlink="http://www.w3.org/1999/xlink">kernel linking</primary>
      <secondary xmlns:xlink="http://www.w3.org/1999/xlink">dynamic</secondary>
    </indexterm>
    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink">
      <primary xmlns:xlink="http://www.w3.org/1999/xlink">kernel loadable modules (KLD)</primary>
    </indexterm>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The kld interface allows system administrators to
      dynamically add and remove functionality from a running system.
      This allows device driver writers to load their new changes into
      a running kernel without constantly rebooting to test
      changes.</para>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink">
      <primary xmlns:xlink="http://www.w3.org/1999/xlink">kernel modules</primary>
      <secondary xmlns:xlink="http://www.w3.org/1999/xlink">loading</secondary>
    </indexterm>
    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink">
      <primary xmlns:xlink="http://www.w3.org/1999/xlink">kernel modules</primary>
      <secondary xmlns:xlink="http://www.w3.org/1999/xlink">unloading</secondary>
    </indexterm>
    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink">
      <primary xmlns:xlink="http://www.w3.org/1999/xlink">kernel modules</primary>
      <secondary xmlns:xlink="http://www.w3.org/1999/xlink">listing</secondary>
    </indexterm>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The kld interface is used through:</para>

    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<simpara xmlns:xlink="http://www.w3.org/1999/xlink"><command xmlns:xlink="http://www.w3.org/1999/xlink">kldload</command> - loads a new kernel
	  module</simpara></listitem>
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<simpara xmlns:xlink="http://www.w3.org/1999/xlink"><command xmlns:xlink="http://www.w3.org/1999/xlink">kldunload</command> - unloads a kernel
	  module</simpara></listitem>
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<simpara xmlns:xlink="http://www.w3.org/1999/xlink"><command xmlns:xlink="http://www.w3.org/1999/xlink">kldstat</command> - lists loaded
	  modules</simpara></listitem>
    </itemizedlist>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Skeleton Layout of a kernel module</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">/*
 * KLD Skeleton
 * Inspired by Andrew Reiter's Daemonnews article
 */

#include &lt;sys/types.h&gt;
#include &lt;sys/module.h&gt;
#include &lt;sys/systm.h&gt;  /* uprintf */
#include &lt;sys/errno.h&gt;
#include &lt;sys/param.h&gt;  /* defines used in kernel.h */
#include &lt;sys/kernel.h&gt; /* types used in module initialization */

/*
 * Load handler that deals with the loading and unloading of a KLD.
 */

static int
skel_loader(struct module *m, int what, void *arg)
{
  int err = 0;

  switch (what) {
  case MOD_LOAD:                /* kldload */
    uprintf("Skeleton KLD loaded.\n");
    break;
  case MOD_UNLOAD:
    uprintf("Skeleton KLD unloaded.\n");
    break;
  default:
    err = EOPNOTSUPP;
    break;
  }
  return(err);
}

/* Declare this module to the rest of the kernel */

static moduledata_t skel_mod = {
  "skel",
  skel_loader,
  NULL
};

DECLARE_MODULE(skeleton, skel_mod, SI_SUB_KLD, SI_ORDER_ANY);</programlisting>


    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Makefile</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">FreeBSD provides a system makefile to simplify compiling a
	kernel module.</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">SRCS=skeleton.c
KMOD=skeleton

.include &lt;bsd.kmod.mk&gt;</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Running <command xmlns:xlink="http://www.w3.org/1999/xlink">make</command> with this makefile
	will create a file <filename xmlns:xlink="http://www.w3.org/1999/xlink">skeleton.ko</filename> that can
	be loaded into the kernel by typing:</para>

      <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">kldload -v ./skeleton.ko</userinput></screen>
    </sect2>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="driverbasics-char">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Character Devices</title>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink">
      <primary xmlns:xlink="http://www.w3.org/1999/xlink">character devices</primary>
    </indexterm>
    <para xmlns:xlink="http://www.w3.org/1999/xlink">A character device driver is one that transfers data
      directly to and from a user process.  This is the most common
      type of device driver and there are plenty of simple examples in
      the source tree.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">This simple example pseudo-device remembers whatever values
      are written to it and can then echo them back when
      read.</para>

    <example xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Example of a Sample Echo Pseudo-Device Driver for
	FreeBSD 10.X</title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">/*
 * Simple Echo pseudo-device KLD
 *
 * Murray Stokely
 * Søren (Xride) Straarup
 * Eitan Adler
 */

#include &lt;sys/types.h&gt;
#include &lt;sys/module.h&gt;
#include &lt;sys/systm.h&gt;  /* uprintf */
#include &lt;sys/param.h&gt;  /* defines used in kernel.h */
#include &lt;sys/kernel.h&gt; /* types used in module initialization */
#include &lt;sys/conf.h&gt;   /* cdevsw struct */
#include &lt;sys/uio.h&gt;    /* uio struct */
#include &lt;sys/malloc.h&gt;

#define BUFFERSIZE 255

/* Function prototypes */
static d_open_t      echo_open;
static d_close_t     echo_close;
static d_read_t      echo_read;
static d_write_t     echo_write;

/* Character device entry points */
static struct cdevsw echo_cdevsw = {
	.d_version = D_VERSION,
	.d_open = echo_open,
	.d_close = echo_close,
	.d_read = echo_read,
	.d_write = echo_write,
	.d_name = "echo",
};

struct s_echo {
	char msg[BUFFERSIZE + 1];
	int len;
};

/* vars */
static struct cdev *echo_dev;
static struct s_echo *echomsg;

MALLOC_DECLARE(M_ECHOBUF);
MALLOC_DEFINE(M_ECHOBUF, "echobuffer", "buffer for echo module");

/*
 * This function is called by the kld[un]load(2) system calls to
 * determine what actions to take when a module is loaded or unloaded.
 */
static int
echo_loader(struct module *m __unused, int what, void *arg __unused)
{
	int error = 0;

	switch (what) {
	case MOD_LOAD:                /* kldload */
		error = make_dev_p(MAKEDEV_CHECKNAME | MAKEDEV_WAITOK,
		    &amp;echo_dev,
		    &amp;echo_cdevsw,
		    0,
		    UID_ROOT,
		    GID_WHEEL,
		    0600,
		    "echo");
		if (error != 0)
			break;

		echomsg = malloc(sizeof(*echomsg), M_ECHOBUF, M_WAITOK |
		    M_ZERO);
		printf("Echo device loaded.\n");
		break;
	case MOD_UNLOAD:
		destroy_dev(echo_dev);
		free(echomsg, M_ECHOBUF);
		printf("Echo device unloaded.\n");
		break;
	default:
		error = EOPNOTSUPP;
		break;
	}
	return (error);
}

static int
echo_open(struct cdev *dev __unused, int oflags __unused, int devtype __unused,
    struct thread *td __unused)
{
	int error = 0;

	uprintf("Opened device \"echo\" successfully.\n");
	return (error);
}

static int
echo_close(struct cdev *dev __unused, int fflag __unused, int devtype __unused,
    struct thread *td __unused)
{

	uprintf("Closing device \"echo\".\n");
	return (0);
}

/*
 * The read function just takes the buf that was saved via
 * echo_write() and returns it to userland for accessing.
 * uio(9)
 */
static int
echo_read(struct cdev *dev __unused, struct uio *uio, int ioflag __unused)
{
	size_t amt;
	int error;

	/*
	 * How big is this read operation?  Either as big as the user wants,
	 * or as big as the remaining data.  Note that the 'len' does not
	 * include the trailing null character.
	 */
	amt = MIN(uio-&gt;uio_resid, uio-&gt;uio_offset &gt;= echomsg-&gt;len + 1 ? 0 :
	    echomsg-&gt;len + 1 - uio-&gt;uio_offset);

	if ((error = uiomove(echomsg-&gt;msg, amt, uio)) != 0)
		uprintf("uiomove failed!\n");

	return (error);
}

/*
 * echo_write takes in a character string and saves it
 * to buf for later accessing.
 */
static int
echo_write(struct cdev *dev __unused, struct uio *uio, int ioflag __unused)
{
	size_t amt;
	int error;

	/*
	 * We either write from the beginning or are appending -- do
	 * not allow random access.
	 */
	if (uio-&gt;uio_offset != 0 &amp;&amp; (uio-&gt;uio_offset != echomsg-&gt;len))
		return (EINVAL);

	/* This is a new message, reset length */
	if (uio-&gt;uio_offset == 0)
		echomsg-&gt;len = 0;

	/* Copy the string in from user memory to kernel memory */
	amt = MIN(uio-&gt;uio_resid, (BUFFERSIZE - echomsg-&gt;len));

	error = uiomove(echomsg-&gt;msg + uio-&gt;uio_offset, amt, uio);

	/* Now we need to null terminate and record the length */
	echomsg-&gt;len = uio-&gt;uio_offset;
	echomsg-&gt;msg[echomsg-&gt;len] = 0;

	if (error != 0)
		uprintf("Write failed: bad address!\n");
	return (error);
}

DEV_MODULE(echo, echo_loader, NULL);</programlisting>
    </example>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">With this driver loaded try:</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">echo -n "Test Data" &gt; /dev/echo</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cat /dev/echo</userinput>
Opened device "echo" successfully.
Test Data
Closing device "echo".</screen>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Real hardware devices are described in the next
      chapter.</para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="driverbasics-block">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Block Devices (Are Gone)</title>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">block devices</primary></indexterm>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Other <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark> systems may support a second type of disk
      device known as block devices.  Block devices are disk devices
      for which the kernel provides caching.  This caching makes
      block-devices almost unusable, or at least dangerously
      unreliable.  The caching will reorder the sequence of write
      operations, depriving the application of the ability to know the
      exact disk contents at any one instant in time.  This makes
      predictable and reliable crash recovery of on-disk data
      structures (filesystems, databases etc.) impossible.  Since
      writes may be delayed, there is no way the kernel can report to
      the application which particular write operation encountered a
      write error, this further compounds the consistency problem.
      For this reason, no serious applications rely on block devices,
      and in fact, almost all applications which access disks directly
      take great pains to specify that character (or
      <quote xmlns:xlink="http://www.w3.org/1999/xlink">raw</quote>) devices should always be used.  Because the
      implementation of the aliasing of each disk (partition) to two
      devices with different semantics significantly complicated the
      relevant kernel code FreeBSD dropped support for cached disk
      devices as part of the modernization of the disk I/O
      infrastructure.</para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="driverbasics-net">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Network Drivers</title>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink">
      <primary xmlns:xlink="http://www.w3.org/1999/xlink">network devices</primary>
    </indexterm>
    <para xmlns:xlink="http://www.w3.org/1999/xlink">Drivers for network devices do not use device nodes in order
      to be accessed.  Their selection is based on other decisions
      made inside the kernel and instead of calling open(), use of a
      network device is generally introduced by using the system call
      socket(2).</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">For more information see ifnet(9), the source of the
      loopback device, and Bill Paul's network drivers.</para>
  </sect1>
</chapter>

    
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="isa-driver">
  <info><title xmlns:xlink="http://www.w3.org/1999/xlink">ISA Device Drivers</title>
    <authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
      <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Sergey</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Babkin</surname></personname><contrib xmlns:xlink="http://www.w3.org/1999/xlink">Written by </contrib></author>
    </authorgroup>
    <authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
      <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Murray</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Stokely</surname></personname><contrib xmlns:xlink="http://www.w3.org/1999/xlink">Modifications for Handbook made by </contrib></author>
      <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Valentino</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Vaschetto</surname></personname></author>
      <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Wylie</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Stilwell</surname></personname></author>
    </authorgroup>
  </info>

  

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="isa-driver-synopsis">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Synopsis</title>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">ISA</primary></indexterm>
    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">device driver</primary><secondary xmlns:xlink="http://www.w3.org/1999/xlink">ISA</secondary></indexterm>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">This chapter introduces the issues relevant to writing a
      driver for an ISA device.  The pseudo-code presented here is
      rather detailed and reminiscent of the real code but is still
      only pseudo-code. It avoids the details irrelevant to the
      subject of the discussion. The real-life examples can be found
      in the source code of real drivers. In particular the drivers
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">ep</literal> and <literal xmlns:xlink="http://www.w3.org/1999/xlink">aha</literal> are good sources of information.</para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="isa-driver-basics">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Basic Information</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">A typical ISA driver would need the following include
      files:</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">#include &lt;sys/module.h&gt;
#include &lt;sys/bus.h&gt;
#include &lt;machine/bus.h&gt;
#include &lt;machine/resource.h&gt;
#include &lt;sys/rman.h&gt;

#include &lt;isa/isavar.h&gt;
#include &lt;isa/pnpvar.h&gt;</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">They describe the things specific to the ISA and generic
      bus subsystem.</para>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">object-oriented</primary></indexterm>
    <para xmlns:xlink="http://www.w3.org/1999/xlink">The bus subsystem is implemented in an object-oriented
      fashion, its main structures are accessed by associated method
      functions.</para>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">bus methods</primary></indexterm>
    <para xmlns:xlink="http://www.w3.org/1999/xlink">The list of bus methods implemented by an ISA driver is like
      one for any other bus. For a hypothetical driver named <quote xmlns:xlink="http://www.w3.org/1999/xlink">xxx</quote>
      they would be:</para>

    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
        <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">static void xxx_isa_identify (driver_t *,
          device_t);</function> Normally used for bus drivers, not
          device drivers. But for ISA devices this method may have
          special use: if the device provides some device-specific
          (non-PnP) way to auto-detect devices this routine may
          implement it.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">static int xxx_isa_probe (device_t
          dev);</function> Probe for a device at a known (or PnP)
          location. This routine can also accommodate device-specific
          auto-detection of parameters for partially configured
          devices.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">static int xxx_isa_attach (device_t
          dev);</function> Attach and initialize device.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">static int xxx_isa_detach (device_t
          dev);</function> Detach device before unloading the driver
          module.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
        <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">static int xxx_isa_shutdown (device_t
          dev);</function> Execute shutdown of the device before
          system shutdown.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">static int xxx_isa_suspend (device_t
          dev);</function> Suspend the device before the system goes
          to the power-save state. May also abort transition to the
          power-save state.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">static int xxx_isa_resume (device_t
 	  dev);</function> Resume the device activity after return
 	  from power-save state.</para>
      </listitem>

    </itemizedlist>

    <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">xxx_isa_probe()</function> and
      <function xmlns:xlink="http://www.w3.org/1999/xlink">xxx_isa_attach()</function> are mandatory, the rest of
      the routines are optional, depending on the device's
      needs.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The driver is linked to the system with the following set of
      descriptions.</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    /* table of supported bus methods */
    static device_method_t xxx_isa_methods[] = {
        /* list all the bus method functions supported by the driver */
        /* omit the unsupported methods */
        DEVMETHOD(device_identify,  xxx_isa_identify),
        DEVMETHOD(device_probe,     xxx_isa_probe),
        DEVMETHOD(device_attach,    xxx_isa_attach),
        DEVMETHOD(device_detach,    xxx_isa_detach),
        DEVMETHOD(device_shutdown,  xxx_isa_shutdown),
        DEVMETHOD(device_suspend,   xxx_isa_suspend),
        DEVMETHOD(device_resume,    xxx_isa_resume),

	DEVMETHOD_END
    };

    static driver_t xxx_isa_driver = {
        "xxx",
        xxx_isa_methods,
        sizeof(struct xxx_softc),
    };


    static devclass_t xxx_devclass;

    DRIVER_MODULE(xxx, isa, xxx_isa_driver, xxx_devclass,
        load_function, load_argument);</programlisting>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">softc</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Here struct <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">xxx_softc</varname> is a
        device-specific structure that contains private driver data
        and descriptors for the driver's resources.  The bus code
        automatically allocates one softc descriptor per device as
        needed.</para>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">kernel module</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">If the driver is implemented as a loadable module then
        <function xmlns:xlink="http://www.w3.org/1999/xlink">load_function()</function> is called to do
        driver-specific initialization or clean-up when the driver is
        loaded or unloaded and load_argument is passed as one of its
        arguments.  If the driver does not support dynamic loading (in
        other words it must always be linked into the kernel) then these
        values should be set to 0 and the last definition would look
        like:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"> DRIVER_MODULE(xxx, isa, xxx_isa_driver,
       xxx_devclass, 0, 0);</programlisting>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">PnP</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">If the driver is for a device which supports PnP then a
        table of supported PnP IDs must be defined.  The table
        consists of a list of PnP IDs supported by this driver and
        human-readable descriptions of the hardware types and models
        having these IDs. It looks like:</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    static struct isa_pnp_id xxx_pnp_ids[] = {
        /* a line for each supported PnP ID */
        { 0x12345678,   "Our device model 1234A" },
        { 0x12345679,   "Our device model 1234B" },
        { 0,        NULL }, /* end of table */
    };</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">If the driver does not support PnP devices it still needs
        an empty PnP ID table, like:</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    static struct isa_pnp_id xxx_pnp_ids[] = {
        { 0,        NULL }, /* end of table */
    };</programlisting>

    </sect1>

    <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="isa-driver-device-t">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">device_t</varname> Pointer</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink"><varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">device_t</varname> is the pointer type for
	the device structure. Here we consider only the methods
	interesting from the device driver writer's standpoint.  The
	methods to manipulate values in the device structure
	are:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">

        <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">device_t
	  device_get_parent(dev)</function> Get the parent bus of a
	  device.</para></listitem>

        <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">driver_t
	  device_get_driver(dev)</function> Get pointer to its driver
	  structure.</para></listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">char
	  *device_get_name(dev)</function> Get the driver name, such
	  as <literal xmlns:xlink="http://www.w3.org/1999/xlink">"xxx"</literal> for our example.</para></listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">int device_get_unit(dev)</function>
	  Get the unit number (units are numbered from 0 for the
	  devices associated with each driver).</para></listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">char
	  *device_get_nameunit(dev)</function> Get the device name
	  including the unit number, such as <quote xmlns:xlink="http://www.w3.org/1999/xlink">xxx0</quote>, <quote xmlns:xlink="http://www.w3.org/1999/xlink">xxx1</quote> and so
	  on.</para></listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">char
	  *device_get_desc(dev)</function> Get the device
	  description. Normally it describes the exact model of device
	  in human-readable form.</para></listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">device_set_desc(dev,
	  desc)</function> Set the description. This makes the device
	  description point to the string desc which may not be
	  deallocated or changed after that.</para></listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">device_set_desc_copy(dev,
	  desc)</function> Set the description. The description is
	  copied into an internal dynamically allocated buffer, so the
	  string desc may be changed afterwards without adverse
	  effects.</para></listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">void
	  *device_get_softc(dev)</function> Get pointer to the device
	  descriptor (struct <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">xxx_softc</varname>)
	  associated with this device.</para></listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">u_int32_t
	  device_get_flags(dev)</function> Get the flags specified for
	  the device in the configuration file.</para></listitem>

      </itemizedlist>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">A convenience function <function xmlns:xlink="http://www.w3.org/1999/xlink">device_printf(dev, fmt,
	...)</function> may be used to print the messages from the
	device driver. It automatically prepends the unitname and
	colon to the message.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The device_t methods are implemented in the file
        <filename xmlns:xlink="http://www.w3.org/1999/xlink">kern/bus_subr.c</filename>.</para>

    </sect1>

    <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="isa-driver-config">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Configuration File and the Order of Identifying and Probing
	During Auto-Configuration</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">ISA</primary><secondary xmlns:xlink="http://www.w3.org/1999/xlink">probing</secondary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The ISA devices are described in the kernel configuration file
  	like:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">device xxx0 at isa? port 0x300 irq 10 drq 5
       iomem 0xd0000 flags 0x1 sensitive</programlisting>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">IRQ</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The values of port, IRQ and so on are converted to the
	resource values associated with the device. They are optional,
	depending on the device's needs and abilities for
	auto-configuration. For example, some devices do not need DRQ
	at all and some allow the driver to read the IRQ setting from
	the device configuration ports. If a machine has multiple ISA
	buses the exact bus may be specified in the configuration
	line, like <literal xmlns:xlink="http://www.w3.org/1999/xlink">isa0</literal> or <literal xmlns:xlink="http://www.w3.org/1999/xlink">isa1</literal>, otherwise the device would be
	searched for on all the ISA buses.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">sensitive</literal> is a resource requesting that this device must
	be probed before all non-sensitive devices. It is supported
	but does not seem to be used in any current driver.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">For legacy ISA devices in many cases the drivers are still
	able to detect the configuration parameters. But each device
	to be configured in the system must have a config line. If two
	devices of some type are installed in the system but there is
	only one configuration line for the corresponding driver, ie:
	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">device xxx0 at isa?</programlisting> then only
	one device will be configured.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">But for the devices supporting automatic identification by
	the means of Plug-n-Play or some proprietary protocol one
	configuration line is enough to configure all the devices in
	the system, like the one above or just simply:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">device xxx at isa?</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">If a driver supports both auto-identified and legacy
	devices and both kinds are installed at once in one machine
	then it is enough to describe in the config file the legacy
	devices only. The auto-identified devices will be added
	automatically.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">When an ISA bus is auto-configured the events happen as
  	follows:</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">All the drivers' identify routines (including the PnP
	identify routine which identifies all the PnP devices) are
	called in random order.  As they identify the devices they add
	them to the list on the ISA bus.  Normally the drivers'
	identify routines associate their drivers with the new
	devices. The PnP identify routine does not know about the
	other drivers yet so it does not associate any with the new
	devices it adds.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The PnP devices are put to sleep using the PnP protocol to
        prevent them from being probed as legacy devices.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The probe routines of non-PnP devices marked as
        <literal xmlns:xlink="http://www.w3.org/1999/xlink">sensitive</literal> are called.  If probe for a device went
        successfully, the attach routine is called for it.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The probe and attach routines of all non-PNP devices are
  	called likewise.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The PnP devices are brought back from the sleep state and
        assigned the resources they request: I/O and memory address
        ranges, IRQs and DRQs, all of them not conflicting with the
        attached legacy devices.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Then for each PnP device the probe routines of all the
        present ISA drivers are called. The first one that claims the
        device gets attached.  It is possible that multiple drivers
        would claim the device with different priority; in this case, the
        highest-priority driver wins.  The probe routines must call
        <function xmlns:xlink="http://www.w3.org/1999/xlink">ISA_PNP_PROBE()</function> to compare the actual PnP
        ID with the list of the IDs supported by the driver and if the
        ID is not in the table return failure. That means that
        absolutely every driver, even the ones not supporting any PnP
        devices must call <function xmlns:xlink="http://www.w3.org/1999/xlink">ISA_PNP_PROBE()</function>, at
        least with an empty PnP ID table to return failure on unknown
        PnP devices.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The probe routine returns a positive value (the error
        code) on error, zero or negative value on success.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The negative return values are used when a PnP device
        supports multiple interfaces. For example, an older
        compatibility interface and a newer advanced interface which
        are supported by different drivers. Then both drivers would
        detect the device. The driver which returns a higher value in
        the probe routine takes precedence (in other words, the driver
        returning 0 has highest precedence, returning -1 is next,
        returning -2 is after it and so on). In result the devices
        which support only the old interface will be handled by the
        old driver (which should return -1 from the probe routine)
        while the devices supporting the new interface as well will be
        handled by the new driver (which should return 0 from the
        probe routine). If multiple drivers return the same value then
        the one called first wins. So if a driver returns value 0 it
        may be sure that it won the priority arbitration.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The device-specific identify routines can also assign not
        a driver but a class of drivers to the device. Then all the
        drivers in the class are probed for this device, like the case
        with PnP. This feature is not implemented in any existing
        driver and is not considered further in this document.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Because the PnP devices are disabled when probing the
        legacy devices they will not be attached twice (once as legacy
        and once as PnP).  But in case of device-dependent identify
        routines it is the responsibility of the driver to make sure
        that the same device will not be attached by the driver twice:
        once as legacy user-configured and once as
        auto-identified.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Another practical consequence for the auto-identified
        devices (both PnP and device-specific) is that the flags can
        not be passed to them from the kernel configuration file. So
        they must either not use the flags at all or use the flags
        from the device unit 0 for all the auto-identified devices or
        use the sysctl interface instead of flags.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Other unusual configurations may be accommodated by
        accessing the configuration resources directly with functions
        of families <function xmlns:xlink="http://www.w3.org/1999/xlink">resource_query_*()</function> and
        <function xmlns:xlink="http://www.w3.org/1999/xlink">resource_*_value()</function>. Their implementations
        are located in <filename xmlns:xlink="http://www.w3.org/1999/xlink">kern/subr_bus.c</filename>. The old IDE disk driver
        <filename xmlns:xlink="http://www.w3.org/1999/xlink">i386/isa/wd.c</filename> contains examples of such use. But the standard
        means of configuration must always be preferred. Leave parsing
        the configuration resources to the bus configuration
        code.</para>

    </sect1>

    <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="isa-driver-resources">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Resources</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">resources</primary></indexterm>
      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">device driver</primary><secondary xmlns:xlink="http://www.w3.org/1999/xlink">resources</secondary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The information that a user enters into the kernel
        configuration file is processed and passed to the kernel as
        configuration resources. This information is parsed by the bus
        configuration code and transformed into a value of structure
        device_t and the bus resources associated with it. The drivers
        may access the configuration resources directly using
        functions <function xmlns:xlink="http://www.w3.org/1999/xlink">resource_*</function> for more complex cases of
        configuration. However, generally this is neither needed nor recommended,
        so this issue is not discussed further here.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The bus resources are associated with each device. They
        are identified by type and number within the type. For the ISA
        bus the following types are defined:</para>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">DMA channel</primary></indexterm>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">SYS_RES_IRQ</emphasis> - interrupt
	    number</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">SYS_RES_DRQ</emphasis> - ISA DMA channel
	    number</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">SYS_RES_MEMORY</emphasis> - range of
	    device memory mapped into the system memory space
	  </para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">SYS_RES_IOPORT</emphasis> - range of
	    device I/O registers</para>
        </listitem>
      </itemizedlist>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The enumeration within types starts from 0, so if a device
        has two memory regions it would have resources of type
        <literal xmlns:xlink="http://www.w3.org/1999/xlink">SYS_RES_MEMORY</literal> numbered 0 and 1.  The resource type has
        nothing to do with the C language type, all the resource
        values have the C language type <literal xmlns:xlink="http://www.w3.org/1999/xlink">unsigned long</literal> and must be
        cast as necessary. The resource numbers do not have to be
        contiguous, although for ISA they normally would be. The
        permitted resource numbers for ISA devices are:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">          IRQ: 0-1
          DRQ: 0-1
          MEMORY: 0-3
          IOPORT: 0-7</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">All the resources are represented as ranges, with a start
        value and count.  For IRQ and DRQ resources the count would
        normally be equal to 1. The values for memory refer to the
        physical addresses.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Three types of activities can be performed on
        resources:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">set/get</para></listitem>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">allocate/release</para></listitem>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">activate/deactivate</para></listitem>
      </itemizedlist>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Setting sets the range used by the resource. Allocation
        reserves the requested range that no other driver would be
        able to reserve it (and checking that no other driver reserved
        this range already). Activation makes the resource accessible
        to the driver by doing whatever is necessary for that (for
        example, for memory it would be mapping into the kernel
        virtual address space).</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The functions to manipulate resources are:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">int bus_set_resource(device_t dev, int type,
            int rid, u_long start, u_long count)</function></para>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Set a range for a resource. Returns 0 if successful,
            error code otherwise.  Normally, this function will
            return an error only if one of <literal xmlns:xlink="http://www.w3.org/1999/xlink">type</literal>,
            <literal xmlns:xlink="http://www.w3.org/1999/xlink">rid</literal>, <literal xmlns:xlink="http://www.w3.org/1999/xlink">start</literal> or
            <literal xmlns:xlink="http://www.w3.org/1999/xlink">count</literal> has a value that falls out of the
            permitted range.</para>

          <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
            <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
              <para xmlns:xlink="http://www.w3.org/1999/xlink"> dev - driver's device</para>
            </listitem>
            <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
              <para xmlns:xlink="http://www.w3.org/1999/xlink"> type - type of resource, SYS_RES_* </para>
            </listitem>
            <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
              <para xmlns:xlink="http://www.w3.org/1999/xlink"> rid - resource number (ID) within type </para>
            </listitem>
            <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
              <para xmlns:xlink="http://www.w3.org/1999/xlink"> start, count - resource range </para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">int bus_get_resource(device_t dev, int type,
          int rid, u_long *startp, u_long *countp)</function></para>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Get the range of resource. Returns 0 if successful,
            error code if the resource is not defined yet.</para>
        </listitem>

        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">u_long bus_get_resource_start(device_t dev,
            int type, int rid) u_long bus_get_resource_count (device_t
            dev, int type, int rid)</function></para>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Convenience functions to get only the start or
            count. Return 0 in case of error, so if the resource start
            has 0 among the legitimate values it would be impossible
            to tell if the value is 0 or an error occurred.  Luckily,
            no ISA resources for add-on drivers may have a start value
            equal to 0.</para>
        </listitem>

        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">void bus_delete_resource(device_t dev, int
            type, int rid)</function></para>
          <para xmlns:xlink="http://www.w3.org/1999/xlink"> Delete a resource, make it undefined.</para>
        </listitem>

        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">struct resource *
            bus_alloc_resource(device_t dev, int type, int *rid,
            u_long start, u_long end, u_long count, u_int
            flags)</function></para>

          <para xmlns:xlink="http://www.w3.org/1999/xlink">Allocate a resource as a range of count values not
            allocated by anyone else, somewhere between start and
            end. Alas, alignment is not supported.  If the resource
            was not set yet it is automatically created. The special
            values of start 0 and end ~0 (all ones) means that the
            fixed values previously set by
            <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_set_resource()</function> must be used
            instead: start and count as themselves and
            end=(start+count), in this case if the resource was not
            defined before then an error is returned.  Although rid is
            passed by reference it is not set anywhere by the resource
            allocation code of the ISA bus. (The other buses may use a
            different approach and modify it).</para>
        </listitem>
      </itemizedlist>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Flags are a bitmap, the flags interesting for the caller
        are:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">RF_ACTIVE</emphasis> - causes the resource
            to be automatically activated after allocation.</para>
        </listitem>

        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">RF_SHAREABLE</emphasis> - resource may be
            shared at the same time by multiple drivers.</para>
        </listitem>

        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">RF_TIMESHARE</emphasis> - resource may be
            time-shared by multiple drivers, i.e., allocated at the
            same time by many but activated only by one at any given
            moment of time.</para>
        </listitem>
<!-- XXXDONT KNOW IT THESE SHOULD BE TWO SEPARATE LISTS OR NOT -->
        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink">Returns 0 on error. The allocated values may be
            obtained from the returned handle using methods
            <function xmlns:xlink="http://www.w3.org/1999/xlink">rhand_*()</function>.</para>
        </listitem>
        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">int bus_release_resource(device_t dev, int
            type, int rid, struct resource *r)</function></para>
	</listitem>

        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink">Release the resource, r is the handle returned by
            <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_alloc_resource()</function>.  Returns 0 on
            success, error code otherwise.</para>
        </listitem>

        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">int bus_activate_resource(device_t dev, int
            type, int rid, struct resource *r)</function>
            <function xmlns:xlink="http://www.w3.org/1999/xlink">int bus_deactivate_resource(device_t dev, int
            type, int rid, struct resource *r)</function></para>
        </listitem>

        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink">Activate or deactivate resource. Return 0 on success,
            error code otherwise.  If the resource is time-shared and
            currently activated by another driver then <literal xmlns:xlink="http://www.w3.org/1999/xlink">EBUSY</literal> is
            returned.</para>
        </listitem>

        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">int bus_setup_intr(device_t dev, struct
            resource *r, int flags, driver_intr_t *handler, void *arg,
            void **cookiep)</function> <function xmlns:xlink="http://www.w3.org/1999/xlink">int
            bus_teardown_intr(device_t dev, struct resource *r, void
            *cookie)</function></para>
        </listitem>

        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink">Associate or de-associate the interrupt handler with a
            device. Return 0 on success, error code otherwise.</para>
        </listitem>

        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink">r - the activated resource handler describing the
            IRQ</para>
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">flags - the interrupt priority level, one of:</para>

          <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
            <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
              <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">INTR_TYPE_TTY</function> - terminals and
                other likewise character-type devices. To mask them
                use <function xmlns:xlink="http://www.w3.org/1999/xlink">spltty()</function>.</para>
            </listitem>
            <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
              <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">(INTR_TYPE_TTY |
                INTR_TYPE_FAST)</function> - terminal type devices
                with small input buffer, critical to the data loss on
                input (such as the old-fashioned serial ports). To
                mask them use <function xmlns:xlink="http://www.w3.org/1999/xlink">spltty()</function>.</para>
            </listitem>
            <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
              <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">INTR_TYPE_BIO</function> - block-type
                devices, except those on the CAM controllers. To mask
                them use <function xmlns:xlink="http://www.w3.org/1999/xlink">splbio()</function>.</para>
            </listitem>
            <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
              <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">INTR_TYPE_CAM</function> - CAM (Common
                Access Method) bus controllers. To mask them use
                <function xmlns:xlink="http://www.w3.org/1999/xlink">splcam()</function>.</para>
             </listitem>
             <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
               <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">INTR_TYPE_NET</function> - network
                interface controllers. To mask them use
                <function xmlns:xlink="http://www.w3.org/1999/xlink">splimp()</function>.</para>
             </listitem>
             <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
               <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">INTR_TYPE_MISC</function> -
                miscellaneous devices.  There is no other way to mask
                them than by <function xmlns:xlink="http://www.w3.org/1999/xlink">splhigh()</function> which
                masks all interrupts.</para>
             </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">When an interrupt handler executes all the other
        interrupts matching its priority level will be masked. The
        only exception is the MISC level for which no other interrupts
        are masked and which is not masked by any other
        interrupt.</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">handler</emphasis> - pointer to the handler
            function, the type driver_intr_t is defined as <function xmlns:xlink="http://www.w3.org/1999/xlink">void
            driver_intr_t(void *)</function></para>
        </listitem>
        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">arg</emphasis> - the argument passed to the
            handler to identify this particular device. It is cast
            from void* to any real type by the handler. The old
            convention for the ISA interrupt handlers was to use the
            unit number as argument, the new (recommended) convention
            is using a pointer to the device softc structure.</para>
        </listitem>
        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">cookie[p]</emphasis> - the value received
            from <function xmlns:xlink="http://www.w3.org/1999/xlink">setup()</function> is used to identify the
            handler when passed to
            <function xmlns:xlink="http://www.w3.org/1999/xlink">teardown()</function></para>
        </listitem>
      </itemizedlist>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">A number of methods are defined to operate on the resource
        handlers (struct resource *). Those of interest to the device
        driver writers are:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">u_long rman_get_start(r) u_long
            rman_get_end(r)</function> Get the start and end of
            allocated resource range.</para>
        </listitem>
        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">void *rman_get_virtual(r)</function> Get
            the virtual address of activated memory resource.</para>
        </listitem>
      </itemizedlist>

    </sect1>

    <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="isa-driver-busmem">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Bus Memory Mapping</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">In many cases data is exchanged between the driver and the
        device through the memory. Two variants are possible:</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">(a) memory is located on the device card</para>
      <para xmlns:xlink="http://www.w3.org/1999/xlink">(b) memory is the main memory of the computer</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">In case (a) the driver always copies the data back and
        forth between the on-card memory and the main memory as
        necessary. To map the on-card memory into the kernel virtual
        address space the physical address and length of the on-card
        memory must be defined as a <literal xmlns:xlink="http://www.w3.org/1999/xlink">SYS_RES_MEMORY</literal> resource. That
        resource can then be allocated and activated, and its virtual
        address obtained using
        <function xmlns:xlink="http://www.w3.org/1999/xlink">rman_get_virtual()</function>.  The older drivers
        used the function <function xmlns:xlink="http://www.w3.org/1999/xlink">pmap_mapdev()</function> for this
        purpose, which should not be used directly any more. Now it is
        one of the internal steps of resource activation.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Most of the ISA cards will have their memory configured
        for physical location somewhere in range 640KB-1MB. Some of
        the ISA cards require larger memory ranges which should be
        placed somewhere under 16MB (because of the 24-bit address
        limitation on the ISA bus). In that case if the machine has
        more memory than the start address of the device memory (in
        other words, they overlap) a memory hole must be configured at
        the address range used by devices. Many BIOSes allow
        configuration of a memory hole of 1MB starting at 14MB or
        15MB. FreeBSD can handle the memory holes properly if the BIOS
        reports them properly (this feature may be broken on old BIOSes).</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">In case (b) just the address of the data is sent to
        the device, and the device uses DMA to actually access the
        data in the main memory. Two limitations are present: First,
        ISA cards can only access memory below 16MB.  Second, the
        contiguous pages in virtual address space may not be
        contiguous in physical address space, so the device may have
        to do scatter/gather operations. The bus subsystem provides
        ready solutions for some of these problems, the rest has to be
        done by the drivers themselves.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Two structures are used for DMA memory allocation,
        <varname xmlns:xlink="http://www.w3.org/1999/xlink">bus_dma_tag_t</varname> and <varname xmlns:xlink="http://www.w3.org/1999/xlink">bus_dmamap_t</varname>. Tag describes the properties
        required for the DMA memory. Map represents a memory block
        allocated according to these properties. Multiple maps may be
        associated with the same tag.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Tags are organized into a tree-like hierarchy with
        inheritance of the properties. A child tag inherits all the
        requirements of its parent tag, and may make them more strict
        but never more loose.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Normally one top-level tag (with no parent) is created for
        each device unit.  If multiple memory areas with different
        requirements are needed for each device then a tag for each of
        them may be created as a child of the parent tag.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The tags can be used to create a map in two ways.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">First, a chunk of contiguous memory conformant with the
        tag requirements may be allocated (and later may be
        freed). This is normally used to allocate relatively
        long-living areas of memory for communication with the
        device. Loading of such memory into a map is trivial: it is
        always considered as one chunk in the appropriate physical
        memory range.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Second, an arbitrary area of virtual memory may be loaded
        into a map. Each page of this memory will be checked for
        conformance to the map requirement.  If it conforms then it is
        left at its original location. If it is not then a fresh
        conformant <quote xmlns:xlink="http://www.w3.org/1999/xlink">bounce page</quote> is allocated and used as intermediate
        storage. When writing the data from the non-conformant
        original pages they will be copied to their bounce pages first
        and then transferred from the bounce pages to the device. When
        reading the data would go from the device to the bounce pages
        and then copied to their non-conformant original pages. The
        process of copying between the original and bounce pages is
        called synchronization. This is normally used on a per-transfer
        basis: buffer for each transfer would be loaded, transfer done
        and buffer unloaded.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The functions working on the DMA memory are:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
        <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">int bus_dma_tag_create(bus_dma_tag_t parent,
          bus_size_t alignment, bus_size_t boundary, bus_addr_t
          lowaddr, bus_addr_t highaddr, bus_dma_filter_t *filter, void
          *filterarg, bus_size_t maxsize, int nsegments, bus_size_t
          maxsegsz, int flags, bus_dma_tag_t *dmat)</function></para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Create a new tag. Returns 0 on success, the error code
          otherwise.</para>

        <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
            <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">parent</emphasis> - parent tag, or NULL to
              create a top-level tag.</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
            <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">alignment</emphasis> -
              required physical alignment of the memory area to be
              allocated for this tag. Use value 1 for <quote xmlns:xlink="http://www.w3.org/1999/xlink">no specific
              alignment</quote>. Applies only to the future
              <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_dmamem_alloc()</function> but not
              <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_dmamap_create()</function> calls.</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
              <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">boundary</emphasis> - physical address
              boundary that must not be crossed when allocating the
              memory. Use value 0 for <quote xmlns:xlink="http://www.w3.org/1999/xlink">no boundary</quote>. Applies only to
              the future <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_dmamem_alloc()</function> but
              not <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_dmamap_create()</function> calls.
              Must be power of 2. If the memory is planned to be used
              in non-cascaded DMA mode (i.e., the DMA addresses will be
              supplied not by the device itself but by the ISA DMA
              controller) then the boundary must be no larger than
              64KB (64*1024) due to the limitations of the DMA
              hardware.</para>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
            <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">lowaddr, highaddr</emphasis> - the names
              are slightly misleading; these values are used to limit
              the permitted range of physical addresses used to
              allocate the memory.  The exact meaning varies depending
              on the planned future use:</para>

            <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">For <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_dmamem_alloc()</function> all
                  the addresses from 0 to lowaddr-1 are considered
                  permitted, the higher ones are forbidden.</para>
              </listitem>

              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">For <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_dmamap_create()</function> all
                  the addresses outside the inclusive range [lowaddr;
                  highaddr] are considered accessible. The addresses
                  of pages inside the range are passed to the filter
                  function which decides if they are accessible. If no
                  filter function is supplied then all the range is
                  considered unaccessible.</para>
              </listitem>

              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">For the ISA devices the normal values (with no
                  filter function) are:</para>
                <para xmlns:xlink="http://www.w3.org/1999/xlink">lowaddr = BUS_SPACE_MAXADDR_24BIT</para>
                <para xmlns:xlink="http://www.w3.org/1999/xlink">highaddr = BUS_SPACE_MAXADDR</para>
              </listitem>
            </itemizedlist>

          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
            <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">filter, filterarg</emphasis> - the filter
              function and its argument. If NULL is passed for filter
              then the whole range [lowaddr, highaddr] is considered
              unaccessible when doing
              <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_dmamap_create()</function>.  Otherwise the
              physical address of each attempted page in range
              [lowaddr; highaddr] is passed to the filter function
              which decides if it is accessible. The prototype of the
              filter function is: <function xmlns:xlink="http://www.w3.org/1999/xlink">int filterfunc(void *arg,
              bus_addr_t paddr)</function>. It must return 0 if the
              page is accessible, non-zero otherwise.</para>
          </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
            <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">maxsize</emphasis> - the maximal size of
              memory (in bytes) that may be allocated through this
              tag. In case it is difficult to estimate or could be
              arbitrarily big, the value for ISA devices would be
              <literal xmlns:xlink="http://www.w3.org/1999/xlink">BUS_SPACE_MAXSIZE_24BIT</literal>.</para>
          </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
            <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">nsegments</emphasis> - maximal number of
              scatter-gather segments supported by the device. If
              unrestricted then the value <literal xmlns:xlink="http://www.w3.org/1999/xlink">BUS_SPACE_UNRESTRICTED</literal>
              should be used. This value is recommended for the parent
              tags, the actual restrictions would then be specified
              for the descendant tags. Tags with nsegments equal to
              <literal xmlns:xlink="http://www.w3.org/1999/xlink">BUS_SPACE_UNRESTRICTED</literal> may not be used to actually load
              maps, they may be used only as parent tags. The
              practical limit for nsegments seems to be about 250-300,
              higher values will cause kernel stack overflow (the hardware
	      can not normally support that many
              scatter-gather buffers anyway).</para>
          </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
            <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">maxsegsz</emphasis> - maximal size of a
              scatter-gather segment supported by the device. The
              maximal value for ISA device would be
              <literal xmlns:xlink="http://www.w3.org/1999/xlink">BUS_SPACE_MAXSIZE_24BIT</literal>.</para>
          </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
            <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">flags</emphasis> - a bitmap of flags. The
              only interesting flags are:</para>

	    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">BUS_DMA_ALLOCNOW</emphasis> - requests
                  to allocate all the potentially needed bounce pages
                  when creating the tag.</para>
              </listitem>

	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	        <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">BUS_DMA_ISA</emphasis> - mysterious
                  flag used only on Alpha machines. It is not defined
                  for the i386 machines.  Probably it should be used
                  by all the ISA drivers for Alpha machines but it
                  looks like there are no such drivers yet.</para>
              </listitem>
	    </itemizedlist>
	  </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
            <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">dmat</emphasis> - pointer to the storage
              for the new tag to be returned.</para>
          </listitem>

	</itemizedlist>

      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink"> <!-- Second entry in list alpha -->
        <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">int bus_dma_tag_destroy(bus_dma_tag_t
	  dmat)</function></para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Destroy a tag. Returns 0 on success, the error code
	  otherwise.</para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">dmat - the tag to be destroyed.</para>

      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink"> <!-- Third entry in list alpha -->
        <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">int bus_dmamem_alloc(bus_dma_tag_t dmat,
          void** vaddr, int flags, bus_dmamap_t
          *mapp)</function></para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Allocate an area of contiguous memory described by the
          tag. The size of memory to be allocated is tag's maxsize.
          Returns 0 on success, the error code otherwise. The result
          still has to be loaded by
          <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_dmamap_load()</function> before being used to get
          the physical address of the memory.</para>

            <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">
                  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">dmat</emphasis> - the tag
                </para>
              </listitem>
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">
                  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">vaddr</emphasis> - pointer to the storage
                  for the kernel virtual address of the allocated area
                  to be returned.
                 </para>
              </listitem>
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">
                  flags - a bitmap of flags. The only interesting flag is:
                </para>
                <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
                  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                    <para xmlns:xlink="http://www.w3.org/1999/xlink">
                      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">BUS_DMA_NOWAIT</emphasis> - if the
                      memory is not immediately available return the
                      error. If this flag is not set then the routine
                      is allowed to sleep until the memory
                      becomes available.
                    </para>
                  </listitem>
                </itemizedlist>
              </listitem>
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">
                  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">mapp</emphasis> - pointer to the storage
                  for the new map to be returned.
                </para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink"> <!-- Fourth entry in list alpha -->
            <para xmlns:xlink="http://www.w3.org/1999/xlink">
              <function xmlns:xlink="http://www.w3.org/1999/xlink">void bus_dmamem_free(bus_dma_tag_t dmat, void
              *vaddr, bus_dmamap_t map)</function>
            </para>
            <para xmlns:xlink="http://www.w3.org/1999/xlink">
              Free the memory allocated by
              <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_dmamem_alloc()</function>. At present,
              freeing of the memory allocated with ISA restrictions is
              not implemented.  Because of this the recommended model
              of use is to keep and re-use the allocated areas for as
              long as possible. Do not lightly free some area and then
              shortly allocate it again. That does not mean that
              <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_dmamem_free()</function> should not be
              used at all: hopefully it will be properly implemented
              soon.
            </para>

            <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">dmat</emphasis> - the tag
                </para>
              </listitem>
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">
                  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">vaddr</emphasis> - the kernel virtual
                  address of the memory
                </para>
              </listitem>
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">
                  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">map</emphasis> - the map of the memory (as
                  returned from
                  <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_dmamem_alloc()</function>)
                </para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink"> <!-- The fifth entry in list alpha -->
            <para xmlns:xlink="http://www.w3.org/1999/xlink">
              <function xmlns:xlink="http://www.w3.org/1999/xlink">int bus_dmamap_create(bus_dma_tag_t dmat, int
              flags, bus_dmamap_t *mapp)</function>
            </para>
            <para xmlns:xlink="http://www.w3.org/1999/xlink">
              Create a map for the tag, to be used in
              <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_dmamap_load()</function> later.  Returns 0
              on success, the error code otherwise.
            </para>
            <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">
                  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">dmat</emphasis> - the tag
                </para>
              </listitem>
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">
                  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">flags</emphasis> - theoretically, a bit map
                  of flags. But no flags are defined yet, so at present
                  it will be always 0.
                </para>
              </listitem>
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">
                  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">mapp</emphasis> - pointer to the storage
                  for the new map to be returned
                </para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink"> <!-- Sixth entry in the alpha list -->
            <para xmlns:xlink="http://www.w3.org/1999/xlink">
              <function xmlns:xlink="http://www.w3.org/1999/xlink">int bus_dmamap_destroy(bus_dma_tag_t dmat,
              bus_dmamap_t map)</function>
            </para>
            <para xmlns:xlink="http://www.w3.org/1999/xlink">
              Destroy a map. Returns 0 on success, the error code otherwise.
            </para>

            <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">
                  dmat - the tag to which the map is associated
                </para>
              </listitem>
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">
                  map - the map to be destroyed
                </para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink"> <!-- Seventh entry in list alpha -->
            <para xmlns:xlink="http://www.w3.org/1999/xlink">
              <function xmlns:xlink="http://www.w3.org/1999/xlink">int bus_dmamap_load(bus_dma_tag_t dmat,
              bus_dmamap_t map, void *buf, bus_size_t buflen,
              bus_dmamap_callback_t *callback, void *callback_arg, int
              flags)</function>
            </para>
            <para xmlns:xlink="http://www.w3.org/1999/xlink">
              Load a buffer into the map (the map must be previously
              created by <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_dmamap_create()</function> or
              <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_dmamem_alloc()</function>).  All the pages
              of the buffer are checked for conformance to the tag
              requirements and for those not conformant the bounce
              pages are allocated. An array of physical segment
              descriptors is built and passed to the callback
              routine. This callback routine is then expected to
              handle it in some way. The number of bounce buffers in
              the system is limited, so if the bounce buffers are
              needed but not immediately available the request will be
              queued and the callback will be called when the bounce
              buffers will become available. Returns 0 if the callback
              was executed immediately or <errorname xmlns:xlink="http://www.w3.org/1999/xlink">EINPROGRESS</errorname> if the request
              was queued for future execution. In the latter case the
              synchronization with queued callback routine is the
              responsibility of the driver.
            </para>
            <!--<blockquote>-->
            <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">
                  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">dmat</emphasis> - the tag
                </para>
              </listitem>
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">
                  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">map</emphasis> - the map
                </para>
              </listitem>
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">
                  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">buf</emphasis> - kernel virtual address of
                  the buffer
                </para>
              </listitem>
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">
                  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">buflen</emphasis> - length of the buffer
                </para>
              </listitem>
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">
                  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">callback</emphasis>,<function xmlns:xlink="http://www.w3.org/1999/xlink">
                  callback_arg</function> - the callback function and
                  its argument
                </para>
              </listitem>
            </itemizedlist>
            <!--</blockquote>-->
            <para xmlns:xlink="http://www.w3.org/1999/xlink">
              The prototype of callback function is:
            </para>
            <para xmlns:xlink="http://www.w3.org/1999/xlink">
              <function xmlns:xlink="http://www.w3.org/1999/xlink">void callback(void *arg, bus_dma_segment_t
              *seg, int nseg, int error)</function>
            </para>
            <!--     <blockquote> -->
            <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">
                  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">arg</emphasis> - the same as callback_arg
                  passed to <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_dmamap_load()</function>
                </para>
              </listitem>
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">
                  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">seg</emphasis> - array of the segment
                  descriptors
                </para>
              </listitem>
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">
                  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">nseg</emphasis> - number of descriptors in
                  array
                </para>
              </listitem>
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">
                  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">error</emphasis> - indication of the
                  segment number overflow: if it is set to <errorname xmlns:xlink="http://www.w3.org/1999/xlink">EFBIG</errorname> then
                  the buffer did not fit into the maximal number of
                  segments permitted by the tag. In this case only the
                  permitted number of descriptors will be in the
                  array. Handling of this situation is up to the
                  driver: depending on the desired semantics it can
                  either consider this an error or split the buffer in
                  two and handle the second part separately
                </para>
              </listitem>
            </itemizedlist>
            <!--     </blockquote>  -->
            <para xmlns:xlink="http://www.w3.org/1999/xlink">
              Each entry in the segments array contains the fields:
            </para>

            <!--   <blockquote> -->
            <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">
                  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">ds_addr</emphasis> - physical bus address
                  of the segment
                </para>
              </listitem>
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">
                  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">ds_len</emphasis> - length of the segment
                </para>
              </listitem>
            </itemizedlist>
            <!--   </blockquote>-->
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink"> <!-- Eighth entry in alpha list -->
            <para xmlns:xlink="http://www.w3.org/1999/xlink">
              <function xmlns:xlink="http://www.w3.org/1999/xlink">void bus_dmamap_unload(bus_dma_tag_t dmat,
              bus_dmamap_t map)</function>
            </para>
            <para xmlns:xlink="http://www.w3.org/1999/xlink">unload the map.
            </para>
            <!--  <blockquote>  -->
            <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">
                  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">dmat</emphasis> - tag
                </para>
              </listitem>
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">
                  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">map</emphasis> - loaded map
                </para>
              </listitem>
            </itemizedlist>
            <!--  </blockquote>  -->
          </listitem>

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink"> <!-- Ninth entry list alpha -->
            <para xmlns:xlink="http://www.w3.org/1999/xlink">
              <function xmlns:xlink="http://www.w3.org/1999/xlink">void bus_dmamap_sync (bus_dma_tag_t dmat,
              bus_dmamap_t map, bus_dmasync_op_t op)</function>
            </para>
            <para xmlns:xlink="http://www.w3.org/1999/xlink">
              Synchronise a loaded buffer with its bounce pages before
              and after physical transfer to or from device. This is
              the function that does all the necessary copying of data
              between the original buffer and its mapped version. The
              buffers must be synchronized both before and after doing
              the transfer.
            </para>
            <!--  <blockquote> -->
            <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">
                  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">dmat</emphasis> - tag
                </para>
              </listitem>
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">
                  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">map</emphasis> - loaded map
                </para>
              </listitem>
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">
                  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">op</emphasis> - type of synchronization
                  operation to perform:
                </para>
              </listitem>
            </itemizedlist>
            <!-- <blockquote> -->
            <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">
                  <function xmlns:xlink="http://www.w3.org/1999/xlink">BUS_DMASYNC_PREREAD</function> - before
                  reading from device into buffer
                </para>
              </listitem>
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">
                  <function xmlns:xlink="http://www.w3.org/1999/xlink">BUS_DMASYNC_POSTREAD</function> - after
                  reading from device into buffer
                </para>
              </listitem>
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">
                  <function xmlns:xlink="http://www.w3.org/1999/xlink">BUS_DMASYNC_PREWRITE</function> - before
                  writing the buffer to device
                </para>
              </listitem>
              <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                <para xmlns:xlink="http://www.w3.org/1999/xlink">
                  <function xmlns:xlink="http://www.w3.org/1999/xlink">BUS_DMASYNC_POSTWRITE</function> - after
                  writing the buffer to device
                </para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>   <!-- End of list alpha -->
<!-- </blockquote>
</blockquote> -->

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          As of now PREREAD and POSTWRITE are null operations but that
          may change in the future, so they must not be ignored in the
          driver. Synchronization is not needed for the memory
          obtained from <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_dmamem_alloc()</function>.
        </para>
        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          Before calling the callback function from
          <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_dmamap_load()</function> the segment array is
          stored in the stack. And it gets pre-allocated for the
          maximal number of segments allowed by the tag. Because of
          this the practical limit for the number of segments on i386
          architecture is about 250-300 (the kernel stack is 4KB minus
          the size of the user structure, size of a segment array
          entry is 8 bytes, and some space must be left). Because the
          array is allocated based on the maximal number this value
          must not be set higher than really needed. Fortunately, for
          most of hardware the maximal supported number of segments is
          much lower. But if the driver wants to handle buffers with a
          very large number of scatter-gather segments it should do
          that in portions: load part of the buffer, transfer it to
          the device, load next part of the buffer, and so on.
        </para>
        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          Another practical consequence is that the number of segments
          may limit the size of the buffer. If all the pages in the
          buffer happen to be physically non-contiguous then the
          maximal supported buffer size for that fragmented case would
          be (nsegments * page_size). For example, if a maximal number
          of 10 segments is supported then on i386 maximal guaranteed
          supported buffer size would be 40K. If a higher size is
          desired then special tricks should be used in the driver.
        </para>
        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          If the hardware does not support scatter-gather at all or
          the driver wants to support some buffer size even if it is
          heavily fragmented then the solution is to allocate a
          contiguous buffer in the driver and use it as intermediate
          storage if the original buffer does not fit.
        </para>
        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          Below are the typical call sequences when using a map depend
          on the use of the map.  The characters -&gt; are used to show
          the flow of time.
        </para>
        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          For a buffer which stays practically fixed during all the
          time between attachment and detachment of a device:</para>
        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          bus_dmamem_alloc -&gt; bus_dmamap_load -&gt; ...use buffer... -&gt;
          -&gt; bus_dmamap_unload -&gt; bus_dmamem_free
        </para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">For a buffer that changes frequently and is passed from
        outside the driver:

	<!-- XXX is this correct? -->
        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">          bus_dmamap_create -&gt;
          -&gt; bus_dmamap_load -&gt; bus_dmamap_sync(PRE...) -&gt; do transfer -&gt;
          -&gt; bus_dmamap_sync(POST...) -&gt; bus_dmamap_unload -&gt;
          ...
          -&gt; bus_dmamap_load -&gt; bus_dmamap_sync(PRE...) -&gt; do transfer -&gt;
          -&gt; bus_dmamap_sync(POST...) -&gt; bus_dmamap_unload -&gt;
          -&gt; bus_dmamap_destroy        </programlisting>

        </para>
        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          When loading a map created by
          <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_dmamem_alloc()</function> the passed address
          and size of the buffer must be the same as used in
          <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_dmamem_alloc()</function>. In this case it is
          guaranteed that the whole buffer will be mapped as one
          segment (so the callback may be based on this assumption)
          and the request will be executed immediately (EINPROGRESS
          will never be returned).  All the callback needs to do in
          this case is to save the physical address.
        </para>
        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          A typical example would be:
        </para>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">          static void
        alloc_callback(void *arg, bus_dma_segment_t *seg, int nseg, int error)
        {
          *(bus_addr_t *)arg = seg[0].ds_addr;
        }

          ...
          int error;
          struct somedata {
            ....
          };
          struct somedata *vsomedata; /* virtual address */
          bus_addr_t psomedata; /* physical bus-relative address */
          bus_dma_tag_t tag_somedata;
          bus_dmamap_t map_somedata;
          ...

          error=bus_dma_tag_create(parent_tag, alignment,
           boundary, lowaddr, highaddr, /*filter*/ NULL, /*filterarg*/ NULL,
           /*maxsize*/ sizeof(struct somedata), /*nsegments*/ 1,
           /*maxsegsz*/ sizeof(struct somedata), /*flags*/ 0,
           &amp;tag_somedata);
          if(error)
          return error;

          error = bus_dmamem_alloc(tag_somedata, &amp;vsomedata, /* flags*/ 0,
             &amp;map_somedata);
          if(error)
             return error;

          bus_dmamap_load(tag_somedata, map_somedata, (void *)vsomedata,
             sizeof (struct somedata), alloc_callback,
             (void *) &amp;psomedata, /*flags*/0);        </programlisting>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          Looks a bit long and complicated but that is the way to do
          it. The practical consequence is: if multiple memory areas
          are allocated always together it would be a really good idea
          to combine them all into one structure and allocate as one
          (if the alignment and boundary limitations permit).
        </para>
        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          When loading an arbitrary buffer into the map created by
          <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_dmamap_create()</function> special measures
          must be taken to synchronize with the callback in case it
          would be delayed. The code would look like:
        </para>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">          {
           int s;
           int error;

           s = splsoftvm();
           error = bus_dmamap_load(
               dmat,
               dmamap,
               buffer_ptr,
               buffer_len,
               callback,
               /*callback_arg*/ buffer_descriptor,
               /*flags*/0);
           if (error == EINPROGRESS) {
               /*
                * Do whatever is needed to ensure synchronization
                * with callback. Callback is guaranteed not to be started
                * until we do splx() or tsleep().
                */
              }
           splx(s);
          }        </programlisting>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          Two possible approaches for the processing of requests are:
        </para>
        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          1. If requests are completed by marking them explicitly as
          done (such as the CAM requests) then it would be simpler to
          put all the further processing into the callback driver
          which would mark the request when it is done. Then not much
          extra synchronization is needed. For the flow control
          reasons it may be a good idea to freeze the request queue
          until this request gets completed.
        </para>
        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          2. If requests are completed when the function returns (such
          as classic read or write requests on character devices) then
          a synchronization flag should be set in the buffer
          descriptor and <function xmlns:xlink="http://www.w3.org/1999/xlink">tsleep()</function> called.  Later
          when the callback gets called it will do its processing and
          check this synchronization flag. If it is set then the
          callback should issue a wakeup. In this approach the
          callback function could either do all the needed processing
          (just like the previous case) or simply save the segments
          array in the buffer descriptor. Then after callback
          completes the calling function could use this saved segments
          array and do all the processing.

        </para>
     </sect1>
<!--_________________________________________________________________________-->
<!--~~~~~~~~~~~~~~~~~~~~END OF SECTION~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

     <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="isa-driver-dma">
        <title xmlns:xlink="http://www.w3.org/1999/xlink">DMA</title>
        <!-- Section Marked up by Wylie -->

        <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">Direct Memory Access (DMA)</primary></indexterm>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          The Direct Memory Access (DMA) is implemented in the ISA bus
          through the DMA controller (actually, two of them but that is
          an irrelevant detail).  To make the early ISA devices simple
          and cheap the logic of the bus control and address
          generation was concentrated in the DMA controller.
          Fortunately, FreeBSD provides a set of functions that mostly
          hide the annoying details of the DMA controller from the
          device drivers.
        </para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          The simplest case is for the fairly intelligent
          devices. Like the bus master devices on PCI they can
          generate the bus cycles and memory addresses all by
          themselves. The only thing they really need from the DMA
          controller is bus arbitration. So for this purpose they
          pretend to be cascaded slave DMA controllers. And the only
          thing needed from the system DMA controller is to enable the
          cascaded mode on a DMA channel by calling the following
          function when attaching the driver:
        </para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          <function xmlns:xlink="http://www.w3.org/1999/xlink">void isa_dmacascade(int channel_number)</function>
        </para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          All the further activity is done by programming the
          device. When detaching the driver no DMA-related functions
          need to be called.
        </para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          For the simpler devices things get more complicated. The
          functions used are:
        </para>

        <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">

          <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink">
            <function xmlns:xlink="http://www.w3.org/1999/xlink">int isa_dma_acquire(int chanel_number)</function>
          </para>
          <para xmlns:xlink="http://www.w3.org/1999/xlink">
                Reserve a DMA channel. Returns 0 on success or EBUSY
                if the channel was already reserved by this or a
                different driver. Most of the ISA devices are not able
                to share DMA channels anyway, so normally this
                function is called when attaching a device. This
                reservation was made redundant by the modern interface
                of bus resources but still must be used in addition to
                the latter. If not used then later, other DMA routines
                will panic.
          </para>
        </listitem>

        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink">
            <function xmlns:xlink="http://www.w3.org/1999/xlink">int isa_dma_release(int chanel_number)</function>
          </para>
          <para xmlns:xlink="http://www.w3.org/1999/xlink">
                Release a previously reserved DMA channel. No
                transfers must be in progress when the channel is
                released (in addition the device must not try to
                initiate transfer after the channel is released).
          </para>
        </listitem>

        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink">
            <function xmlns:xlink="http://www.w3.org/1999/xlink">void isa_dmainit(int chan, u_int
            bouncebufsize)</function>
          </para>
          <para xmlns:xlink="http://www.w3.org/1999/xlink">
                Allocate a bounce buffer for use with the specified
                channel. The requested size of the buffer can not exceed
                64KB. This bounce buffer will be automatically used
                later if a transfer buffer happens to be not
                physically contiguous or outside of the memory
                accessible by the ISA bus or crossing the 64KB
                boundary. If the transfers will be always done from
                buffers which conform to these conditions (such as
                those allocated by
                <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_dmamem_alloc()</function> with proper
                limitations) then <function xmlns:xlink="http://www.w3.org/1999/xlink">isa_dmainit()</function>
                does not have to be called. But it is quite convenient
                to transfer arbitrary data using the DMA controller.
                The bounce buffer will automatically care of the
                scatter-gather issues.
          </para>
 <!-- <blockquote> -->
          <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
                <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                  <para xmlns:xlink="http://www.w3.org/1999/xlink">
                    <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">chan</emphasis> - channel number
                  </para>
                </listitem>
                <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
                  <para xmlns:xlink="http://www.w3.org/1999/xlink">
                    <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">bouncebufsize</emphasis> - size of the
                    bounce buffer in bytes
                  </para>
                </listitem>
          </itemizedlist>
<!-- </blockquote> -->
<!--</para> -->
        </listitem>

        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink">
            <function xmlns:xlink="http://www.w3.org/1999/xlink">void isa_dmastart(int flags, caddr_t addr, u_int
            nbytes, int chan)</function>
          </para>
          <para xmlns:xlink="http://www.w3.org/1999/xlink">
                Prepare to start a DMA transfer. This function must be
                called to set up the DMA controller before actually
                starting transfer on the device. It checks that the
                buffer is contiguous and falls into the ISA memory
                range, if not then the bounce buffer is automatically
                used. If bounce buffer is required but not set up by
                <function xmlns:xlink="http://www.w3.org/1999/xlink">isa_dmainit()</function> or too small for
                the requested transfer size then the system will
                panic. In case of a write request with bounce buffer
                the data will be automatically copied to the bounce
                buffer.
          </para>
        </listitem>
        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink">flags - a bitmask determining the type of operation to
          be done. The direction bits B_READ and B_WRITE are mutually
          exclusive.
          </para>
        <!--   <blockquote>  -->
          <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
            <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
              <para xmlns:xlink="http://www.w3.org/1999/xlink">
                B_READ - read from the ISA bus into memory
              </para>
            </listitem>
            <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
              <para xmlns:xlink="http://www.w3.org/1999/xlink">
                B_WRITE - write from the memory to the ISA bus
              </para>
            </listitem>
            <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
              <para xmlns:xlink="http://www.w3.org/1999/xlink">
                B_RAW - if set then the DMA controller will remember
                the buffer and after the end of transfer will
                automatically re-initialize itself to repeat transfer
                of the same buffer again (of course, the driver may
                change the data in the buffer before initiating
                another transfer in the device). If not set then the
                parameters will work only for one transfer, and
                <function xmlns:xlink="http://www.w3.org/1999/xlink">isa_dmastart()</function> will have to be
                called again before initiating the next
                transfer. Using B_RAW makes sense only if the bounce
                buffer is not used.
              </para>
            </listitem>
          </itemizedlist>
<!--   </blockquote>  -->
        </listitem>
        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink">
            addr - virtual address of the buffer
          </para>
        </listitem>
        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink">
            nbytes - length of the buffer. Must be less or equal to
            64KB. Length of 0 is not allowed: the DMA controller will
            understand it as 64KB while the kernel code will
            understand it as 0 and that would cause unpredictable
            effects. For channels number 4 and higher the length must
            be even because these channels transfer 2 bytes at a
            time. In case of an odd length the last byte will not be
            transferred.
          </para>
        </listitem>
        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink">
            chan - channel number
          </para>
        </listitem>

        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink">
            <function xmlns:xlink="http://www.w3.org/1999/xlink">void isa_dmadone(int flags, caddr_t addr, int
            nbytes, int chan)</function>
          </para>
          <para xmlns:xlink="http://www.w3.org/1999/xlink">
            Synchronize the memory after device reports that transfer
            is done. If that was a read operation with a bounce buffer
            then the data will be copied from the bounce buffer to the
            original buffer. Arguments are the same as for
            <function xmlns:xlink="http://www.w3.org/1999/xlink">isa_dmastart()</function>. Flag B_RAW is
            permitted but it does not affect
            <function xmlns:xlink="http://www.w3.org/1999/xlink">isa_dmadone()</function> in any way.
          </para>
        </listitem>

        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink">
            <function xmlns:xlink="http://www.w3.org/1999/xlink">int isa_dmastatus(int channel_number)</function>
          </para>
          <para xmlns:xlink="http://www.w3.org/1999/xlink">
            Returns the number of bytes left in the current transfer
            to be transferred.  In case the flag B_READ was set in
            <function xmlns:xlink="http://www.w3.org/1999/xlink">isa_dmastart()</function> the number returned
            will never be equal to zero. At the end of transfer it
            will be automatically reset back to the length of
            buffer. The normal use is to check the number of bytes
            left after the device signals that the transfer is
            completed.  If the number of bytes is not 0 then something
            probably went wrong with that transfer.
          </para>
        </listitem>

        <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
          <para xmlns:xlink="http://www.w3.org/1999/xlink">
            <function xmlns:xlink="http://www.w3.org/1999/xlink">int isa_dmastop(int channel_number)</function>
          </para>
          <para xmlns:xlink="http://www.w3.org/1999/xlink">
            Aborts the current transfer and returns the number of
            bytes left untransferred.
          </para>
        </listitem>
       </itemizedlist>
     </sect1>

     <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="isa-driver-probe">
     <title xmlns:xlink="http://www.w3.org/1999/xlink">xxx_isa_probe</title>
     <!-- Section marked up by Wylie -->

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          This function probes if a device is present. If the driver
          supports auto-detection of some part of device configuration
          (such as interrupt vector or memory address) this
          auto-detection must be done in this routine.
        </para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          As for any other bus, if the device cannot be detected or
          is detected but failed the self-test or some other problem
          happened then it returns a positive value of error. The
          value <errorname xmlns:xlink="http://www.w3.org/1999/xlink">ENXIO</errorname> must be returned if the device is not
          present. Other error values may mean other conditions. Zero
          or negative values mean success. Most of the drivers return
          zero as success.
        </para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          The negative return values are used when a PnP device
          supports multiple interfaces. For example, an older
          compatibility interface and a newer advanced interface which
          are supported by different drivers. Then both drivers would
          detect the device. The driver which returns a higher value
          in the probe routine takes precedence (in other words, the
          driver returning 0 has highest precedence, one returning -1
          is next, one returning -2 is after it and so on). In result
          the devices which support only the old interface will be
          handled by the old driver (which should return -1 from the
          probe routine) while the devices supporting the new
          interface as well will be handled by the new driver (which
          should return 0 from the probe routine).
        </para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          The device descriptor struct xxx_softc is allocated by the
          system before calling the probe routine. If the probe
          routine returns an error the descriptor will be
          automatically deallocated by the system. So if a probing
          error occurs the driver must make sure that all the
          resources it used during probe are deallocated and that
          nothing keeps the descriptor from being safely
          deallocated. If the probe completes successfully the
          descriptor will be preserved by the system and later passed
          to the routine <function xmlns:xlink="http://www.w3.org/1999/xlink">xxx_isa_attach()</function>. If a
          driver returns a negative value it can not be sure that it
          will have the highest priority and its attach routine will
          be called. So in this case it also must release all the
          resources before returning and if necessary allocate them
          again in the attach routine. When
          <function xmlns:xlink="http://www.w3.org/1999/xlink">xxx_isa_probe()</function> returns 0 releasing the
          resources before returning is also a good idea and a
          well-behaved driver should do so. But in cases where there is
          some problem with releasing the resources the driver is
          allowed to keep resources between returning 0 from the probe
          routine and execution of the attach routine.
        </para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          A typical probe routine starts with getting the device
          descriptor and unit:
        </para>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">         struct xxx_softc *sc = device_get_softc(dev);
          int unit = device_get_unit(dev);
          int pnperror;
          int error = 0;

          sc-&gt;dev = dev; /* link it back */
          sc-&gt;unit = unit;        </programlisting>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          Then check for the PnP devices. The check is carried out by
          a table containing the list of PnP IDs supported by this
          driver and human-readable descriptions of the device models
          corresponding to these IDs.
        </para>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
        pnperror=ISA_PNP_PROBE(device_get_parent(dev), dev,
        xxx_pnp_ids); if(pnperror == ENXIO) return ENXIO;
        </programlisting>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          The logic of ISA_PNP_PROBE is the following: If this card
          (device unit) was not detected as PnP then ENOENT will be
          returned. If it was detected as PnP but its detected ID does
          not match any of the IDs in the table then ENXIO is
          returned. Finally, if it has PnP support and it matches on
          of the IDs in the table, 0 is returned and the appropriate
          description from the table is set by
          <function xmlns:xlink="http://www.w3.org/1999/xlink">device_set_desc()</function>.
        </para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          If a driver supports only PnP devices then the condition
          would look like:
        </para>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">          if(pnperror != 0)
              return pnperror;        </programlisting>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          No special treatment is required for the drivers which do not
          support PnP because they pass an empty PnP ID table and will
          always get ENXIO if called on a PnP card.
        </para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          The probe routine normally needs at least some minimal set
          of resources, such as I/O port number to find the card and
          probe it. Depending on the hardware the driver may be able
          to discover the other necessary resources automatically. The
          PnP devices have all the resources pre-set by the PnP
          subsystem, so the driver does not need to discover them by
          itself.
        </para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          Typically the minimal information required to get access to
          the device is the I/O port number. Then some devices allow
          to get the rest of information from the device configuration
          registers (though not all devices do that).  So first we try
          to get the port start value:
        </para>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"> sc-&gt;port0 = bus_get_resource_start(dev,
        SYS_RES_IOPORT, 0 /*rid*/); if(sc-&gt;port0 == 0) return ENXIO;
        </programlisting>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          The base port address is saved in the structure softc for
          future use.  If it will be used very often then calling the
          resource function each time would be prohibitively slow. If
          we do not get a port we just return an error.  Some device
          drivers can instead be clever and try to probe all the
          possible ports, like this:
        </para>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
          /* table of all possible base I/O port addresses for this device */
          static struct xxx_allports {
              u_short port; /* port address */
              short used; /* flag: if this port is already used by some unit */
          } xxx_allports = {
              { 0x300, 0 },
              { 0x320, 0 },
              { 0x340, 0 },
              { 0, 0 } /* end of table */
          };

          ...
          int port, i;
          ...

          port =  bus_get_resource_start(dev, SYS_RES_IOPORT, 0 /*rid*/);
          if(port !=0 ) {
              for(i=0; xxx_allports[i].port!=0; i++) {
                  if(xxx_allports[i].used || xxx_allports[i].port != port)
                      continue;

                  /* found it */
                  xxx_allports[i].used = 1;
                  /* do probe on a known port */
                  return xxx_really_probe(dev, port);
              }
              return ENXIO; /* port is unknown or already used */
          }

          /* we get here only if we need to guess the port */
          for(i=0; xxx_allports[i].port!=0; i++) {
              if(xxx_allports[i].used)
                  continue;

              /* mark as used - even if we find nothing at this port
               * at least we won't probe it in future
               */
               xxx_allports[i].used = 1;

              error = xxx_really_probe(dev, xxx_allports[i].port);
              if(error == 0) /* found a device at that port */
                  return 0;
          }
          /* probed all possible addresses, none worked */
          return ENXIO;</programlisting>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          Of course, normally the driver's
          <function xmlns:xlink="http://www.w3.org/1999/xlink">identify()</function> routine should be used for
          such things. But there may be one valid reason why it may be
          better to be done in <function xmlns:xlink="http://www.w3.org/1999/xlink">probe()</function>: if this
          probe would drive some other sensitive device crazy.  The
          probe routines are ordered with consideration of the
          <literal xmlns:xlink="http://www.w3.org/1999/xlink">sensitive</literal> flag: the sensitive devices get probed first and
          the rest of the devices later.  But the
          <function xmlns:xlink="http://www.w3.org/1999/xlink">identify()</function> routines are called before
          any probes, so they show no respect to the sensitive devices
          and may upset them.
        </para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          Now, after we got the starting port we need to set the port
          count (except for PnP devices) because the kernel does not
          have this information in the configuration file.
        </para>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
         if(pnperror /* only for non-PnP devices */
         &amp;&amp; bus_set_resource(dev, SYS_RES_IOPORT, 0, sc-&gt;port0,
         XXX_PORT_COUNT)&lt;0)
             return ENXIO;</programlisting>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          Finally allocate and activate a piece of port address space
          (special values of start and end mean <quote xmlns:xlink="http://www.w3.org/1999/xlink">use those we set by
          <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_set_resource()</function></quote>):
        </para>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
          sc-&gt;port0_rid = 0;
          sc-&gt;port0_r = bus_alloc_resource(dev, SYS_RES_IOPORT,
          &amp;sc-&gt;port0_rid,
              /*start*/ 0, /*end*/ ~0, /*count*/ 0, RF_ACTIVE);

          if(sc-&gt;port0_r == NULL)
              return ENXIO;</programlisting>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          Now having access to the port-mapped registers we can poke
          the device in some way and check if it reacts like it is
          expected to. If it does not then there is probably some
          other device or no device at all at this address.
        </para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          Normally drivers do not set up the interrupt handlers until
          the attach routine. Instead they do probes in the polling
          mode using the <function xmlns:xlink="http://www.w3.org/1999/xlink">DELAY()</function> function for
          timeout. The probe routine must never hang forever, all the
          waits for the device must be done with timeouts. If the
          device does not respond within the time it is probably broken
          or misconfigured and the driver must return error. When
          determining the timeout interval give the device some extra
          time to be on the safe side: although
          <function xmlns:xlink="http://www.w3.org/1999/xlink">DELAY()</function> is supposed to delay for the
          same amount of time on any machine it has some margin of
          error, depending on the exact CPU.
        </para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          If the probe routine really wants to check that the
          interrupts really work it may configure and probe the
          interrupts too. But that is not recommended.
        </para>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
          /* implemented in some very device-specific way */
          if(error = xxx_probe_ports(sc))
              goto bad; /* will deallocate the resources before returning */
        </programlisting>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          The function <function xmlns:xlink="http://www.w3.org/1999/xlink">xxx_probe_ports()</function> may also
          set the device description depending on the exact model of
          device it discovers.  But if there is only one supported
          device model this can be as well done in a hardcoded way.
          Of course, for the PnP devices the PnP support sets the
          description from the table automatically.
        </para>


        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">          if(pnperror)
              device_set_desc(dev, "Our device model 1234");
        </programlisting>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          Then the probe routine should either discover the ranges of
          all the resources by reading the device configuration
          registers or make sure that they were set explicitly by the
          user. We will consider it with an example of on-board
          memory. The probe routine should be as non-intrusive as
          possible, so allocation and check of functionality of the
          rest of resources (besides the ports) would be better left
          to the attach routine.
        </para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          The memory address may be specified in the kernel
          configuration file or on some devices it may be
          pre-configured in non-volatile configuration registers.  If
          both sources are available and different, which one should
          be used?  Probably if the user bothered to set the address
          explicitly in the kernel configuration file they know what
          they are doing and this one should take precedence. An
          example of implementation could be:
        </para>
        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
          /* try to find out the config address first */
          sc-&gt;mem0_p = bus_get_resource_start(dev, SYS_RES_MEMORY, 0 /*rid*/);
          if(sc-&gt;mem0_p == 0) { /* nope, not specified by user */
              sc-&gt;mem0_p = xxx_read_mem0_from_device_config(sc);


          if(sc-&gt;mem0_p == 0)
                  /* can't get it from device config registers either */
                  goto bad;
          } else {
              if(xxx_set_mem0_address_on_device(sc) &lt; 0)
                  goto bad; /* device does not support that address */
          }

          /* just like the port, set the memory size,
           * for some devices the memory size would not be constant
           * but should be read from the device configuration registers instead
           * to accommodate different models of devices. Another option would
           * be to let the user set the memory size as "msize" configuration
           * resource which will be automatically handled by the ISA bus.
           */
           if(pnperror) { /* only for non-PnP devices */
              sc-&gt;mem0_size = bus_get_resource_count(dev, SYS_RES_MEMORY, 0 /*rid*/);
              if(sc-&gt;mem0_size == 0) /* not specified by user */
                  sc-&gt;mem0_size = xxx_read_mem0_size_from_device_config(sc);

              if(sc-&gt;mem0_size == 0) {
                  /* suppose this is a very old model of device without
                   * auto-configuration features and the user gave no preference,
                   * so assume the minimalistic case
                   * (of course, the real value will vary with the driver)
                   */
                  sc-&gt;mem0_size = 8*1024;
              }

              if(xxx_set_mem0_size_on_device(sc) &lt; 0)
                  goto bad; /* device does not support that size */

              if(bus_set_resource(dev, SYS_RES_MEMORY, /*rid*/0,
                      sc-&gt;mem0_p, sc-&gt;mem0_size)&lt;0)
                  goto bad;
          } else {
              sc-&gt;mem0_size = bus_get_resource_count(dev, SYS_RES_MEMORY, 0 /*rid*/);
          }        </programlisting>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          Resources for IRQ and DRQ are easy to check by analogy.
        </para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          If all went well then release all the resources and return success.
        </para>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">          xxx_free_resources(sc);
          return 0;</programlisting>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          Finally, handle the troublesome situations. All the
          resources should be deallocated before returning. We make
          use of the fact that before the structure softc is passed to
          us it gets zeroed out, so we can find out if some resource
          was allocated: then its descriptor is non-zero.
        </para>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">          bad:

          xxx_free_resources(sc);
          if(error)
                return error;
          else /* exact error is unknown */
              return ENXIO;</programlisting>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          That would be all for the probe routine. Freeing of
          resources is done from multiple places, so it is moved to a
          function which may look like:
        </para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">static void
           xxx_free_resources(sc)
              struct xxx_softc *sc;
          {
              /* check every resource and free if not zero */

              /* interrupt handler */
              if(sc-&gt;intr_r) {
                  bus_teardown_intr(sc-&gt;dev, sc-&gt;intr_r, sc-&gt;intr_cookie);
                  bus_release_resource(sc-&gt;dev, SYS_RES_IRQ, sc-&gt;intr_rid,
                      sc-&gt;intr_r);
                  sc-&gt;intr_r = 0;
              }

              /* all kinds of memory maps we could have allocated */
              if(sc-&gt;data_p) {
                  bus_dmamap_unload(sc-&gt;data_tag, sc-&gt;data_map);
                  sc-&gt;data_p = 0;
              }
               if(sc-&gt;data) { /* sc-&gt;data_map may be legitimately equal to 0 */
                  /* the map will also be freed */
                  bus_dmamem_free(sc-&gt;data_tag, sc-&gt;data, sc-&gt;data_map);
                  sc-&gt;data = 0;
              }
              if(sc-&gt;data_tag) {
                  bus_dma_tag_destroy(sc-&gt;data_tag);
                  sc-&gt;data_tag = 0;
              }

              ... free other maps and tags if we have them ...

              if(sc-&gt;parent_tag) {
                  bus_dma_tag_destroy(sc-&gt;parent_tag);
                  sc-&gt;parent_tag = 0;
              }

              /* release all the bus resources */
              if(sc-&gt;mem0_r) {
                  bus_release_resource(sc-&gt;dev, SYS_RES_MEMORY, sc-&gt;mem0_rid,
                      sc-&gt;mem0_r);
                  sc-&gt;mem0_r = 0;
              }
              ...
              if(sc-&gt;port0_r) {
                  bus_release_resource(sc-&gt;dev, SYS_RES_IOPORT, sc-&gt;port0_rid,
                      sc-&gt;port0_r);
                  sc-&gt;port0_r = 0;
              }
          }</programlisting>

     </sect1>

     <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="isa-driver-attach">
     <title xmlns:xlink="http://www.w3.org/1999/xlink">xxx_isa_attach</title>
     <!-- Section Marked up by Wylie -->

        <para xmlns:xlink="http://www.w3.org/1999/xlink">The attach routine actually connects the driver to the
        system if the probe routine returned success and the system
        had chosen to attach that driver.  If the probe routine
        returned 0 then the attach routine may expect to receive the
        device structure softc intact, as it was set by the probe
        routine. Also if the probe routine returns 0 it may expect
        that the attach routine for this device shall be called at
        some point in the future. If the probe routine returns a
        negative value then the driver may make none of these
        assumptions.
        </para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">The attach routine returns 0 if it completed successfully or
          error code otherwise.
        </para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">The attach routine starts just like the probe routine,
          with getting some frequently used data into more accessible
          variables.
        </para>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">          struct xxx_softc *sc = device_get_softc(dev);
          int unit = device_get_unit(dev);
          int error = 0;</programlisting>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Then allocate and activate all the necessary
          resources. Because normally the port range will be released
          before returning from probe, it has to be allocated
          again. We expect that the probe routine had properly set all
          the resource ranges, as well as saved them in the structure
          softc. If the probe routine had left some resource allocated
          then it does not need to be allocated again (which would be
          considered an error).
        </para>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">          sc-&gt;port0_rid = 0;
          sc-&gt;port0_r = bus_alloc_resource(dev, SYS_RES_IOPORT,  &amp;sc-&gt;port0_rid,
              /*start*/ 0, /*end*/ ~0, /*count*/ 0, RF_ACTIVE);

          if(sc-&gt;port0_r == NULL)
               return ENXIO;

          /* on-board memory */
          sc-&gt;mem0_rid = 0;
          sc-&gt;mem0_r = bus_alloc_resource(dev, SYS_RES_MEMORY,  &amp;sc-&gt;mem0_rid,
              /*start*/ 0, /*end*/ ~0, /*count*/ 0, RF_ACTIVE);

          if(sc-&gt;mem0_r == NULL)
                goto bad;

          /* get its virtual address */
          sc-&gt;mem0_v = rman_get_virtual(sc-&gt;mem0_r);</programlisting>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">The DMA request channel (DRQ) is allocated likewise. To
          initialize it use functions of the
          <function xmlns:xlink="http://www.w3.org/1999/xlink">isa_dma*()</function> family. For example:
        </para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">isa_dmacascade(sc-&gt;drq0);</function></para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">The interrupt request line (IRQ) is a bit
          special. Besides allocation the driver's interrupt handler
          should be associated with it. Historically in the old ISA
          drivers the argument passed by the system to the interrupt
          handler was the device unit number. But in modern drivers
          the convention suggests passing the pointer to structure
          softc. The important reason is that when the structures
          softc are allocated dynamically then getting the unit number
          from softc is easy while getting softc from the unit number is
          difficult. Also this convention makes the drivers for
          different buses look more uniform and allows them to share
          the code: each bus gets its own probe, attach, detach and
          other bus-specific routines while the bulk of the driver
          code may be shared among them.
        </para>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
          sc-&gt;intr_rid = 0;
          sc-&gt;intr_r = bus_alloc_resource(dev, SYS_RES_MEMORY,  &amp;sc-&gt;intr_rid,
                /*start*/ 0, /*end*/ ~0, /*count*/ 0, RF_ACTIVE);

          if(sc-&gt;intr_r == NULL)
              goto bad;

          /*
           * XXX_INTR_TYPE is supposed to be defined depending on the type of
           * the driver, for example as INTR_TYPE_CAM for a CAM driver
           */
          error = bus_setup_intr(dev, sc-&gt;intr_r, XXX_INTR_TYPE,
              (driver_intr_t *) xxx_intr, (void *) sc, &amp;sc-&gt;intr_cookie);
          if(error)
              goto bad;

        </programlisting>


        <para xmlns:xlink="http://www.w3.org/1999/xlink">If the device needs to make DMA to the main memory then
          this memory should be allocated like described before:
        </para>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">          error=bus_dma_tag_create(NULL, /*alignment*/ 4,
              /*boundary*/ 0, /*lowaddr*/ BUS_SPACE_MAXADDR_24BIT,
              /*highaddr*/ BUS_SPACE_MAXADDR, /*filter*/ NULL, /*filterarg*/ NULL,
              /*maxsize*/ BUS_SPACE_MAXSIZE_24BIT,
              /*nsegments*/ BUS_SPACE_UNRESTRICTED,
              /*maxsegsz*/ BUS_SPACE_MAXSIZE_24BIT, /*flags*/ 0,
              &amp;sc-&gt;parent_tag);
          if(error)
              goto bad;

          /* many things get inherited from the parent tag
           * sc-&gt;data is supposed to point to the structure with the shared data,
           * for example for a ring buffer it could be:
           * struct {
           *   u_short rd_pos;
           *   u_short wr_pos;
           *   char    bf[XXX_RING_BUFFER_SIZE]
           * } *data;
           */
          error=bus_dma_tag_create(sc-&gt;parent_tag, 1,
              0, BUS_SPACE_MAXADDR, 0, /*filter*/ NULL, /*filterarg*/ NULL,
              /*maxsize*/ sizeof(* sc-&gt;data), /*nsegments*/ 1,
              /*maxsegsz*/ sizeof(* sc-&gt;data), /*flags*/ 0,
              &amp;sc-&gt;data_tag);
          if(error)
              goto bad;

          error = bus_dmamem_alloc(sc-&gt;data_tag, &amp;sc-&gt;data, /* flags*/ 0,
              &amp;sc-&gt;data_map);
          if(error)
               goto bad;

          /* xxx_alloc_callback() just saves the physical address at
           * the pointer passed as its argument, in this case &amp;sc-&gt;data_p.
           * See details in the section on bus memory mapping.
           * It can be implemented like:
           *
           * static void
           * xxx_alloc_callback(void *arg, bus_dma_segment_t *seg,
           *     int nseg, int error)
           * {
           *    *(bus_addr_t *)arg = seg[0].ds_addr;
           * }
           */
          bus_dmamap_load(sc-&gt;data_tag, sc-&gt;data_map, (void *)sc-&gt;data,
              sizeof (* sc-&gt;data), xxx_alloc_callback, (void *) &amp;sc-&gt;data_p,
              /*flags*/0);</programlisting>


        <para xmlns:xlink="http://www.w3.org/1999/xlink">After all the necessary resources are allocated the
          device should be initialized. The initialization may include
          testing that all the expected features are functional.</para>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">          if(xxx_initialize(sc) &lt; 0)
               goto bad;        </programlisting>


        <para xmlns:xlink="http://www.w3.org/1999/xlink">The bus subsystem will automatically print on the
          console the device description set by probe. But if the
          driver wants to print some extra information about the
          device it may do so, for example:</para>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
        device_printf(dev, "has on-card FIFO buffer of %d bytes\n", sc-&gt;fifosize);
        </programlisting>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">If the initialization routine experiences any problems
          then printing messages about them before returning error is
          also recommended.</para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">The final step of the attach routine is attaching the
          device to its functional subsystem in the kernel. The exact
          way to do it depends on the type of the driver: a character
          device, a block device, a network device, a CAM SCSI bus
          device and so on.</para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">If all went well then return success.</para>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">          error = xxx_attach_subsystem(sc);
          if(error)
              goto bad;

          return 0;        </programlisting>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">Finally, handle the troublesome situations. All the
          resources should be deallocated before returning an
          error. We make use of the fact that before the structure
          softc is passed to us it gets zeroed out, so we can find out
          if some resource was allocated: then its descriptor is
          non-zero.</para>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">          bad:

          xxx_free_resources(sc);
          if(error)
              return error;
          else /* exact error is unknown */
              return ENXIO;</programlisting>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">That would be all for the attach routine.</para>

     </sect1>


     <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="isa-driver-detach">
       <title xmlns:xlink="http://www.w3.org/1999/xlink">xxx_isa_detach</title>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          If this function is present in the driver and the driver is
          compiled as a loadable module then the driver gets the
          ability to be unloaded. This is an important feature if the
          hardware supports hot plug. But the ISA bus does not support
          hot plug, so this feature is not particularly important for
          the ISA devices. The ability to unload a driver may be
          useful when debugging it, but in many cases installation of
          the new version of the driver would be required only after
          the old version somehow wedges the system and a reboot will be
          needed anyway, so the efforts spent on writing the detach
          routine may not be worth it. Another argument that
          unloading would allow upgrading the drivers on a production
          machine seems to be mostly theoretical. Installing a new
          version of a driver is a dangerous operation which should
          never be performed on a production machine (and which is not
          permitted when the system is running in secure mode).  Still,
          the detach routine may be provided for the sake of
          completeness.
        </para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          The detach routine returns 0 if the driver was successfully
          detached or the error code otherwise.
        </para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          The logic of detach is a mirror of the attach. The first
          thing to do is to detach the driver from its kernel
          subsystem. If the device is currently open then the driver
          has two choices: refuse to be detached or forcibly close and
          proceed with detach. The choice used depends on the ability
          of the particular kernel subsystem to do a forced close and
          on the preferences of the driver's author. Generally the
          forced close seems to be the preferred alternative.
        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">          struct xxx_softc *sc = device_get_softc(dev);
          int error;

          error = xxx_detach_subsystem(sc);
          if(error)
              return error;</programlisting>
        </para>
        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          Next the driver may want to reset the hardware to some
          consistent state.  That includes stopping any ongoing
          transfers, disabling the DMA channels and interrupts to
          avoid memory corruption by the device. For most of the
          drivers this is exactly what the shutdown routine does, so
          if it is included in the driver we can just call it.
        </para>
        <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">xxx_isa_shutdown(dev);</function></para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          And finally release all the resources and return success.
        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">          xxx_free_resources(sc);
          return 0;</programlisting>

        </para>
     </sect1>

     <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="isa-driver-shutdown">
       <title xmlns:xlink="http://www.w3.org/1999/xlink">xxx_isa_shutdown</title>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          This routine is called when the system is about to be shut
          down. It is expected to bring the hardware to some
          consistent state. For most of the ISA devices no special
          action is required, so the function is not really necessary
          because the device will be re-initialized on reboot
          anyway. But some devices have to be shut down with a special
          procedure, to make sure that they will be properly detected
          after soft reboot (this is especially true for many devices
          with proprietary identification protocols).  In any case
          disabling DMA and interrupts in the device registers and
          stopping any ongoing transfers is a good idea. The exact
          action depends on the hardware, so we do not consider it here
          in any detail.
        </para>
     </sect1>

     <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="isa-driver-intr">
          <title xmlns:xlink="http://www.w3.org/1999/xlink">xxx_intr</title>

        <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">interrupt handler</primary></indexterm>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          The interrupt handler is called when an interrupt is
          received which may be from this particular device. The ISA
          bus does not support interrupt sharing (except in some special
          cases) so in practice if the interrupt handler is called
          then the interrupt almost for sure came from its
          device. Still, the interrupt handler must poll the device
          registers and make sure that the interrupt was generated by
          its device. If not it should just return.
        </para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          The old convention for the ISA drivers was getting the
          device unit number as an argument. This is obsolete, and the
          new drivers receive whatever argument was specified for them
          in the attach routine when calling
          <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_setup_intr()</function>. By the new convention
          it should be the pointer to the structure softc. So the
          interrupt handler commonly starts as:
        </para>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
          static void
          xxx_intr(struct xxx_softc *sc)
          {

        </programlisting>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          It runs at the interrupt priority level specified by the
          interrupt type parameter of
          <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_setup_intr()</function>. That means that all
          the other interrupts of the same type as well as all the
          software interrupts are disabled.
        </para>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          To avoid races it is commonly written as a loop:
        </para>

        <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">
          while(xxx_interrupt_pending(sc)) {
              xxx_process_interrupt(sc);
              xxx_acknowledge_interrupt(sc);
          }        </programlisting>

        <para xmlns:xlink="http://www.w3.org/1999/xlink">
          The interrupt handler has to acknowledge interrupt to the
          device only but not to the interrupt controller, the system
          takes care of the latter.
        </para>

     </sect1>
</chapter>

    
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="pci">
  <title xmlns:xlink="http://www.w3.org/1999/xlink">PCI Devices</title>

  <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">PCI bus</primary></indexterm>

  <para xmlns:xlink="http://www.w3.org/1999/xlink">This chapter will talk about the FreeBSD mechanisms for
    writing a device driver for a device on a PCI bus.</para>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="pci-probe">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Probe and Attach</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Information here about how the PCI bus code iterates through
      the unattached devices and see if a newly loaded kld will attach
      to any of them.</para>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Sample Driver Source (<filename xmlns:xlink="http://www.w3.org/1999/xlink">mypci.c</filename>)</title>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">/*
 * Simple KLD to play with the PCI functions.
 *
 * Murray Stokely
 */

#include &lt;sys/param.h&gt;		/* defines used in kernel.h */
#include &lt;sys/module.h&gt;
#include &lt;sys/systm.h&gt;
#include &lt;sys/errno.h&gt;
#include &lt;sys/kernel.h&gt;		/* types used in module initialization */
#include &lt;sys/conf.h&gt;		/* cdevsw struct */
#include &lt;sys/uio.h&gt;		/* uio struct */
#include &lt;sys/malloc.h&gt;
#include &lt;sys/bus.h&gt;		/* structs, prototypes for pci bus stuff and DEVMETHOD macros! */

#include &lt;machine/bus.h&gt;
#include &lt;sys/rman.h&gt;
#include &lt;machine/resource.h&gt;

#include &lt;dev/pci/pcivar.h&gt;	/* For pci_get macros! */
#include &lt;dev/pci/pcireg.h&gt;

/* The softc holds our per-instance data. */
struct mypci_softc {
	device_t	my_dev;
	struct cdev	*my_cdev;
};

/* Function prototypes */
static d_open_t		mypci_open;
static d_close_t	mypci_close;
static d_read_t		mypci_read;
static d_write_t	mypci_write;

/* Character device entry points */

static struct cdevsw mypci_cdevsw = {
	.d_version =	D_VERSION,
	.d_open =	mypci_open,
	.d_close =	mypci_close,
	.d_read =	mypci_read,
	.d_write =	mypci_write,
	.d_name =	"mypci",
};

/*
 * In the cdevsw routines, we find our softc by using the si_drv1 member
 * of struct cdev.  We set this variable to point to our softc in our
 * attach routine when we create the /dev entry.
 */

int
mypci_open(struct cdev *dev, int oflags, int devtype, struct thread *td)
{
	struct mypci_softc *sc;

	/* Look up our softc. */
	sc = dev-&gt;si_drv1;
	device_printf(sc-&gt;my_dev, "Opened successfully.\n");
	return (0);
}

int
mypci_close(struct cdev *dev, int fflag, int devtype, struct thread *td)
{
	struct mypci_softc *sc;

	/* Look up our softc. */
	sc = dev-&gt;si_drv1;
	device_printf(sc-&gt;my_dev, "Closed.\n");
	return (0);
}

int
mypci_read(struct cdev *dev, struct uio *uio, int ioflag)
{
	struct mypci_softc *sc;

	/* Look up our softc. */
	sc = dev-&gt;si_drv1;
	device_printf(sc-&gt;my_dev, "Asked to read %d bytes.\n", uio-&gt;uio_resid);
	return (0);
}

int
mypci_write(struct cdev *dev, struct uio *uio, int ioflag)
{
	struct mypci_softc *sc;

	/* Look up our softc. */
	sc = dev-&gt;si_drv1;
	device_printf(sc-&gt;my_dev, "Asked to write %d bytes.\n", uio-&gt;uio_resid);
	return (0);
}

/* PCI Support Functions */

/*
 * Compare the device ID of this device against the IDs that this driver
 * supports.  If there is a match, set the description and return success.
 */
static int
mypci_probe(device_t dev)
{

	device_printf(dev, "MyPCI Probe\nVendor ID : 0x%x\nDevice ID : 0x%x\n",
	    pci_get_vendor(dev), pci_get_device(dev));

	if (pci_get_vendor(dev) == 0x11c1) {
		printf("We've got the Winmodem, probe successful!\n");
		device_set_desc(dev, "WinModem");
		return (BUS_PROBE_DEFAULT);
	}
	return (ENXIO);
}

/* Attach function is only called if the probe is successful. */

static int
mypci_attach(device_t dev)
{
	struct mypci_softc *sc;

	printf("MyPCI Attach for : deviceID : 0x%x\n", pci_get_devid(dev));

	/* Look up our softc and initialize its fields. */
	sc = device_get_softc(dev);
	sc-&gt;my_dev = dev;

	/*
	 * Create a /dev entry for this device.  The kernel will assign us
	 * a major number automatically.  We use the unit number of this
	 * device as the minor number and name the character device
	 * "mypci&lt;unit&gt;".
	 */
	sc-&gt;my_cdev = make_dev(<literal xmlns:xlink="http://www.w3.org/1999/xlink">&amp;</literal>mypci_cdevsw, device_get_unit(dev),
	    UID_ROOT, GID_WHEEL, 0600, "mypci%u", device_get_unit(dev));
	sc-&gt;my_cdev-&gt;si_drv1 = sc;
	printf("Mypci device loaded.\n");
	return (0);
}

/* Detach device. */

static int
mypci_detach(device_t dev)
{
	struct mypci_softc *sc;

	/* Teardown the state in our softc created in our attach routine. */
	sc = device_get_softc(dev);
	destroy_dev(sc-&gt;my_cdev);
	printf("Mypci detach!\n");
	return (0);
}

/* Called during system shutdown after sync. */

static int
mypci_shutdown(device_t dev)
{

	printf("Mypci shutdown!\n");
	return (0);
}

/*
 * Device suspend routine.
 */
static int
mypci_suspend(device_t dev)
{

	printf("Mypci suspend!\n");
	return (0);
}

/*
 * Device resume routine.
 */
static int
mypci_resume(device_t dev)
{

	printf("Mypci resume!\n");
	return (0);
}

static device_method_t mypci_methods[] = {
	/* Device interface */
	DEVMETHOD(device_probe,		mypci_probe),
	DEVMETHOD(device_attach,	mypci_attach),
	DEVMETHOD(device_detach,	mypci_detach),
	DEVMETHOD(device_shutdown,	mypci_shutdown),
	DEVMETHOD(device_suspend,	mypci_suspend),
	DEVMETHOD(device_resume,	mypci_resume),

	DEVMETHOD_END
};

static devclass_t mypci_devclass;

DEFINE_CLASS_0(mypci, mypci_driver, mypci_methods, sizeof(struct mypci_softc));
DRIVER_MODULE(mypci, pci, mypci_driver, mypci_devclass, 0, 0);</programlisting>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">Makefile</filename> for Sample Driver</title>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink"># Makefile for mypci driver

KMOD=	mypci
SRCS=	mypci.c
SRCS+=	device_if.h bus_if.h pci_if.h

.include &lt;bsd.kmod.mk&gt;</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">If you place the above source file and
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">Makefile</filename> into a directory, you may run
	<command xmlns:xlink="http://www.w3.org/1999/xlink">make</command> to compile the sample driver.
	Additionally, you may run <command xmlns:xlink="http://www.w3.org/1999/xlink">make load</command> to load
	the driver into the currently running kernel and <command xmlns:xlink="http://www.w3.org/1999/xlink">make
	unload</command> to unload the driver after it is
	loaded.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Additional Resources</title>
      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><simpara xmlns:xlink="http://www.w3.org/1999/xlink"><link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.pcisig.org/">PCI
	  Special Interest Group</link></simpara></listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><simpara xmlns:xlink="http://www.w3.org/1999/xlink">PCI System Architecture, Fourth Edition by
	  Tom Shanley, et al.</simpara></listitem>

      </itemizedlist>
    </sect2>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="pci-bus">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Bus Resources</title>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">PCI bus</primary><secondary xmlns:xlink="http://www.w3.org/1999/xlink">resources</secondary></indexterm>
    <para xmlns:xlink="http://www.w3.org/1999/xlink">FreeBSD provides an object-oriented mechanism for requesting
      resources from a parent bus.  Almost all devices will be a child
      member of some sort of bus (PCI, ISA, USB, SCSI, etc) and these
      devices need to acquire resources from their parent bus (such as
      memory segments, interrupt lines, or DMA channels).</para>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Base Address Registers</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">PCI bus</primary><secondary xmlns:xlink="http://www.w3.org/1999/xlink">Base Address Registers</secondary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">To do anything particularly useful with a PCI device you
      will need to obtain the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">Base Address
      Registers</emphasis> (BARs) from the PCI Configuration space.
      The PCI-specific details of obtaining the BAR are abstracted in
      the <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_alloc_resource()</function> function.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">For example, a typical driver might have something similar
      to this in the <function xmlns:xlink="http://www.w3.org/1999/xlink">attach()</function> function:</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    sc-&gt;bar0id = PCIR_BAR(0);
    sc-&gt;bar0res = bus_alloc_resource(dev, SYS_RES_MEMORY, &amp;sc-&gt;bar0id,
				  0, ~0, 1, RF_ACTIVE);
    if (sc-&gt;bar0res == NULL) {
        printf("Memory allocation of PCI base register 0 failed!\n");
        error = ENXIO;
        goto fail1;
    }

    sc-&gt;bar1id = PCIR_BAR(1);
    sc-&gt;bar1res = bus_alloc_resource(dev, SYS_RES_MEMORY, &amp;sc-&gt;bar1id,
				  0, ~0, 1, RF_ACTIVE);
    if (sc-&gt;bar1res == NULL) {
        printf("Memory allocation of PCI base register 1 failed!\n");
        error =  ENXIO;
        goto fail2;
    }
    sc-&gt;bar0_bt = rman_get_bustag(sc-&gt;bar0res);
    sc-&gt;bar0_bh = rman_get_bushandle(sc-&gt;bar0res);
    sc-&gt;bar1_bt = rman_get_bustag(sc-&gt;bar1res);
    sc-&gt;bar1_bh = rman_get_bushandle(sc-&gt;bar1res);</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Handles for each base address register are kept in the
        <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">softc</varname> structure so that they can be
        used to write to the device later.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">These handles can then be used to read or write from the
        device registers with the <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_space_*</function>
        functions.  For example, a driver might contain a shorthand
        function to read from a board specific register like this:</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">uint16_t
board_read(struct ni_softc *sc, uint16_t address)
{
    return bus_space_read_2(sc-&gt;bar1_bt, sc-&gt;bar1_bh, address);
}
</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Similarly, one could write to the registers with:</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">void
board_write(struct ni_softc *sc, uint16_t address, uint16_t value)
{
    bus_space_write_2(sc-&gt;bar1_bt, sc-&gt;bar1_bh, address, value);
}
</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">These functions exist in 8bit, 16bit, and 32bit versions
        and you should use
        <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_space_{read|write}_{1|2|4}</function>
        accordingly.</para>

      <note xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">In FreeBSD 7.0 and later, you can use the
	  <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_*</function> functions instead of
	  <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_space_*</function>.  The
	  <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_*</function> functions take a <type xmlns:xlink="http://www.w3.org/1999/xlink">struct
	  resource *</type> pointer instead of a bus tag and handle.
	  Thus, you could drop the bus tag and bus handle members from
	  the <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">softc</varname> and rewrite the
	  <function xmlns:xlink="http://www.w3.org/1999/xlink">board_read()</function> function as:</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">uint16_t
board_read(struct ni_softc *sc, uint16_t address)
{
	return (bus_read(sc-&gt;bar1res, address));
}
</programlisting>
      </note>
    </sect2>
    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Interrupts</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">PCI bus</primary><secondary xmlns:xlink="http://www.w3.org/1999/xlink">interrupts</secondary></indexterm>
      <para xmlns:xlink="http://www.w3.org/1999/xlink">Interrupts are allocated from the object-oriented bus code
        in a way similar to the memory resources.  First an IRQ
        resource must be allocated from the parent bus, and then the
        interrupt handler must be set up to deal with this IRQ.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Again, a sample from a device
        <function xmlns:xlink="http://www.w3.org/1999/xlink">attach()</function> function says more than
        words.</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">/* Get the IRQ resource */

    sc-&gt;irqid = 0x0;
    sc-&gt;irqres = bus_alloc_resource(dev, SYS_RES_IRQ, &amp;(sc-&gt;irqid),
				  0, ~0, 1, RF_SHAREABLE | RF_ACTIVE);
    if (sc-&gt;irqres == NULL) {
	printf("IRQ allocation failed!\n");
	error = ENXIO;
	goto fail3;
    }

    /* Now we should set up the interrupt handler */

    error = bus_setup_intr(dev, sc-&gt;irqres, INTR_TYPE_MISC,
			   my_handler, sc, &amp;(sc-&gt;handler));
    if (error) {
	printf("Couldn't set up irq\n");
	goto fail4;
    }
</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Some care must be taken in the detach routine of the
      driver.  You must quiesce the device's interrupt stream, and
      remove the interrupt handler.  Once
      <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_teardown_intr()</function> has returned, you
      know that your interrupt handler will no longer be called and
      that all threads that might have been executing this interrupt handler
      have returned.  Since this function can sleep, you must not hold
      any mutexes when calling this function.</para>

    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">DMA</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">PCI bus</primary><secondary xmlns:xlink="http://www.w3.org/1999/xlink">DMA</secondary></indexterm>
      <para xmlns:xlink="http://www.w3.org/1999/xlink">This section is obsolete, and present only for historical
      reasons.  The proper methods for dealing with these issues is to
      use the <function xmlns:xlink="http://www.w3.org/1999/xlink">bus_space_dma*()</function> functions instead.
      This paragraph can be removed when this section is updated to reflect
      that usage.  However, at the moment, the API is in a bit of
      flux, so once that settles down, it would be good to update this
      section to reflect that.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">On the PC, peripherals that want to do bus-mastering DMA
      must deal with physical addresses.  This is a problem since
      FreeBSD uses virtual memory and deals almost exclusively with
      virtual addresses.  Fortunately, there is a function,
      <function xmlns:xlink="http://www.w3.org/1999/xlink">vtophys()</function> to help.</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">#include &lt;vm/vm.h&gt;
#include &lt;vm/pmap.h&gt;

#define vtophys(virtual_address) (...)
</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The solution is a bit different on the alpha however, and
        what we really want is a function called
        <function xmlns:xlink="http://www.w3.org/1999/xlink">vtobus()</function>.</para>

<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">#if defined(__alpha__)
#define vtobus(va)      alpha_XXX_dmamap((vm_offset_t)va)
#else
#define vtobus(va)      vtophys(va)
#endif
</programlisting>

    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Deallocating Resources</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">It is very important to deallocate all of the resources
        that were allocated during <function xmlns:xlink="http://www.w3.org/1999/xlink">attach()</function>.
        Care must be taken to deallocate the correct stuff even on a
        failure condition so that the system will remain usable while
        your driver dies.</para>

    </sect2>
  </sect1>

</chapter>

    
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="scsi">
  <info><title xmlns:xlink="http://www.w3.org/1999/xlink">Common Access Method SCSI Controllers</title>
    <authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
      <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Sergey</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Babkin</surname></personname><contrib xmlns:xlink="http://www.w3.org/1999/xlink">Written by </contrib></author>
    </authorgroup>
    <authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
      <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Murray</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Stokely</surname></personname><contrib xmlns:xlink="http://www.w3.org/1999/xlink">Modifications for Handbook made by </contrib></author>
    </authorgroup>
  </info>

  

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="scsi-synopsis">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Synopsis</title>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">SCSI</primary></indexterm>
    <para xmlns:xlink="http://www.w3.org/1999/xlink">This document assumes that the reader has a general
      understanding of device drivers in FreeBSD and of the SCSI
      protocol.  Much of the information in this document was
      extracted from the drivers:</para>

    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">ncr (<filename xmlns:xlink="http://www.w3.org/1999/xlink">/sys/pci/ncr.c</filename>) by
	Wolfgang Stanglmeier and Stefan Esser</para></listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">sym (<filename xmlns:xlink="http://www.w3.org/1999/xlink">/sys/dev/sym/sym_hipd.c</filename>) by
	  Gerard Roudier</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">aic7xxx
	  (<filename xmlns:xlink="http://www.w3.org/1999/xlink">/sys/dev/aic7xxx/aic7xxx.c</filename>) by Justin
	  T. Gibbs</para>
      </listitem>
    </itemizedlist>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">and from the CAM code itself (by Justin T. Gibbs, see
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/sys/cam/*</filename>).  When some solution looked the
      most logical and was essentially verbatim extracted from the
      code by Justin T. Gibbs, I marked it as
      <quote xmlns:xlink="http://www.w3.org/1999/xlink">recommended</quote>.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The document is illustrated with examples in
      pseudo-code.  Although sometimes the examples have many details
      and look like real code, it is still pseudo-code.  It was
      written to demonstrate the concepts in an understandable way.
      For a real driver other approaches may be more modular and
      efficient.  It also abstracts from the hardware details, as well
      as issues that would cloud the demonstrated concepts or that are
      supposed to be described in the other chapters of the developers
      handbook.  Such details are commonly shown as calls to functions
      with descriptive names, comments or pseudo-statements.
      Fortunately real life full-size examples with all the details
      can be found in the real drivers.</para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="scsi-general">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">General Architecture</title>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink">
      <primary xmlns:xlink="http://www.w3.org/1999/xlink">Common Access Method (CAM)</primary>
    </indexterm>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">CAM stands for Common Access Method.  It is a generic way to
      address the I/O buses in a SCSI-like way.  This allows a
      separation of the generic device drivers from the drivers
      controlling the I/O bus: for example the disk driver becomes
      able to control disks on both SCSI, IDE, and/or any other bus so
      the disk driver portion does not have to be rewritten (or copied
      and modified) for every new I/O bus.  Thus the two most
      important active entities are:</para>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">CD-ROM</primary></indexterm>
    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">tape</primary></indexterm>
    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">IDE</primary></indexterm>
    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">Peripheral Modules</emphasis> - a
	  driver for peripheral devices (disk, tape, CD-ROM,
	  etc.)</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">SCSI Interface Modules </emphasis>(SIM) - a
	  Host Bus Adapter drivers for connecting to an I/O bus such
	  as SCSI or IDE.</para>
      </listitem>
    </itemizedlist>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">A peripheral driver receives requests from the OS, converts
      them to a sequence of SCSI commands and passes these SCSI
      commands to a SCSI Interface Module.  The SCSI Interface Module
      is responsible for passing these commands to the actual hardware
      (or if the actual hardware is not SCSI but, for example, IDE
      then also converting the SCSI commands to the native commands of
      the hardware).</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Because we are interested in writing a SCSI adapter driver
      here, from this point on we will consider everything from the
      SIM standpoint.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">A typical SIM driver needs to include the following
      CAM-related header files:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">#include &lt;cam/cam.h&gt;
#include &lt;cam/cam_ccb.h&gt;
#include &lt;cam/cam_sim.h&gt;
#include &lt;cam/cam_xpt_sim.h&gt;
#include &lt;cam/cam_debug.h&gt;
#include &lt;cam/scsi/scsi_all.h&gt;</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The first thing each SIM driver must do is register itself
      with the CAM subsystem.  This is done during the driver's
      <function xmlns:xlink="http://www.w3.org/1999/xlink">xxx_attach()</function> function (here and further
      xxx_ is used to denote the unique driver name prefix).  The
      <function xmlns:xlink="http://www.w3.org/1999/xlink">xxx_attach()</function> function itself is called by
      the system bus auto-configuration code which we do not describe
      here.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">This is achieved in multiple steps: first it is necessary to
      allocate the queue of requests associated with this SIM:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    struct cam_devq *devq;

    if(( devq = cam_simq_alloc(SIZE) )==NULL) {
        error; /* some code to handle the error */
    }</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Here <literal xmlns:xlink="http://www.w3.org/1999/xlink">SIZE</literal> is the size of the queue to be
      allocated, maximal number of requests it could contain.  It is
      the number of requests that the SIM driver can handle in
      parallel on one SCSI card.  Commonly it can be calculated
      as:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">SIZE = NUMBER_OF_SUPPORTED_TARGETS * MAX_SIMULTANEOUS_COMMANDS_PER_TARGET</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Next we create a descriptor of our SIM:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    struct cam_sim *sim;

    if(( sim = cam_sim_alloc(action_func, poll_func, driver_name,
            softc, unit, mtx, max_dev_transactions,
            max_tagged_dev_transactions, devq) )==NULL) {
        cam_simq_free(devq);
        error; /* some code to handle the error */
    }</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Note that if we are not able to create a SIM descriptor we
      free the <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">devq</varname> also because we can do
      nothing else with it and we want to conserve memory.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">If a SCSI card has multiple SCSI
      buses<indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">SCSI</primary><secondary xmlns:xlink="http://www.w3.org/1999/xlink">bus</secondary></indexterm>
      on it then each bus requires its own
      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">cam_sim</varname> structure.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">An interesting question is what to do if a SCSI card has
      more than one SCSI bus, do we need one
      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">devq</varname> structure per card or per SCSI
      bus?  The answer given in the comments to the CAM code is:
      either way, as the driver's author prefers.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The arguments are:</para>

    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">action_func</function> - pointer to
	  the driver's <function xmlns:xlink="http://www.w3.org/1999/xlink">xxx_action</function> function.
	  <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
	    <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
	      <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">static void
		<function xmlns:xlink="http://www.w3.org/1999/xlink">xxx_action</function>
	      </funcdef>
	      <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">
		<parameter xmlns:xlink="http://www.w3.org/1999/xlink">struct cam_sim *sim</parameter>,
		<parameter xmlns:xlink="http://www.w3.org/1999/xlink">union ccb *ccb</parameter>
	      </paramdef>
	    </funcprototype>
	  </funcsynopsis></para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">poll_func</function> - pointer to
	  the driver's <function xmlns:xlink="http://www.w3.org/1999/xlink">xxx_poll()</function>
	  <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
	    <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
	      <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">static void
		<function xmlns:xlink="http://www.w3.org/1999/xlink">xxx_poll</function>
	      </funcdef>
	      <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">
		<parameter xmlns:xlink="http://www.w3.org/1999/xlink">struct cam_sim *sim</parameter>
	      </paramdef>
	    </funcprototype>
	  </funcsynopsis></para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">driver_name - the name of the actual driver,
	  such as <quote xmlns:xlink="http://www.w3.org/1999/xlink">ncr</quote> or
	  <quote xmlns:xlink="http://www.w3.org/1999/xlink">wds</quote>.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">softc</varname> - pointer to the driver's
	  internal descriptor for this SCSI card.  This pointer will
	  be used by the driver in future to get private
	  data.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">unit - the controller unit number, for example
	  for controller <quote xmlns:xlink="http://www.w3.org/1999/xlink">mps0</quote> this number will be
	  0</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">mtx - Lock associated with this SIM. For SIMs that don't
	know about locking, pass in Giant. For SIMs that do, pass in
	the lock used to guard this SIM's data structures. This lock
	will be held when xxx_action and xxx_poll are called.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">max_dev_transactions - maximal number of simultaneous
	  transactions per SCSI target in the non-tagged mode.  This
	  value will be almost universally equal to 1, with possible
	  exceptions only for the non-SCSI cards.  Also the drivers
	  that hope to take advantage by preparing one transaction
	  while another one is executed may set it to 2 but this does
	  not seem to be worth the complexity.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">max_tagged_dev_transactions - the same thing, but in the
	  tagged mode.  Tags are the SCSI way to initiate multiple
	  transactions on a device: each transaction is assigned a
	  unique tag and the transaction is sent to the device.  When
	  the device completes some transaction it sends back the
	  result together with the tag so that the SCSI adapter (and
	  the driver) can tell which transaction was completed.  This
	  argument is also known as the maximal tag depth.  It depends
	  on the abilities of the SCSI adapter.</para>
      </listitem>

    </itemizedlist>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Finally we register the SCSI buses associated with our SCSI
      adapter<indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">SCSI</primary><secondary xmlns:xlink="http://www.w3.org/1999/xlink">adapter</secondary></indexterm>:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    if(xpt_bus_register(sim, softc, bus_number) != CAM_SUCCESS) {
        cam_sim_free(sim, /*free_devq*/ TRUE);
        error; /* some code to handle the error */
    }</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">If there is one <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">devq</varname> structure per
      SCSI bus (i.e., we consider a card with multiple buses as
      multiple cards with one bus each) then the bus number will
      always be 0, otherwise each bus on the SCSI card should be get a
      distinct number.  Each bus needs its own separate structure
      cam_sim.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">After that our controller is completely hooked to the CAM
      system.  The value of <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">devq</varname> can be
      discarded now: sim will be passed as an argument in all further
      calls from CAM and devq can be derived from it.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">CAM provides the framework for such asynchronous events.
      Some events originate from the lower levels (the SIM drivers),
      some events originate from the peripheral drivers, some events
      originate from the CAM subsystem itself.  Any driver can
      register callbacks for some types of the asynchronous events, so
      that it would be notified if these events occur.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">A typical example of such an event is a device reset.  Each
      transaction and event identifies the devices to which it applies
      by the means of <quote xmlns:xlink="http://www.w3.org/1999/xlink">path</quote>.  The target-specific events
      normally occur during a transaction with this device.  So the
      path from that transaction may be re-used to report this event
      (this is safe because the event path is copied in the event
      reporting routine but not deallocated nor passed anywhere
      further).  Also it is safe to allocate paths dynamically at any
      time including the interrupt routines, although that incurs
      certain overhead, and a possible problem with this approach is
      that there may be no free memory at that time.  For a bus reset
      event we need to define a wildcard path including all devices on
      the bus.  So we can create the path for the future bus reset
      events in advance and avoid problems with the future memory
      shortage:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    struct cam_path *path;

    if(xpt_create_path(&amp;path, /*periph*/NULL,
                cam_sim_path(sim), CAM_TARGET_WILDCARD,
                CAM_LUN_WILDCARD) != CAM_REQ_CMP) {
        xpt_bus_deregister(cam_sim_path(sim));
        cam_sim_free(sim, /*free_devq*/TRUE);
        error; /* some code to handle the error */
    }

    softc-&gt;wpath = path;
    softc-&gt;sim = sim;</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">As you can see the path includes:</para>

    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">ID of the peripheral driver (NULL here because we have
	  none)</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">ID of the SIM driver
	  (<function xmlns:xlink="http://www.w3.org/1999/xlink">cam_sim_path(sim)</function>)</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">SCSI target number of the device (CAM_TARGET_WILDCARD
	  means <quote xmlns:xlink="http://www.w3.org/1999/xlink">all devices</quote>)</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">SCSI LUN number of the subdevice (CAM_LUN_WILDCARD means
	  <quote xmlns:xlink="http://www.w3.org/1999/xlink">all LUNs</quote>)</para>
      </listitem>
    </itemizedlist>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">If the driver can not allocate this path it will not be able
      to work normally, so in that case we dismantle that SCSI
      bus.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">And we save the path pointer in the
      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">softc</varname> structure for future use.  After
      that we save the value of sim (or we can also discard it on the
      exit from <function xmlns:xlink="http://www.w3.org/1999/xlink">xxx_probe()</function> if we wish).</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">That is all for a minimalistic initialization.  To do things
      right there is one more issue left.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">For a SIM driver there is one particularly interesting
      event: when a target device is considered lost.  In this case
      resetting the SCSI negotiations with this device may be a good
      idea.  So we register a callback for this event with CAM.  The
      request is passed to CAM by requesting CAM action on a CAM
      control block for this type of request:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    struct ccb_setasync csa;

    xpt_setup_ccb(&amp;csa.ccb_h, path, /*priority*/5);
    csa.ccb_h.func_code = XPT_SASYNC_CB;
    csa.event_enable = AC_LOST_DEVICE;
    csa.callback = xxx_async;
    csa.callback_arg = sim;
    xpt_action((union ccb *)&amp;csa);</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Now we take a look at the <function xmlns:xlink="http://www.w3.org/1999/xlink">xxx_action()</function>
      and <function xmlns:xlink="http://www.w3.org/1999/xlink">xxx_poll()</function> driver entry points.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">
      <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
	<funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
	  <funcdef xmlns:xlink="http://www.w3.org/1999/xlink">static void
	    <function xmlns:xlink="http://www.w3.org/1999/xlink">xxx_action</function>
	  </funcdef>
	  <paramdef xmlns:xlink="http://www.w3.org/1999/xlink">
	    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">struct cam_sim *sim</parameter>,
	    <parameter xmlns:xlink="http://www.w3.org/1999/xlink">union ccb *ccb</parameter>
	  </paramdef>
	</funcprototype>
      </funcsynopsis></para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Do some action on request of the CAM subsystem.  Sim
      describes the SIM for the request, CCB is the request itself.
      CCB stands for <quote xmlns:xlink="http://www.w3.org/1999/xlink">CAM Control Block</quote>.  It is a union
      of many specific instances, each describing arguments for some
      type of transactions.  All of these instances share the CCB
      header where the common part of arguments is stored.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">CAM supports the SCSI controllers working in both initiator
      (<quote xmlns:xlink="http://www.w3.org/1999/xlink">normal</quote>) mode and target (simulating a SCSI
      device) mode.  Here we only consider the part relevant to the
      initiator mode.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">There are a few function and macros (in other words,
      methods) defined to access the public data in the struct
      sim:</para>

    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">cam_sim_path(sim)</function> - the path ID
	  (see above)</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">cam_sim_name(sim)</function> - the name of the
	  sim</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">cam_sim_softc(sim)</function> - the pointer to
	  the softc (driver private data) structure</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink"> cam_sim_unit(sim)</function> - the unit
	  number</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink"> cam_sim_bus(sim)</function> - the bus
	  ID</para>
      </listitem>
    </itemizedlist>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">To identify the device, <function xmlns:xlink="http://www.w3.org/1999/xlink">xxx_action()</function>
      can get the unit number and pointer to its structure softc using
      these functions.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The type of request is stored in
      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">ccb-&gt;ccb_h.func_code</varname>.  So
      generally <function xmlns:xlink="http://www.w3.org/1999/xlink">xxx_action()</function> consists of a big
      switch:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    struct xxx_softc *softc = (struct xxx_softc *) cam_sim_softc(sim);
    struct ccb_hdr *ccb_h = &amp;ccb-&gt;ccb_h;
    int unit = cam_sim_unit(sim);
    int bus = cam_sim_bus(sim);

    switch(ccb_h-&gt;func_code) {
    case ...:
        ...
    default:
        ccb_h-&gt;status = CAM_REQ_INVALID;
        xpt_done(ccb);
        break;
    }</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">As can be seen from the default case (if an unknown command
      was received) the return code of the command is set into
      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">ccb-&gt;ccb_h.status</varname> and the
      completed CCB is returned back to CAM by calling
      <function xmlns:xlink="http://www.w3.org/1999/xlink">xpt_done(ccb)</function>.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">xpt_done()</function> does not have to be called
      from <function xmlns:xlink="http://www.w3.org/1999/xlink">xxx_action()</function>: For example an I/O
      request may be enqueued inside the SIM driver and/or its SCSI
      controller.  Then when the device would post an interrupt
      signaling that the processing of this request is complete
      <function xmlns:xlink="http://www.w3.org/1999/xlink">xpt_done()</function> may be called from the interrupt
      handling routine.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Actually, the CCB status is not only assigned as a return
      code but a CCB has some status all the time.  Before CCB is
      passed to the <function xmlns:xlink="http://www.w3.org/1999/xlink">xxx_action()</function> routine it gets
      the status CCB_REQ_INPROG meaning that it is in progress.  There
      are a surprising number of status values defined in
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/sys/cam/cam.h</filename> which should be able to
      represent the status of a request in great detail.  More
      interesting yet, the status is in fact a <quote xmlns:xlink="http://www.w3.org/1999/xlink">bitwise
      or</quote> of an enumerated status value (the lower 6 bits) and
      possible additional flag-like bits (the upper bits).  The
      enumerated values will be discussed later in more detail.  The
      summary of them can be found in the Errors Summary section.  The
      possible status flags are:</para>

    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">CAM_DEV_QFRZN</emphasis> - if the SIM driver
	  gets a serious error (for example, the device does not
	  respond to the selection or breaks the SCSI protocol) when
	  processing a CCB it should freeze the request queue by
	  calling <function xmlns:xlink="http://www.w3.org/1999/xlink">xpt_freeze_simq()</function>, return the
	  other enqueued but not processed yet CCBs for this device
	  back to the CAM queue, then set this flag for the
	  troublesome CCB and call <function xmlns:xlink="http://www.w3.org/1999/xlink">xpt_done()</function>.
	  This flag causes the CAM subsystem to unfreeze the queue
	  after it handles the error.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">CAM_AUTOSNS_VALID</emphasis> - if the
	  device returned an error condition and the flag
	  CAM_DIS_AUTOSENSE is not set in CCB the SIM driver must
	  execute the REQUEST SENSE command automatically to extract
	  the sense (extended error information) data from the device.
	  If this attempt was successful the sense data should be
	  saved in the CCB and this flag set.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">CAM_RELEASE_SIMQ</emphasis> - like
	  CAM_DEV_QFRZN but used in case there is some problem (or
	  resource shortage) with the SCSI controller itself.  Then
	  all the future requests to the controller should be stopped
	  by <function xmlns:xlink="http://www.w3.org/1999/xlink">xpt_freeze_simq()</function>.  The controller
	  queue will be restarted after the SIM driver overcomes the
	  shortage and informs CAM by returning some CCB with this
	  flag set.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">CAM_SIM_QUEUED</emphasis> - when SIM puts a
	  CCB into its request queue this flag should be set (and
	  removed when this CCB gets dequeued before being returned
	  back to CAM).  This flag is not used anywhere in the CAM
	  code now, so its purpose is purely diagnostic.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">CAM_QOS_VALID</emphasis> - The QOS data
	  is now valid.</para>
      </listitem>
    </itemizedlist>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The function <function xmlns:xlink="http://www.w3.org/1999/xlink">xxx_action()</function> is not
      allowed to sleep, so all the synchronization for resource access
      must be done using SIM or device queue freezing.  Besides the
      aforementioned flags the CAM subsystem provides functions
      <function xmlns:xlink="http://www.w3.org/1999/xlink">xpt_release_simq()</function> and
      <function xmlns:xlink="http://www.w3.org/1999/xlink">xpt_release_devq()</function> to unfreeze the queues
      directly, without passing a CCB to CAM.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The CCB header contains the following fields:</para>

    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">path</emphasis> - path ID for the
	  request</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">target_id</emphasis> - target device ID for
	  the request</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">target_lun</emphasis> - LUN ID of the target
	  device</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">timeout</emphasis> - timeout interval for this
	  command, in milliseconds</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">timeout_ch</emphasis> - a convenience place
	  for the SIM driver to store the timeout handle (the CAM
	  subsystem itself does not make any assumptions about
	  it)</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">flags</emphasis> - various bits of information
	  about the request spriv_ptr0, spriv_ptr1 - fields reserved
	  for private use by the SIM driver (such as linking to the
	  SIM queues or SIM private control blocks); actually, they
	  exist as unions: spriv_ptr0 and spriv_ptr1 have the type
	  (void *), spriv_field0 and spriv_field1 have the type
	  unsigned long, sim_priv.entries[0].bytes and
	  sim_priv.entries[1].bytes are byte arrays of the size
	  consistent with the other incarnations of the union and
	  sim_priv.bytes is one array, twice bigger.</para>
      </listitem>
    </itemizedlist>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The recommended way of using the SIM private fields of CCB
      is to define some meaningful names for them and use these
      meaningful names in the driver, like:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">#define ccb_some_meaningful_name    sim_priv.entries[0].bytes
#define ccb_hcb spriv_ptr1 /* for hardware control block */</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The most common initiator mode requests are:</para>

    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">XPT_SCSI_IO</emphasis> - execute an I/O
	  transaction</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The instance <quote xmlns:xlink="http://www.w3.org/1999/xlink">struct ccb_scsiio csio</quote> of
	  the union ccb is used to transfer the arguments.  They
	  are:</para>

	<itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">cdb_io</emphasis> - pointer to the SCSI
	      command buffer or the buffer itself</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">cdb_len</emphasis> - SCSI command
	      length</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">data_ptr</emphasis> - pointer to the data
	      buffer (gets a bit complicated if scatter/gather is
	      used)</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">dxfer_len</emphasis> - length of the data
	      to transfer</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">sglist_cnt</emphasis> - counter of the
	      scatter/gather segments</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">scsi_status</emphasis> - place to return
	      the SCSI status</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">sense_data</emphasis> - buffer for the
	      SCSI sense information if the command returns an error
	      (the SIM driver is supposed to run the REQUEST SENSE
	      command automatically in this case if the CCB flag
	      CAM_DIS_AUTOSENSE is not set)</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">sense_len</emphasis> - the length of that
	      buffer (if it happens to be higher than size of
	      sense_data the SIM driver must silently assume the
	      smaller value) resid, sense_resid - if the transfer of
	      data or SCSI sense returned an error these are the
	      returned counters of the residual (not transferred)
	      data.  They do not seem to be especially meaningful, so
	      in a case when they are difficult to compute (say,
	      counting bytes in the SCSI controller's FIFO buffer) an
	      approximate value will do as well.  For a successfully
	      completed transfer they must be set to
	      zero.</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">tag_action</emphasis> - the kind of tag to
	      use:</para>

	    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">CAM_TAG_ACTION_NONE - do not use tags for this
		  transaction</para>
	      </listitem>

	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink">MSG_SIMPLE_Q_TAG, MSG_HEAD_OF_Q_TAG,
		  MSG_ORDERED_Q_TAG - value equal to the appropriate
		  tag message (see /sys/cam/scsi/scsi_message.h); this
		  gives only the tag type, the SIM driver must assign
		  the tag value itself</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>
	</itemizedlist>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The general logic of handling this request is the
	  following:</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The first thing to do is to check for possible races, to
	  make sure that the command did not get aborted when it was
	  sitting in the queue:</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    struct ccb_scsiio *csio = &amp;ccb-&gt;csio;

    if ((ccb_h-&gt;status &amp; CAM_STATUS_MASK) != CAM_REQ_INPROG) {
        xpt_done(ccb);
        return;
    }</programlisting>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Also we check that the device is supported at all by our
	  controller:</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    if(ccb_h-&gt;target_id &gt; OUR_MAX_SUPPORTED_TARGET_ID
    || cch_h-&gt;target_id == OUR_SCSI_CONTROLLERS_OWN_ID) {
        ccb_h-&gt;status = CAM_TID_INVALID;
        xpt_done(ccb);
        return;
    }
    if(ccb_h-&gt;target_lun &gt; OUR_MAX_SUPPORTED_LUN) {
        ccb_h-&gt;status = CAM_LUN_INVALID;
        xpt_done(ccb);
        return;
    }</programlisting>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Then allocate whatever data structures (such as
	  card-dependent hardware control
	  block<indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">hardware control
	    block</primary></indexterm>) we need to process this
	  request.  If we can not then freeze the SIM queue and
	  remember that we have a pending operation, return the CCB
	  back and ask CAM to re-queue it.  Later when the resources
	  become available the SIM queue must be unfrozen by returning
	  a ccb with the <literal xmlns:xlink="http://www.w3.org/1999/xlink">CAM_SIMQ_RELEASE</literal> bit set
	  in its status.  Otherwise, if all went well, link the CCB
	  with the hardware control block (HCB) and mark it as
	  queued.</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    struct xxx_hcb *hcb = allocate_hcb(softc, unit, bus);

    if(hcb == NULL) {
        softc-&gt;flags |= RESOURCE_SHORTAGE;
        xpt_freeze_simq(sim, /*count*/1);
        ccb_h-&gt;status = CAM_REQUEUE_REQ;
        xpt_done(ccb);
        return;
    }

    hcb-&gt;ccb = ccb; ccb_h-&gt;ccb_hcb = (void *)hcb;
    ccb_h-&gt;status |= CAM_SIM_QUEUED;</programlisting>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Extract the target data from CCB into the hardware
	  control block.  Check if we are asked to assign a tag and if
	  yes then generate an unique tag and build the SCSI tag
	  messages.  The SIM driver is also responsible for
	  negotiations with the devices to set the maximal mutually
	  supported bus width, synchronous rate and offset.</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    hcb-&gt;target = ccb_h-&gt;target_id; hcb-&gt;lun = ccb_h-&gt;target_lun;
    generate_identify_message(hcb);
    if( ccb_h-&gt;tag_action != CAM_TAG_ACTION_NONE )
        generate_unique_tag_message(hcb, ccb_h-&gt;tag_action);
    if( !target_negotiated(hcb) )
        generate_negotiation_messages(hcb);</programlisting>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Then set up the SCSI command.  The command storage may
	  be specified in the CCB in many interesting ways, specified
	  by the CCB flags.  The command buffer can be contained in
	  CCB or pointed to, in the latter case the pointer may be
	  physical or virtual.  Since the hardware commonly needs
	  physical address we always convert the address to the
	  physical one, typically using the busdma API.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">In case if a physical address is
	  requested it is OK to return the CCB with the status
	  <errorname xmlns:xlink="http://www.w3.org/1999/xlink">CAM_REQ_INVALID</errorname>, the current drivers
	  do that.  If necessary a physical address can be also
	  converted or mapped back to a virtual address but with
	  big pain, so we do not do that.</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    if(ccb_h-&gt;flags &amp; CAM_CDB_POINTER) {
        /* CDB is a pointer */
        if(!(ccb_h-&gt;flags &amp; CAM_CDB_PHYS)) {
            /* CDB pointer is virtual */
            hcb-&gt;cmd = vtobus(csio-&gt;cdb_io.cdb_ptr);
        } else {
            /* CDB pointer is physical */
            hcb-&gt;cmd = csio-&gt;cdb_io.cdb_ptr ;
        }
    } else {
        /* CDB is in the ccb (buffer) */
        hcb-&gt;cmd = vtobus(csio-&gt;cdb_io.cdb_bytes);
    }
    hcb-&gt;cmdlen = csio-&gt;cdb_len;</programlisting>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Now it is time to set up the data.  Again, the data
	  storage may be specified in the CCB in many interesting
	  ways, specified by the CCB flags.  First we get the
	  direction of the data transfer.  The simplest case is if
	  there is no data to transfer:</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    int dir = (ccb_h-&gt;flags &amp; CAM_DIR_MASK);

    if (dir == CAM_DIR_NONE)
        goto end_data;</programlisting>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Then we check if the data is in one chunk or in a
	  scatter-gather list, and the addresses are physical or
	  virtual.  The SCSI controller may be able to handle only a
	  limited number of chunks of limited length.  If the request
	  hits this limitation we return an error.  We use a special
	  function to return the CCB to handle in one place the HCB
	  resource shortages.  The functions to add chunks are
	  driver-dependent, and here we leave them without detailed
	  implementation.  See description of the SCSI command (CDB)
	  handling for the details on the address-translation issues.
	  If some variation is too difficult or impossible to
	  implement with a particular card it is OK to return the
	  status <errorname xmlns:xlink="http://www.w3.org/1999/xlink">CAM_REQ_INVALID</errorname>.  Actually, it
	  seems like the scatter-gather ability is not used anywhere
	  in the CAM code now.  But at least the case for a single
	  non-scattered virtual buffer must be implemented, it is
	  actively used by CAM.</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    int rv;

    initialize_hcb_for_data(hcb);

    if((!(ccb_h-&gt;flags &amp; CAM_SCATTER_VALID)) {
        /* single buffer */
        if(!(ccb_h-&gt;flags &amp; CAM_DATA_PHYS)) {
            rv = add_virtual_chunk(hcb, csio-&gt;data_ptr, csio-&gt;dxfer_len, dir);
            }
        } else {
            rv = add_physical_chunk(hcb, csio-&gt;data_ptr, csio-&gt;dxfer_len, dir);
        }
    } else {
        int i;
        struct bus_dma_segment *segs;
        segs = (struct bus_dma_segment *)csio-&gt;data_ptr;

        if ((ccb_h-&gt;flags &amp; CAM_SG_LIST_PHYS) != 0) {
            /* The SG list pointer is physical */
            rv = setup_hcb_for_physical_sg_list(hcb, segs, csio-&gt;sglist_cnt);
        } else if (!(ccb_h-&gt;flags &amp; CAM_DATA_PHYS)) {
            /* SG buffer pointers are virtual */
            for (i = 0; i &lt; csio-&gt;sglist_cnt; i++) {
                rv = add_virtual_chunk(hcb, segs[i].ds_addr,
                    segs[i].ds_len, dir);
                if (rv != CAM_REQ_CMP)
                    break;
            }
        } else {
            /* SG buffer pointers are physical */
            for (i = 0; i &lt; csio-&gt;sglist_cnt; i++) {
                rv = add_physical_chunk(hcb, segs[i].ds_addr,
                    segs[i].ds_len, dir);
                if (rv != CAM_REQ_CMP)
                    break;
            }
        }
    }
    if(rv != CAM_REQ_CMP) {
        /* we expect that add_*_chunk() functions return CAM_REQ_CMP
         * if they added a chunk successfully, CAM_REQ_TOO_BIG if
         * the request is too big (too many bytes or too many chunks),
         * CAM_REQ_INVALID in case of other troubles
         */
        free_hcb_and_ccb_done(hcb, ccb, rv);
        return;
    }
    end_data:</programlisting>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">If disconnection is disabled for this CCB we pass this
	  information to the hcb:</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    if(ccb_h-&gt;flags &amp; CAM_DIS_DISCONNECT)
        hcb_disable_disconnect(hcb);</programlisting>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">If the controller is able to run REQUEST SENSE command
	  all by itself then the value of the flag CAM_DIS_AUTOSENSE
	  should also be passed to it, to prevent automatic REQUEST
	  SENSE if the CAM subsystem does not want it.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The only thing left is to set up the timeout, pass our
	  hcb to the hardware and return, the rest will be done by the
	  interrupt handler (or timeout handler).</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    ccb_h-&gt;timeout_ch = timeout(xxx_timeout, (caddr_t) hcb,
        (ccb_h-&gt;timeout * hz) / 1000); /* convert milliseconds to ticks */
    put_hcb_into_hardware_queue(hcb);
    return;</programlisting>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">And here is a possible implementation of the function
	  returning CCB:</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    static void
    free_hcb_and_ccb_done(struct xxx_hcb *hcb, union ccb *ccb, u_int32_t status)
    {
        struct xxx_softc *softc = hcb-&gt;softc;

        ccb-&gt;ccb_h.ccb_hcb = 0;
        if(hcb != NULL) {
            untimeout(xxx_timeout, (caddr_t) hcb, ccb-&gt;ccb_h.timeout_ch);
            /* we're about to free a hcb, so the shortage has ended */
            if(softc-&gt;flags &amp; RESOURCE_SHORTAGE)  {
                softc-&gt;flags &amp;= ~RESOURCE_SHORTAGE;
                status |= CAM_RELEASE_SIMQ;
            }
            free_hcb(hcb); /* also removes hcb from any internal lists */
        }
        ccb-&gt;ccb_h.status = status |
            (ccb-&gt;ccb_h.status &amp; ~(CAM_STATUS_MASK|CAM_SIM_QUEUED));
        xpt_done(ccb);
    }</programlisting>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">XPT_RESET_DEV</emphasis> - send the SCSI
	  <quote xmlns:xlink="http://www.w3.org/1999/xlink">BUS DEVICE RESET</quote> message to a device</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">There is no data transferred in CCB except the header
	  and the most interesting argument of it is target_id.
	  Depending on the controller hardware a hardware control
	  block just like for the XPT_SCSI_IO request may be
	  constructed (see XPT_SCSI_IO request description) and sent
	  to the controller or the SCSI controller may be immediately
	  programmed to send this RESET message to the device or this
	  request may be just not supported (and return the status
	  <errorname xmlns:xlink="http://www.w3.org/1999/xlink">CAM_REQ_INVALID</errorname>).  Also on completion
	  of the request all the disconnected transactions for this
	  target must be aborted (probably in the interrupt
	  routine).</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Also all the current negotiations for the target are
	  lost on reset, so they might be cleaned too.  Or they
	  clearing may be deferred, because anyway the target would
	  request re-negotiation on the next
	  transaction.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">XPT_RESET_BUS</emphasis> - send the RESET
	  signal to the SCSI bus</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">No arguments are passed in the CCB, the only interesting
	  argument is the SCSI bus indicated by the struct sim
	  pointer.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">A minimalistic implementation would forget the SCSI
	  negotiations for all the devices on the bus and return the
	  status CAM_REQ_CMP.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The proper implementation would in addition actually
	  reset the SCSI bus (possible also reset the SCSI controller)
	  and mark all the CCBs being processed, both those in the
	  hardware queue and those being disconnected, as done with
	  the status CAM_SCSI_BUS_RESET. Like:</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    int targ, lun;
    struct xxx_hcb *h, *hh;
    struct ccb_trans_settings neg;
    struct cam_path *path;

    /* The SCSI bus reset may take a long time, in this case its completion
     * should be checked by interrupt or timeout. But for simplicity
     * we assume here that it is really fast.
     */
    reset_scsi_bus(softc);

    /* drop all enqueued CCBs */
    for(h = softc-&gt;first_queued_hcb; h != NULL; h = hh) {
        hh = h-&gt;next;
        free_hcb_and_ccb_done(h, h-&gt;ccb, CAM_SCSI_BUS_RESET);
    }

    /* the clean values of negotiations to report */
    neg.bus_width = 8;
    neg.sync_period = neg.sync_offset = 0;
    neg.valid = (CCB_TRANS_BUS_WIDTH_VALID
        | CCB_TRANS_SYNC_RATE_VALID | CCB_TRANS_SYNC_OFFSET_VALID);

    /* drop all disconnected CCBs and clean negotiations  */
    for(targ=0; targ &lt;= OUR_MAX_SUPPORTED_TARGET; targ++) {
        clean_negotiations(softc, targ);

        /* report the event if possible */
        if(xpt_create_path(&amp;path, /*periph*/NULL,
                cam_sim_path(sim), targ,
                CAM_LUN_WILDCARD) == CAM_REQ_CMP) {
            xpt_async(AC_TRANSFER_NEG, path, &amp;neg);
            xpt_free_path(path);
        }

        for(lun=0; lun &lt;= OUR_MAX_SUPPORTED_LUN; lun++)
            for(h = softc-&gt;first_discon_hcb[targ][lun]; h != NULL; h = hh) {
                hh=h-&gt;next;
                free_hcb_and_ccb_done(h, h-&gt;ccb, CAM_SCSI_BUS_RESET);
            }
    }

    ccb-&gt;ccb_h.status = CAM_REQ_CMP;
    xpt_done(ccb);

    /* report the event */
    xpt_async(AC_BUS_RESET, softc-&gt;wpath, NULL);
    return;</programlisting>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Implementing the SCSI bus reset as a function may be a
	  good idea because it would be re-used by the timeout
	  function as a last resort if the things go
	  wrong.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">XPT_ABORT</emphasis> - abort the specified
	  CCB</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The arguments are transferred in the instance
	  <quote xmlns:xlink="http://www.w3.org/1999/xlink">struct ccb_abort cab</quote> of the union ccb.  The
	  only argument field in it is:</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">abort_ccb</emphasis> - pointer to the CCB to
	  be aborted</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">If the abort is not supported just return the status
	  CAM_UA_ABORT.  This is also the easy way to minimally
	  implement this call, return CAM_UA_ABORT in any case.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The hard way is to implement this request honestly.
	  First check that abort applies to a SCSI transaction:</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    struct ccb *abort_ccb;
    abort_ccb = ccb-&gt;cab.abort_ccb;

    if(abort_ccb-&gt;ccb_h.func_code != XPT_SCSI_IO) {
        ccb-&gt;ccb_h.status = CAM_UA_ABORT;
        xpt_done(ccb);
        return;
    }</programlisting>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Then it is necessary to find this CCB in our queue.
	  This can be done by walking the list of all our hardware
	  control blocks in search for one associated with this
	  CCB:</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    struct xxx_hcb *hcb, *h;

    hcb = NULL;

    /* We assume that softc-&gt;first_hcb is the head of the list of all
     * HCBs associated with this bus, including those enqueued for
     * processing, being processed by hardware and disconnected ones.
     */
    for(h = softc-&gt;first_hcb; h != NULL; h = h-&gt;next) {
        if(h-&gt;ccb == abort_ccb) {
            hcb = h;
            break;
        }
    }

    if(hcb == NULL) {
        /* no such CCB in our queue */
        ccb-&gt;ccb_h.status = CAM_PATH_INVALID;
        xpt_done(ccb);
        return;
    }

    hcb=found_hcb;</programlisting>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Now we look at the current processing status of the HCB.
	  It may be either sitting in the queue waiting to be sent to
	  the SCSI bus, being transferred right now, or disconnected
	  and waiting for the result of the command, or actually
	  completed by hardware but not yet marked as done by
	  software.  To make sure that we do not get in any races with
	  hardware we mark the HCB as being aborted, so that if this
	  HCB is about to be sent to the SCSI bus the SCSI controller
	  will see this flag and skip it.</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    int hstatus;

    /* shown as a function, in case special action is needed to make
     * this flag visible to hardware
     */
    set_hcb_flags(hcb, HCB_BEING_ABORTED);

    abort_again:

    hstatus = get_hcb_status(hcb);
    switch(hstatus) {
    case HCB_SITTING_IN_QUEUE:
        remove_hcb_from_hardware_queue(hcb);
        /* FALLTHROUGH */
    case HCB_COMPLETED:
        /* this is an easy case */
        free_hcb_and_ccb_done(hcb, abort_ccb, CAM_REQ_ABORTED);
        break;</programlisting>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">If the CCB is being transferred right now we would like
	  to signal to the SCSI controller in some hardware-dependent
	  way that we want to abort the current transfer.  The SCSI
	  controller would set the SCSI ATTENTION signal and when the
	  target responds to it send an ABORT message.  We also reset
	  the timeout to make sure that the target is not sleeping
	  forever.  If the command would not get aborted in some
	  reasonable time like 10 seconds the timeout routine would go
	  ahead and reset the whole SCSI bus.  Because the command
	  will be aborted in some reasonable time we can just return
	  the abort request now as successfully completed, and mark
	  the aborted CCB as aborted (but not mark it as done
	  yet).</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    case HCB_BEING_TRANSFERRED:
        untimeout(xxx_timeout, (caddr_t) hcb, abort_ccb-&gt;ccb_h.timeout_ch);
        abort_ccb-&gt;ccb_h.timeout_ch =
            timeout(xxx_timeout, (caddr_t) hcb, 10 * hz);
        abort_ccb-&gt;ccb_h.status = CAM_REQ_ABORTED;
        /* ask the controller to abort that HCB, then generate
         * an interrupt and stop
         */
        if(signal_hardware_to_abort_hcb_and_stop(hcb) &lt; 0) {
            /* oops, we missed the race with hardware, this transaction
             * got off the bus before we aborted it, try again */
            goto abort_again;
        }

        break;</programlisting>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">If the CCB is in the list of disconnected then set it up
	  as an abort request and re-queue it at the front of hardware
	  queue.  Reset the timeout and report the abort request to be
	  completed.</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    case HCB_DISCONNECTED:
        untimeout(xxx_timeout, (caddr_t) hcb, abort_ccb-&gt;ccb_h.timeout_ch);
        abort_ccb-&gt;ccb_h.timeout_ch =
            timeout(xxx_timeout, (caddr_t) hcb, 10 * hz);
        put_abort_message_into_hcb(hcb);
        put_hcb_at_the_front_of_hardware_queue(hcb);
        break;
    }
    ccb-&gt;ccb_h.status = CAM_REQ_CMP;
    xpt_done(ccb);
    return;</programlisting>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">That is all for the ABORT request, although there is one
	  more issue.  Because the ABORT message cleans all the
	  ongoing transactions on a LUN we have to mark all the other
	  active transactions on this LUN as aborted.  That should be
	  done in the interrupt routine, after the transaction gets
	  aborted.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Implementing the CCB abort as a function may be quite a
	  good idea, this function can be re-used if an I/O
	  transaction times out.  The only difference would be that
	  the timed out transaction would return the status
	  CAM_CMD_TIMEOUT for the timed out request.  Then the case
	  XPT_ABORT would be small, like that:</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    case XPT_ABORT:
        struct ccb *abort_ccb;
        abort_ccb = ccb-&gt;cab.abort_ccb;

        if(abort_ccb-&gt;ccb_h.func_code != XPT_SCSI_IO) {
            ccb-&gt;ccb_h.status = CAM_UA_ABORT;
            xpt_done(ccb);
            return;
        }
        if(xxx_abort_ccb(abort_ccb, CAM_REQ_ABORTED) &lt; 0)
            /* no such CCB in our queue */
            ccb-&gt;ccb_h.status = CAM_PATH_INVALID;
        else
            ccb-&gt;ccb_h.status = CAM_REQ_CMP;
        xpt_done(ccb);
        return;</programlisting>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">XPT_SET_TRAN_SETTINGS</emphasis> - explicitly
	  set values of SCSI transfer settings</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The arguments are transferred in the instance
	  <quote xmlns:xlink="http://www.w3.org/1999/xlink">struct ccb_trans_setting cts</quote> of the union
	  ccb:</para>

	<itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">valid</emphasis> - a bitmask showing which
	      settings should be updated:</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">CCB_TRANS_SYNC_RATE_VALID</emphasis> -
	      synchronous transfer rate</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">CCB_TRANS_SYNC_OFFSET_VALID</emphasis> -
	      synchronous offset</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">CCB_TRANS_BUS_WIDTH_VALID</emphasis> - bus
	      width</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">CCB_TRANS_DISC_VALID</emphasis> - set
	      enable/disable disconnection</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">CCB_TRANS_TQ_VALID</emphasis> - set
	      enable/disable tagged queuing</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">flags</emphasis> - consists of two parts,
	      binary arguments and identification of sub-operations.
	      The binary arguments are:</para>

	    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">CCB_TRANS_DISC_ENB</emphasis> - enable
		  disconnection</para>
	      </listitem>

	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">CCB_TRANS_TAG_ENB</emphasis> - enable
		  tagged queuing</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">the sub-operations are:</para>

	    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">CCB_TRANS_CURRENT_SETTINGS</emphasis>
		  - change the current negotiations</para>
	      </listitem>

	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">CCB_TRANS_USER_SETTINGS</emphasis> -
		  remember the desired user values sync_period,
		  sync_offset - self-explanatory, if sync_offset==0
		  then the asynchronous mode is requested bus_width -
		  bus width, in bits (not bytes)</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>
	</itemizedlist>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Two sets of negotiated parameters are supported, the
	  user settings and the current settings.  The user settings
	  are not really used much in the SIM drivers, this is mostly
	  just a piece of memory where the upper levels can store (and
	  later recall) its ideas about the parameters.  Setting the
	  user parameters does not cause re-negotiation of the
	  transfer rates.  But when the SCSI controller does a
	  negotiation it must never set the values higher than the
	  user parameters, so it is essentially the top
	  boundary.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The current settings are, as the name says, current.
	  Changing them means that the parameters must be
	  re-negotiated on the next transfer.  Again, these
	  <quote xmlns:xlink="http://www.w3.org/1999/xlink">new current settings</quote> are not supposed to be
	  forced on the device, just they are used as the initial step
	  of negotiations.  Also they must be limited by actual
	  capabilities of the SCSI controller: for example, if the
	  SCSI controller has 8-bit bus and the request asks to set
	  16-bit wide transfers this parameter must be silently
	  truncated to 8-bit transfers before sending it to the
	  device.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">One caveat is that the bus width and synchronous
	  parameters are per target while the disconnection and tag
	  enabling parameters are per lun.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The recommended implementation is to keep 3 sets of
	  negotiated (bus width and synchronous transfer)
	  parameters:</para>

	<itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">user</emphasis> - the user set, as
	      above</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">current</emphasis> - those actually in
	      effect</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">goal</emphasis> - those requested by
	      setting of the <quote xmlns:xlink="http://www.w3.org/1999/xlink">current</quote>
	      parameters</para>
	  </listitem>
	</itemizedlist>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The code looks like:</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    struct ccb_trans_settings *cts;
    int targ, lun;
    int flags;

    cts = &amp;ccb-&gt;cts;
    targ = ccb_h-&gt;target_id;
    lun = ccb_h-&gt;target_lun;
    flags = cts-&gt;flags;
    if(flags &amp; CCB_TRANS_USER_SETTINGS) {
        if(flags &amp; CCB_TRANS_SYNC_RATE_VALID)
            softc-&gt;user_sync_period[targ] = cts-&gt;sync_period;
        if(flags &amp; CCB_TRANS_SYNC_OFFSET_VALID)
            softc-&gt;user_sync_offset[targ] = cts-&gt;sync_offset;
        if(flags &amp; CCB_TRANS_BUS_WIDTH_VALID)
            softc-&gt;user_bus_width[targ] = cts-&gt;bus_width;

        if(flags &amp; CCB_TRANS_DISC_VALID) {
            softc-&gt;user_tflags[targ][lun] &amp;= ~CCB_TRANS_DISC_ENB;
            softc-&gt;user_tflags[targ][lun] |= flags &amp; CCB_TRANS_DISC_ENB;
        }
        if(flags &amp; CCB_TRANS_TQ_VALID) {
            softc-&gt;user_tflags[targ][lun] &amp;= ~CCB_TRANS_TQ_ENB;
            softc-&gt;user_tflags[targ][lun] |= flags &amp; CCB_TRANS_TQ_ENB;
        }
    }
    if(flags &amp; CCB_TRANS_CURRENT_SETTINGS) {
        if(flags &amp; CCB_TRANS_SYNC_RATE_VALID)
            softc-&gt;goal_sync_period[targ] =
                max(cts-&gt;sync_period, OUR_MIN_SUPPORTED_PERIOD);
        if(flags &amp; CCB_TRANS_SYNC_OFFSET_VALID)
            softc-&gt;goal_sync_offset[targ] =
                min(cts-&gt;sync_offset, OUR_MAX_SUPPORTED_OFFSET);
        if(flags &amp; CCB_TRANS_BUS_WIDTH_VALID)
            softc-&gt;goal_bus_width[targ] = min(cts-&gt;bus_width, OUR_BUS_WIDTH);

        if(flags &amp; CCB_TRANS_DISC_VALID) {
            softc-&gt;current_tflags[targ][lun] &amp;= ~CCB_TRANS_DISC_ENB;
            softc-&gt;current_tflags[targ][lun] |= flags &amp; CCB_TRANS_DISC_ENB;
        }
        if(flags &amp; CCB_TRANS_TQ_VALID) {
            softc-&gt;current_tflags[targ][lun] &amp;= ~CCB_TRANS_TQ_ENB;
            softc-&gt;current_tflags[targ][lun] |= flags &amp; CCB_TRANS_TQ_ENB;
        }
    }
    ccb-&gt;ccb_h.status = CAM_REQ_CMP;
    xpt_done(ccb);
    return;</programlisting>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Then when the next I/O request will be processed it will
	  check if it has to re-negotiate, for example by calling the
	  function target_negotiated(hcb).  It can be implemented like
	  this:</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    int
    target_negotiated(struct xxx_hcb *hcb)
    {
        struct softc *softc = hcb-&gt;softc;
        int targ = hcb-&gt;targ;

        if( softc-&gt;current_sync_period[targ] != softc-&gt;goal_sync_period[targ]
        || softc-&gt;current_sync_offset[targ] != softc-&gt;goal_sync_offset[targ]
        || softc-&gt;current_bus_width[targ] != softc-&gt;goal_bus_width[targ] )
            return 0; /* FALSE */
        else
            return 1; /* TRUE */
    }</programlisting>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">After the values are re-negotiated the resulting values
	  must be assigned to both current and goal parameters, so for
	  future I/O transactions the current and goal parameters
	  would be the same and
	  <function xmlns:xlink="http://www.w3.org/1999/xlink">target_negotiated()</function> would return TRUE.
	  When the card is initialized (in
	  <function xmlns:xlink="http://www.w3.org/1999/xlink">xxx_attach()</function>) the current negotiation
	  values must be initialized to narrow asynchronous mode, the
	  goal and current values must be initialized to the maximal
	  values supported by controller.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">XPT_GET_TRAN_SETTINGS</emphasis> - get values
	  of SCSI transfer settings</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">This operations is the reverse of XPT_SET_TRAN_SETTINGS.
	  Fill up the CCB instance
	  <quote xmlns:xlink="http://www.w3.org/1999/xlink">struct ccb_trans_setting cts</quote> with data as
	  requested by the flags CCB_TRANS_CURRENT_SETTINGS or
	  CCB_TRANS_USER_SETTINGS (if both are set then the existing
	  drivers return the current settings).  Set all the bits in
	  the valid field.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">XPT_CALC_GEOMETRY</emphasis> - calculate
	  logical (BIOS)<indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</primary></indexterm>
	  geometry of the disk</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The arguments are transferred in the instance
	  <quote xmlns:xlink="http://www.w3.org/1999/xlink">struct ccb_calc_geometry ccg</quote> of the union
	  ccb:</para>

	<itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">block_size</emphasis> - input, block
	      (A.K.A sector) size in bytes</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">volume_size</emphasis> - input, volume
	      size in bytes</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">cylinders</emphasis> - output, logical
	      cylinders</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">heads</emphasis> - output, logical
	      heads</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">secs_per_track</emphasis> - output,
	      logical sectors per track</para>
	  </listitem>
	</itemizedlist>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">If the returned geometry differs much enough from what
	  the SCSI controller BIOS<indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">SCSI</primary>
	  <secondary xmlns:xlink="http://www.w3.org/1999/xlink">BIOS</secondary></indexterm> thinks and a disk on
	  this SCSI controller is used as bootable the system may not
	  be able to boot.  The typical calculation example taken from
	  the aic7xxx driver is:</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    struct    ccb_calc_geometry *ccg;
    u_int32_t size_mb;
    u_int32_t secs_per_cylinder;
    int   extended;

    ccg = &amp;ccb-&gt;ccg;
    size_mb = ccg-&gt;volume_size
        / ((1024L * 1024L) / ccg-&gt;block_size);
    extended = check_cards_EEPROM_for_extended_geometry(softc);

    if (size_mb &gt; 1024 &amp;&amp; extended) {
        ccg-&gt;heads = 255;
        ccg-&gt;secs_per_track = 63;
    } else {
        ccg-&gt;heads = 64;
        ccg-&gt;secs_per_track = 32;
    }
    secs_per_cylinder = ccg-&gt;heads * ccg-&gt;secs_per_track;
    ccg-&gt;cylinders = ccg-&gt;volume_size / secs_per_cylinder;
    ccb-&gt;ccb_h.status = CAM_REQ_CMP;
    xpt_done(ccb);
    return;</programlisting>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">This gives the general idea, the exact calculation
	  depends on the quirks of the particular BIOS.  If BIOS
	  provides no way set the <quote xmlns:xlink="http://www.w3.org/1999/xlink">extended translation</quote>
	  flag in EEPROM this flag should normally be assumed equal to
	  1. Other popular geometries are:</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    128 heads, 63 sectors - Symbios controllers
    16 heads, 63 sectors - old controllers</programlisting>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Some system BIOSes and SCSI BIOSes fight with each other
	  with variable success, for example a combination of Symbios
	  875/895 SCSI and Phoenix BIOS can give geometry 128/63 after
	  power up and 255/63 after a hard reset or soft
	  reboot.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">XPT_PATH_INQ</emphasis> - path inquiry, in
	  other words get the SIM driver and SCSI controller (also
	  known as HBA - Host Bus Adapter) properties</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The properties are returned in the instance
	  <quote xmlns:xlink="http://www.w3.org/1999/xlink">struct ccb_pathinq cpi</quote> of the union
	  ccb:</para>

	<itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">version_num - the SIM driver version number, now all
	      drivers use 1</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">hba_inquiry - bitmask of features supported by the
	      controller:</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">PI_MDP_ABLE - supports MDP message (something from
	      SCSI3?)</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">PI_WIDE_32 - supports 32 bit wide
	      SCSI</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">PI_WIDE_16 - supports 16 bit wide
	      SCSI</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">PI_SDTR_ABLE - can negotiate synchronous transfer
	      rate</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">PI_LINKED_CDB - supports linked
	      commands</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">PI_TAG_ABLE - supports tagged
	      commands</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">PI_SOFT_RST - supports soft reset alternative (hard
	      reset and soft reset are mutually exclusive within a
	      SCSI bus)</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">target_sprt - flags for target mode support, 0 if
	      unsupported</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">hba_misc - miscellaneous controller
	      features:</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">PIM_SCANHILO - bus scans from high ID to low
	      ID</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">PIM_NOREMOVE - removable devices not included in
	      scan</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">PIM_NOINITIATOR - initiator role not
	      supported</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">PIM_NOBUSRESET - user has disabled initial BUS
	      RESET</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">hba_eng_cnt - mysterious HBA engine count, something
	      related to compression, now is always set to 0</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">vuhba_flags - vendor-unique flags, unused now</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">max_target - maximal supported target ID (7 for
	      8-bit bus, 15 for 16-bit bus, 127 for Fibre
	      Channel)</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">max_lun - maximal supported LUN ID (7 for older SCSI
	      controllers, 63 for newer ones)</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">async_flags - bitmask of installed Async handler,
	      unused now</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">hpath_id - highest Path ID in the subsystem, unused
	      now</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">unit_number - the controller unit number,
	      cam_sim_unit(sim)</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">bus_id - the bus number, cam_sim_bus(sim)</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">initiator_id - the SCSI ID of the controller
	      itself</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">base_transfer_speed - nominal transfer speed in KB/s
	      for asynchronous narrow transfers, equals to 3300 for
	      SCSI</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">sim_vid - SIM driver's vendor id, a zero-terminated
	      string of maximal length SIM_IDLEN including the
	      terminating zero</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">hba_vid - SCSI controller's vendor id, a
	      zero-terminated string of maximal length HBA_IDLEN
	      including the terminating zero</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">dev_name - device driver name, a zero-terminated
	      string of maximal length DEV_IDLEN including the
	      terminating zero, equal to cam_sim_name(sim)</para>
	  </listitem>
	</itemizedlist>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The recommended way of setting the string fields is
	  using strncpy, like:</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    strncpy(cpi-&gt;dev_name, cam_sim_name(sim), DEV_IDLEN);</programlisting>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">After setting the values set the status to CAM_REQ_CMP
	  and mark the CCB as done.</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="scsi-polling">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Polling</title>

    <funcsynopsis xmlns:xlink="http://www.w3.org/1999/xlink">
      <funcprototype xmlns:xlink="http://www.w3.org/1999/xlink">
	<funcdef xmlns:xlink="http://www.w3.org/1999/xlink">static void
	  <function xmlns:xlink="http://www.w3.org/1999/xlink">xxx_poll</function>
	</funcdef>
	<paramdef xmlns:xlink="http://www.w3.org/1999/xlink">
	  <parameter xmlns:xlink="http://www.w3.org/1999/xlink">struct cam_sim *sim</parameter>
	</paramdef>
      </funcprototype>
    </funcsynopsis>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The poll function is used to simulate the interrupts when
      the interrupt subsystem is not functioning (for example, when
      the system has crashed and is creating the system dump).  The
      CAM subsystem sets the proper interrupt level before calling the
      poll routine.  So all it needs to do is to call the interrupt
      routine (or the other way around, the poll routine may be doing
      the real action and the interrupt routine would just call the
      poll routine).  Why bother about a separate function then?
      Because of different calling conventions.  The
      <function xmlns:xlink="http://www.w3.org/1999/xlink">xxx_poll</function> routine gets the struct cam_sim
      pointer as its argument when the PCI interrupt routine by common
      convention gets pointer to the struct
      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">xxx_softc</varname> and the ISA interrupt routine
      gets just the device unit number.  So the poll routine would
      normally look as:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">static void
xxx_poll(struct cam_sim *sim)
{
    xxx_intr((struct xxx_softc *)cam_sim_softc(sim)); /* for PCI device */
}</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">or</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">static void
xxx_poll(struct cam_sim *sim)
{
    xxx_intr(cam_sim_unit(sim)); /* for ISA device */
}</programlisting>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="scsi-async">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Asynchronous Events</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">If an asynchronous event callback has been set up then the
      callback function should be defined.</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">static void
ahc_async(void *callback_arg, u_int32_t code, struct cam_path *path, void *arg)</programlisting>

    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">callback_arg - the value supplied when registering the
	  callback</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">code - identifies the type of event</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">path - identifies the devices to which the event
	  applies</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">arg - event-specific argument</para>
      </listitem>
    </itemizedlist>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Implementation for a single type of event, AC_LOST_DEVICE,
      looks like:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    struct xxx_softc *softc;
    struct cam_sim *sim;
    int targ;
    struct ccb_trans_settings neg;

    sim = (struct cam_sim *)callback_arg;
    softc = (struct xxx_softc *)cam_sim_softc(sim);
    switch (code) {
    case AC_LOST_DEVICE:
        targ = xpt_path_target_id(path);
        if(targ &lt;= OUR_MAX_SUPPORTED_TARGET) {
            clean_negotiations(softc, targ);
            /* send indication to CAM */
            neg.bus_width = 8;
            neg.sync_period = neg.sync_offset = 0;
            neg.valid = (CCB_TRANS_BUS_WIDTH_VALID
                | CCB_TRANS_SYNC_RATE_VALID | CCB_TRANS_SYNC_OFFSET_VALID);
            xpt_async(AC_TRANSFER_NEG, path, &amp;neg);
        }
        break;
    default:
        break;
    }</programlisting>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="scsi-interrupts">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Interrupts</title>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">SCSI</primary><secondary xmlns:xlink="http://www.w3.org/1999/xlink">interrupts</secondary></indexterm>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The exact type of the interrupt routine depends on the type
      of the peripheral bus (PCI, ISA and so on) to which the SCSI
      controller is connected.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The interrupt routines of the SIM drivers run at the
      interrupt level splcam.  So <function xmlns:xlink="http://www.w3.org/1999/xlink">splcam()</function> should
      be used in the driver to synchronize activity between the
      interrupt routine and the rest of the driver (for a
      multiprocessor-aware driver things get yet more interesting but
      we ignore this case here).  The pseudo-code in this document
      happily ignores the problems of synchronization.  The real code
      must not ignore them.  A simple-minded approach is to set
      <function xmlns:xlink="http://www.w3.org/1999/xlink">splcam()</function> on the entry to the other routines
      and reset it on return thus protecting them by one big critical
      section.  To make sure that the interrupt level will be always
      restored a wrapper function can be defined, like:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    static void
    xxx_action(struct cam_sim *sim, union ccb *ccb)
    {
        int s;
        s = splcam();
        xxx_action1(sim, ccb);
        splx(s);
    }

    static void
    xxx_action1(struct cam_sim *sim, union ccb *ccb)
    {
        ... process the request ...
    }</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">This approach is simple and robust but the problem with it
      is that interrupts may get blocked for a relatively long time
      and this would negatively affect the system's performance.  On
      the other hand the functions of the <function xmlns:xlink="http://www.w3.org/1999/xlink">spl()</function>
      family have rather high overhead, so vast amount of tiny
      critical sections may not be good either.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The conditions handled by the interrupt routine and the
      details depend very much on the hardware.  We consider the set
      of <quote xmlns:xlink="http://www.w3.org/1999/xlink">typical</quote> conditions.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">First, we check if a SCSI reset was encountered on the bus
      (probably caused by another SCSI controller on the same SCSI
      bus).  If so we drop all the enqueued and disconnected requests,
      report the events and re-initialize our SCSI controller.  It is
      important that during this initialization the controller will
      not issue another reset or else two controllers on the same SCSI
      bus could ping-pong resets forever.  The case of fatal
      controller error/hang could be handled in the same place, but it
      will probably need also sending RESET signal to the SCSI bus to
      reset the status of the connections with the SCSI
      devices.</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    int fatal=0;
    struct ccb_trans_settings neg;
    struct cam_path *path;

    if( detected_scsi_reset(softc)
    || (fatal = detected_fatal_controller_error(softc)) ) {
        int targ, lun;
        struct xxx_hcb *h, *hh;

        /* drop all enqueued CCBs */
        for(h = softc-&gt;first_queued_hcb; h != NULL; h = hh) {
            hh = h-&gt;next;
            free_hcb_and_ccb_done(h, h-&gt;ccb, CAM_SCSI_BUS_RESET);
        }

        /* the clean values of negotiations to report */
        neg.bus_width = 8;
        neg.sync_period = neg.sync_offset = 0;
        neg.valid = (CCB_TRANS_BUS_WIDTH_VALID
            | CCB_TRANS_SYNC_RATE_VALID | CCB_TRANS_SYNC_OFFSET_VALID);

        /* drop all disconnected CCBs and clean negotiations  */
        for(targ=0; targ &lt;= OUR_MAX_SUPPORTED_TARGET; targ++) {
            clean_negotiations(softc, targ);

            /* report the event if possible */
            if(xpt_create_path(&amp;path, /*periph*/NULL,
                    cam_sim_path(sim), targ,
                    CAM_LUN_WILDCARD) == CAM_REQ_CMP) {
                xpt_async(AC_TRANSFER_NEG, path, &amp;neg);
                xpt_free_path(path);
            }

            for(lun=0; lun &lt;= OUR_MAX_SUPPORTED_LUN; lun++)
                for(h = softc-&gt;first_discon_hcb[targ][lun]; h != NULL; h = hh) {
                    hh=h-&gt;next;
                    if(fatal)
                        free_hcb_and_ccb_done(h, h-&gt;ccb, CAM_UNREC_HBA_ERROR);
                    else
                        free_hcb_and_ccb_done(h, h-&gt;ccb, CAM_SCSI_BUS_RESET);
                }
        }

        /* report the event */
        xpt_async(AC_BUS_RESET, softc-&gt;wpath, NULL);

        /* re-initialization may take a lot of time, in such case
         * its completion should be signaled by another interrupt or
         * checked on timeout - but for simplicity we assume here that
         * it is really fast
         */
        if(!fatal) {
            reinitialize_controller_without_scsi_reset(softc);
        } else {
            reinitialize_controller_with_scsi_reset(softc);
        }
        schedule_next_hcb(softc);
        return;
    }</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">If interrupt is not caused by a controller-wide condition
      then probably something has happened to the current hardware
      control block.  Depending on the hardware there may be other
      non-HCB-related events, we just do not consider them here.  Then
      we analyze what happened to this HCB:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    struct xxx_hcb *hcb, *h, *hh;
    int hcb_status, scsi_status;
    int ccb_status;
    int targ;
    int lun_to_freeze;

    hcb = get_current_hcb(softc);
    if(hcb == NULL) {
        /* either stray interrupt or something went very wrong
         * or this is something hardware-dependent
         */
        handle as necessary;
        return;
    }

    targ = hcb-&gt;target;
    hcb_status = get_status_of_current_hcb(softc);</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">First we check if the HCB has completed and if so we check
      the returned SCSI status.</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    if(hcb_status == COMPLETED) {
        scsi_status = get_completion_status(hcb);</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Then look if this status is related to the REQUEST SENSE
      command and if so handle it in a simple way.</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">        if(hcb-&gt;flags &amp; DOING_AUTOSENSE) {
            if(scsi_status == GOOD) { /* autosense was successful */
                hcb-&gt;ccb-&gt;ccb_h.status |= CAM_AUTOSNS_VALID;
                free_hcb_and_ccb_done(hcb, hcb-&gt;ccb, CAM_SCSI_STATUS_ERROR);
            } else {
        autosense_failed:
                free_hcb_and_ccb_done(hcb, hcb-&gt;ccb, CAM_AUTOSENSE_FAIL);
            }
            schedule_next_hcb(softc);
            return;
        }</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Else the command itself has completed, pay more attention to
      details.  If auto-sense is not disabled for this CCB and the
      command has failed with sense data then run REQUEST SENSE
      command to receive that data.</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">        hcb-&gt;ccb-&gt;csio.scsi_status = scsi_status;
        calculate_residue(hcb);

        if( (hcb-&gt;ccb-&gt;ccb_h.flags &amp; CAM_DIS_AUTOSENSE)==0
        &amp;&amp; ( scsi_status == CHECK_CONDITION
                || scsi_status == COMMAND_TERMINATED) ) {
            /* start auto-SENSE */
            hcb-&gt;flags |= DOING_AUTOSENSE;
            setup_autosense_command_in_hcb(hcb);
            restart_current_hcb(softc);
            return;
        }
        if(scsi_status == GOOD)
            free_hcb_and_ccb_done(hcb, hcb-&gt;ccb, CAM_REQ_CMP);
        else
            free_hcb_and_ccb_done(hcb, hcb-&gt;ccb, CAM_SCSI_STATUS_ERROR);
        schedule_next_hcb(softc);
        return;
    }</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">One typical thing would be negotiation events: negotiation
      messages received from a SCSI target (in answer to our
      negotiation attempt or by target's initiative) or the target is
      unable to negotiate (rejects our negotiation messages or does
      not answer them).</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    switch(hcb_status) {
    case TARGET_REJECTED_WIDE_NEG:
        /* revert to 8-bit bus */
        softc-&gt;current_bus_width[targ] = softc-&gt;goal_bus_width[targ] = 8;
        /* report the event */
        neg.bus_width = 8;
        neg.valid = CCB_TRANS_BUS_WIDTH_VALID;
        xpt_async(AC_TRANSFER_NEG, hcb-&gt;ccb.ccb_h.path_id, &amp;neg);
        continue_current_hcb(softc);
        return;
    case TARGET_ANSWERED_WIDE_NEG:
        {
            int wd;

            wd = get_target_bus_width_request(softc);
            if(wd &lt;= softc-&gt;goal_bus_width[targ]) {
                /* answer is acceptable */
                softc-&gt;current_bus_width[targ] =
                softc-&gt;goal_bus_width[targ] = neg.bus_width = wd;

                /* report the event */
                neg.valid = CCB_TRANS_BUS_WIDTH_VALID;
                xpt_async(AC_TRANSFER_NEG, hcb-&gt;ccb.ccb_h.path_id, &amp;neg);
            } else {
                prepare_reject_message(hcb);
            }
        }
        continue_current_hcb(softc);
        return;
    case TARGET_REQUESTED_WIDE_NEG:
        {
            int wd;

            wd = get_target_bus_width_request(softc);
            wd = min (wd, OUR_BUS_WIDTH);
            wd = min (wd, softc-&gt;user_bus_width[targ]);

            if(wd != softc-&gt;current_bus_width[targ]) {
                /* the bus width has changed */
                softc-&gt;current_bus_width[targ] =
                softc-&gt;goal_bus_width[targ] = neg.bus_width = wd;

                /* report the event */
                neg.valid = CCB_TRANS_BUS_WIDTH_VALID;
                xpt_async(AC_TRANSFER_NEG, hcb-&gt;ccb.ccb_h.path_id, &amp;neg);
            }
            prepare_width_nego_rsponse(hcb, wd);
        }
        continue_current_hcb(softc);
        return;
    }</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Then we handle any errors that could have happened during
      auto-sense in the same simple-minded way as before.  Otherwise
      we look closer at the details again.</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    if(hcb-&gt;flags &amp; DOING_AUTOSENSE)
        goto autosense_failed;

    switch(hcb_status) {</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The next event we consider is unexpected disconnect.  Which
      is considered normal after an ABORT or BUS DEVICE RESET message
      and abnormal in other cases.</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    case UNEXPECTED_DISCONNECT:
        if(requested_abort(hcb)) {
            /* abort affects all commands on that target+LUN, so
             * mark all disconnected HCBs on that target+LUN as aborted too
             */
            for(h = softc-&gt;first_discon_hcb[hcb-&gt;target][hcb-&gt;lun];
                    h != NULL; h = hh) {
                hh=h-&gt;next;
                free_hcb_and_ccb_done(h, h-&gt;ccb, CAM_REQ_ABORTED);
            }
            ccb_status = CAM_REQ_ABORTED;
        } else if(requested_bus_device_reset(hcb)) {
            int lun;

            /* reset affects all commands on that target, so
             * mark all disconnected HCBs on that target+LUN as reset
             */

            for(lun=0; lun &lt;= OUR_MAX_SUPPORTED_LUN; lun++)
                for(h = softc-&gt;first_discon_hcb[hcb-&gt;target][lun];
                        h != NULL; h = hh) {
                    hh=h-&gt;next;
                    free_hcb_and_ccb_done(h, h-&gt;ccb, CAM_SCSI_BUS_RESET);
                }

            /* send event */
            xpt_async(AC_SENT_BDR, hcb-&gt;ccb-&gt;ccb_h.path_id, NULL);

            /* this was the CAM_RESET_DEV request itself, it is completed */
            ccb_status = CAM_REQ_CMP;
        } else {
            calculate_residue(hcb);
            ccb_status = CAM_UNEXP_BUSFREE;
            /* request the further code to freeze the queue */
            hcb-&gt;ccb-&gt;ccb_h.status |= CAM_DEV_QFRZN;
            lun_to_freeze = hcb-&gt;lun;
        }
        break;</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">If the target refuses to accept tags we notify CAM about
      that and return back all commands for this LUN:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    case TAGS_REJECTED:
        /* report the event */
        neg.flags = 0 &amp; ~CCB_TRANS_TAG_ENB;
        neg.valid = CCB_TRANS_TQ_VALID;
        xpt_async(AC_TRANSFER_NEG, hcb-&gt;ccb.ccb_h.path_id, &amp;neg);

        ccb_status = CAM_MSG_REJECT_REC;
        /* request the further code to freeze the queue */
        hcb-&gt;ccb-&gt;ccb_h.status |= CAM_DEV_QFRZN;
        lun_to_freeze = hcb-&gt;lun;
        break;</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Then we check a number of other conditions, with processing
      basically limited to setting the CCB status:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    case SELECTION_TIMEOUT:
        ccb_status = CAM_SEL_TIMEOUT;
        /* request the further code to freeze the queue */
        hcb-&gt;ccb-&gt;ccb_h.status |= CAM_DEV_QFRZN;
        lun_to_freeze = CAM_LUN_WILDCARD;
        break;
    case PARITY_ERROR:
        ccb_status = CAM_UNCOR_PARITY;
        break;
    case DATA_OVERRUN:
    case ODD_WIDE_TRANSFER:
        ccb_status = CAM_DATA_RUN_ERR;
        break;
    default:
        /* all other errors are handled in a generic way */
        ccb_status = CAM_REQ_CMP_ERR;
        /* request the further code to freeze the queue */
        hcb-&gt;ccb-&gt;ccb_h.status |= CAM_DEV_QFRZN;
        lun_to_freeze = CAM_LUN_WILDCARD;
        break;
    }</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Then we check if the error was serious enough to freeze the
      input queue until it gets proceeded and do so if it is:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">    if(hcb-&gt;ccb-&gt;ccb_h.status &amp; CAM_DEV_QFRZN) {
        /* freeze the queue */
        xpt_freeze_devq(ccb-&gt;ccb_h.path, /*count*/1);

        /* re-queue all commands for this target/LUN back to CAM */

        for(h = softc-&gt;first_queued_hcb; h != NULL; h = hh) {
            hh = h-&gt;next;

            if(targ == h-&gt;targ
            &amp;&amp; (lun_to_freeze == CAM_LUN_WILDCARD || lun_to_freeze == h-&gt;lun) )
                free_hcb_and_ccb_done(h, h-&gt;ccb, CAM_REQUEUE_REQ);
        }
    }
    free_hcb_and_ccb_done(hcb, hcb-&gt;ccb, ccb_status);
    schedule_next_hcb(softc);
    return;</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">This concludes the generic interrupt handling although
      specific controllers may require some additions.</para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="scsi-errors">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Errors Summary</title>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">SCSI</primary><secondary xmlns:xlink="http://www.w3.org/1999/xlink">errors</secondary></indexterm>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">When executing an I/O request many things may go wrong.  The
      reason of error can be reported in the CCB status with great
      detail.  Examples of use are spread throughout this document.
      For completeness here is the summary of recommended responses
      for the typical error conditions:</para>

    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">CAM_RESRC_UNAVAIL</emphasis> - some resource
	  is temporarily unavailable and the SIM driver cannot
	  generate an event when it will become available.  An example
	  of this resource would be some intra-controller hardware
	  resource for which the controller does not generate an
	  interrupt when it becomes available.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">CAM_UNCOR_PARITY</emphasis> - unrecovered
	  parity error occurred</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">CAM_DATA_RUN_ERR</emphasis> - data overrun or
	  unexpected data phase (going in other direction than
	  specified in CAM_DIR_MASK) or odd transfer length for wide
	  transfer</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">CAM_SEL_TIMEOUT</emphasis> - selection timeout
	  occurred (target does not respond)</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">CAM_CMD_TIMEOUT</emphasis> - command timeout
	  occurred (the timeout function ran)</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">CAM_SCSI_STATUS_ERROR</emphasis> - the device
	  returned error</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">CAM_AUTOSENSE_FAIL</emphasis> - the device
	  returned error and the REQUEST SENSE COMMAND failed</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">CAM_MSG_REJECT_REC</emphasis> - MESSAGE REJECT
	  message was received</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">CAM_SCSI_BUS_RESET</emphasis> - received SCSI
	  bus reset</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">CAM_REQ_CMP_ERR</emphasis> -
	  <quote xmlns:xlink="http://www.w3.org/1999/xlink">impossible</quote> SCSI phase occurred or something
	  else as weird or just a generic error if further detail is
	  not available</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">CAM_UNEXP_BUSFREE</emphasis> - unexpected
	  disconnect occurred</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">CAM_BDR_SENT</emphasis> - BUS DEVICE RESET
	  message was sent to the target</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">CAM_UNREC_HBA_ERROR</emphasis> - unrecoverable
	  Host Bus Adapter Error</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">CAM_REQ_TOO_BIG</emphasis> - the request was
	  too large for this controller</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">CAM_REQUEUE_REQ</emphasis> - this request
	  should be re-queued to preserve transaction ordering.  This
	  typically occurs when the SIM recognizes an error that
	  should freeze the queue and must place other queued requests
	  for the target at the sim level back into the XPT queue.
	  Typical cases of such errors are selection timeouts, command
	  timeouts and other like conditions.  In such cases the
	  troublesome command returns the status indicating the error,
	  the and the other commands which have not be sent to the bus
	  yet get re-queued.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">CAM_LUN_INVALID</emphasis> - the LUN ID in the
	  request is not supported by the SCSI controller</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">CAM_TID_INVALID</emphasis> - the target ID in
	  the request is not supported by the SCSI controller</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="scsi-timeout">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Timeout Handling</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">When the timeout for an HCB expires that request should be
      aborted, just like with an XPT_ABORT request.  The only
      difference is that the returned status of aborted request should
      be CAM_CMD_TIMEOUT instead of CAM_REQ_ABORTED (that is why
      implementation of the abort better be done as a function).  But
      there is one more possible problem: what if the abort request
      itself will get stuck? In this case the SCSI bus should be
      reset, just like with an XPT_RESET_BUS request (and the idea
      about implementing it as a function called from both places
      applies here too).  Also we should reset the whole SCSI bus if a
      device reset request got stuck.  So after all the timeout
      function would look like:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">static void
xxx_timeout(void *arg)
{
    struct xxx_hcb *hcb = (struct xxx_hcb *)arg;
    struct xxx_softc *softc;
    struct ccb_hdr *ccb_h;

    softc = hcb-&gt;softc;
    ccb_h = &amp;hcb-&gt;ccb-&gt;ccb_h;

    if(hcb-&gt;flags &amp; HCB_BEING_ABORTED
    || ccb_h-&gt;func_code == XPT_RESET_DEV) {
        xxx_reset_bus(softc);
    } else {
        xxx_abort_ccb(hcb-&gt;ccb, CAM_CMD_TIMEOUT);
    }
}</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">When we abort a request all the other disconnected requests
      to the same target/LUN get aborted too.  So there appears a
      question, should we return them with status CAM_REQ_ABORTED or
      CAM_CMD_TIMEOUT?  The current drivers use CAM_CMD_TIMEOUT. This
      seems logical because if one request got timed out then probably
      something really bad is happening to the device, so if they
      would not be disturbed they would time out by themselves.</para>
  </sect1>
</chapter>

    
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="usb">
  <info><title xmlns:xlink="http://www.w3.org/1999/xlink">USB Devices</title>
    <authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
      <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Nick</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Hibma</surname></personname><contrib xmlns:xlink="http://www.w3.org/1999/xlink">Written by </contrib></author>
    </authorgroup>
    <authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
      <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Murray</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Stokely</surname></personname><contrib xmlns:xlink="http://www.w3.org/1999/xlink">Modifications for Handbook made by </contrib></author>
    </authorgroup>
  </info>

  

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="usb-intro">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Introduction</title>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">Universal Serial Bus (USB)</primary></indexterm>
    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">NetBSD</primary></indexterm>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The Universal Serial Bus (USB) is a new way of attaching
      devices to personal computers. The bus architecture features
      two-way communication and has been developed as a response to
      devices becoming smarter and requiring more interaction with the
      host.  USB support is included in all current PC chipsets and is
      therefore available in all recently built PCs.  Apple's
      introduction of the USB-only iMac has been a major incentive for
      hardware manufacturers to produce USB versions of their devices.
      The future PC specifications specify that all legacy connectors
      on PCs should be replaced by one or more USB connectors,
      providing generic plug and play capabilities.  Support for USB
      hardware was available at a very early stage in NetBSD and was
      developed by Lennart Augustsson for the NetBSD project.  The
      code has been ported to FreeBSD and we are currently maintaining
      a shared code base.  For the implementation of the USB subsystem
      a number of features of USB are important.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">Lennart Augustsson has done most of the implementation of
      the USB support for the NetBSD project. Many thanks for this
      incredible amount of work. Many thanks also to Ardy and Dirk for
      their comments and proofreading of this paper.</emphasis></para>

    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Devices connect to ports on the computer
        directly or on devices called hubs, forming a treelike device
        structure.</para></listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">The devices can be connected and disconnected at
        run time.</para></listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Devices can suspend themselves and trigger
        resumes of the host system</para></listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">As the devices can be powered from the bus, the
        host software has to keep track of power budgets for each
        hub.</para></listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Different quality of service requirements by the
        different device types together with the maximum of 126
        devices that can be connected to the same bus, require proper
        scheduling of transfers on the shared bus to take full
        advantage of the 12Mbps bandwidth available. (over 400Mbps
        with USB 2.0)</para></listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Devices are intelligent and contain easily
        accessible information about themselves</para></listitem>

    </itemizedlist>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The development of drivers for the USB subsystem and devices
      connected to it is supported by the specifications that have
      been developed and will be developed. These specifications are
      publicly available from the USB home pages.  Apple has been very
      strong in pushing for standards based drivers, by making drivers
      for the generic classes available in their operating system
      MacOS and discouraging the use of separate drivers for each new
      device.  This chapter tries to collate essential information for a
      basic understanding of the USB 2.0 implementation
      stack in FreeBSD/NetBSD.  It is recommended however to read it
      together with the relevant 2.0 specifications and other
      developer resources:</para>
      
    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">USB 2.0 Specification (<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.usb.org/developers/docs/usb20_docs/">http://www.usb.org/developers/docs/usb20_docs/</link>)</para>
      </listitem>

       <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Universal Host Controller Interface
	  (<acronym xmlns:xlink="http://www.w3.org/1999/xlink">UHCI</acronym>) Specification (<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="ftp://ftp.netbsd.org/pub/NetBSD/misc/blymn/uhci11d.pdf">ftp://ftp.netbsd.org/pub/NetBSD/misc/blymn/uhci11d.pdf)</link></para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Open Host Controller Interface (<acronym xmlns:xlink="http://www.w3.org/1999/xlink">OHCI</acronym>)
	  Specification(<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="ftp://ftp.compaq.com/pub/supportinformation/papers/hcir1_0a.pdf">ftp://ftp.compaq.com/pub/supportinformation/papers/hcir1_0a.pdf</link>)</para>
      </listitem>    
      
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Developer section of <acronym xmlns:xlink="http://www.w3.org/1999/xlink">USB</acronym> home page (<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.usb.org/developers/">http://www.usb.org/developers/</link>)</para>
      </listitem>
    </itemizedlist>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Structure of the USB Stack</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The USB support in FreeBSD can be split into three
        layers. The lowest layer contains the host controller driver,
        providing a generic interface to the hardware and its scheduling
        facilities.  It supports initialisation of the hardware,
        scheduling of transfers and handling of completed and/or failed
        transfers.  Each host controller driver implements a virtual hub
        providing hardware independent access to the registers
        controlling the root ports on the back of the machine.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The middle layer handles the device connection and
        disconnection, basic initialisation of the device, driver
        selection, the communication channels (pipes) and does
        resource management.  This services layer also controls the
        default pipes and the device requests transferred over
        them.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The top layer contains the individual drivers supporting
        specific (classes of) devices. These drivers implement the
        protocol that is used over the pipes other than the default
        pipe. They also implement additional functionality to make the
        device available to other parts of the kernel or userland. They
        use the USB driver interface (USBDI) exposed by the services
        layer.</para>
    </sect2>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="usb-hc">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Host Controllers</title>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">USB</primary><secondary xmlns:xlink="http://www.w3.org/1999/xlink">host controllers</secondary></indexterm>
    <para xmlns:xlink="http://www.w3.org/1999/xlink">The host controller (HC) controls the transmission of
      packets on the bus. Frames of 1 millisecond are used. At the
      start of each frame the host controller generates a Start of
      Frame (SOF) packet.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The SOF packet is used to synchronise to the start of the
      frame and to keep track of the frame number. Within each frame
      packets are transferred, either from host to device (out) or
      from device to host (in). Transfers are always initiated by the
      host (polled transfers). Therefore there can only be one host
      per USB bus. Each transfer of a packet has a status stage in
      which the recipient of the data can return either ACK
      (acknowledge reception), NAK (retry), STALL (error condition) or
      nothing (garbled data stage, device not available or
      disconnected). Section 8.5 of the USB 2.0 Specification
      explains the details of packets in more
      detail. Four different types of transfers can occur on a USB
      bus: control, bulk, interrupt and isochronous.  The types of
      transfers and their characteristics are described below.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Large transfers between the device on the USB bus and the
      device driver are split up into multiple packets by the host
      controller or the HC driver.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Device requests (control transfers) to the default endpoints
      are special. They consist of two or three phases: SETUP, DATA
      (optional) and STATUS. The set-up packet is sent to the
      device. If there is a data phase, the direction of the data
      packet(s) is given in the set-up packet. The direction in the
      status phase is the opposite of the direction during the data
      phase, or IN if there was no data phase. The host controller
      hardware also provides registers with the current status of the
      root ports and the changes that have occurred since the last
      reset of the status change register. Access to these registers
      is provided through a virtualised hub as suggested in the USB
      specification. The virtual hub must comply with the hub
      device class given in chapter 11 of that specification. It must
      provide a default pipe through which device requests can be sent
      to it. It returns the standard andhub class specific set of
      descriptors. It should also provide an interrupt pipe that
      reports changes happening at its ports. There are currently two
      specifications for host controllers available: Universal Host
      Controller Interface (<acronym xmlns:xlink="http://www.w3.org/1999/xlink">UHCI</acronym>) from Intel
      and Open Host Controller Interface (<acronym xmlns:xlink="http://www.w3.org/1999/xlink">OHCI</acronym>)
      from Compaq, Microsoft, and National
      Semiconductor.  The <acronym xmlns:xlink="http://www.w3.org/1999/xlink">UHCI</acronym> specification has been
      designed to reduce hardware complexity by requiring the host
      controller driver to supply a complete schedule of the transfers
      for each frame. OHCI type controllers are much more independent
      by providing a more abstract interface doing a lot of work
      themselves. </para>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">UHCI</title>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">USB</primary><secondary xmlns:xlink="http://www.w3.org/1999/xlink">UHCI</secondary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The UHCI host controller maintains a framelist with 1024
        pointers to per frame data structures. It understands two
        different data types: transfer descriptors (TD) and queue
        heads (QH). Each TD represents a packet to be communicated to
        or from a device endpoint. QHs are a means to groupTDs (and
        QHs) together.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Each transfer consists of one or more packets. The UHCI
        driver splits large transfers into multiple packets. For every
        transfer, apart from isochronous transfers, a QH is
        allocated. For every type of transfer these QHs are collected
        at a QH for that type. Isochronous transfers have to be
        executed first because of the fixed latency requirement and
        are directly referred to by the pointer in the framelist. The
        last isochronous TD refers to the QH for interrupt transfers
        for that frame. All QHs for interrupt transfers point at the
        QH for control transfers, which in turn points at the QH for
        bulk transfers. The following diagram gives a graphical
        overview of this:</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">This results in the following schedule being run in each
        frame. After fetching the pointer for the current frame from
        the framelist the controller first executes the TDs for all
        the isochronous packets in that frame. The last of these TDs
        refers to the QH for the interrupt transfers for
        thatframe. The host controller will then descend from that QH
        to the QHs for the individual interrupt transfers. After
        finishing that queue, the QH for the interrupt transfers will
        refer the controller to the QH for all control transfers. It
        will execute all the subqueues scheduled there, followed by
        all the transfers queued at the bulk QH. To facilitate the
        handling of finished or failed transfers different types of
        interrupts are generated by the hardware at the end of each
        frame. In the last TD for a transfer the Interrupt-On
        Completion bit is set by the HC driver to flag an interrupt
        when the transfer has completed. An error interrupt is flagged
        if a TD reaches its maximum error count. If the short packet
        detect bit is set in a TD and less than the set packet length
        is transferred this interrupt is flagged to notify
        the controller driver of the completed transfer. It is the host
        controller driver's task to find out which transfer has
        completed or produced an error. When called the interrupt
        service routine will locate all the finished transfers and
        call their callbacks.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Refer to the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">UHCI</acronym> Specification for a
	more elaborate description.</para>

    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">OHCI</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">USB</primary><secondary xmlns:xlink="http://www.w3.org/1999/xlink">OHCI</secondary></indexterm>
      <para xmlns:xlink="http://www.w3.org/1999/xlink">Programming an OHCI host controller is much simpler. The
        controller assumes that a set of endpoints is available, and
        is aware of scheduling priorities and the ordering of the
        types of transfers in a frame. The main data structure used by
        the host controller is the endpoint descriptor (ED) to which
        a queue of transfer descriptors (TDs) is attached. The ED
        contains the maximum packet size allowed for an endpoint and
        the controller hardware does the splitting into packets. The
        pointers to the data buffers are updated after each transfer
        and when the start and end pointer are equal, the TD is
        retired to the done-queue. The four types of endpoints
	(interrupt, isochronous, control, and bulk) have their
        own queues. Control and bulk endpoints are queued each at
        their own queue. Interrupt EDs are queued in a tree, with the
        level in the tree defining the frequency at which they
        run.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The schedule being run by the host controller in each
        frame looks as follows. The controller will first run the
        non-periodic control and bulk queues, up to a time limit set
        by the HC driver. Then the interrupt transfers for that frame
        number are run, by using the lower five bits of the frame
        number as an index into level 0 of the tree of interrupts
        EDs. At the end of this tree the isochronous EDs are connected
        and these are traversed subsequently. The isochronous TDs
        contain the frame number of the first frame the transfer
        should be run in. After all the periodic transfers have been
        run, the control and bulk queues are traversed
        again. Periodically the interrupt service routine is called to
        process the done queue and call the callbacks for each
        transfer and reschedule interrupt and isochronous
        endpoints.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">See the <acronym xmlns:xlink="http://www.w3.org/1999/xlink">UHCI</acronym> Specification for a more
	elaborate description. The middle layer
        provides access to the device in a controlled way and
        maintains resources in use by the different drivers and the
        services layer. The layer takes care of the following
        aspects:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
        <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">The device configuration
          information</para></listitem>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">The pipes to communicate with a
	  device</para></listitem>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Probing and attaching and detaching form a
  	  device.</para></listitem>
      </itemizedlist>

    </sect2>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="usb-dev">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">USB Device Information</title>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Device Configuration Information</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Each device provides different levels of configuration
        information. Each device has one or more configurations, of
        which one is selected during probe/attach. A configuration
        provides power and bandwidth requirements. Within each
        configuration there can be multiple interfaces. A device
        interface is a collection of endpoints. For example USB
        speakers can have an interface for the audio data (Audio
        Class) and an interface for the knobs, dials and buttons (HID
        Class). All interfaces in a configuration are active at the
        same time and can be attached to by different drivers. Each
        interface can have alternates, providing different quality of
        service parameters. In for example cameras this is used to
        provide different frame sizes and numbers of frames per
        second.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Within each interface, 0 or more endpoints can be
        specified. Endpoints are the unidirectional access points for
        communicating with a device. They provide buffers to
        temporarily store incoming or outgoing data from the
        device. Each endpoint has a unique address within
        a configuration, the endpoint's number plus its direction. The
        default endpoint, endpoint 0, is not part of any interface and
        available in all configurations. It is managed by the services
        layer and not directly available to device drivers.</para>
<!--
This part is unclear, is it an unformatted code example?
      <para>Level 0 Level 1 Level 2 Slot 0</para>
      <para>Slot 3 Slot 2 Slot 1</para>
      <para>(Only 4 out of 32 slots shown)</para>
      -->      

      <para xmlns:xlink="http://www.w3.org/1999/xlink">This hierarchical configuration information is described
        in the device by a standard set of descriptors (see section 9.6
        of the USB specification). They can be requested through
        the Get Descriptor Request. The services layer caches these
        descriptors to avoid unnecessary transfers on the USB
        bus. Access to the descriptors is provided through function
        calls.</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
        <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Device descriptors: General information about
          the device, like Vendor, Product and Revision Id, supported
          device class, subclass and protocol if applicable, maximum
          packet size for the default endpoint, etc.</para></listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Configuration descriptors: The number of
   	  interfaces in this configuration, suspend and resume
   	  functionality supported and power
   	  requirements.</para></listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Interface descriptors: interface class,
  	  subclass and protocol if applicable, number of alternate
  	  settings for the interface and the number of
  	  endpoints.</para></listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Endpoint descriptors: Endpoint address,
	  direction and type, maximum packet size supported and
	  polling frequency if type is interrupt endpoint. There is no
	  descriptor for the default endpoint (endpoint 0) and it is
	  never counted in an interface descriptor.</para></listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">String descriptors: In the other descriptors
  	  string indices are supplied for some fields.These can be
  	  used to retrieve descriptive strings, possibly in multiple
  	  languages.</para></listitem>

      </itemizedlist>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Class specifications can add their own descriptor types
        that are available through the GetDescriptor Request.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Pipes Communication to end points on a device flows
        through so-called pipes. Drivers submit transfers to endpoints
        to a pipe and provide a callback to be called on completion or
        failure of the transfer (asynchronous transfers) or wait for
        completion (synchronous transfer). Transfers to an endpoint
        are serialised in the pipe. A transfer can either complete,
        fail or time-out (if a time-out has been set). There are two
        types of time-outs for transfers. Time-outs can happen due to
        time-out on the USBbus (milliseconds). These time-outs are
        seen as failures and can be due to disconnection of the
        device. A second form of time-out is implemented in software
        and is triggered when a transfer does not complete within a
        specified amount of time (seconds). These are caused by a
        device acknowledging negatively (NAK) the transferred
        packets. The cause for this is the device not being ready to
        receive data, buffer under- or overrun or protocol
        errors.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">If a transfer over a pipe is larger than the maximum
        packet size specified in the associated endpoint descriptor,
        the host controller (OHCI) or the HC driver (UHCI) will split
        the transfer into packets of maximum packet size, with the
        last packet possibly smaller than the maximum
        packet size.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Sometimes it is not a problem for a device to return less
        data than requested. For example abulk-in-transfer to a modem
        might request 200 bytes of data, but the modem has only 5
        bytes available at that time. The driver can set the short
        packet (SPD) flag. It allows the host controller to accept a
        packet even if the amount of data transferred is less than
        requested. This flag is only valid for in-transfers, as the
        amount of data to be sent to a device is always known
        beforehand. If an unrecoverable error occurs in a device
        during a transfer the pipe is stalled. Before any more data is
        accepted or sent the driver needs to resolve the cause of the
        stall and clear the endpoint stall condition through send the
        clear endpoint halt device request over the default
        pipe. The default endpoint should never stall.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">There are four different types of endpoints and
        corresponding pipes: - Control pipe / default pipe: There is
        one control pipe per device, connected to the default endpoint
        (endpoint 0). The pipe carries the device requests and
        associated data. The difference between transfers over the
        default pipe and other pipes is that the protocol for
        the transfers is described in the USB specification. These
        requests are used to reset and configure the device. A basic
        set of commands that must be supported by each device is
        provided in chapter 9 of the USB specification. The
        commands supported on this pipe can be extended by a device
        class specification to support additional
        functionality.</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
        <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Bulk pipe: This is the USB equivalent to a raw
          transmission medium.</para></listitem>
        <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Interrupt pipe: The host sends a request for
          data to the device and if the device has nothing to send, it
          will NAK the data packet. Interrupt transfers are scheduled
          at a frequency specified when creating the
          pipe.</para></listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">Isochronous pipe: These pipes are intended for
	    isochronous data, for example video or audio streams, with
	fixed latency, but no guaranteed delivery. Some support for
	pipes of this type is available in the current
	implementation. Packets in control, bulk and interrupt
	transfers are retried if an error occurs during transmission
	or the device acknowledges the packet negatively (NAK) due to
	for example lack of buffer space to store the incoming
	data. Isochronous packets are however not retried in case of
	failed delivery or NAK of a packet as this might violate the
	timing constraints.</para></listitem>
      </itemizedlist>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The availability of the necessary bandwidth is calculated
        during the creation of the pipe. Transfers are scheduled within
        frames of 1 millisecond. The bandwidth allocation within a
        frame is prescribed by the USB specification, section 5.6 [
        2]. Isochronous and interrupt transfers are allowed to consume
        up to 90% of the bandwidth within a frame. Packets for control
        and bulk transfers are scheduled after all isochronous and
        interrupt packets and will consume all the remaining
        bandwidth.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">More information on scheduling of transfers and bandwidth
        reclamation can be found in chapter 5 of the USB specification,
        section 1.3 of the UHCI specification, and section
        3.4.2 of the OHCI specification.</para>

    </sect2>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="usb-devprobe">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Device Probe and Attach</title>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">USB</primary><secondary xmlns:xlink="http://www.w3.org/1999/xlink">probe</secondary></indexterm>
    <para xmlns:xlink="http://www.w3.org/1999/xlink">After the notification by the hub that a new device has been
      connected, the service layer switches on the port, providing the
      device with 100 mA of current. At this point the device is in
      its default state and listening to device address 0. The
      services layer will proceed to retrieve the various descriptors
      through the default pipe. After that it will send a Set Address
      request to move the device away from the default device address
      (address 0). Multiple device drivers might be able to support
      the device. For example a modem driver might be able to support
      an ISDN TA through the AT compatibility interface. A driver for
      that specific model of the ISDN adapter might however be able to
      provide much better support for this device. To support this
      flexibility, the probes return priorities indicating their level
      of support. Support for a specific revision of a product ranks
      the highest and the generic driver the lowest priority. It might
      also be that multiple drivers could attach to one device if
      there are multiple interfaces within one configuration. Each
      driver only needs to support a subset of the interfaces.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The probing for a driver for a newly attached device checks
      first for device specific drivers. If not found, the probe code
      iterates over all supported configurations until a driver
      attaches in a configuration. To support devices with multiple
      drivers on different interfaces, the probe iterates over all
      interfaces in a configuration that have not yet been claimed by
      a driver. Configurations that exceed the power budget for the
      hub are ignored. During attach the driver should initialise the
      device to its proper state, but not reset it, as this will make
      the device disconnect itself from the bus and restart the
      probing process for it. To avoid consuming unnecessary bandwidth
      should not claim the interrupt pipe at attach time, but
      should postpone allocating the pipe until the file is opened and
      the data is actually used. When the file is closed the pipe
      should be closed again, even though the device might still be
      attached.</para>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Device Disconnect and Detach</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">USB</primary><secondary xmlns:xlink="http://www.w3.org/1999/xlink">disconnect</secondary></indexterm>
      <para xmlns:xlink="http://www.w3.org/1999/xlink">A device driver should expect to receive errors during any
        transaction with the device. The design of USB supports and
        encourages the disconnection of devices at any point in
        time. Drivers should make sure that they do the right thing
        when the device disappears.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Furthermore a device that has been disconnected and
        reconnected will not be reattached at the same device
        instance. This might change in the future when more devices
        support serial numbers (see the device descriptor) or other
        means of defining an identity for a device have been
        developed.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The disconnection of a device is signaled by a hub in the
        interrupt packet delivered to the hub driver. The status
        change information indicates which port has seen a connection
        change. The device detach method for all device drivers for
        the device connected on that port are called and the structures
        cleaned up. If the port status indicates that in the mean time
        a device has been connected to that port, the procedure for
        probing and attaching the device will be started. A device
        reset will produce a disconnect-connect sequence on the hub
        and will be handled as described above.</para>

    </sect2>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="usb-protocol">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">USB Drivers Protocol Information</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The protocol used over pipes other than the default pipe is
      undefined by the USB specification.  Information on this can be
      found from various sources. The most accurate source is the
      developer's section on the USB home pages.
      From these pages, a growing number of deviceclass specifications are
      available. These specifications specify what a compliant device
      should look like from a driver perspective, basic functionality
      it needs to provide and the protocol that is to be used over the
      communication channels.  The USB specification includes the
      description of the Hub Class. A class specification for Human
      Interface Devices (HID) has been created to cater for keyboards,
      tablets, bar-code readers, buttons, knobs, switches, etc. A
      third example is the class specification for mass storage
      devices. For a full list of device classes see the developers
      section on the USB home pages.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">For many devices the protocol information has not yet been
      published however. Information on the protocol being used might
      be available from the company making the device. Some companies
      will require you to sign a Non -Disclosure Agreement (NDA)
      before giving you the specifications. This in most cases
      precludes making the driver open source.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Another good source of information is the Linux driver
      sources, as a number of companies have started to provide drivers
      for Linux for their devices. It is always a good idea to contact
      the authors of those drivers for their source of
      information.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Example: Human Interface Devices The specification for the
      Human Interface Devices like keyboards, mice, tablets, buttons,
      dials,etc. is referred to in other device class specifications
      and is used in many devices.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">For example audio speakers provide endpoints to the digital
      to analogue converters and possibly an extra pipe for a
      microphone. They also provide a HID endpoint in a separate
      interface for the buttons and dials on the front of the
      device. The same is true for the monitor control class. It is
      straightforward to build support for these interfaces through
      the available kernel and userland libraries together with the
      HID class driver or the generic driver. Another device that
      serves as an example for interfaces within one configuration
      driven by different device drivers is a cheap keyboard with
      built-in legacy mouse port. To avoid having the cost of
      including the hardware for a USB hub in the device,
      manufacturers combined the mouse data received from the PS/2 port
      on the back of the keyboard and the key presses from the keyboard
      into two separate interfaces in the same configuration. The
      mouse and keyboard drivers each attach to the appropriate
      interface and allocate the pipes to the two independent
      endpoints.</para>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">USB</primary><secondary xmlns:xlink="http://www.w3.org/1999/xlink">firmware</secondary></indexterm>
    <para xmlns:xlink="http://www.w3.org/1999/xlink">Example: Firmware download Many devices that have been
      developed are based on a general purpose processor with
      an additional USB core added to it. Because the development of
      drivers and firmware for USB devices is still very new, many
      devices require the downloading of the firmware after they
      have been connected.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The procedure followed is straightforward. The device
      identifies itself through a vendor and product Id. The first
      driver probes and attaches to it and downloads the firmware into
      it. After that the device soft resets itself and the driver is
      detached. After a short pause the device announces its presence
      on the bus. The device will have changed its
      vendor/product/revision Id to reflect the fact that it has been
      supplied with firmware and as a consequence a second driver will
      probe it and attach to it.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">An example of these types of devices is the ActiveWire I/O
      board, based on the EZ-USB chip. For this chip a generic firmware
      downloader is available. The firmware downloaded into the
      ActiveWire board changes the revision Id. It will then perform a
      soft reset of the USB part of the EZ-USB chip to disconnect from
      the USB bus and again reconnect.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Example: Mass Storage Devices Support for mass storage
      devices is mainly built around existing protocols. The Iomega
      USB Zipdrive is based on the SCSI version of their drive. The
      SCSI commands and status messages are wrapped in blocks and
      transferred over the bulk pipes to and from the device,
      emulating a SCSI controller over the USB wire. ATAPI and UFI
      commands are supported in a similar fashion.</para>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">ATAPI</primary></indexterm>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The Mass Storage Specification supports 2 different types of
      wrapping of the command block.The initial attempt was based on
      sending the command and status through the default pipe and
      using bulk transfers for the data to be moved between the host
      and the device. Based on experience a second approach was
      designed that was based on wrapping the command and status
      blocks and sending them over the bulk out and in endpoint. The
      specification specifies exactly what has to happen when and what
      has to be done in case an error condition is encountered. The
      biggest challenge when writing drivers for these devices is to
      fit USB based protocol into the existing support for mass storage
      devices. CAM provides hooks to do this in a fairly straight
      forward way. ATAPI is less simple as historically the IDE
      interface has never had many different appearances.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The support for the USB floppy from Y-E Data is again less
      straightforward as a new command set has been designed.</para>

  </sect1>

</chapter>

    
<!--
	The FreeBSD Documentation Project
	$FreeBSD$

	Originally by: Jeroen Ruigrok van der Warven
	Date: newbus-draft.txt,v 1.8 2001/01/25 08:01:08
	Copyright (c) 2000 Jeroen Ruigrok van der Warven (asmodai@wxs.nl)
	Copyright (c) 2002 Hiten Mahesh Pandya (hiten@uk.FreeBSD.org)

	Future Additions:

		o Expand the information about device_t
		o Add information about the bus_* functions.
		o Add information about bus specific (e.g. PCI) functions.
		o Add a reference section for additional information.
		o Add more newbus related structures and typedefs.
		o Add a 'Terminology' section.
		o Add information on resource manager functions, busspace
		manager functions, newbus events related functions.
		o More cleanup ... !

	Provided under the FreeBSD Documentation License.
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="newbus">
  <info><title xmlns:xlink="http://www.w3.org/1999/xlink">Newbus</title>
    <authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
      <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Jeroen</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Ruigrok van der Werven (asmodai)</surname></personname><affiliation xmlns:xlink="http://www.w3.org/1999/xlink">
	  <address xmlns:xlink="http://www.w3.org/1999/xlink"><email xmlns:xlink="http://www.w3.org/1999/xlink">asmodai@FreeBSD.org</email></address>
	</affiliation><contrib xmlns:xlink="http://www.w3.org/1999/xlink">Written by </contrib></author>
      <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Hiten</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Pandya</surname></personname><affiliation xmlns:xlink="http://www.w3.org/1999/xlink">
	  <address xmlns:xlink="http://www.w3.org/1999/xlink"><email xmlns:xlink="http://www.w3.org/1999/xlink">hiten@uk.FreeBSD.org</email></address>
	</affiliation></author>
    </authorgroup>
  </info>
  

  <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">Special thanks to Matthew N. Dodd, Warner Losh, Bill
      Paul, Doug Rabson, Mike Smith, Peter Wemm and Scott
      Long</emphasis>.</para>

  <para xmlns:xlink="http://www.w3.org/1999/xlink">This chapter explains the Newbus device framework in
    detail.</para>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="newbus-devdrivers">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Device Drivers</title>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Purpose of a Device Driver</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">device driver</primary></indexterm>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">device
	  driver</primary><secondary xmlns:xlink="http://www.w3.org/1999/xlink">introduction</secondary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">A device driver is a software component which provides the
	interface between the kernel's generic view of a peripheral
	(e.g., disk, network adapter) and the actual implementation of
	the peripheral.  The <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">device driver interface
	(DDI)</emphasis> is the defined interface between the kernel
	and the device driver component.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Types of Device Drivers</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">There used to be days in <trademark xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" class="registered">UNIX</trademark>, and thus FreeBSD, in
	which there were four types of devices defined:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">block device drivers</para></listitem>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">character device drivers</para></listitem>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">network device drivers</para></listitem>
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">pseudo-device drivers</para></listitem>
      </itemizedlist>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">block devices</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">Block devices</emphasis> performed in a way that
	used fixed size blocks [of data].  This type of driver
	depended on the so-called <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">buffer cache</emphasis>,
	which had cached accessed blocks of data in a
	dedicated part of memory. Often this buffer cache was
	based on write-behind, which meant that when data was modified
	in memory it got synced to disk whenever the system did its
	periodical disk flushing, thus optimizing writes.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Character Devices</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">character devices</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">However, in the versions of FreeBSD 4.0 and onward the
	distinction between block and character devices became
	non-existent.</para>
    </sect2>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="newbus-overview">
    <!--
      Real title:
      Newbus, Busspace and the Resource Manager, an Explanation of the Possibilities
    -->
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Overview of Newbus</title>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">Newbus</primary></indexterm>

    <para xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">Newbus</emphasis> is the implementation of a new
      bus architecture based on abstraction layers which saw its
      introduction in FreeBSD 3.0 when the Alpha port was imported
      into the source tree.  It was not until 4.0 before it became the
      default system to use for device drivers.  Its goals are to
      provide a more object-oriented means of interconnecting the
      various busses and devices which a host system provides to the
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">Operating System</emphasis>.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Its main features include amongst others:</para>

    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">dynamic attaching</para></listitem>
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">easy modularization of drivers</para></listitem>
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">pseudo-busses</para></listitem>
    </itemizedlist>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">One of the most prominent changes is the migration from the
      flat and ad-hoc system to a device tree layout.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">At the top level resides the
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><quote xmlns:xlink="http://www.w3.org/1999/xlink">root</quote></emphasis> device which is the
      parent to hang all other devices on.  For each architecture,
      there is typically a single child of <quote xmlns:xlink="http://www.w3.org/1999/xlink">root</quote> which
      has such things as <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">host-to-PCI bridges</emphasis>,
      etc. attached to it.  For x86, this <quote xmlns:xlink="http://www.w3.org/1999/xlink">root</quote> device
      is the <emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><quote xmlns:xlink="http://www.w3.org/1999/xlink">nexus</quote></emphasis> device.  For
      Alpha, various different models of Alpha have
      different top-level devices corresponding to the different
      hardware chipsets, including <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">lca</emphasis>,
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">apecs</emphasis>, <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">cia</emphasis> and
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">tsunami</emphasis>.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">A device in the Newbus context represents a single hardware
      entity in the system.  For instance each PCI device is
      represented by a Newbus device.  Any device in the system can
      have children; a device which has children is often called a
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><quote xmlns:xlink="http://www.w3.org/1999/xlink">bus</quote></emphasis>. Examples of common
      busses in the system are ISA and PCI, which manage lists of
      devices attached to ISA and PCI busses respectively.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Often, a connection between different kinds of bus is
      represented by a <emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><quote xmlns:xlink="http://www.w3.org/1999/xlink">bridge</quote></emphasis>
      device, which normally has one child for the attached bus.  An
      example of this is a <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">PCI-to-PCI bridge</emphasis>
      which is represented by a device
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">pcibN</filename></emphasis> on the
      parent PCI bus and has a child
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">pciN</filename></emphasis> for the
      attached bus.  This layout simplifies the implementation of the
      PCI bus tree, allowing common code to be used for both top-level
      and bridged busses.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Each device in the Newbus architecture asks its parent to
      map its resources.  The parent then asks its own parent until
      the nexus is reached.  So, basically the nexus is the only part
      of the Newbus system which knows about all resources.</para>

    <tip xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink">An ISA device might want to map its IO port at
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x230</literal>, so it asks its parent, in this case
      the ISA bus.  The ISA bus hands it over to the PCI-to-ISA bridge
      which in its turn asks the PCI bus, which reaches the
      host-to-PCI bridge and finally the nexus.  The beauty of this
      transition upwards is that there is room to translate the
      requests.  For example, the <literal xmlns:xlink="http://www.w3.org/1999/xlink">0x230</literal> IO port
      request might become memory-mapped at
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">0xb0000230</literal> on a <acronym xmlns:xlink="http://www.w3.org/1999/xlink">MIPS</acronym> box
      by the PCI bridge.</para></tip>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Resource allocation can be controlled at any place in the
      device tree.  For instance on many Alpha platforms, ISA
      interrupts are managed separately from PCI interrupts and
      resource allocations for ISA interrupts are managed by the
      Alpha's ISA bus device.  On IA-32, ISA and PCI interrupts are
      both managed by the top-level nexus device.  For both ports,
      memory and port address space is managed by a single entity -
      nexus for IA-32 and the relevant chipset driver on Alpha (e.g.,
      CIA or tsunami).</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">In order to normalize access to memory and port mapped
      resources, Newbus integrates the <literal xmlns:xlink="http://www.w3.org/1999/xlink">bus_space</literal>
      APIs from NetBSD. These provide a single API to replace inb/outb
      and direct memory reads/writes.  The advantage of this is that a
      single driver can easily use either memory-mapped registers or
      port-mapped registers (some hardware supports both).</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">This support is integrated into the resource allocation
      mechanism. When a resource is allocated, a driver can retrieve
      the associated <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">bus_space_tag_t</varname> and
      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structfield">bus_space_handle_t</varname> from the
      resource.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Newbus also allows for definitions of interface methods in
      files dedicated to this purpose.  These are the
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">.m</filename> files that are found under the
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">src/sys</filename> hierarchy.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The core of the Newbus system is an extensible
      <quote xmlns:xlink="http://www.w3.org/1999/xlink">object-based programming</quote> model.  Each device in
      the system has a table of methods which it supports.  The system
      and other devices uses those methods to control the device and
      request services.  The different methods supported by a device
      are defined by a number of <quote xmlns:xlink="http://www.w3.org/1999/xlink">interfaces</quote>.  An
      <quote xmlns:xlink="http://www.w3.org/1999/xlink">interface</quote> is simply a group of related methods
      which can be implemented by a device.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">In the Newbus system, the methods for a device are provided
      by the various device drivers in the system.  When a device is
      attached to a driver during
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">auto-configuration</emphasis>, it uses the method
      table declared by the driver.  A device can later
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">detach</emphasis> from its driver and
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">re-attach</emphasis> to a new driver with a new method
      table. This allows dynamic replacement of drivers which can be
      useful for driver development.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The interfaces are described by an interface definition
      language similar to the language used to define vnode operations
      for file systems. The interface would be stored in a methods
      file (which would normally be named
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">foo_if.m</filename>).</para>

    <example xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Newbus Methods</title>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">      # Foo subsystem/driver (a comment...)

	  INTERFACE foo

	METHOD int doit {
		device_t dev;
	};

	# DEFAULT is the method that will be used, if a method was not
	# provided via: DEVMETHOD()

	METHOD void doit_to_child {
		device_t dev;
		driver_t child;
	} DEFAULT doit_generic_to_child;</programlisting>
    </example>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">When this interface is compiled, it generates a header file
      <quote xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">foo_if.h</filename></quote> which contains
      function declarations:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">      int FOO_DOIT(device_t dev);
      int FOO_DOIT_TO_CHILD(device_t dev, device_t child);</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">A source file, <quote xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">foo_if.c</filename></quote>
      is also created to accompany the automatically generated header
      file; it contains implementations of those functions which look
      up the location of the relevant functions in the object's method
      table and call that function.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The system defines two main interfaces.  The first
      fundamental interface is called
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><quote xmlns:xlink="http://www.w3.org/1999/xlink">device</quote></emphasis> and includes methods
      which are relevant to all devices.  Methods in the
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><quote xmlns:xlink="http://www.w3.org/1999/xlink">device</quote></emphasis> interface include
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><quote xmlns:xlink="http://www.w3.org/1999/xlink">probe</quote></emphasis>,
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><quote xmlns:xlink="http://www.w3.org/1999/xlink">attach</quote></emphasis> and
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><quote xmlns:xlink="http://www.w3.org/1999/xlink">detach</quote></emphasis> to control detection
      of hardware and <emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><quote xmlns:xlink="http://www.w3.org/1999/xlink">shutdown</quote></emphasis>,
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><quote xmlns:xlink="http://www.w3.org/1999/xlink">suspend</quote></emphasis> and
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><quote xmlns:xlink="http://www.w3.org/1999/xlink">resume</quote></emphasis> for critical event
      notification.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The second, more complex interface is
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><quote xmlns:xlink="http://www.w3.org/1999/xlink">bus</quote></emphasis>.  This interface
      contains methods suitable for devices which have children,
      including methods to access bus specific per-device information
      <footnote xmlns:xlink="http://www.w3.org/1999/xlink"><para xmlns:xlink="http://www.w3.org/1999/xlink"><citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">bus_generic_read_ivar</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry> and
      <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">bus_generic_write_ivar</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry></para></footnote>, event
      notification
      (<emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">child_detached</literal></emphasis>,
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">driver_added</literal></emphasis>) and
      resource management
      (<emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">alloc_resource</literal></emphasis>,
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">activate_resource</literal></emphasis>,
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">deactivate_resource</literal></emphasis>,
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">release_resource</literal></emphasis>).</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Many methods in the <quote xmlns:xlink="http://www.w3.org/1999/xlink">bus</quote> interface are
      performing services for some child of the bus device.  These
      methods would normally use the first two arguments to specify
      the bus providing the service and the child device which is
      requesting the service.  To simplify driver code, many of these
      methods have accessor functions which lookup the parent and call
      a method on the parent.  For instance the method
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">BUS_TEARDOWN_INTR(device_t dev, device_t child,
	...)</literal> can be called using the function
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">bus_teardown_intr(device_t child,
	...)</literal>.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Some bus types in the system define additional interfaces to
      provide access to bus-specific functionality.  For instance, the
      PCI bus driver defines the <quote xmlns:xlink="http://www.w3.org/1999/xlink">pci</quote> interface which
      has two methods
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">read_config</literal></emphasis> and
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">write_config</literal></emphasis> for
      accessing the configuration registers of a PCI device.</para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="newbus-api">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Newbus API</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">As the Newbus API is huge, this section makes some effort at
      documenting it.  More information to come in the next revision
      of this document.</para>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Important Locations in the Source Hierarchy</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">src/sys/[arch]/[arch]</filename> - Kernel code
	for a specific machine architecture resides in this directory.
	For example, the <literal xmlns:xlink="http://www.w3.org/1999/xlink">i386</literal> architecture, or the
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">SPARC64</literal> architecture.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">src/sys/dev/[bus]</filename> - device support
	for a specific <literal xmlns:xlink="http://www.w3.org/1999/xlink">[bus]</literal> resides in this
	directory.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">src/sys/dev/pci</filename> - PCI bus support
	code resides in this directory.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">src/sys/[isa|pci]</filename> - PCI/ISA device
	drivers reside in this directory.  The PCI/ISA bus support
	code used to exist in this directory in FreeBSD version
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">4.0</literal>.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Important Structures and Type Definitions</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">devclass_t</literal> - This is a type definition
	of a pointer to a <literal xmlns:xlink="http://www.w3.org/1999/xlink">struct devclass</literal>.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">device_method_t</literal> - This is the same as
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">kobj_method_t</literal> (see
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">src/sys/kobj.h</filename>).</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">device_t</literal> - This is a type definition of
	a pointer to a <literal xmlns:xlink="http://www.w3.org/1999/xlink">struct device</literal>.
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">device_t</literal> represents a device in the system.
	It is a kernel object.  See
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">src/sys/sys/bus_private.h</filename> for
	implementation details.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">driver_t</literal> - This is a type definition
	which references <literal xmlns:xlink="http://www.w3.org/1999/xlink">struct driver</literal>.  The
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">driver</literal> struct is a class of the
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">device</literal> kernel object; it also holds data
	private to the driver.</para>

      <figure xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink"><emphasis xmlns:xlink="http://www.w3.org/1999/xlink">driver_t</emphasis> Implementation</title>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">	  struct driver {
		KOBJ_CLASS_FIELDS;
		void	*priv;			/* driver private data */
	  };</programlisting>
      </figure>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">A <literal xmlns:xlink="http://www.w3.org/1999/xlink">device_state_t</literal> type, which is
	an enumeration, <literal xmlns:xlink="http://www.w3.org/1999/xlink">device_state</literal>.  It contains
	the possible states of a Newbus device before and after the
	autoconfiguration process.</para>

      <figure xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Device
	  States <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">device_state_t</emphasis></title>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">	  /*
	   * src/sys/sys/bus.h
	   */
	  typedef enum device_state {
		DS_NOTPRESENT,	/* not probed or probe failed */
		DS_ALIVE,		/* probe succeeded */
		DS_ATTACHED,	/* attach method called */
		DS_BUSY			/* device is open */
	  } device_state_t;</programlisting>
      </figure>
    </sect2>
  </sect1>
</chapter>


    
<!--
     The FreeBSD Documentation Project

    $FreeBSD$
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="oss">
  <info><title xmlns:xlink="http://www.w3.org/1999/xlink">Sound Subsystem</title>
    <authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
      <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Jean-Francois</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Dockes</surname></personname><contrib xmlns:xlink="http://www.w3.org/1999/xlink">Contributed by </contrib></author>
    </authorgroup>
    
  </info>

  

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="oss-intro">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Introduction</title>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">sound subsystem</primary></indexterm>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The FreeBSD sound subsystem cleanly separates generic sound
      handling issues from device-specific ones.  This makes it easier
      to add support for new hardware.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">pcm</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">4</manvolnum></citerefentry> framework is the central piece of the sound
      subsystem.  It mainly implements the following elements:</para>

    <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">system call interface</primary></indexterm>

    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">A system call interface (read, write, ioctls) to
	  digitized sound and mixer functions.  The ioctl command set
	  is compatible with the legacy <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">OSS</emphasis> or
	  <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">Voxware</emphasis> interface, allowing common
	  multimedia applications to be ported without
	  modification.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Common code for processing sound data (format
	  conversions, virtual channels).</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">A uniform software interface to hardware-specific audio
	  interface modules.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Additional support for some common hardware interfaces
	  (ac97), or shared hardware-specific code (ex: ISA DMA
	  routines).</para>
      </listitem>
    </itemizedlist>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The support for specific sound cards is implemented by
      hardware-specific drivers, which provide channel and mixer
      interfaces to plug into the generic <filename xmlns:xlink="http://www.w3.org/1999/xlink">pcm</filename>
      code.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">In this chapter, the term <filename xmlns:xlink="http://www.w3.org/1999/xlink">pcm</filename> will
      refer to the central, common part of the sound driver, as
      opposed to the hardware-specific modules.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The prospective driver writer will of course want to start
      from an existing module and use the code as the ultimate
      reference.  But, while the sound code is nice and clean, it is
      also mostly devoid of comments.  This document tries to give an
      overview of the framework interface and answer some questions
      that may arise while adapting the existing code.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">As an alternative, or in addition to starting from a working
      example, you can find a commented driver template at
      <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://people.FreeBSD.org/~cg/template.c">
	http://people.FreeBSD.org/~cg/template.c</link></para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="oss-files">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Files</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">All the relevant code lives in
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/sys/dev/sound/</filename>, except for the
      public ioctl interface definitions, found in
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/sys/sys/soundcard.h</filename></para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Under <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src/sys/dev/sound/</filename>, the
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">pcm/</filename> directory holds the central code,
      while the <filename xmlns:xlink="http://www.w3.org/1999/xlink">pci/</filename>, <filename xmlns:xlink="http://www.w3.org/1999/xlink">isa/</filename>
      and <filename xmlns:xlink="http://www.w3.org/1999/xlink">usb/</filename> directories have the drivers
      for PCI and ISA boards, and for USB audio devices.</para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="pcm-probe-and-attach">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Probing, Attaching, etc.</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Sound drivers probe and attach in almost the same way as any
      hardware driver module.  You might want to look at the <link xmlns:xlink="http://www.w3.org/1999/xlink" linkend="isa-driver"> ISA</link> or <link xmlns:xlink="http://www.w3.org/1999/xlink" linkend="pci">PCI</link> specific sections of the handbook for
      more information.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">However, sound drivers differ in some ways:</para>

    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">They declare themselves as <filename xmlns:xlink="http://www.w3.org/1999/xlink">pcm</filename>
	  class devices, with a
	  <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">struct snddev_info</varname> device private
	  structure:</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">          static driver_t xxx_driver = {
              "pcm",
              xxx_methods,
              sizeof(struct snddev_info)
          };

          DRIVER_MODULE(snd_xxxpci, pci, xxx_driver, pcm_devclass, 0, 0);
          MODULE_DEPEND(snd_xxxpci, snd_pcm, PCM_MINVER, PCM_PREFVER,PCM_MAXVER);</programlisting>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Most sound drivers<indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">device
	      drivers</primary><secondary xmlns:xlink="http://www.w3.org/1999/xlink">sound</secondary></indexterm>
	  need to store additional private information about their
	  device.  A private data structure is usually allocated in
	  the attach routine.  Its address is passed to
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">pcm</filename> by the calls to
	  <function xmlns:xlink="http://www.w3.org/1999/xlink">pcm_register()</function> and
	  <function xmlns:xlink="http://www.w3.org/1999/xlink">mixer_init()</function>.
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">pcm</filename> later passes back this address
	  as a parameter in calls to the sound driver
	  interfaces.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">The sound driver attach routine should declare its MIXER
	  or AC97 interface to <filename xmlns:xlink="http://www.w3.org/1999/xlink">pcm</filename> by calling
	  <function xmlns:xlink="http://www.w3.org/1999/xlink">mixer_init()</function>.  For a MIXER interface,
	  this causes in turn a call to <link xmlns:xlink="http://www.w3.org/1999/xlink" linkend="xxxmixer-init"><function xmlns:xlink="http://www.w3.org/1999/xlink">xxxmixer_init()</function></link>.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">The sound driver attach routine declares its general
	  CHANNEL configuration to <filename xmlns:xlink="http://www.w3.org/1999/xlink">pcm</filename> by
	  calling <function xmlns:xlink="http://www.w3.org/1999/xlink">pcm_register(dev, sc, nplay,
	  nrec)</function>, where <varname xmlns:xlink="http://www.w3.org/1999/xlink">sc</varname> is the address
	  for the device data structure, used in further calls from
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">pcm</filename>, and <varname xmlns:xlink="http://www.w3.org/1999/xlink">nplay</varname>
	  and <varname xmlns:xlink="http://www.w3.org/1999/xlink">nrec</varname> are the number of play and
	  record channels.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">The sound driver attach routine declares each of its
	  channel objects by calls to
	  <function xmlns:xlink="http://www.w3.org/1999/xlink">pcm_addchan()</function>.  This sets up the
	  channel glue in <filename xmlns:xlink="http://www.w3.org/1999/xlink">pcm</filename> and causes in
	  turn a call to
	    <link xmlns:xlink="http://www.w3.org/1999/xlink" linkend="xxxchannel-init">
	    <function xmlns:xlink="http://www.w3.org/1999/xlink">xxxchannel_init()</function></link>.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">The sound driver detach routine should call
	  <function xmlns:xlink="http://www.w3.org/1999/xlink">pcm_unregister()</function> before releasing its
	  resources.</para>
      </listitem>
    </itemizedlist>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">There are two possible methods to handle non-PnP
      devices:</para>

    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Use a <function xmlns:xlink="http://www.w3.org/1999/xlink">device_identify()</function> method
	  (example: <filename xmlns:xlink="http://www.w3.org/1999/xlink">sound/isa/es1888.c</filename>).  The
	  <function xmlns:xlink="http://www.w3.org/1999/xlink">device_identify()</function> method probes for the
	  hardware at known addresses and, if it finds a supported
	  device, creates a new pcm device which is then passed to
	  probe/attach.</para>
      </listitem>

      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">Use a custom kernel configuration with appropriate hints
	  for pcm devices (example:
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">sound/isa/mss.c</filename>).</para>
      </listitem>
    </itemizedlist>

    <para xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">pcm</filename> drivers should implement
      <function xmlns:xlink="http://www.w3.org/1999/xlink">device_suspend</function>,
      <function xmlns:xlink="http://www.w3.org/1999/xlink">device_resume</function> and
      <function xmlns:xlink="http://www.w3.org/1999/xlink">device_shutdown</function> routines, so that power
      management and module unloading function correctly.</para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="oss-interfaces">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Interfaces</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The interface between the <filename xmlns:xlink="http://www.w3.org/1999/xlink">pcm</filename> core
      and the sound drivers is defined in terms of <link xmlns:xlink="http://www.w3.org/1999/xlink" linkend="kernel-objects">kernel objects</link>.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">There are two main interfaces that a sound driver will
      usually provide: <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">CHANNEL</emphasis> and either
      <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">MIXER</emphasis> or <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">AC97</emphasis>.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">AC97</emphasis> interface is a very small
      hardware access (register read/write) interface, implemented by
      drivers for hardware with an AC97 codec.  In this case, the
      actual MIXER interface is provided by the shared AC97 code in
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">pcm</filename>.</para>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">The CHANNEL Interface</title>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Common Notes for Function Parameters</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Sound drivers usually have a private data structure to
	  describe their device, and one structure for each play and
	  record data channel that it supports.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">For all CHANNEL interface functions, the first parameter
	  is an opaque pointer.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The second parameter is a pointer to the private
	  channel data structure, except for
	  <function xmlns:xlink="http://www.w3.org/1999/xlink">channel_init()</function> which has a pointer to
	  the private device structure (and returns the channel
	  pointer for further use by
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">pcm</filename>).</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Overview of Data Transfer Operations</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">For sound data transfers, the
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">pcm</filename> core and the sound drivers
	  communicate through a shared memory area, described by a
	  <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">struct snd_dbuf</varname>.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink"><varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">struct snd_dbuf</varname> is private to
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">pcm</filename>, and sound drivers obtain
	  values of interest by calls to accessor functions
	  (<function xmlns:xlink="http://www.w3.org/1999/xlink">sndbuf_getxxx()</function>).</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">The shared memory area has a size of
	  <function xmlns:xlink="http://www.w3.org/1999/xlink">sndbuf_getsize()</function> and is divided into
	  fixed size blocks of <function xmlns:xlink="http://www.w3.org/1999/xlink">sndbuf_getblksz()</function>
	  bytes.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">When playing, the general transfer mechanism is as
	  follows (reverse the idea for recording):</para>

	<itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">pcm</filename> initially fills up the
	      buffer, then calls the sound driver's <link xmlns:xlink="http://www.w3.org/1999/xlink" linkend="channel-trigger">
	      <function xmlns:xlink="http://www.w3.org/1999/xlink">xxxchannel_trigger()</function></link>
	      function with a parameter of PCMTRIG_START.</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">The sound driver then arranges to repeatedly
	      transfer the whole memory area
	      (<function xmlns:xlink="http://www.w3.org/1999/xlink">sndbuf_getbuf()</function>,
	      <function xmlns:xlink="http://www.w3.org/1999/xlink">sndbuf_getsize()</function>) to the device, in
	      blocks of <function xmlns:xlink="http://www.w3.org/1999/xlink">sndbuf_getblksz()</function> bytes.
	      It calls back the <function xmlns:xlink="http://www.w3.org/1999/xlink">chn_intr()</function>
	      <filename xmlns:xlink="http://www.w3.org/1999/xlink">pcm</filename> function for each
	      transferred block (this will typically happen at
	      interrupt time).</para>
	  </listitem>

	  <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">chn_intr()</function> arranges to copy new
	      data to the area that was transferred to the device (now
	      free), and make appropriate updates to the
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">snd_dbuf</varname> structure.</para>
	  </listitem>
	</itemizedlist>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="xxxchannel-init">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">channel_init</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">xxxchannel_init()</function> is called to
	  initialize each of the play or record channels.  The calls
	  are initiated from the sound driver attach routine.  (See
	  the <link xmlns:xlink="http://www.w3.org/1999/xlink" linkend="pcm-probe-and-attach">probe and attach
	    section</link>).</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">          static void *
          xxxchannel_init(kobj_t obj, void *data,
             struct snd_dbuf *b, struct pcm_channel *c, int dir)<co xml:id="co-chinit-params"/>
          {
              struct xxx_info *sc = data;
              struct xxx_chinfo *ch;
               ...
              return ch;<co xml:id="co-chinit-return"/>
           }</programlisting>

	<calloutlist xmlns:xlink="http://www.w3.org/1999/xlink">
	  <callout arearefs="co-chinit-params">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><varname xmlns:xlink="http://www.w3.org/1999/xlink">b</varname> is the address for the channel
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">struct snd_dbuf</varname>.  It should be
	      initialized in the function by calling
	      <function xmlns:xlink="http://www.w3.org/1999/xlink">sndbuf_alloc()</function>.  The buffer size to
	      use is normally a small multiple of the 'typical' unit
	      transfer size for your device.</para>

	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><varname xmlns:xlink="http://www.w3.org/1999/xlink">c</varname> is the
	      <filename xmlns:xlink="http://www.w3.org/1999/xlink">pcm</filename> channel control structure
	      pointer.  This is an opaque object.  The function should
	      store it in the local channel structure, to be used in
	      later calls to <filename xmlns:xlink="http://www.w3.org/1999/xlink">pcm</filename> (ie:
	      <function xmlns:xlink="http://www.w3.org/1999/xlink">chn_intr(c)</function>).</para>

	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><varname xmlns:xlink="http://www.w3.org/1999/xlink">dir</varname> indicates the channel
	      direction (<literal xmlns:xlink="http://www.w3.org/1999/xlink">PCMDIR_PLAY</literal> or
	      <literal xmlns:xlink="http://www.w3.org/1999/xlink">PCMDIR_REC</literal>).</para>
	  </callout>

	  <callout arearefs="co-chinit-return">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">The function should return a pointer to the private
	      area used to control this channel.  This will be passed
	      as a parameter to other channel interface calls.</para>
	  </callout>
	</calloutlist>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">channel_setformat</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">xxxchannel_setformat()</function> should set
	  up the hardware for the specified channel for the specified
	  sound format.</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">          static int
          xxxchannel_setformat(kobj_t obj, void *data, u_int32_t format)<co xml:id="co-chsetformat-params"/>
          {
              struct xxx_chinfo *ch = data;
               ...
              return 0;
           }</programlisting>

	<calloutlist xmlns:xlink="http://www.w3.org/1999/xlink">
	  <callout arearefs="co-chsetformat-params">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><varname xmlns:xlink="http://www.w3.org/1999/xlink">format</varname> is specified as an
	      <literal xmlns:xlink="http://www.w3.org/1999/xlink">AFMT_XXX value</literal>
	      (<filename xmlns:xlink="http://www.w3.org/1999/xlink">soundcard.h</filename>).</para>
	  </callout>
	</calloutlist>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">channel_setspeed</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">xxxchannel_setspeed()</function> sets up the
	  channel hardware for the specified sampling speed, and
	  returns the possibly adjusted speed.</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">          static int
          xxxchannel_setspeed(kobj_t obj, void *data, u_int32_t speed)
          {
              struct xxx_chinfo *ch = data;
               ...
              return speed;
           }</programlisting>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">channel_setblocksize</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">xxxchannel_setblocksize()</function> sets the
	  block size, which is the size of unit transactions between
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">pcm</filename> and the sound driver, and
	  between the sound driver and the device.  Typically, this
	  would be the number of bytes transferred before an interrupt
	  occurs.  During a transfer, the sound driver should call
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">pcm</filename>'s
	  <function xmlns:xlink="http://www.w3.org/1999/xlink">chn_intr()</function> every time this size has
	  been transferred.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Most sound drivers only take note of the block size
	  here, to be used when an actual transfer will be
	  started.</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">          static int
          xxxchannel_setblocksize(kobj_t obj, void *data, u_int32_t blocksize)
          {
              struct xxx_chinfo *ch = data;
                ...
              return blocksize;<co xml:id="co-chsetblocksize-return"/>
           }</programlisting>

	<calloutlist xmlns:xlink="http://www.w3.org/1999/xlink">
	  <callout arearefs="co-chsetblocksize-return">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">The function returns the possibly adjusted block
	      size.  In case the block size is indeed changed,
	      <function xmlns:xlink="http://www.w3.org/1999/xlink">sndbuf_resize()</function> should be called to
	      adjust the buffer.</para>
	  </callout>
	</calloutlist>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="channel-trigger">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">channel_trigger</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">xxxchannel_trigger()</function> is called by
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">pcm</filename> to control data transfer
	  operations in the driver.</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">          static int
          xxxchannel_trigger(kobj_t obj, void *data, int go)<co xml:id="co-chtrigger-params"/>
          {
              struct xxx_chinfo *ch = data;
               ...
              return 0;
           }</programlisting>

	<calloutlist xmlns:xlink="http://www.w3.org/1999/xlink">
	  <callout arearefs="co-chtrigger-params">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink"><varname xmlns:xlink="http://www.w3.org/1999/xlink">go</varname> defines the action for the
	      current call.  The possible values are:</para>

	    <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">PCMTRIG_START</literal>: the driver
		  should start a data transfer from or to the channel
		  buffer.  If needed, the buffer base and size can be
		  retrieved through
		  <function xmlns:xlink="http://www.w3.org/1999/xlink">sndbuf_getbuf()</function> and
		  <function xmlns:xlink="http://www.w3.org/1999/xlink">sndbuf_getsize()</function>.</para>
	      </listitem>

	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">PCMTRIG_EMLDMAWR</literal> /
		  <literal xmlns:xlink="http://www.w3.org/1999/xlink">PCMTRIG_EMLDMARD</literal>: this tells the
		  driver that the input or output buffer may have been
		  updated.  Most drivers just ignore these
		  calls.</para>
	      </listitem>

	      <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
		<para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">PCMTRIG_STOP</literal> /
		  <literal xmlns:xlink="http://www.w3.org/1999/xlink">PCMTRIG_ABORT</literal>: the driver should
		  stop the current transfer.</para>
	      </listitem>
	    </itemizedlist>
	  </callout>
	</calloutlist>

	<note xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">If the driver uses ISA DMA,
	    <function xmlns:xlink="http://www.w3.org/1999/xlink">sndbuf_isadma()</function> should be called
	    before performing actions on the device, and will take
	    care of the DMA chip side of things.</para>
	</note>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">channel_getptr</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">xxxchannel_getptr()</function> returns the
	  current offset in the transfer buffer.  This will typically
	  be called by <function xmlns:xlink="http://www.w3.org/1999/xlink">chn_intr()</function>, and this is
	  how <filename xmlns:xlink="http://www.w3.org/1999/xlink">pcm</filename> knows where it can transfer
	  new data.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">channel_free</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">xxxchannel_free()</function> is called to free
	  up channel resources, for example when the driver is
	  unloaded, and should be implemented if the channel data
	  structures are dynamically allocated or if
	  <function xmlns:xlink="http://www.w3.org/1999/xlink">sndbuf_alloc()</function> was not used for buffer
	  allocation.</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">channel_getcaps</title>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">          struct pcmchan_caps *
          xxxchannel_getcaps(kobj_t obj, void *data)
          {
              return &amp;xxx_caps;<co xml:id="co-chgetcaps-return"/>
           }</programlisting>

	<calloutlist xmlns:xlink="http://www.w3.org/1999/xlink">

	  <callout arearefs="co-chgetcaps-return">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">The routine returns a pointer to a (usually
	      statically-defined)
	      <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">pcmchan_caps</varname> structure (defined
	      in <filename xmlns:xlink="http://www.w3.org/1999/xlink">sound/pcm/channel.h</filename>.  The
	      structure holds the minimum and maximum sampling
	      frequencies, and the accepted sound formats.  Look at
	      any sound driver for an example.</para>
	  </callout>
	</calloutlist>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">More Functions</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">channel_reset()</function>,
	  <function xmlns:xlink="http://www.w3.org/1999/xlink">channel_resetdone()</function>, and
	  <function xmlns:xlink="http://www.w3.org/1999/xlink">channel_notify()</function> are for special
	  purposes and should not be implemented in a driver without
	  discussing it on the <link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://lists.FreeBSD.org/mailman/listinfo/freebsd-multimedia">FreeBSD multimedia mailing list</link>.</para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">channel_setdir()</function> is
	  deprecated.</para>
      </sect3>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">The MIXER Interface</title>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="xxxmixer-init">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">mixer_init</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">xxxmixer_init()</function> initializes the
	  hardware and tells <filename xmlns:xlink="http://www.w3.org/1999/xlink">pcm</filename> what mixer
	  devices are available for playing and recording</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">          static int
          xxxmixer_init(struct snd_mixer *m)
          {
              struct xxx_info   *sc = mix_getdevinfo(m);
              u_int32_t v;

              [Initialize hardware]

              [Set appropriate bits in v for play mixers]<co xml:id="co-mxini-sd"/>
              mix_setdevs(m, v);
              [Set appropriate bits in v for record mixers]
              mix_setrecdevs(m, v)

              return 0;
          }</programlisting>

	<calloutlist xmlns:xlink="http://www.w3.org/1999/xlink">
	  <callout arearefs="co-mxini-sd">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">Set bits in an integer value and call
	      <function xmlns:xlink="http://www.w3.org/1999/xlink">mix_setdevs()</function> and
	      <function xmlns:xlink="http://www.w3.org/1999/xlink">mix_setrecdevs()</function> to tell
	      <filename xmlns:xlink="http://www.w3.org/1999/xlink">pcm</filename> what devices exist.</para>
	  </callout>
	</calloutlist>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Mixer bits definitions can be found in
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">soundcard.h</filename>
	  (<literal xmlns:xlink="http://www.w3.org/1999/xlink">SOUND_MASK_XXX</literal> values and
	  <literal xmlns:xlink="http://www.w3.org/1999/xlink">SOUND_MIXER_XXX</literal> bit shifts).</para>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">mixer_set</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">xxxmixer_set()</function> sets the volume
	  level for one mixer device.</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">          static int
          xxxmixer_set(struct snd_mixer *m, unsigned dev,
                           unsigned left, unsigned right)<co xml:id="co-mxset-params"/>
          {
              struct sc_info *sc = mix_getdevinfo(m);
              [set volume level]
              return left | (right &lt;&lt; 8);<co xml:id="co-mxset-return"/>
          }</programlisting>

	<calloutlist xmlns:xlink="http://www.w3.org/1999/xlink">
	  <callout arearefs="co-mxset-params">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">The device is specified as a
	      <literal xmlns:xlink="http://www.w3.org/1999/xlink">SOUND_MIXER_XXX</literal> value</para>

	    <para xmlns:xlink="http://www.w3.org/1999/xlink">The volume values are specified in range [0-100].
	      A value of zero should mute the device.</para>
	  </callout>

	  <callout arearefs="co-mxset-return">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">As the hardware levels probably will not match the
	      input scale, and some rounding will occur, the routine
	      returns the actual level values (in range 0-100) as
	      shown.</para>
	  </callout>
	</calloutlist>

      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">mixer_setrecsrc</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">xxxmixer_setrecsrc()</function> sets the
	  recording source device.</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">          static int
          xxxmixer_setrecsrc(struct snd_mixer *m, u_int32_t src)<co xml:id="co-mxsr-params"/>
          {
              struct xxx_info *sc = mix_getdevinfo(m);

              [look for non zero bit(s) in src, set up hardware]

              [update src to reflect actual action]
              return src;<co xml:id="co-mxsr-return"/>
           }</programlisting>

	<calloutlist xmlns:xlink="http://www.w3.org/1999/xlink">
	  <callout arearefs="co-mxsr-params">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">The desired recording devices are specified as a
	      bit field</para>
	  </callout>

	  <callout arearefs="co-mxsr-return">
	    <para xmlns:xlink="http://www.w3.org/1999/xlink">The actual devices set for recording are returned.
	      Some drivers can only set one device for recording.  The
	      function should return -1 if an error occurs.</para>
	  </callout>
	</calloutlist>
      </sect3>

      <sect3 xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">mixer_uninit, mixer_reinit</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">xxxmixer_uninit()</function> should ensure
	  that all sound is muted and if possible mixer hardware
	  should be powered down </para>

	<para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">xxxmixer_reinit()</function> should ensure
	  that the mixer hardware is powered up and any settings not
	  controlled by <function xmlns:xlink="http://www.w3.org/1999/xlink">mixer_set()</function> or
	  <function xmlns:xlink="http://www.w3.org/1999/xlink">mixer_setrecsrc()</function> are restored.</para>
      </sect3>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">The AC97 Interface</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">AC97</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">AC97</emphasis> interface is implemented
	by drivers with an AC97 codec.  It only has three
	methods:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">xxxac97_init()</function> returns the number
	    of ac97 codecs found.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">ac97_read()</function> and
	    <function xmlns:xlink="http://www.w3.org/1999/xlink">ac97_write()</function> read or write a
	    specified register.</para>
	</listitem>
      </itemizedlist>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">AC97</emphasis> interface is used by the
	AC97 code in <filename xmlns:xlink="http://www.w3.org/1999/xlink">pcm</filename> to perform higher
	level operations.  Look at
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">sound/pci/maestro3.c</filename> or many others under
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">sound/pci/</filename> for an example.</para>
    </sect2>
  </sect1>
</chapter>

    
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="pccard">
  <title xmlns:xlink="http://www.w3.org/1999/xlink">PC Card</title>

  <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">PC Card</primary></indexterm>
  <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">CardBus</primary></indexterm>

  <para xmlns:xlink="http://www.w3.org/1999/xlink">This chapter will talk about the FreeBSD mechanisms for
    writing a device driver for a PC Card or CardBus device.  However,
    at present it just documents how to add a new device to an
    existing pccard driver.</para>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="pccard-adddev">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Adding a Device</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Device drivers know what devices they support.  There is a
      table of supported devices in the kernel that drivers use to
      attach to a device.</para>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="pccard-overview">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Overview</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">CIS</primary></indexterm>
      <para xmlns:xlink="http://www.w3.org/1999/xlink">PC Cards are identified in one of two ways, both based on
	the <firstterm xmlns:xlink="http://www.w3.org/1999/xlink">Card Information Structure</firstterm>
	(<acronym xmlns:xlink="http://www.w3.org/1999/xlink" role="Card Information Structure">CIS</acronym>)
	stored on the card.  The
	first method is to use numeric manufacturer and product
	numbers.  The second method is to use the human readable
	strings that are also contained in the CIS.  The PC Card bus
	uses a centralized database and some macros to facilitate a
	design pattern to help the driver writer match devices to his
	driver.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Original equipment manufacturers (<acronym xmlns:xlink="http://www.w3.org/1999/xlink">OEM</acronym>s)
	often develop a reference design for a PC Card product, then
	sell this design to other companies to market.  Those
	companies refine the design, market the product to their
	target audience or geographic area, and put their own name
	plate onto the card.  The refinements to the physical card are
	typically very minor, if any changes are made at all.  To
	strengthen their brand, these vendors place their company name
	in the human readable strings in the CIS space, but leave the
	manufacturer and product IDs unchanged.</para>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">NetGear</primary></indexterm>
      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">Linksys</primary></indexterm>
      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink"><primary xmlns:xlink="http://www.w3.org/1999/xlink">D-Link</primary></indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Because of this practice, FreeBSD drivers usually rely on
	numeric IDs for device identification.  Using numeric IDs and
	a centralized database complicates adding IDs and support for
	cards to the system.  One must carefully check to see who
	really made the card, especially when it appears that the
	vendor who made the card might already have a different
	manufacturer ID listed in the central database.  Linksys,
	D-Link, and NetGear are a number of US manufacturers of LAN
	hardware that often sell the same design.  These same designs
	can be sold in Japan under names such as Buffalo and Corega.
	Often, these devices will all have the same manufacturer and
	product IDs.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The PC Card bus code keeps a central database of card
	information, but not which driver is associated with them, in
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">/sys/dev/pccard/pccarddevs</filename>.  It also
	provides a set of macros that allow one to easily construct
	simple entries in the table the driver uses to claim
	devices.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Finally, some really low end devices do not contain
	manufacturer identification at all.  These devices must be
	detected by matching the human readable CIS strings.
	While it would be nice if we did not need this method as a
	fallback, it is necessary for some very low end CD-ROM players
	and Ethernet cards.  This method should generally be
	avoided, but a number of devices are listed in this section
	because they were added prior to the recognition of the
	<acronym xmlns:xlink="http://www.w3.org/1999/xlink">OEM</acronym> nature of the PC Card business.  When
	adding new devices, prefer using the numeric method.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="pccard-pccarddevs">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Format of <filename xmlns:xlink="http://www.w3.org/1999/xlink">pccarddevs</filename></title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">There are four sections in the
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">pccarddevs</filename> files.  The first section
	lists the manufacturer numbers for vendors that use
	them.  This section is sorted in numerical order.  The next
	section has all of the products that are used by these
	vendors, along with their product ID numbers and a description
	string.  The description string typically is not used (instead
	we set the device's description based on the human readable
	CIS, even if we match on the numeric version).  These two
	sections are then repeated for devices that use the
	string matching method.  Finally, C-style comments enclosed in
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">/*</literal> and <literal xmlns:xlink="http://www.w3.org/1999/xlink">*/</literal> characters are
	allowed anywhere in the file.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The first section of the file contains the vendor IDs.
	Please keep this list sorted in numeric order.  Also, please
	coordinate changes to this file because we share it with
	NetBSD to help facilitate a common clearing house for this
	information.  For example, here are the first few vendor
	IDs:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">vendor FUJITSU			0x0004  Fujitsu Corporation
vendor NETGEAR_2		0x000b  Netgear
vendor PANASONIC		0x0032	Matsushita Electric Industrial Co.
vendor SANDISK			0x0045	Sandisk Corporation</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Chances are very good
	that the <literal xmlns:xlink="http://www.w3.org/1999/xlink">NETGEAR_2</literal> entry is really an OEM
	that NETGEAR purchased cards from and the author of support
	for those cards was unaware at the time that Netgear was using
	someone else's ID.  These entries are fairly straightforward.
	The vendor keyword denotes the kind of line that this is,
	followed by the name of the vendor.  This name will be
	repeated later in <filename xmlns:xlink="http://www.w3.org/1999/xlink">pccarddevs</filename>, as
	well as used in the driver's match tables, so keep it short
	and a valid C identifier.  A numeric ID in hex identifies the
	manufacturer.  Do not add IDs of the form
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">0xffffffff</literal> or <literal xmlns:xlink="http://www.w3.org/1999/xlink">0xffff</literal>
	because these are reserved IDs (the former is
	<quote xmlns:xlink="http://www.w3.org/1999/xlink">no ID set</quote> while the latter is sometimes seen in
	extremely poor quality cards to try to indicate
	<quote xmlns:xlink="http://www.w3.org/1999/xlink">none</quote>).  Finally there is a string description
	of the company that makes the card.  This string is not used
	in FreeBSD for anything but commentary purposes.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The second section of the file contains the products.  As
	shown in this example, the format is similar to the vendor
	lines:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">/* Allied Telesis K.K. */
product ALLIEDTELESIS LA_PCM	0x0002 Allied Telesis LA-PCM

/* Archos */
product	ARCHOS ARC_ATAPI	0x0043 MiniCD</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">product</literal> keyword is followed by the vendor
	name, repeated from above.  This is followed by the product
	name, which is used by the driver and should be a valid C
	identifier, but may also start with a number.  As with the
	vendors, the hex product ID for this card follows the same
	convention for <literal xmlns:xlink="http://www.w3.org/1999/xlink">0xffffffff</literal> and
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">0xffff</literal>.  Finally, there is a string
	description of the device itself.  This string typically is
	not used in FreeBSD, since FreeBSD's pccard bus driver will
	construct a string from the human readable CIS entries, but it
	can be used in the rare cases where this is somehow
	insufficient.  The products are in alphabetical order by
	manufacturer, then numerical order by product ID.  They have a
	C comment before each manufacturer's entries and there is a
	blank line between entries.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The third section is like the previous vendor section, but
	with all of the manufacturer numeric IDs set to
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">-1</literal>, meaning
	<quote xmlns:xlink="http://www.w3.org/1999/xlink">match anything found</quote> in the FreeBSD pccard
	bus code.  Since these are C identifiers, their names must be
	unique.  Otherwise the format is identical to the first
	section of the file.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The final section contains the entries for those cards
	that must be identified by string entries.  This section's
	format is a little different from the generic section:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">product ADDTRON AWP100		{ "Addtron", "AWP-100&amp;spWireless&amp;spPCMCIA", "Version&amp;sp01.02", NULL }
product ALLIEDTELESIS WR211PCM	{ "Allied&amp;spTelesis&amp;spK.K.", "WR211PCM", NULL, NULL } Allied Telesis WR211PCM</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The familiar <literal xmlns:xlink="http://www.w3.org/1999/xlink">product</literal> keyword is
	followed by the vendor name and the card name, just as in the
	second section of the file.  Here the format deviates from
	that used earlier.  There is a {} grouping, followed by a
	number of strings.  These strings correspond to the vendor,
	product, and extra information that is defined in a CIS_INFO
	tuple.  These strings are filtered by the program that
	generates <filename xmlns:xlink="http://www.w3.org/1999/xlink">pccarddevs.h</filename> to replace &amp;sp
	with a real space.  NULL strings mean that the corresponding
	part of the entry should be ignored.  The example shown here
	contains a bad entry.  It should not contain the version
	number unless that is critical for the operation of the card.
	Sometimes vendors will have many different versions of the
	card in the field that all work, in which case that
	information only makes it harder for someone with a similar
	card to use it with FreeBSD.  Sometimes it is necessary when a
	vendor wishes to sell many different parts under the same
	brand due to market considerations (availability, price, and
	so forth).  Then it can be critical to disambiguating the card
	in those rare cases where the vendor kept the same
	manufacturer/product pair.  Regular expression matching is not
	available at this time.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="pccard-probe">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Sample Probe Routine</title>

      <indexterm xmlns:xlink="http://www.w3.org/1999/xlink">
	<primary xmlns:xlink="http://www.w3.org/1999/xlink">PC Card</primary>
	<secondary xmlns:xlink="http://www.w3.org/1999/xlink">probe</secondary>
      </indexterm>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">To understand how to add a device to the list of supported
	devices, one must understand the probe and/or match routines
	that many drivers have.  It is complicated a little in FreeBSD
	5.x because there is a compatibility layer for OLDCARD present
	as well.  Since only the window-dressing is different, an
	idealized version will be presented here.</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">static const struct pccard_product wi_pccard_products[] = {
	PCMCIA_CARD(3COM, 3CRWE737A, 0),
	PCMCIA_CARD(BUFFALO, WLI_PCM_S11, 0),
	PCMCIA_CARD(BUFFALO, WLI_CF_S11G, 0),
	PCMCIA_CARD(TDK, LAK_CD011WL, 0),
	{ NULL }
};

static int
wi_pccard_probe(dev)
	device_t	dev;
{
	const struct pccard_product *pp;

	if ((pp = pccard_product_lookup(dev, wi_pccard_products,
	    sizeof(wi_pccard_products[0]), NULL)) != NULL) {
		if (pp-&gt;pp_name != NULL)
			device_set_desc(dev, pp-&gt;pp_name);
		return (0);
	}
	return (ENXIO);
}</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Here we have a simple pccard probe routine that matches a
	few devices.  As stated above, the name may vary (if it is not
	<function xmlns:xlink="http://www.w3.org/1999/xlink">foo_pccard_probe()</function> it will be
	<function xmlns:xlink="http://www.w3.org/1999/xlink">foo_pccard_match()</function>).  The function
	<function xmlns:xlink="http://www.w3.org/1999/xlink">pccard_product_lookup()</function> is a generalized
	function that walks the table and returns a pointer to the
	first entry that it matches.  Some drivers may use this
	mechanism to convey additional information about some cards to
	the rest of the driver, so there may be some variance in the
	table.  The only requirement is that each row of the table
	must have a <function xmlns:xlink="http://www.w3.org/1999/xlink">struct</function>
	<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">pccard_product</varname> as the first
	element.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Looking at the table
	<varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">wi_pccard_products</varname>, one notices that
	all the entries are of the form
	<function xmlns:xlink="http://www.w3.org/1999/xlink">PCMCIA_CARD(<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">foo</replaceable>,
	  <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">bar</replaceable>,
	  <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">baz</replaceable>)</function>.  The
	<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">foo</replaceable> part is the manufacturer ID
	from <filename xmlns:xlink="http://www.w3.org/1999/xlink">pccarddevs</filename>.  The
	<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">bar</replaceable> part is the product ID.
	<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">baz</replaceable> is the expected function number
	for this card.  Many pccards can have multiple functions,
	and some way to disambiguate function 1 from function 0 is
	needed.  You may see <literal xmlns:xlink="http://www.w3.org/1999/xlink">PCMCIA_CARD_D</literal>, which
	includes the device description from
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">pccarddevs</filename>.  You may also see
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">PCMCIA_CARD2</literal> and
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">PCMCIA_CARD2_D</literal> which are used when you need
	to match both CIS strings and manufacturer numbers, in the
	<quote xmlns:xlink="http://www.w3.org/1999/xlink">use the default description</quote> and <quote xmlns:xlink="http://www.w3.org/1999/xlink">take the
	  description from pccarddevs</quote> flavors.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="pccard-add">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Putting it All Together</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">To add a new device, one must first obtain the
	identification information from the
	device.  The easiest way to do this is to insert the device
	into a PC Card or CF slot and issue
	<command xmlns:xlink="http://www.w3.org/1999/xlink">devinfo -v</command>.  Sample output:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">        cbb1 pnpinfo vendor=0x104c device=0xac51 subvendor=0x1265 subdevice=0x0300 class=0x060700 at slot=10 function=1
          cardbus1
          pccard1
            unknown pnpinfo manufacturer=0x026f product=0x030c cisvendor="BUFFALO" cisproduct="WLI2-CF-S11" function_type=6 at function=0</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">manufacturer</literal>
	and <literal xmlns:xlink="http://www.w3.org/1999/xlink">product</literal> are the numeric IDs for this
	product, while <literal xmlns:xlink="http://www.w3.org/1999/xlink">cisvendor</literal> and
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">cisproduct</literal> are the product description
	strings from the CIS.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Since we first want to prefer the numeric option, first
	try to construct an entry based on that.  The above card has
	been slightly fictionalized for the purpose of this example.
	The vendor is BUFFALO, which we see already has an
	entry:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">vendor BUFFALO			0x026f	BUFFALO (Melco Corporation)</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">But there is no entry for this particular card.
	Instead we find:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">/* BUFFALO */
product BUFFALO WLI_PCM_S11	0x0305	BUFFALO AirStation 11Mbps WLAN
product BUFFALO LPC_CF_CLT	0x0307	BUFFALO LPC-CF-CLT
product	BUFFALO	LPC3_CLT	0x030a	BUFFALO LPC3-CLT Ethernet Adapter
product BUFFALO WLI_CF_S11G	0x030b	BUFFALO AirStation 11Mbps CF WLAN</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">To add the device, we can just add this entry to
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">pccarddevs</filename>:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">product BUFFALO WLI2_CF_S11G	0x030c	BUFFALO AirStation ultra 802.11b CF</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Once these steps are complete, the card can be added to
	the driver.  That is a simple operation of adding one
	line:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">static const struct pccard_product wi_pccard_products[] = {
	PCMCIA_CARD(3COM, 3CRWE737A, 0),
	PCMCIA_CARD(BUFFALO, WLI_PCM_S11, 0),
	PCMCIA_CARD(BUFFALO, WLI_CF_S11G, 0),
+	PCMCIA_CARD(BUFFALO, WLI_CF2_S11G, 0),
	PCMCIA_CARD(TDK, LAK_CD011WL, 0),
	{ NULL }
};</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Note that I have included a '<literal xmlns:xlink="http://www.w3.org/1999/xlink">+</literal>' in the
	line before the line that I added, but that is simply to
	highlight the line.  Do not add it to the actual driver.  Once
	you have added the line, you can recompile your kernel or
	module and test it.  If the device is recognized and works,
	please submit a patch.  If it does not work, please figure out
	what is needed to make it work and submit a patch.  If the
	device is not recognized at all, you have done something wrong
	and should recheck each step.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">If you are a FreeBSD src committer, and everything appears
	to be working, then you can commit the changes to the tree.
	However, there are some minor tricky things to be considered.
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">pccarddevs</filename> must be committed to the tree
	first.  Then <filename xmlns:xlink="http://www.w3.org/1999/xlink">pccarddevs.h</filename> must be
	regenerated and committed as a second step, ensuring that the
	right $FreeBSD$ tag is in the latter file.
	Finally, commit the additions to the driver.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="pccard-pr">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Submitting a New Device</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Please do not send entries for new devices to the author
	directly.  Instead, submit them as a PR and send the author
	the PR number for his records.  This ensures that entries are
	not lost.  When submitting a PR, it is unnecessary to include
	the <filename xmlns:xlink="http://www.w3.org/1999/xlink">pccardevs.h</filename> diffs in the patch, since
	those will be regenerated.  It is necessary to include a
	description of the device, as well as the patches to the
	client driver.  If you do not know the name, use OEM99 as the
	name, and the author will adjust OEM99 accordingly after
	investigation.  Committers should not commit OEM99, but
	instead find the highest OEM entry and commit one more than
	that.</para>
    </sect2>
  </sect1>
</chapter>


  </part>

<!-- XXX - finish me
  <part id="architectures">
    <title>Architectures</title>

    <chapter id="i386">
      <title>* I386</title>

      <para>Talk about <literal>i386</literal> specific &os;
	architecture.</para>
    </chapter>

    <chapter id="ia64">
      <title>* IA-64</title>

      <para>Talk about the architectural specifics of
      FreeBSD/ia64.</para>

    </chapter>

    <chapter id="sparc64">
      <title>* SPARC64</title>

      <para>Talk about <literal>SPARC64</literal> specific &os;
	architecture.</para>
    </chapter>

    <chapter id="amd64">
      <title>* AMD64</title>

      <para>Talk about <literal>AMD64</literal> specific &os;
	architecture.</para>
    </chapter>

    <chapter id="powerpc">
      <title>* PowerPC</title>

      <para>Talk about <literal>PowerPC</literal> specific &os;
	architecture.</para>
    </chapter>
  </part>
-->

  <part xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="appendices">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Appendices</title>

    <bibliography xmlns:xlink="http://www.w3.org/1999/xlink">

      <biblioentry xmlns:xlink="http://www.w3.org/1999/xlink" xreflabel="1">
	<authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
	  <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Marshall</firstname><othername xmlns:xlink="http://www.w3.org/1999/xlink" role="Middle">Kirk</othername><surname xmlns:xlink="http://www.w3.org/1999/xlink">McKusick</surname></personname></author>
	  <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Keith</firstname><surname xmlns:xlink="http://www.w3.org/1999/xlink">Bostic</surname></personname></author>
	  <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">Michael</firstname><othername xmlns:xlink="http://www.w3.org/1999/xlink" role="MI">J</othername><surname xmlns:xlink="http://www.w3.org/1999/xlink">Karels</surname></personname></author>
	  <author xmlns:xlink="http://www.w3.org/1999/xlink"><personname xmlns:xlink="http://www.w3.org/1999/xlink"><firstname xmlns:xlink="http://www.w3.org/1999/xlink">John</firstname><othername xmlns:xlink="http://www.w3.org/1999/xlink" role="MI">S</othername><surname xmlns:xlink="http://www.w3.org/1999/xlink">Quarterman</surname></personname></author>
	</authorgroup>

	<copyright xmlns:xlink="http://www.w3.org/1999/xlink">
	  <year xmlns:xlink="http://www.w3.org/1999/xlink">1996</year>
	  <holder xmlns:xlink="http://www.w3.org/1999/xlink">Addison-Wesley Publishing Company, Inc.</holder>
	</copyright>

	<biblioid xmlns:xlink="http://www.w3.org/1999/xlink" class="isbn">0-201-54979-4</biblioid>

	<publisher xmlns:xlink="http://www.w3.org/1999/xlink">
	  <publishername xmlns:xlink="http://www.w3.org/1999/xlink">Addison-Wesley Publishing Company, Inc.</publishername>
	</publisher>

	<citetitle xmlns:xlink="http://www.w3.org/1999/xlink">The Design and Implementation of the 4.4 BSD Operating System</citetitle>

	<pagenums xmlns:xlink="http://www.w3.org/1999/xlink">1-2</pagenums>
      </biblioentry>

    </bibliography>
  </part>

  <index xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"/>

</book>
