<?xml version="1.0" encoding="iso-8859-1"?>
<!-- Copyright (c) 2001 The FreeBSD Documentation Project

     Redistribution and use in source (SGML DocBook) and 'compiled' forms
     (SGML, HTML, PDF, PostScript, RTF and so forth) with or without
     modification, are permitted provided that the following conditions
     are met:

      1. Redistributions of source code (SGML DocBook) must retain the above
         copyright notice, this list of conditions and the following
         disclaimer as the first lines of this file unmodified.

      2. Redistributions in compiled form (transformed to other DTDs,
         converted to PDF, PostScript, RTF and other formats) must reproduce
         the above copyright notice, this list of conditions and the
         following disclaimer in the documentation and/or other materials
         provided with the distribution.

     THIS DOCUMENTATION IS PROVIDED BY THE FREEBSD DOCUMENTATION PROJECT "AS
     IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
     THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
     PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NIK CLAYTON BE LIABLE FOR ANY
     DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
     OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
     STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
     ANY WAY OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF ADVISED OF THE
     POSSIBILITY OF SUCH DAMAGE.

     $FreeBSD$
-->
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en"> <info>
    <title xmlns:xlink="http://www.w3.org/1999/xlink">FreeBSD and Solid State Devices</title>

    <authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
      <author xmlns:xlink="http://www.w3.org/1999/xlink">
	<personname xmlns:xlink="http://www.w3.org/1999/xlink">
	  <firstname xmlns:xlink="http://www.w3.org/1999/xlink">John</firstname>
	  <surname xmlns:xlink="http://www.w3.org/1999/xlink">Kozubik</surname>
	</personname>
	<affiliation xmlns:xlink="http://www.w3.org/1999/xlink">
	  <address xmlns:xlink="http://www.w3.org/1999/xlink">
	    <email xmlns:xlink="http://www.w3.org/1999/xlink">john@kozubik.com</email>
	  </address>
	</affiliation>
      </author>
    </authorgroup>

    <copyright xmlns:xlink="http://www.w3.org/1999/xlink">
      <year xmlns:xlink="http://www.w3.org/1999/xlink">2001</year>
      <year xmlns:xlink="http://www.w3.org/1999/xlink">2009</year>
      <holder xmlns:xlink="http://www.w3.org/1999/xlink">The FreeBSD Documentation Project</holder>
    </copyright>

    <legalnotice xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="trademarks" role="trademarks">
      <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">FreeBSD is a registered trademark of
  the FreeBSD Foundation.</para>
      <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Many of the designations used by
  manufacturers and sellers to distinguish their products are claimed
  as trademarks.  Where those designations appear in this document,
  and the FreeBSD Project was aware of the trademark claim, the
  designations have been followed by the <quote xmlns:xlink="http://www.w3.org/1999/xlink">&#8482;</quote> or the
  <quote xmlns:xlink="http://www.w3.org/1999/xlink">®</quote> symbol.</para>
    </legalnotice>

    
<legalnotice xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="legalnotice">
  <title xmlns:xlink="http://www.w3.org/1999/xlink">Copyright</title>

  <para xmlns:xlink="http://www.w3.org/1999/xlink">Redistribution and use in source (XML DocBook) and 'compiled'
    forms (XML, HTML, PDF, PostScript, RTF and so forth) with or without
    modification, are permitted provided that the following conditions are
    met:</para>

  <orderedlist xmlns:xlink="http://www.w3.org/1999/xlink">
    <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
      <para xmlns:xlink="http://www.w3.org/1999/xlink">Redistributions of source code (XML DocBook) must retain the
        above copyright notice, this list of conditions and the following
        disclaimer as the first lines of this file unmodified.</para>
    </listitem>

    <listitem xmlns:xlink="http://www.w3.org/1999/xlink">
      <para xmlns:xlink="http://www.w3.org/1999/xlink">Redistributions in compiled form (transformed to other DTDs,
        converted to PDF, PostScript, RTF and other formats) must
        reproduce the above copyright notice, this list of conditions and
        the following disclaimer in the documentation and/or other
        materials provided with the distribution.</para>
    </listitem>
  </orderedlist>

  <important xmlns:xlink="http://www.w3.org/1999/xlink">
    <para xmlns:xlink="http://www.w3.org/1999/xlink">THIS DOCUMENTATION IS PROVIDED BY THE FREEBSD DOCUMENTATION
      PROJECT "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
      BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
      FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
      THE FREEBSD DOCUMENTATION PROJECT BE LIABLE FOR ANY DIRECT, INDIRECT,
      INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
      BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
      OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
      ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
      TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
      USE OF THIS DOCUMENTATION, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
      DAMAGE.</para>
  </important>
</legalnotice>


    <pubdate xmlns:xlink="http://www.w3.org/1999/xlink">$FreeBSD$</pubdate>

    <releaseinfo xmlns:xlink="http://www.w3.org/1999/xlink">$FreeBSD$</releaseinfo>

    <abstract xmlns:xlink="http://www.w3.org/1999/xlink">
      <para xmlns:xlink="http://www.w3.org/1999/xlink">This article covers the use of solid state disk devices in
	FreeBSD to create embedded systems.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Embedded systems have the advantage of increased stability
	due to the lack of integral moving parts (hard drives).
	Account must be taken, however, for the generally low disk
	space available in the system and the durability of the
	storage medium.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Specific topics to be covered include the types and
	attributes of solid state media suitable for disk use in FreeBSD,
	kernel options that are of interest in such an environment,
	the <filename xmlns:xlink="http://www.w3.org/1999/xlink">rc.initdiskless</filename> mechanisms that
	automate the initialization of such systems and the need for
	read-only filesystems, and building filesystems from scratch.
	The article will conclude with some general strategies for
	small and read-only FreeBSD environments.</para>
    </abstract>
  </info>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="intro">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Solid State Disk Devices</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The scope of this article will be limited to solid state
      disk devices made from flash memory.  Flash memory is a solid
      state memory (no moving parts) that is non-volatile (the memory
      maintains data even after all power sources have been
      disconnected).  Flash memory can withstand tremendous physical
      shock and is reasonably fast (the flash memory solutions covered
      in this article are slightly slower than a EIDE hard disk for
      write operations, and much faster for read operations).  One
      very important aspect of flash memory, the ramifications of
      which will be discussed later in this article, is that each
      sector has a limited rewrite capacity.  You can only write,
      erase, and write again to a sector of flash memory a certain
      number of times before the sector becomes permanently unusable.
      Although many flash memory products automatically map bad
      blocks, and although some even distribute write operations
      evenly throughout the unit, the fact remains that there exists a
      limit to the amount of writing that can be done to the device.
      Competitive units have between 1,000,000 and 10,000,000 writes
      per sector in their specification.  This figure varies due to
      the temperature of the environment.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Specifically, we will be discussing ATA compatible
      compact-flash units, which are quite popular as storage media
      for digital cameras.  Of particular interest is the fact that
      they pin out directly to the IDE bus and are compatible with the
      ATA command set.  Therefore, with a very simple and low-cost
      adaptor, these devices can be attached directly to an IDE bus in
      a computer.  Once implemented in this manner, operating systems
      such as FreeBSD see the device as a normal hard disk (albeit
      small).</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Other solid state disk solutions do exist, but their
      expense, obscurity, and relative unease of use places them
      beyond the scope of this article.</para>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="kernel">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Kernel Options</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">A few kernel options are of specific interest to those
      creating an embedded FreeBSD system.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">All embedded FreeBSD systems that use flash memory as system
      disk will be interested in memory disks and memory filesystems.
      Because of the limited number of writes that can be done to
      flash memory, the disk and the filesystems on the disk will most
      likely be mounted read-only.  In this environment, filesystems
      such as <filename xmlns:xlink="http://www.w3.org/1999/xlink">/tmp</filename> and <filename xmlns:xlink="http://www.w3.org/1999/xlink">/var</filename>
      are mounted as memory filesystems to allow the system to create
      logs and update counters and temporary files.  Memory
      filesystems are a critical component to a successful solid state
      FreeBSD implementation.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">You should make sure the following lines exist in your
      kernel configuration file:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">options         MFS             # Memory Filesystem
options         MD_ROOT         # md device usable as a potential root device
pseudo-device   md              # memory disk</programlisting>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="ro-fs">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">The <literal xmlns:xlink="http://www.w3.org/1999/xlink">rc</literal> Subsystem and Read-Only
      Filesystems</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The post-boot initialization of an embedded FreeBSD system is
      controlled by <filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc/rc.initdiskless</filename>.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc/rc.d/var</filename> mounts
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/var</filename> as a memory filesystem, makes a
      configurable list of directories in <filename xmlns:xlink="http://www.w3.org/1999/xlink">/var</filename>
      with the <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">mkdir</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">1</manvolnum></citerefentry> command, and changes modes on some of
      those directories.  In the execution of
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc/rc.d/var</filename>, one other
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">rc.conf</filename> variable comes into play &#8211;
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">varsize</literal>.  A <filename xmlns:xlink="http://www.w3.org/1999/xlink">/var</filename>
      partition is created by <filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc/rc.d/var</filename> based
      on the value of this variable in
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">rc.conf</filename>:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">varsize=8192</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Remember that this value is in sectors by default.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The fact that <filename xmlns:xlink="http://www.w3.org/1999/xlink">/var</filename> is a read-write
      filesystem is an important distinction, as the
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/</filename> partition (and any other partitions you
      may have on your flash media) should be mounted read-only.
      Remember that in <xref xmlns:xlink="http://www.w3.org/1999/xlink" linkend="intro"/> we detailed the
      limitations of flash memory - specifically the limited write
      capability.  The importance of not mounting filesystems on flash
      media read-write, and the importance of not using a swap file,
      cannot be overstated.  A swap file on a busy system can burn
      through a piece of flash media in less than one year.  Heavy
      logging or temporary file creation and destruction can do the
      same.  Therefore, in addition to removing the
      <literal xmlns:xlink="http://www.w3.org/1999/xlink">swap</literal> entry from your
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc/fstab</filename>, you should also change the
      Options field for each filesystem to <literal xmlns:xlink="http://www.w3.org/1999/xlink">ro</literal> as
      follows:</para>

    <programlisting xmlns:xlink="http://www.w3.org/1999/xlink"># Device                Mountpoint      FStype  Options         Dump    Pass#
/dev/ad0s1a             /               ufs     ro              1       1</programlisting>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">A few applications in the average system will immediately
      begin to fail as a result of this change.  For instance, cron
      will not run properly as a result of missing cron tabs in the
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/var</filename> created by
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc/rc.d/var</filename>, and syslog and dhcp will
      encounter problems as well as a result of the read-only
      filesystem and missing items in the <filename xmlns:xlink="http://www.w3.org/1999/xlink">/var</filename>
      that <filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc/rc.d/var</filename> has created.  These are
      only temporary problems though, and are addressed, along with
      solutions to the execution of other common software packages in
      <xref xmlns:xlink="http://www.w3.org/1999/xlink" linkend="strategies"/>.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">An important thing to remember is that a filesystem that was
      mounted read-only with <filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc/fstab</filename> can be
      made read-write at any time by issuing the command:</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">/sbin/mount -uw <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">partition</replaceable></userinput></screen>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">and can be toggled back to read-only with the
      command:</para>

    <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">/sbin/mount -ur <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">partition</replaceable></userinput></screen>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Building a File System from Scratch</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">Because ATA compatible compact-flash cards are seen by FreeBSD
      as normal IDE hard drives, you could theoretically install FreeBSD
      from the network using the kern and mfsroot floppies or from a
      CD.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">However, even a small installation of FreeBSD using normal
      installation procedures can produce a system in size of greater
      than 200 megabytes.  Because most people will be using smaller
      flash memory devices (128 megabytes is considered fairly large -
      32 or even 16 megabytes is common) an installation using normal
      mechanisms is not possible&#8212;there is simply not enough disk
      space for even the smallest of conventional
      installations.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The easiest way to overcome this space limitation is to
      install FreeBSD using conventional means to a normal hard disk.
      After the installation is complete, pare down the operating
      system to a size that will fit onto your flash media, then tar
      the entire filesystem.  The following steps will guide you
      through the process of preparing a piece of flash memory for
      your tarred filesystem.  Remember, because a normal installation
      is not being performed, operations such as partitioning,
      labeling, file-system creation, etc. need to be performed by
      hand.  In addition to the kern and mfsroot floppy disks, you
      will also need to use the fixit floppy.</para>

    <procedure xmlns:xlink="http://www.w3.org/1999/xlink">
      <step xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Partitioning Your Flash Media Device</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">After booting with the kern and mfsroot floppies, choose
	  <literal xmlns:xlink="http://www.w3.org/1999/xlink">custom</literal> from the installation menu.  In
	  the custom installation menu, choose
	  <literal xmlns:xlink="http://www.w3.org/1999/xlink">partition</literal>.  In the partition menu, you
	  should delete all existing partitions using
	  <keycap xmlns:xlink="http://www.w3.org/1999/xlink">d</keycap>.  After deleting all existing
	  partitions, create a partition using <keycap xmlns:xlink="http://www.w3.org/1999/xlink">c</keycap>
	  and accept the default value for the size of the
	  partition.  When asked for the type of the partition, make
	  sure the value is set to <literal xmlns:xlink="http://www.w3.org/1999/xlink">165</literal>.  Now write
	  this partition table to the disk by pressing
	  <keycap xmlns:xlink="http://www.w3.org/1999/xlink">w</keycap> (this is a hidden option on this
	  screen).  If you are using an ATA compatible compact flash
	  card, you should choose the FreeBSD Boot Manager.  Now press
	  <keycap xmlns:xlink="http://www.w3.org/1999/xlink">q</keycap> to quit the partition menu.  You
	  will be shown the boot manager menu once more - repeat the
	  choice you made earlier.</para>
      </step>

      <step xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Creating Filesystems on Your Flash Memory
	  Device</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Exit the custom installation menu, and from the main
	  installation menu choose the <literal xmlns:xlink="http://www.w3.org/1999/xlink">fixit</literal>
	  option.  After entering the fixit environment, enter the
	  following command:</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">disklabel -e /dev/ad0c</userinput></screen>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">At this point you will have entered the vi editor under
	  the auspices of the disklabel command.  Next, you need to
	  add an <literal xmlns:xlink="http://www.w3.org/1999/xlink">a:</literal> line at the end of the file.
	  This <literal xmlns:xlink="http://www.w3.org/1999/xlink">a:</literal> line should look like:</para>

	<programlisting xmlns:xlink="http://www.w3.org/1999/xlink">a:      <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">123456</replaceable>  0       4.2BSD  0       0</programlisting>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Where <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">123456</replaceable> is a number that
	  is exactly the same as the number in the existing
	  <literal xmlns:xlink="http://www.w3.org/1999/xlink">c:</literal> entry for size.  Basically you are
	  duplicating the existing <literal xmlns:xlink="http://www.w3.org/1999/xlink">c:</literal> line as an
	  <literal xmlns:xlink="http://www.w3.org/1999/xlink">a:</literal> line, making sure that fstype is
	  <literal xmlns:xlink="http://www.w3.org/1999/xlink">4.2BSD</literal>.  Save the file and exit.</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">disklabel -B -r /dev/ad0c</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">newfs /dev/ad0a</userinput></screen>
      </step>

      <step xmlns:xlink="http://www.w3.org/1999/xlink">
	<title xmlns:xlink="http://www.w3.org/1999/xlink">Placing Your Filesystem on the Flash Media</title>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Mount the newly prepared flash media:</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">mount /dev/ad0a /flash</userinput></screen>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Bring this machine up on the network so we may transfer
	  our tar file and explode it onto our flash media filesystem.
	  One example of how to do this is:</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">ifconfig xl0 192.168.0.10 netmask 255.255.255.0</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">route add default 192.168.0.1</userinput></screen>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Now that the machine is on the network, transfer your
	  tar file.  You may be faced with a bit of a dilemma at this
	  point - if your flash memory part is 128 megabytes, for
	  instance, and your tar file is larger than 64 megabytes, you
	  cannot have your tar file on the flash media at the same
	  time as you explode it - you will run out of
	  space.  One solution to this problem, if you are using FTP,
	  is to untar the file while it is transferred over FTP.  If
	  you perform your transfer in this manner, you will never
	  have the tar file and the tar contents on your disk at the
	  same time:</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns:xlink="http://www.w3.org/1999/xlink">ftp&gt;</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">get tarfile.tar "| tar xvf -"</userinput></screen>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">If your tarfile is gzipped, you can accomplish this as
	  well:</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns:xlink="http://www.w3.org/1999/xlink">ftp&gt;</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">get tarfile.tar "| zcat | tar xvf -"</userinput></screen>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">After the contents of your tarred filesystem are on your
	  flash memory filesystem, you can unmount the flash memory
	  and reboot:</para>

	<screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">cd /</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">umount /flash</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">exit</userinput></screen>

	<para xmlns:xlink="http://www.w3.org/1999/xlink">Assuming that you configured your filesystem correctly
	  when it was built on the normal hard disk (with your
	  filesystems mounted read-only, and with the necessary
	  options compiled into the kernel) you should now be
	  successfully booting your FreeBSD embedded system.</para>
      </step>
    </procedure>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="strategies">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">System Strategies for Small and Read Only
      Environments</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">In <xref xmlns:xlink="http://www.w3.org/1999/xlink" linkend="ro-fs"/>, it was pointed out that the
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/var</filename> filesystem constructed by
      <filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc/rc.d/var</filename> and the presence of a
      read-only root filesystem causes problems with many common
      software packages used with FreeBSD.  In this article, suggestions
      for successfully running cron, syslog, ports installations, and
      the Apache web server will be provided.</para>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Cron</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Upon boot, <filename xmlns:xlink="http://www.w3.org/1999/xlink">/var</filename> gets populated by
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc/rc.d/var</filename> using the list from
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc/mtree/BSD.var.dist</filename>, so the
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">cron</filename>, <filename xmlns:xlink="http://www.w3.org/1999/xlink">cron/tabs</filename>,
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">at</filename>, and a few other standard directories
	get created.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">However, this does not solve the problem of maintaining
	cron tabs across reboots.  When the system reboots, the
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">/var</filename> filesystem that is in memory will
	disappear and any cron tabs you may have had in it will also
	disappear.  Therefore, one solution would be to create cron
	tabs for the users that need them, mount your
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">/</filename> filesystem as read-write and copy those
	cron tabs to somewhere safe, like
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc/tabs</filename>, then add a line to the end of
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc/rc.initdiskless</filename> that copies those
	crontabs into <filename xmlns:xlink="http://www.w3.org/1999/xlink">/var/cron/tabs</filename> after that
	directory has been created during system initialization.  You
	may also need to add a line that changes modes and permissions
	on the directories you create and the files you copy with
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc/rc.initdiskless</filename>.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Syslog</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink"><filename xmlns:xlink="http://www.w3.org/1999/xlink">syslog.conf</filename> specifies the locations
	of certain log files that exist in
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">/var/log</filename>.  These files are not created by
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc/rc.d/var</filename> upon system initialization.
	Therefore, somewhere in <filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc/rc.d/var</filename>,
	after the section that creates the directories in
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">/var</filename>, you will need to add something like
	this:</para>

      <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">touch /var/log/security /var/log/maillog /var/log/cron /var/log/messages</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">chmod 0644 /var/log/*</userinput></screen>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Ports Installation</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Before discussing the changes necessary to successfully
	use the ports tree, a reminder is necessary regarding the
	read-only nature of your filesystems on the flash media.
	Since they are read-only, you will need to temporarily mount
	them read-write using the mount syntax shown in <xref xmlns:xlink="http://www.w3.org/1999/xlink" linkend="ro-fs"/>.  You should always remount those
	filesystems read-only when you are done with any maintenance -
	unnecessary writes to the flash media could considerably
	shorten its lifespan.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">To make it possible to enter a ports directory and
	successfully run <command xmlns:xlink="http://www.w3.org/1999/xlink">make</command>
	<buildtarget>install</buildtarget>, we must create a packages
	directory on a non-memory filesystem that will keep track of
	our packages across reboots.  Because it is necessary to mount
	your filesystems as read-write for the installation of a
	package anyway, it is sensible to assume that an area on the
	flash media can also be used for package information to be
	written to.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">First, create a package database directory.  This is
	normally in <filename xmlns:xlink="http://www.w3.org/1999/xlink">/var/db/pkg</filename>, but we cannot
	place it there as it will disappear every time the system is
	booted.</para>

      <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">mkdir /etc/pkg</userinput></screen>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Now, add a line to <filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc/rc.d/var</filename> that
	links the <filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc/pkg</filename> directory to
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">/var/db/pkg</filename>.  An example:</para>

      <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">ln -s /etc/pkg /var/db/pkg</userinput></screen>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Now, any time that you mount your filesystems as
	read-write and install a package, the <command xmlns:xlink="http://www.w3.org/1999/xlink">make</command>
	<buildtarget>install</buildtarget> will work, and package
	information will be written successfully to
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc/pkg</filename> (because the filesystem will, at
	that time, be mounted read-write) which will always be
	available to the operating system as
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">/var/db/pkg</filename>.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Apache Web Server</title>

      <note xmlns:xlink="http://www.w3.org/1999/xlink">
	<para xmlns:xlink="http://www.w3.org/1999/xlink">The steps in this section are only necessary if Apache
	  is set up to write its pid or log information outside of
	  <filename xmlns:xlink="http://www.w3.org/1999/xlink">/var</filename>.  By default, Apache keeps its pid
	  file in <filename xmlns:xlink="http://www.w3.org/1999/xlink">/var/run/httpd.pid</filename> and its log
	  files in <filename xmlns:xlink="http://www.w3.org/1999/xlink">/var/log</filename>.</para>
      </note>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">It is now assumed that Apache keeps its log files in a
	directory
	<filename xmlns:xlink="http://www.w3.org/1999/xlink"><replaceable xmlns:xlink="http://www.w3.org/1999/xlink">apache_log_dir</replaceable></filename>
	outside of <filename xmlns:xlink="http://www.w3.org/1999/xlink">/var</filename>.  When this directory
	lives on a read-only filesystem, Apache will not be able to
	save any log files, and may have problems working.  If so, it
	is necessary to add a new directory to the list of directories
	in <filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc/rc.d/var</filename> to create in
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">/var</filename>, and to link
	<filename xmlns:xlink="http://www.w3.org/1999/xlink"><replaceable xmlns:xlink="http://www.w3.org/1999/xlink">apache_log_dir</replaceable></filename>
	to <filename xmlns:xlink="http://www.w3.org/1999/xlink">/var/log/apache</filename>.  It is also necessary
	to set permissions and ownership on this new directory.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">First, add the directory <literal xmlns:xlink="http://www.w3.org/1999/xlink">log/apache</literal> to
	the list of directories to be created in
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc/rc.d/var</filename>.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Second, add these commands to
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc/rc.d/var</filename> after the directory
	creation section:</para>

      <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">chmod 0774 /var/log/apache</userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">chown nobody:nobody /var/log/apache</userinput></screen>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Finally, remove the existing
	<filename xmlns:xlink="http://www.w3.org/1999/xlink"><replaceable xmlns:xlink="http://www.w3.org/1999/xlink">apache_log_dir</replaceable></filename>
	directory, and replace it with a link:</para>

      <screen xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">rm -rf <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">apache_log_dir</replaceable></userinput>
<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">#</prompt> <userinput xmlns:xlink="http://www.w3.org/1999/xlink">ln -s /var/log/apache <replaceable xmlns:xlink="http://www.w3.org/1999/xlink">apache_log_dir</replaceable></userinput></screen>
    </sect2>
  </sect1>
</article>
