<?xml version="1.0" encoding="iso-8859-1"?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
  <info>
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Writing a GEOM Class</title>

    <authorgroup xmlns:xlink="http://www.w3.org/1999/xlink">
      <author xmlns:xlink="http://www.w3.org/1999/xlink">
	<personname xmlns:xlink="http://www.w3.org/1999/xlink">
	  <firstname xmlns:xlink="http://www.w3.org/1999/xlink">Ivan</firstname>
	  <surname xmlns:xlink="http://www.w3.org/1999/xlink">Voras</surname>
	</personname>
	<affiliation xmlns:xlink="http://www.w3.org/1999/xlink">
	  <address xmlns:xlink="http://www.w3.org/1999/xlink">
	    <email xmlns:xlink="http://www.w3.org/1999/xlink">ivoras@FreeBSD.org</email>
	  </address>
	</affiliation>
      </author>
    </authorgroup>

    <legalnotice xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="trademarks" role="trademarks">
      <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">FreeBSD is a registered trademark of
  the FreeBSD Foundation.</para>
      <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Intel, Celeron, Centrino, Core, EtherExpress, i386,
  i486, Itanium, Pentium, and Xeon are trademarks or registered
  trademarks of Intel Corporation or its subsidiaries in the United
  States and other countries.</para>
      <para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Many of the designations used by
  manufacturers and sellers to distinguish their products are claimed
  as trademarks.  Where those designations appear in this document,
  and the FreeBSD Project was aware of the trademark claim, the
  designations have been followed by the <quote xmlns:xlink="http://www.w3.org/1999/xlink">&#8482;</quote> or the
  <quote xmlns:xlink="http://www.w3.org/1999/xlink">®</quote> symbol.</para>
    </legalnotice>

    <pubdate xmlns:xlink="http://www.w3.org/1999/xlink">$FreeBSD$</pubdate>

    <releaseinfo xmlns:xlink="http://www.w3.org/1999/xlink">$FreeBSD$</releaseinfo>

    <abstract xmlns:xlink="http://www.w3.org/1999/xlink">
      <para xmlns:xlink="http://www.w3.org/1999/xlink">This text documents some starting points in developing
	GEOM classes, and kernel modules in general.  It is assumed
	that the reader is familiar with C userland
	programming.</para>
    </abstract>
  </info>

<!-- Introduction -->
  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="intro">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Introduction</title>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="intro-docs">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Documentation</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Documentation on kernel programming is scarce &#8212; it
	is one of few areas where there is nearly nothing in the way
	of friendly tutorials, and the phrase <quote xmlns:xlink="http://www.w3.org/1999/xlink">use the
	  source!</quote> really holds true.  However, there are some
	bits and pieces (some of them seriously outdated) floating
	around that should be studied before beginning to code:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">The <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="../../../../doc/en_US.ISO8859-1/books/developers-handbook/index.html">FreeBSD
	      Developer's Handbook</link> &#8212; part of the
	    documentation project, it does not contain anything
	    specific to kernel programming, but rather some general
	    useful information.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">The <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="../../../../doc/en_US.ISO8859-1/books/arch-handbook/index.html">FreeBSD
	      Architecture Handbook</link> &#8212; also from the
	    documentation project, contains descriptions of several
	    low-level facilities and procedures.  The most important
	    chapter is 13, <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="../../../../doc/en_US.ISO8859-1/books/arch-handbook/driverbasics.html">Writing
	      FreeBSD device drivers</link>.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">The Blueprints section of <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.freebsddiary.org">FreeBSD
	      Diary</link> web site &#8212; contains several
	    interesting articles on kernel
	    facilities.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">The man pages in section 9 &#8212; for important
	    documentation on kernel functions.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">The <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">geom</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">4</manvolnum></citerefentry> man page and <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://phk.freebsd.dk/pubs/">PHK's GEOM
	      slides</link> &#8212; for general introduction of the
	    GEOM subsystem.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Man pages <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">g_bio</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry>, <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">g_event</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry>,
	    <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">g_data</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry>, <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">g_geom</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry>, <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">g_provider</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry>
	    <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">g_consumer</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry>, <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">g_access</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry> &amp; others linked
	    from those, for documentation on specific
	    functionalities.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">The <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">style</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry> man page &#8212; for documentation
	    on the coding-style conventions which must be followed for
	    any code which is to be committed to the FreeBSD
	    Subversion tree.</para>
	</listitem>
      </itemizedlist>
    </sect2>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="prelim">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">Preliminaries</title>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">The best way to do kernel development is to have (at least)
      two separate computers.  One of these would contain the
      development environment and sources, and the other would be used
      to test the newly written code by network-booting and
      network-mounting filesystems from the first one.  This way if
      the new code contains bugs and crashes the machine, it will not
      mess up the sources (and other <quote xmlns:xlink="http://www.w3.org/1999/xlink">live</quote> data).  The
      second system does not even require a proper display.  Instead,
      it could be connected with a serial cable or KVM to the first
      one.</para>

    <para xmlns:xlink="http://www.w3.org/1999/xlink">But, since not everybody has two or more computers handy,
      there are a few things that can be done to prepare an otherwise
      <quote xmlns:xlink="http://www.w3.org/1999/xlink">live</quote> system for developing kernel code.  This
      setup is also applicable for developing in a <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.vmware.com/">VMWare</link> or <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.qemu.org/">QEmu</link> virtual machine
      (the next best thing after a dedicated development
      machine).</para>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="prelim-system">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Modifying a System for Development</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">For any kernel programming a kernel with
	<option xmlns:xlink="http://www.w3.org/1999/xlink">INVARIANTS</option> enabled is a must-have.  So enter
	these in your kernel configuration file:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">options INVARIANT_SUPPORT
options INVARIANTS</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">For more debugging you should also include WITNESS
	support, which will alert you of mistakes in locking:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">options WITNESS_SUPPORT
options WITNESS</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">For debugging crash dumps, a kernel with debug symbols is
	needed:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">  makeoptions    DEBUG=-g</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">With the usual way of installing the kernel (<command xmlns:xlink="http://www.w3.org/1999/xlink">make
	  installkernel</command>) the debug kernel will not be
	automatically installed.  It is called
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">kernel.debug</filename> and located in
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/obj/usr/src/sys/KERNELNAME/</filename>.  For
	convenience it should be copied to
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">/boot/kernel/</filename>.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Another convenience is enabling the kernel debugger so you
	can examine a kernel panic when it happens.  For this, enter
	the following lines in your kernel configuration file:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">options KDB
options DDB
options KDB_TRACE</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">For this to work you might need to set a sysctl (if it is
	not on by default):</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">  debug.debugger_on_panic=1</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Kernel panics will happen, so care should be taken with
	the filesystem cache.  In particular, having softupdates might
	mean the latest file version could be lost if a panic occurs
	before it is committed to storage.  Disabling softupdates
	yields a great performance hit, and still does not guarantee
	data consistency.  Mounting filesystem with the
	<quote xmlns:xlink="http://www.w3.org/1999/xlink">sync</quote> option is needed for that.  For a
	compromise, the softupdates cache delays can be shortened.
	There are three sysctl's that are useful for this (best to be
	set in <filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc/sysctl.conf</filename>):</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">kern.filedelay=5
kern.dirdelay=4
kern.metadelay=3</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The numbers represent seconds.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">For debugging kernel panics, kernel core dumps are
	required.  Since a kernel panic might make filesystems
	unusable, this crash dump is first written to a raw partition.
	Usually, this is the swap partition.  This partition must be
	at least as large as the physical RAM in the machine.  On the
	next boot, the dump is copied to a regular file.  This happens
	after filesystems are checked and mounted, and before swap is
	enabled.  This is controlled with two
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc/rc.conf</filename> variables:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">dumpdev="/dev/ad0s4b"
dumpdir="/usr/core </programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The <varname xmlns:xlink="http://www.w3.org/1999/xlink">dumpdev</varname> variable specifies the swap
	partition and <varname xmlns:xlink="http://www.w3.org/1999/xlink">dumpdir</varname> tells the system
	where in the filesystem to relocate the core dump on
	reboot.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Writing kernel core dumps is slow and takes a long time so
	if you have lots of memory (&gt;256M) and lots of panics it
	could be frustrating to sit and wait while it is done (twice
	&#8212; first to write it to swap, then to relocate it to
	filesystem).  It is convenient then to limit the amount of RAM
	the system will use via a
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">/boot/loader.conf</filename> tunable:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">  hw.physmem="256M"</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">If the panics are frequent and filesystems large (or you
	simply do not trust softupdates+background fsck) it is
	advisable to turn background fsck off via
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">/etc/rc.conf</filename> variable:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">  background_fsck="NO"</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">This way, the filesystems will always get checked when
	needed.  Note that with background fsck, a new panic could
	happen while it is checking the disks.  Again, the safest way
	is not to have many local filesystems by using another
	computer as an NFS server.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="prelim-starting">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Starting the Project</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">For the purpose of creating a new GEOM class, an empty
	subdirectory has to be created under an arbitrary
	user-accessible directory.  You do not have to create the
	module directory under <filename xmlns:xlink="http://www.w3.org/1999/xlink">/usr/src</filename>.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="prelim-makefile">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">The Makefile</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">It is good practice to create
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">Makefile</filename>s for every nontrivial coding
	project, which of course includes kernel modules.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Creating the <filename xmlns:xlink="http://www.w3.org/1999/xlink">Makefile</filename> is simple
	thanks to an extensive set of helper routines provided by the
	system.  In short, here is how a minimal
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">Makefile</filename> looks for a kernel
	module:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">SRCS=g_journal.c
KMOD=geom_journal

.include &lt;bsd.kmod.mk&gt;</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">This <filename xmlns:xlink="http://www.w3.org/1999/xlink">Makefile</filename> (with changed
	filenames) will do for any kernel module, and a GEOM class can
	reside in just one kernel module.  If more than one file is
	required, list it in the <envar xmlns:xlink="http://www.w3.org/1999/xlink">SRCS</envar> variable,
	separated with whitespace from other filenames.</para>
    </sect2>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="kernelprog">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">On FreeBSD Kernel Programming</title>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="kernelprog-memalloc">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Memory Allocation</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">See <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">malloc</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry>.  Basic memory allocation is only
	slightly different than its userland equivalent.  Most
	notably, <function xmlns:xlink="http://www.w3.org/1999/xlink">malloc</function>() and
	<function xmlns:xlink="http://www.w3.org/1999/xlink">free</function>() accept additional parameters as is
	described in the man page.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">A <quote xmlns:xlink="http://www.w3.org/1999/xlink">malloc type</quote> must be declared in the
	declaration section of a source file, like this:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">  static MALLOC_DEFINE(M_GJOURNAL, "gjournal data", "GEOM_JOURNAL Data");</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">To use this macro, <filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/param.h</filename>,
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/kernel.h</filename> and
	<filename xmlns:xlink="http://www.w3.org/1999/xlink">sys/malloc.h</filename> headers must be
	included.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">There is another mechanism for allocating memory, the UMA
	(Universal Memory Allocator).  See <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">uma</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry> for details,
	but it is a special type of allocator mainly used for speedy
	allocation of lists comprised of same-sized items (for
	example, dynamic arrays of structs).</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="kernelprog-lists">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Lists and Queues</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">See <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">queue</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry>.  There are a LOT of cases when a list
	of things needs to be maintained.  Fortunately, this data
	structure is implemented (in several ways) by C macros
	included in the system.  The most used list type is TAILQ
	because it is the most flexible.  It is also the one with
	largest memory requirements (its elements are doubly-linked)
	and also the slowest (although the speed variation is on the
	order of several CPU instructions more, so it should not be
	taken seriously).</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">If data retrieval speed is very important, see
	<citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">tree</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry> and <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">hashinit</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry>.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="kernelprog-bios">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">BIOs</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Structure <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">bio</varname> is
	used for any and all Input/Output operations concerning GEOM.
	It basically contains information about what device
	('provider') should satisfy the request, request type, offset,
	length, pointer to a buffer, and a bunch of
	<quote xmlns:xlink="http://www.w3.org/1999/xlink">user-specific</quote> flags and fields that can help
	implement various hacks.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The important thing here is that <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">bio</varname>s are handled
	asynchronously.  That means that, in most parts of the code,
	there is no analogue to userland's <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">read</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> and
	<citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">write</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">2</manvolnum></citerefentry> calls that do not return until a request is
	done.  Rather, a developer-supplied function is called as a
	notification when the request gets completed (or results in
	error).</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The asynchronous programming model (also called
	<quote xmlns:xlink="http://www.w3.org/1999/xlink">event-driven</quote>) is somewhat harder than the much
	more used imperative one used in userland (at least it takes a
	while to get used to it).  In some cases the helper routines
	<function xmlns:xlink="http://www.w3.org/1999/xlink">g_write_data</function>() and
	<function xmlns:xlink="http://www.w3.org/1999/xlink">g_read_data</function>() can be used, but
	<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">not always</emphasis>.  In particular, they cannot
	be used when a mutex is held; for example, the GEOM topology
	mutex or the internal mutex held during the
	<function xmlns:xlink="http://www.w3.org/1999/xlink">.start</function>() and <function xmlns:xlink="http://www.w3.org/1999/xlink">.stop</function>()
	functions.</para>
    </sect2>
  </sect1>

  <sect1 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="geom">
    <title xmlns:xlink="http://www.w3.org/1999/xlink">On GEOM Programming</title>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="geom-ggate">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Ggate</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">If maximum performance is not needed, a much simpler way
	of making a data transformation is to implement it in userland
	via the ggate (GEOM gate) facility.  Unfortunately, there is
	no easy way to convert between, or even share code between the
	two approaches.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="geom-class">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">GEOM Class</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">GEOM classes are transformations on the data.  These
	transformations can be combined in a tree-like fashion.
	Instances of GEOM classes are called
	<emphasis xmlns:xlink="http://www.w3.org/1999/xlink">geoms</emphasis>.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Each GEOM class has several <quote xmlns:xlink="http://www.w3.org/1999/xlink">class methods</quote>
	that get called when there is no geom instance available (or
	they are simply not bound to a single instance):</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">.init</function> is called when GEOM becomes
	    aware of a GEOM class (when the kernel module gets
	    loaded.)</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">.fini</function> gets called when GEOM
	    abandons the class (when the module gets
	    unloaded)</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">.taste</function> is called next, once for
	    each provider the system has available.  If applicable,
	    this function will usually create and start a geom
	    instance.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">.destroy_geom</function> is called when the
	    geom should be disbanded</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">.ctlconf</function> is called when user
	    requests reconfiguration of existing
	    geom</para>
	</listitem>
      </itemizedlist>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Also defined are the GEOM event functions, which will get
	copied to the geom instance.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Field <function xmlns:xlink="http://www.w3.org/1999/xlink">.geom</function> in the <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">g_class</varname> structure is a LIST of
	geoms instantiated from the class.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">These functions are called from the g_event kernel
	thread.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="geom-softc">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Softc</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The name <quote xmlns:xlink="http://www.w3.org/1999/xlink">softc</quote> is a legacy term for
	<quote xmlns:xlink="http://www.w3.org/1999/xlink">driver private data</quote>.  The name most probably
	comes from the archaic term <quote xmlns:xlink="http://www.w3.org/1999/xlink">software control
	  block</quote>.  In GEOM, it is a structure (more precise:
	pointer to a structure) that can be attached to a geom
	instance to hold whatever data is private to the geom
	instance.  Most GEOM classes have the following
	members:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><varname xmlns:xlink="http://www.w3.org/1999/xlink">struct g_provider *provider</varname> : The
	    <quote xmlns:xlink="http://www.w3.org/1999/xlink">provider</quote> this geom
	    instantiates</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><varname xmlns:xlink="http://www.w3.org/1999/xlink">uint16_t n_disks</varname> : Number of
	    consumer this geom consumes</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><varname xmlns:xlink="http://www.w3.org/1999/xlink">struct g_consumer **disks</varname> : Array
	    of <varname xmlns:xlink="http://www.w3.org/1999/xlink">struct g_consumer*</varname>.  (It is not
	    possible to use just single indirection because struct
	    g_consumer* are created on our behalf by
	    GEOM).</para>
	</listitem>
      </itemizedlist>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">softc</varname> structure
	contains all the state of geom instance.  Every geom instance
	has its own softc.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="geom-metadata">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Metadata</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Format of metadata is more-or-less class-dependent, but
	MUST start with:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">16 byte buffer for null-terminated signature (usually
	    the class name)</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">uint32 version ID</para>
	</listitem>
      </itemizedlist>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">It is assumed that geom classes know how to handle
	metadata with version ID's lower than theirs.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Metadata is located in the last sector of the provider
	(and thus must fit in it).</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">(All this is implementation-dependent but all existing
	code works like that, and it is supported by
	libraries.)</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="geom-creating">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Labeling/creating a GEOM</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The sequence of events is:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">user calls <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">geom</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> utility (or one of its
	    hardlinked friends)</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">the utility figures out which geom class it is
	    supposed to handle and searches for
	    <filename xmlns:xlink="http://www.w3.org/1999/xlink">geom_<replaceable xmlns:xlink="http://www.w3.org/1999/xlink">CLASSNAME</replaceable>.so</filename>
	    library (usually in
	    <filename xmlns:xlink="http://www.w3.org/1999/xlink">/lib/geom</filename>).</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">it <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">dlopen</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">3</manvolnum></citerefentry>-s the library, extracts the
	    definitions of command-line parameters and helper
	    functions.</para>
	</listitem>
      </itemizedlist>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">In the case of creating/labeling a new geom, this is what
	happens:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">geom</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">8</manvolnum></citerefentry> looks in the command-line argument for
	    the command (usually <option xmlns:xlink="http://www.w3.org/1999/xlink">label</option>), and calls a
	    helper function.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">The helper function checks parameters and gathers
	    metadata, which it proceeds to write to all concerned
	    providers.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">This <quote xmlns:xlink="http://www.w3.org/1999/xlink">spoils</quote> existing geoms (if any) and
	    initializes a new round of <quote xmlns:xlink="http://www.w3.org/1999/xlink">tasting</quote> of the
	    providers.  The intended geom class recognizes the
	    metadata and brings the geom up.</para>
	</listitem>
      </itemizedlist>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">(The above sequence of events is implementation-dependent
	but all existing code works like that, and it is supported by
	libraries.)</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="geom-command">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">GEOM Command Structure</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The helper <filename xmlns:xlink="http://www.w3.org/1999/xlink">geom_CLASSNAME.so</filename> library
	exports <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">class_commands</varname>
	structure, which is an array of <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">struct g_command</varname> elements.
	Commands are of uniform format and look like:</para>

      <programlisting xmlns:xlink="http://www.w3.org/1999/xlink">  verb [-options] geomname [other]</programlisting>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Common verbs are:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">label &#8212; to write metadata to devices so they can
	    be recognized at tasting and brought up in
	    geoms</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">destroy &#8212; to destroy metadata, so the geoms get
	    destroyed</para>
	</listitem>
      </itemizedlist>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Common options are:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">-v</literal> : be verbose</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">-f</literal> : force</para>
	</listitem>
      </itemizedlist>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Many actions, such as labeling and destroying metadata can
	be performed in userland.  For this, <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">struct g_command</varname> provides field
	<varname xmlns:xlink="http://www.w3.org/1999/xlink">gc_func</varname> that can be set to a function (in
	the same <filename xmlns:xlink="http://www.w3.org/1999/xlink">.so</filename>) that will be called to
	process a verb.  If <varname xmlns:xlink="http://www.w3.org/1999/xlink">gc_func</varname> is NULL, the
	command will be passed to kernel module, to
	<function xmlns:xlink="http://www.w3.org/1999/xlink">.ctlreq</function> function of the geom
	class.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="geom-geoms">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Geoms</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Geoms are instances of GEOM classes.  They have internal
	data (a softc structure) and some functions with which they
	respond to external events.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The event functions are:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">.access</function> : calculates permissions
	    (read/write/exclusive)</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">.dumpconf</function> : returns XML-formatted
	    information about the geom</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">.orphan</function> : called when some
	    underlying provider gets disconnected</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">.spoiled</function> : called when some
	    underlying provider gets written to</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><function xmlns:xlink="http://www.w3.org/1999/xlink">.start</function> : handles I/O</para>
	</listitem>
      </itemizedlist>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">These functions are called from the
	<function xmlns:xlink="http://www.w3.org/1999/xlink">g_down</function> kernel thread and there can be no
	sleeping in this context, (see definition of sleeping
	elsewhere) which limits what can be done quite a bit, but
	forces the handling to be fast.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Of these, the most important function for doing actual
	useful work is the <function xmlns:xlink="http://www.w3.org/1999/xlink">.start</function>() function,
	which is called when a BIO request arrives for a provider
	managed by a instance of geom class.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="geom-threads">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">GEOM Threads</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">There are three kernel threads created and run by the GEOM
	framework:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">g_down</literal> : Handles requests coming
	    from high-level entities (such as a userland request) on
	    the way to physical devices</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">g_up</literal> : Handles responses from
	    device drivers to requests made by higher-level
	    entities</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink"><literal xmlns:xlink="http://www.w3.org/1999/xlink">g_event</literal> : Handles all other cases:
	    creation of geom instances, access counting,
	    <quote xmlns:xlink="http://www.w3.org/1999/xlink">spoil</quote> events, etc.</para>
	</listitem>
      </itemizedlist>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">When a user process issues <quote xmlns:xlink="http://www.w3.org/1999/xlink">read data X at offset Y
	  of a file</quote> request, this is what happens:</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">The filesystem converts the request into a struct bio
	    instance and passes it to the GEOM subsystem.  It knows
	    what geom instance should handle it because filesystems
	    are hosted directly on a geom instance.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">The request ends up as a call to the
	    <function xmlns:xlink="http://www.w3.org/1999/xlink">.start</function>() function made on the g_down
	    thread and reaches the top-level geom
	    instance.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">This top-level geom instance (for example the
	    partition slicer) determines that the request should be
	    routed to a lower-level instance (for example the disk
	    driver).  It makes a copy of the bio request (bio requests
	    <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">ALWAYS</emphasis> need to be copied between
	    instances, with <function xmlns:xlink="http://www.w3.org/1999/xlink">g_clone_bio</function>()!),
	    modifies the data offset and target provider fields and
	    executes the copy with
	    <function xmlns:xlink="http://www.w3.org/1999/xlink">g_io_request</function>()</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">The disk driver gets the bio request also as a call to
	    <function xmlns:xlink="http://www.w3.org/1999/xlink">.start</function>() on the
	    <literal xmlns:xlink="http://www.w3.org/1999/xlink">g_down</literal> thread.  It talks to hardware,
	    gets the data back, and calls
	    <function xmlns:xlink="http://www.w3.org/1999/xlink">g_io_deliver</function>() on the
	    bio.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Now, the notification of bio completion <quote xmlns:xlink="http://www.w3.org/1999/xlink">bubbles
	      up</quote> in the <literal xmlns:xlink="http://www.w3.org/1999/xlink">g_up</literal> thread.  First
	    the partition slicer gets <function xmlns:xlink="http://www.w3.org/1999/xlink">.done</function>()
	    called in the <literal xmlns:xlink="http://www.w3.org/1999/xlink">g_up</literal> thread, it uses
	    information stored in the bio to free the cloned <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">bio</varname> structure (with
	    <function xmlns:xlink="http://www.w3.org/1999/xlink">g_destroy_bio</function>()) and calls
	    <function xmlns:xlink="http://www.w3.org/1999/xlink">g_io_deliver</function>() on the original
	    request.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">The filesystem gets the data and transfers it to
	    userland.</para>
	</listitem>
      </itemizedlist>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">See <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">g_bio</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry> man page for information how the data is
	passed back and forth in the <varname xmlns:xlink="http://www.w3.org/1999/xlink" remap="structname">bio</varname> structure (note in
	particular the <varname xmlns:xlink="http://www.w3.org/1999/xlink">bio_parent</varname> and
	<varname xmlns:xlink="http://www.w3.org/1999/xlink">bio_children</varname> fields and how they are
	handled).</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">One important feature is: <emphasis xmlns:xlink="http://www.w3.org/1999/xlink">THERE CAN BE NO
	  SLEEPING IN G_UP AND G_DOWN THREADS</emphasis>.  This means
	that none of the following things can be done in those threads
	(the list is of course not complete, but only
	informative):</para>

      <itemizedlist xmlns:xlink="http://www.w3.org/1999/xlink">
	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Calls to <function xmlns:xlink="http://www.w3.org/1999/xlink">msleep</function>() and
	    <function xmlns:xlink="http://www.w3.org/1999/xlink">tsleep</function>(),
	    obviously.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Calls to <function xmlns:xlink="http://www.w3.org/1999/xlink">g_write_data</function>() and
	    <function xmlns:xlink="http://www.w3.org/1999/xlink">g_read_data</function>(), because these sleep
	    between passing the data to consumers and
	    returning.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Waiting for I/O.</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">Calls to <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">malloc</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry> and
	    <function xmlns:xlink="http://www.w3.org/1999/xlink">uma_zalloc</function>() with
	    <varname xmlns:xlink="http://www.w3.org/1999/xlink">M_WAITOK</varname> flag set</para>
	</listitem>

	<listitem xmlns:xlink="http://www.w3.org/1999/xlink">
	  <para xmlns:xlink="http://www.w3.org/1999/xlink">sx and other sleepable locks</para>
	</listitem>
      </itemizedlist>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">This restriction is here to stop GEOM code clogging the
	I/O request path, since sleeping is usually not time-bound and
	there can be no guarantees on how long will it take (there are
	some other, more technical reasons also).  It also means that
	there is not much that can be done in those threads; for
	example, almost any complex thing requires memory allocation.
	Fortunately, there is a way out: creating additional kernel
	threads.</para>
    </sect2>

    <sect2 xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="geom-kernelthreads">
      <title xmlns:xlink="http://www.w3.org/1999/xlink">Kernel Threads for Use in GEOM Code</title>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Kernel threads are created with <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">kthread_create</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry>
	function, and they are sort of similar to userland threads in
	behaviour, only they cannot return to caller to signify
	termination, but must call <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">kthread_exit</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry>.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">In GEOM code, the usual use of threads is to offload
	processing of requests from <literal xmlns:xlink="http://www.w3.org/1999/xlink">g_down</literal> thread
	(the <function xmlns:xlink="http://www.w3.org/1999/xlink">.start</function>() function).  These threads
	look like <quote xmlns:xlink="http://www.w3.org/1999/xlink">event handlers</quote>: they have a linked
	list of event associated with them (on which events can be
	posted by various functions in various threads so it must be
	protected by a mutex), take the events from the list one by
	one and process them in a big <literal xmlns:xlink="http://www.w3.org/1999/xlink">switch</literal>()
	statement.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The main benefit of using a thread to handle I/O requests
	is that it can sleep when needed.  Now, this sounds good, but
	should be carefully thought out.  Sleeping is well and very
	convenient but can very effectively destroy performance of the
	geom transformation.  Extremely performance-sensitive classes
	probably should do all the work in
	<function xmlns:xlink="http://www.w3.org/1999/xlink">.start</function>() function call, taking great care
	to handle out-of-memory and similar errors.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">The other benefit of having a event-handler thread like
	that is to serialize all the requests and responses coming
	from different geom threads into one thread.  This is also
	very convenient but can be slow.  In most cases, handling of
	<function xmlns:xlink="http://www.w3.org/1999/xlink">.done</function>() requests can be left to the
	<literal xmlns:xlink="http://www.w3.org/1999/xlink">g_up</literal> thread.</para>

      <para xmlns:xlink="http://www.w3.org/1999/xlink">Mutexes in FreeBSD kernel (see <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">mutex</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry>) have one
	distinction from their more common userland cousins &#8212;
	the code cannot sleep while holding a mutex).  If the code
	needs to sleep a lot, <citerefentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><refentrytitle xmlns:xlink="http://www.w3.org/1999/xlink">sx</refentrytitle><manvolnum xmlns:xlink="http://www.w3.org/1999/xlink">9</manvolnum></citerefentry> locks may be more
	appropriate.  On the other hand, if you do almost everything
	in a single thread, you may get away with no mutexes at
	all.</para>
    </sect2>
  </sect1>
</article>
